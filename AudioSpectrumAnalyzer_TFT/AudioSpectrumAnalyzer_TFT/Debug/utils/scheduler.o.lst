   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"scheduler.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	g_ulSchedulerTickCount:
  21 0000 00000000 		.space	4
  22              		.section	.text.SchedulerSysTickIntHandler,"ax",%progbits
  23              		.align	2
  24              		.global	SchedulerSysTickIntHandler
  25              		.thumb
  26              		.thumb_func
  28              	SchedulerSysTickIntHandler:
  29              	.LFB0:
  30              		.file 1 "C:/StellarisWare/utils/scheduler.c"
   1:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
   2:C:/StellarisWare/utils\scheduler.c **** //
   3:C:/StellarisWare/utils\scheduler.c **** // scheduler.c - A simple task scheduler
   4:C:/StellarisWare/utils\scheduler.c **** //
   5:C:/StellarisWare/utils\scheduler.c **** // Copyright (c) 2010-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/utils\scheduler.c **** // Software License Agreement
   7:C:/StellarisWare/utils\scheduler.c **** // 
   8:C:/StellarisWare/utils\scheduler.c **** // Texas Instruments (TI) is supplying this software for use solely and
   9:C:/StellarisWare/utils\scheduler.c **** // exclusively on TI's microcontroller products. The software is owned by
  10:C:/StellarisWare/utils\scheduler.c **** // TI and/or its suppliers, and is protected under applicable copyright
  11:C:/StellarisWare/utils\scheduler.c **** // laws. You may not combine this software with "viral" open-source
  12:C:/StellarisWare/utils\scheduler.c **** // software in order to form a larger program.
  13:C:/StellarisWare/utils\scheduler.c **** // 
  14:C:/StellarisWare/utils\scheduler.c **** // THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
  15:C:/StellarisWare/utils\scheduler.c **** // NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
  16:C:/StellarisWare/utils\scheduler.c **** // NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  17:C:/StellarisWare/utils\scheduler.c **** // A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
  18:C:/StellarisWare/utils\scheduler.c **** // CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
  19:C:/StellarisWare/utils\scheduler.c **** // DAMAGES, FOR ANY REASON WHATSOEVER.
  20:C:/StellarisWare/utils\scheduler.c **** // 
  21:C:/StellarisWare/utils\scheduler.c **** // This is part of revision 9107 of the Stellaris Firmware Development Package.
  22:C:/StellarisWare/utils\scheduler.c **** //
  23:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  24:C:/StellarisWare/utils\scheduler.c **** #include "inc/hw_types.h"
  25:C:/StellarisWare/utils\scheduler.c **** #include "inc/hw_ints.h"
  26:C:/StellarisWare/utils\scheduler.c **** #include "driverlib/systick.h"
  27:C:/StellarisWare/utils\scheduler.c **** #include "driverlib/sysctl.h"
  28:C:/StellarisWare/utils\scheduler.c **** #include "driverlib/interrupt.h"
  29:C:/StellarisWare/utils\scheduler.c **** #include "driverlib/debug.h"
  30:C:/StellarisWare/utils\scheduler.c **** #include "utils/scheduler.h"
  31:C:/StellarisWare/utils\scheduler.c **** 
  32:C:/StellarisWare/utils\scheduler.c **** //*****************************************************************************
  33:C:/StellarisWare/utils\scheduler.c **** //
  34:C:/StellarisWare/utils\scheduler.c **** //! \addtogroup scheduler_api
  35:C:/StellarisWare/utils\scheduler.c **** //! @{
  36:C:/StellarisWare/utils\scheduler.c **** //
  37:C:/StellarisWare/utils\scheduler.c **** //*****************************************************************************
  38:C:/StellarisWare/utils\scheduler.c **** 
  39:C:/StellarisWare/utils\scheduler.c **** static volatile unsigned long g_ulSchedulerTickCount;
  40:C:/StellarisWare/utils\scheduler.c **** 
  41:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  42:C:/StellarisWare/utils\scheduler.c **** //
  43:C:/StellarisWare/utils\scheduler.c **** //! Handles the SysTick interrupt on behalf of the scheduler module.
  44:C:/StellarisWare/utils\scheduler.c **** //!
  45:C:/StellarisWare/utils\scheduler.c **** //! Applications using the scheduler module must ensure that this function is
  46:C:/StellarisWare/utils\scheduler.c **** //! hooked to the SysTick interrupt vector.
  47:C:/StellarisWare/utils\scheduler.c **** //!
  48:C:/StellarisWare/utils\scheduler.c **** //! \return None.
  49:C:/StellarisWare/utils\scheduler.c **** //
  50:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  51:C:/StellarisWare/utils\scheduler.c **** void
  52:C:/StellarisWare/utils\scheduler.c **** SchedulerSysTickIntHandler(void)
  53:C:/StellarisWare/utils\scheduler.c **** {
  31              		.loc 1 53 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36 0000 80B4     		push	{r7}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 4
  39              		.cfi_offset 7, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  54:C:/StellarisWare/utils\scheduler.c ****     g_ulSchedulerTickCount++;
  43              		.loc 1 54 0
  44 0004 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
  45 0008 C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
  46 000c 1B68     		ldr	r3, [r3, #0]
  47 000e 03F10102 		add	r2, r3, #1
  48 0012 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
  49 0016 C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
  50 001a 1A60     		str	r2, [r3, #0]
  55:C:/StellarisWare/utils\scheduler.c **** }
  51              		.loc 1 55 0
  52 001c BD46     		mov	sp, r7
  53 001e 80BC     		pop	{r7}
  54 0020 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE0:
  58 0022 00BF     		.section	.text.SchedulerInit,"ax",%progbits
  59              		.align	2
  60              		.global	SchedulerInit
  61              		.thumb
  62              		.thumb_func
  64              	SchedulerInit:
  65              	.LFB1:
  56:C:/StellarisWare/utils\scheduler.c **** 
  57:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  58:C:/StellarisWare/utils\scheduler.c **** //
  59:C:/StellarisWare/utils\scheduler.c **** //! Initializes the task scheduler.
  60:C:/StellarisWare/utils\scheduler.c **** //!
  61:C:/StellarisWare/utils\scheduler.c **** //! \param ulTicksPerSecond sets the basic frequency of the SysTick interrupt
  62:C:/StellarisWare/utils\scheduler.c **** //!   used by the scheduler to determine when to run the various task functions.
  63:C:/StellarisWare/utils\scheduler.c **** //!
  64:C:/StellarisWare/utils\scheduler.c **** //! This function must be called during application startup to configure the
  65:C:/StellarisWare/utils\scheduler.c **** //! SysTick timer.  This is used by the scheduler module to determine when each
  66:C:/StellarisWare/utils\scheduler.c **** //! of the functions provided in the g_psSchedulerTable array is called.
  67:C:/StellarisWare/utils\scheduler.c **** //!
  68:C:/StellarisWare/utils\scheduler.c **** //! The caller is responsible for ensuring that SchedulerSysTickIntHandler()
  69:C:/StellarisWare/utils\scheduler.c **** //! has previously been installed in the SYSTICK vector in the vector table
  70:C:/StellarisWare/utils\scheduler.c **** //! and must also ensure that interrupts are enabled at the CPU level.
  71:C:/StellarisWare/utils\scheduler.c **** //!
  72:C:/StellarisWare/utils\scheduler.c **** //! Note that this call does not start the scheduler calling the configured
  73:C:/StellarisWare/utils\scheduler.c **** //! functions.  All function calls are made in the context of later calls to
  74:C:/StellarisWare/utils\scheduler.c **** //! SchedulerRun().  This call merely configures the SysTick interrupt that is
  75:C:/StellarisWare/utils\scheduler.c **** //! used by the scheduler to determine what the current system time is.
  76:C:/StellarisWare/utils\scheduler.c **** //!
  77:C:/StellarisWare/utils\scheduler.c **** //! \return None.
  78:C:/StellarisWare/utils\scheduler.c **** //
  79:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  80:C:/StellarisWare/utils\scheduler.c **** void
  81:C:/StellarisWare/utils\scheduler.c **** SchedulerInit(unsigned long ulTicksPerSecond)
  82:C:/StellarisWare/utils\scheduler.c **** {
  66              		.loc 1 82 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 80B5     		push	{r7, lr}
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 14, -4
  74              		.cfi_offset 7, -8
  75 0002 82B0     		sub	sp, sp, #8
  76              	.LCFI3:
  77              		.cfi_def_cfa_offset 16
  78 0004 00AF     		add	r7, sp, #0
  79              	.LCFI4:
  80              		.cfi_def_cfa_register 7
  81 0006 7860     		str	r0, [r7, #4]
  83:C:/StellarisWare/utils\scheduler.c ****     ASSERT(ulTicksPerSecond);
  84:C:/StellarisWare/utils\scheduler.c **** 
  85:C:/StellarisWare/utils\scheduler.c ****     //
  86:C:/StellarisWare/utils\scheduler.c ****     // Configure SysTick for a periodic interrupt.
  87:C:/StellarisWare/utils\scheduler.c ****     //
  88:C:/StellarisWare/utils\scheduler.c ****     SysTickPeriodSet(SysCtlClockGet() / ulTicksPerSecond);
  82              		.loc 1 88 0
  83 0008 FFF7FEFF 		bl	SysCtlClockGet
  84 000c 0246     		mov	r2, r0
  85 000e 7B68     		ldr	r3, [r7, #4]
  86 0010 B2FBF3F3 		udiv	r3, r2, r3
  87 0014 1846     		mov	r0, r3
  88 0016 FFF7FEFF 		bl	SysTickPeriodSet
  89:C:/StellarisWare/utils\scheduler.c ****     SysTickEnable();
  89              		.loc 1 89 0
  90 001a FFF7FEFF 		bl	SysTickEnable
  90:C:/StellarisWare/utils\scheduler.c ****     SysTickIntEnable();
  91              		.loc 1 90 0
  92 001e FFF7FEFF 		bl	SysTickIntEnable
  91:C:/StellarisWare/utils\scheduler.c **** }
  93              		.loc 1 91 0
  94 0022 07F10807 		add	r7, r7, #8
  95 0026 BD46     		mov	sp, r7
  96 0028 80BD     		pop	{r7, pc}
  97              		.cfi_endproc
  98              	.LFE1:
 100 002a 00BF     		.section	.text.SchedulerRun,"ax",%progbits
 101              		.align	2
 102              		.global	SchedulerRun
 103              		.thumb
 104              		.thumb_func
 106              	SchedulerRun:
 107              	.LFB2:
  92:C:/StellarisWare/utils\scheduler.c **** 
  93:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
  94:C:/StellarisWare/utils\scheduler.c **** //
  95:C:/StellarisWare/utils\scheduler.c **** //! Instructs the scheduler to update its task table and make calls to
  96:C:/StellarisWare/utils\scheduler.c **** //! functions needing called.
  97:C:/StellarisWare/utils\scheduler.c **** //!
  98:C:/StellarisWare/utils\scheduler.c **** //! This function must be called periodically by the client to allow the
  99:C:/StellarisWare/utils\scheduler.c **** //! scheduler to make calls to any configured task functions if it is their
 100:C:/StellarisWare/utils\scheduler.c **** //! time to be called.  The call must be made at least as frequently as the
 101:C:/StellarisWare/utils\scheduler.c **** //! most frequent task configured in the g_psSchedulerTable array.
 102:C:/StellarisWare/utils\scheduler.c **** //!
 103:C:/StellarisWare/utils\scheduler.c **** //! Although the scheduler makes use of the SysTick interrupt, all calls to
 104:C:/StellarisWare/utils\scheduler.c **** //! functions configured in \e g_psSchedulerTable are made in the context of
 105:C:/StellarisWare/utils\scheduler.c **** //! SchedulerRun().
 106:C:/StellarisWare/utils\scheduler.c **** //!
 107:C:/StellarisWare/utils\scheduler.c **** //! \return None.
 108:C:/StellarisWare/utils\scheduler.c **** //
 109:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 110:C:/StellarisWare/utils\scheduler.c **** void
 111:C:/StellarisWare/utils\scheduler.c **** SchedulerRun(void)
 112:C:/StellarisWare/utils\scheduler.c **** {
 108              		.loc 1 112 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 8
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI5:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 14, -4
 116              		.cfi_offset 7, -8
 117 0002 82B0     		sub	sp, sp, #8
 118              	.LCFI6:
 119              		.cfi_def_cfa_offset 16
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI7:
 122              		.cfi_def_cfa_register 7
 113:C:/StellarisWare/utils\scheduler.c ****     unsigned long ulLoop;
 114:C:/StellarisWare/utils\scheduler.c ****     tSchedulerTask *psTask;
 115:C:/StellarisWare/utils\scheduler.c **** 
 116:C:/StellarisWare/utils\scheduler.c ****     //
 117:C:/StellarisWare/utils\scheduler.c ****     // Loop through each task in the task table.
 118:C:/StellarisWare/utils\scheduler.c ****     //
 119:C:/StellarisWare/utils\scheduler.c ****     for(ulLoop = 0; ulLoop < g_ulSchedulerNumTasks; ulLoop++)
 123              		.loc 1 119 0
 124 0006 4FF00003 		mov	r3, #0
 125 000a 7B60     		str	r3, [r7, #4]
 126 000c 2CE0     		b	.L4
 127              	.L6:
 120:C:/StellarisWare/utils\scheduler.c ****     {
 121:C:/StellarisWare/utils\scheduler.c ****         //
 122:C:/StellarisWare/utils\scheduler.c ****         // Get a pointer to the task information.
 123:C:/StellarisWare/utils\scheduler.c ****         //
 124:C:/StellarisWare/utils\scheduler.c ****         psTask = &g_psSchedulerTable[ulLoop];
 128              		.loc 1 124 0
 129 000e 7A68     		ldr	r2, [r7, #4]
 130 0010 1346     		mov	r3, r2
 131 0012 4FEA8303 		lsl	r3, r3, #2
 132 0016 9B18     		adds	r3, r3, r2
 133 0018 4FEA8303 		lsl	r3, r3, #2
 134 001c 1A46     		mov	r2, r3
 135 001e 40F20003 		movw	r3, #:lower16:g_psSchedulerTable
 136 0022 C0F20003 		movt	r3, #:upper16:g_psSchedulerTable
 137 0026 D318     		adds	r3, r2, r3
 138 0028 3B60     		str	r3, [r7, #0]
 125:C:/StellarisWare/utils\scheduler.c **** 
 126:C:/StellarisWare/utils\scheduler.c ****         //
 127:C:/StellarisWare/utils\scheduler.c ****         // Is this task active and, if so, is it time to call it's function?
 128:C:/StellarisWare/utils\scheduler.c ****         //
 129:C:/StellarisWare/utils\scheduler.c ****         if(psTask->bActive && (SchedulerElapsedTicksGet(psTask->ulLastCall) >=
 139              		.loc 1 129 0
 140 002a 3B68     		ldr	r3, [r7, #0]
 141 002c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 142 002e 002B     		cmp	r3, #0
 143 0030 16D0     		beq	.L5
 144              		.loc 1 129 0 is_stmt 0 discriminator 1
 145 0032 3B68     		ldr	r3, [r7, #0]
 146 0034 DB68     		ldr	r3, [r3, #12]
 147 0036 1846     		mov	r0, r3
 148 0038 FFF7FEFF 		bl	SchedulerElapsedTicksGet
 149 003c 0246     		mov	r2, r0
 130:C:/StellarisWare/utils\scheduler.c ****            psTask->ulFrequencyTicks))
 150              		.loc 1 130 0 is_stmt 1 discriminator 1
 151 003e 3B68     		ldr	r3, [r7, #0]
 152 0040 9B68     		ldr	r3, [r3, #8]
 129:C:/StellarisWare/utils\scheduler.c ****         if(psTask->bActive && (SchedulerElapsedTicksGet(psTask->ulLastCall) >=
 153              		.loc 1 129 0 discriminator 1
 154 0042 9A42     		cmp	r2, r3
 155 0044 0CD3     		bcc	.L5
 131:C:/StellarisWare/utils\scheduler.c ****         {
 132:C:/StellarisWare/utils\scheduler.c ****             //
 133:C:/StellarisWare/utils\scheduler.c ****             // Remember the timestamp at which we make the function call.
 134:C:/StellarisWare/utils\scheduler.c ****             //
 135:C:/StellarisWare/utils\scheduler.c ****             psTask->ulLastCall = g_ulSchedulerTickCount;
 156              		.loc 1 135 0
 157 0046 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
 158 004a C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
 159 004e 1A68     		ldr	r2, [r3, #0]
 160 0050 3B68     		ldr	r3, [r7, #0]
 161 0052 DA60     		str	r2, [r3, #12]
 136:C:/StellarisWare/utils\scheduler.c **** 
 137:C:/StellarisWare/utils\scheduler.c ****             //
 138:C:/StellarisWare/utils\scheduler.c ****             // Call the task function, passing the provided parameter.
 139:C:/StellarisWare/utils\scheduler.c ****             //
 140:C:/StellarisWare/utils\scheduler.c ****             psTask->pfnFunction(psTask->pvParam);
 162              		.loc 1 140 0
 163 0054 3B68     		ldr	r3, [r7, #0]
 164 0056 1B68     		ldr	r3, [r3, #0]
 165 0058 3A68     		ldr	r2, [r7, #0]
 166 005a 5268     		ldr	r2, [r2, #4]
 167 005c 1046     		mov	r0, r2
 168 005e 9847     		blx	r3
 169              	.L5:
 119:C:/StellarisWare/utils\scheduler.c ****     for(ulLoop = 0; ulLoop < g_ulSchedulerNumTasks; ulLoop++)
 170              		.loc 1 119 0
 171 0060 7B68     		ldr	r3, [r7, #4]
 172 0062 03F10103 		add	r3, r3, #1
 173 0066 7B60     		str	r3, [r7, #4]
 174              	.L4:
 119:C:/StellarisWare/utils\scheduler.c ****     for(ulLoop = 0; ulLoop < g_ulSchedulerNumTasks; ulLoop++)
 175              		.loc 1 119 0 is_stmt 0 discriminator 1
 176 0068 40F20003 		movw	r3, #:lower16:g_ulSchedulerNumTasks
 177 006c C0F20003 		movt	r3, #:upper16:g_ulSchedulerNumTasks
 178 0070 1B68     		ldr	r3, [r3, #0]
 179 0072 7A68     		ldr	r2, [r7, #4]
 180 0074 9A42     		cmp	r2, r3
 181 0076 CAD3     		bcc	.L6
 141:C:/StellarisWare/utils\scheduler.c ****         }
 142:C:/StellarisWare/utils\scheduler.c ****     }
 143:C:/StellarisWare/utils\scheduler.c **** }
 182              		.loc 1 143 0 is_stmt 1
 183 0078 07F10807 		add	r7, r7, #8
 184 007c BD46     		mov	sp, r7
 185 007e 80BD     		pop	{r7, pc}
 186              		.cfi_endproc
 187              	.LFE2:
 189              		.section	.text.SchedulerTaskEnable,"ax",%progbits
 190              		.align	2
 191              		.global	SchedulerTaskEnable
 192              		.thumb
 193              		.thumb_func
 195              	SchedulerTaskEnable:
 196              	.LFB3:
 144:C:/StellarisWare/utils\scheduler.c **** 
 145:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 146:C:/StellarisWare/utils\scheduler.c **** //
 147:C:/StellarisWare/utils\scheduler.c **** //! Enables a task and allows the scheduler to call it periodically.
 148:C:/StellarisWare/utils\scheduler.c **** //!
 149:C:/StellarisWare/utils\scheduler.c **** //! \param ulIndex is the index of the task which is to be enabled in the
 150:C:/StellarisWare/utils\scheduler.c **** //!        global \e g_psSchedulerTable array.
 151:C:/StellarisWare/utils\scheduler.c **** //! \param bRunNow is \b true if the task is to be run on the next call to
 152:C:/StellarisWare/utils\scheduler.c **** //!        SchedulerRun() or \b false if one whole period is to elapse before
 153:C:/StellarisWare/utils\scheduler.c **** //!        the task is run.
 154:C:/StellarisWare/utils\scheduler.c **** //!
 155:C:/StellarisWare/utils\scheduler.c **** //! This function marks one of the configured tasks as enabled and causes
 156:C:/StellarisWare/utils\scheduler.c **** //! SchedulerRun() to call that task periodically.  The caller may choose to
 157:C:/StellarisWare/utils\scheduler.c **** //! have the enabled task run for the first time on the next call to
 158:C:/StellarisWare/utils\scheduler.c **** //! SchedulerRun() or to wait one full task period before making the first
 159:C:/StellarisWare/utils\scheduler.c **** //! call.
 160:C:/StellarisWare/utils\scheduler.c **** //!
 161:C:/StellarisWare/utils\scheduler.c **** //! \return None.
 162:C:/StellarisWare/utils\scheduler.c **** //
 163:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 164:C:/StellarisWare/utils\scheduler.c **** void
 165:C:/StellarisWare/utils\scheduler.c **** SchedulerTaskEnable(unsigned long ulIndex, tBoolean bRunNow)
 166:C:/StellarisWare/utils\scheduler.c **** {
 197              		.loc 1 166 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 8
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202 0000 80B4     		push	{r7}
 203              	.LCFI8:
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 7, -4
 206 0002 83B0     		sub	sp, sp, #12
 207              	.LCFI9:
 208              		.cfi_def_cfa_offset 16
 209 0004 00AF     		add	r7, sp, #0
 210              	.LCFI10:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 213 0008 0B46     		mov	r3, r1
 214 000a FB70     		strb	r3, [r7, #3]
 167:C:/StellarisWare/utils\scheduler.c ****     //
 168:C:/StellarisWare/utils\scheduler.c ****     // Is the task index passed valid?
 169:C:/StellarisWare/utils\scheduler.c ****     //
 170:C:/StellarisWare/utils\scheduler.c ****     if(ulIndex < g_ulSchedulerNumTasks)
 215              		.loc 1 170 0
 216 000c 40F20003 		movw	r3, #:lower16:g_ulSchedulerNumTasks
 217 0010 C0F20003 		movt	r3, #:upper16:g_ulSchedulerNumTasks
 218 0014 1B68     		ldr	r3, [r3, #0]
 219 0016 7A68     		ldr	r2, [r7, #4]
 220 0018 9A42     		cmp	r2, r3
 221 001a 4CD2     		bcs	.L7
 171:C:/StellarisWare/utils\scheduler.c ****     {
 172:C:/StellarisWare/utils\scheduler.c ****         //
 173:C:/StellarisWare/utils\scheduler.c ****         // Yes - mark the task as active.
 174:C:/StellarisWare/utils\scheduler.c ****         //
 175:C:/StellarisWare/utils\scheduler.c ****         g_psSchedulerTable[ulIndex].bActive = true;
 222              		.loc 1 175 0
 223 001c 40F20002 		movw	r2, #:lower16:g_psSchedulerTable
 224 0020 C0F20002 		movt	r2, #:upper16:g_psSchedulerTable
 225 0024 7968     		ldr	r1, [r7, #4]
 226 0026 0B46     		mov	r3, r1
 227 0028 4FEA8303 		lsl	r3, r3, #2
 228 002c 5B18     		adds	r3, r3, r1
 229 002e 4FEA8303 		lsl	r3, r3, #2
 230 0032 D318     		adds	r3, r2, r3
 231 0034 03F11003 		add	r3, r3, #16
 232 0038 4FF00102 		mov	r2, #1
 233 003c 1A70     		strb	r2, [r3, #0]
 176:C:/StellarisWare/utils\scheduler.c **** 
 177:C:/StellarisWare/utils\scheduler.c ****         //
 178:C:/StellarisWare/utils\scheduler.c ****         // Set the last call time to ensure that the function is called either
 179:C:/StellarisWare/utils\scheduler.c ****         // next time the scheduler is run or after the desired number of ticks
 180:C:/StellarisWare/utils\scheduler.c ****         // depending upon the value of the bRunNow parameter.
 181:C:/StellarisWare/utils\scheduler.c ****         //
 182:C:/StellarisWare/utils\scheduler.c ****         if(bRunNow)
 234              		.loc 1 182 0
 235 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 236 0040 002B     		cmp	r3, #0
 237 0042 24D0     		beq	.L9
 183:C:/StellarisWare/utils\scheduler.c ****         {
 184:C:/StellarisWare/utils\scheduler.c ****             //
 185:C:/StellarisWare/utils\scheduler.c ****             // Cause the task to run on the next call to SchedulerRun().
 186:C:/StellarisWare/utils\scheduler.c ****             //
 187:C:/StellarisWare/utils\scheduler.c ****             g_psSchedulerTable[ulIndex].ulLastCall = (g_ulSchedulerTickCount -
 238              		.loc 1 187 0
 239 0044 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
 240 0048 C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
 241 004c 1868     		ldr	r0, [r3, #0]
 188:C:/StellarisWare/utils\scheduler.c ****                             g_psSchedulerTable[ulIndex].ulFrequencyTicks);
 242              		.loc 1 188 0
 243 004e 40F20002 		movw	r2, #:lower16:g_psSchedulerTable
 244 0052 C0F20002 		movt	r2, #:upper16:g_psSchedulerTable
 245 0056 7968     		ldr	r1, [r7, #4]
 246 0058 0B46     		mov	r3, r1
 247 005a 4FEA8303 		lsl	r3, r3, #2
 248 005e 5B18     		adds	r3, r3, r1
 249 0060 4FEA8303 		lsl	r3, r3, #2
 250 0064 D318     		adds	r3, r2, r3
 251 0066 03F10803 		add	r3, r3, #8
 252 006a 1B68     		ldr	r3, [r3, #0]
 187:C:/StellarisWare/utils\scheduler.c ****             g_psSchedulerTable[ulIndex].ulLastCall = (g_ulSchedulerTickCount -
 253              		.loc 1 187 0
 254 006c C01A     		subs	r0, r0, r3
 255 006e 40F20002 		movw	r2, #:lower16:g_psSchedulerTable
 256 0072 C0F20002 		movt	r2, #:upper16:g_psSchedulerTable
 257 0076 7968     		ldr	r1, [r7, #4]
 258 0078 0B46     		mov	r3, r1
 259 007a 4FEA8303 		lsl	r3, r3, #2
 260 007e 5B18     		adds	r3, r3, r1
 261 0080 4FEA8303 		lsl	r3, r3, #2
 262 0084 D318     		adds	r3, r2, r3
 263 0086 03F10C03 		add	r3, r3, #12
 264 008a 1860     		str	r0, [r3, #0]
 265 008c 13E0     		b	.L7
 266              	.L9:
 189:C:/StellarisWare/utils\scheduler.c ****         }
 190:C:/StellarisWare/utils\scheduler.c ****         else
 191:C:/StellarisWare/utils\scheduler.c ****         {
 192:C:/StellarisWare/utils\scheduler.c ****             //
 193:C:/StellarisWare/utils\scheduler.c ****             // Cause the task to run after one full time period.
 194:C:/StellarisWare/utils\scheduler.c ****             //
 195:C:/StellarisWare/utils\scheduler.c ****             g_psSchedulerTable[ulIndex].ulLastCall = g_ulSchedulerTickCount;
 267              		.loc 1 195 0
 268 008e 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
 269 0092 C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
 270 0096 1868     		ldr	r0, [r3, #0]
 271 0098 40F20002 		movw	r2, #:lower16:g_psSchedulerTable
 272 009c C0F20002 		movt	r2, #:upper16:g_psSchedulerTable
 273 00a0 7968     		ldr	r1, [r7, #4]
 274 00a2 0B46     		mov	r3, r1
 275 00a4 4FEA8303 		lsl	r3, r3, #2
 276 00a8 5B18     		adds	r3, r3, r1
 277 00aa 4FEA8303 		lsl	r3, r3, #2
 278 00ae D318     		adds	r3, r2, r3
 279 00b0 03F10C03 		add	r3, r3, #12
 280 00b4 1860     		str	r0, [r3, #0]
 281              	.L7:
 196:C:/StellarisWare/utils\scheduler.c ****         }
 197:C:/StellarisWare/utils\scheduler.c ****     }
 198:C:/StellarisWare/utils\scheduler.c **** }
 282              		.loc 1 198 0
 283 00b6 07F10C07 		add	r7, r7, #12
 284 00ba BD46     		mov	sp, r7
 285 00bc 80BC     		pop	{r7}
 286 00be 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE3:
 290              		.section	.text.SchedulerTaskDisable,"ax",%progbits
 291              		.align	2
 292              		.global	SchedulerTaskDisable
 293              		.thumb
 294              		.thumb_func
 296              	SchedulerTaskDisable:
 297              	.LFB4:
 199:C:/StellarisWare/utils\scheduler.c **** 
 200:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 201:C:/StellarisWare/utils\scheduler.c **** //
 202:C:/StellarisWare/utils\scheduler.c **** //! Disables a task and prevents the scheduler from calling it.
 203:C:/StellarisWare/utils\scheduler.c **** //!
 204:C:/StellarisWare/utils\scheduler.c **** //! \param ulIndex is the index of the task which is to be disabled in the
 205:C:/StellarisWare/utils\scheduler.c **** //!        global \e g_psSchedulerTable array.
 206:C:/StellarisWare/utils\scheduler.c **** //!
 207:C:/StellarisWare/utils\scheduler.c **** //! This function marks one of the configured tasks as inactive and prevents
 208:C:/StellarisWare/utils\scheduler.c **** //! SchedulerRun() from calling it.  The task may be reenabled by calling
 209:C:/StellarisWare/utils\scheduler.c **** //! SchedulerTaskEnable().
 210:C:/StellarisWare/utils\scheduler.c **** //!
 211:C:/StellarisWare/utils\scheduler.c **** //! \return None.
 212:C:/StellarisWare/utils\scheduler.c **** //
 213:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 214:C:/StellarisWare/utils\scheduler.c **** void
 215:C:/StellarisWare/utils\scheduler.c **** SchedulerTaskDisable(unsigned long ulIndex)
 216:C:/StellarisWare/utils\scheduler.c **** {
 298              		.loc 1 216 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303 0000 80B4     		push	{r7}
 304              	.LCFI11:
 305              		.cfi_def_cfa_offset 4
 306              		.cfi_offset 7, -4
 307 0002 83B0     		sub	sp, sp, #12
 308              	.LCFI12:
 309              		.cfi_def_cfa_offset 16
 310 0004 00AF     		add	r7, sp, #0
 311              	.LCFI13:
 312              		.cfi_def_cfa_register 7
 313 0006 7860     		str	r0, [r7, #4]
 217:C:/StellarisWare/utils\scheduler.c ****     //
 218:C:/StellarisWare/utils\scheduler.c ****     // Is the task index passed valid?
 219:C:/StellarisWare/utils\scheduler.c ****     //
 220:C:/StellarisWare/utils\scheduler.c ****     if(ulIndex < g_ulSchedulerNumTasks)
 314              		.loc 1 220 0
 315 0008 40F20003 		movw	r3, #:lower16:g_ulSchedulerNumTasks
 316 000c C0F20003 		movt	r3, #:upper16:g_ulSchedulerNumTasks
 317 0010 1B68     		ldr	r3, [r3, #0]
 318 0012 7A68     		ldr	r2, [r7, #4]
 319 0014 9A42     		cmp	r2, r3
 320 0016 10D2     		bcs	.L10
 221:C:/StellarisWare/utils\scheduler.c ****     {
 222:C:/StellarisWare/utils\scheduler.c ****         //
 223:C:/StellarisWare/utils\scheduler.c ****         // Yes - mark the task as inactive.
 224:C:/StellarisWare/utils\scheduler.c ****         //
 225:C:/StellarisWare/utils\scheduler.c ****         g_psSchedulerTable[ulIndex].bActive = false;
 321              		.loc 1 225 0
 322 0018 40F20002 		movw	r2, #:lower16:g_psSchedulerTable
 323 001c C0F20002 		movt	r2, #:upper16:g_psSchedulerTable
 324 0020 7968     		ldr	r1, [r7, #4]
 325 0022 0B46     		mov	r3, r1
 326 0024 4FEA8303 		lsl	r3, r3, #2
 327 0028 5B18     		adds	r3, r3, r1
 328 002a 4FEA8303 		lsl	r3, r3, #2
 329 002e D318     		adds	r3, r2, r3
 330 0030 03F11003 		add	r3, r3, #16
 331 0034 4FF00002 		mov	r2, #0
 332 0038 1A70     		strb	r2, [r3, #0]
 333              	.L10:
 226:C:/StellarisWare/utils\scheduler.c ****     }
 227:C:/StellarisWare/utils\scheduler.c **** }
 334              		.loc 1 227 0
 335 003a 07F10C07 		add	r7, r7, #12
 336 003e BD46     		mov	sp, r7
 337 0040 80BC     		pop	{r7}
 338 0042 7047     		bx	lr
 339              		.cfi_endproc
 340              	.LFE4:
 342              		.section	.text.SchedulerTickCountGet,"ax",%progbits
 343              		.align	2
 344              		.global	SchedulerTickCountGet
 345              		.thumb
 346              		.thumb_func
 348              	SchedulerTickCountGet:
 349              	.LFB5:
 228:C:/StellarisWare/utils\scheduler.c **** 
 229:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 230:C:/StellarisWare/utils\scheduler.c **** //
 231:C:/StellarisWare/utils\scheduler.c **** //! Returns the current system time in ticks since power on.
 232:C:/StellarisWare/utils\scheduler.c **** //!
 233:C:/StellarisWare/utils\scheduler.c **** //! This function may be called by a client to retrieve the current system
 234:C:/StellarisWare/utils\scheduler.c **** //! time.  The value returned is a count of ticks elapsed since the system
 235:C:/StellarisWare/utils\scheduler.c **** //! last booted.
 236:C:/StellarisWare/utils\scheduler.c **** //!
 237:C:/StellarisWare/utils\scheduler.c **** //! \return Tick count since last boot.
 238:C:/StellarisWare/utils\scheduler.c **** //
 239:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 240:C:/StellarisWare/utils\scheduler.c **** unsigned long
 241:C:/StellarisWare/utils\scheduler.c **** SchedulerTickCountGet(void)
 242:C:/StellarisWare/utils\scheduler.c **** {
 350              		.loc 1 242 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 355 0000 80B4     		push	{r7}
 356              	.LCFI14:
 357              		.cfi_def_cfa_offset 4
 358              		.cfi_offset 7, -4
 359 0002 00AF     		add	r7, sp, #0
 360              	.LCFI15:
 361              		.cfi_def_cfa_register 7
 243:C:/StellarisWare/utils\scheduler.c ****     return(g_ulSchedulerTickCount);
 362              		.loc 1 243 0
 363 0004 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
 364 0008 C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
 365 000c 1B68     		ldr	r3, [r3, #0]
 244:C:/StellarisWare/utils\scheduler.c **** }
 366              		.loc 1 244 0
 367 000e 1846     		mov	r0, r3
 368 0010 BD46     		mov	sp, r7
 369 0012 80BC     		pop	{r7}
 370 0014 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE5:
 374 0016 00BF     		.section	.text.SchedulerElapsedTicksGet,"ax",%progbits
 375              		.align	2
 376              		.global	SchedulerElapsedTicksGet
 377              		.thumb
 378              		.thumb_func
 380              	SchedulerElapsedTicksGet:
 381              	.LFB6:
 245:C:/StellarisWare/utils\scheduler.c **** 
 246:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 247:C:/StellarisWare/utils\scheduler.c **** //
 248:C:/StellarisWare/utils\scheduler.c **** //! Returns the number of ticks elapsed since the provided tick count.
 249:C:/StellarisWare/utils\scheduler.c **** //!
 250:C:/StellarisWare/utils\scheduler.c **** //! \param ulTickCount is the tick count from which to determine the elapsed
 251:C:/StellarisWare/utils\scheduler.c **** //! time.
 252:C:/StellarisWare/utils\scheduler.c **** //!
 253:C:/StellarisWare/utils\scheduler.c **** //! This function may be called by a client to determine how much time has
 254:C:/StellarisWare/utils\scheduler.c **** //! passed since a particular tick count provided in the \e ulTickCount
 255:C:/StellarisWare/utils\scheduler.c **** //! parameter.  This function takes into account wrapping of the global tick
 256:C:/StellarisWare/utils\scheduler.c **** //! counter and assumes that the provided tick count always represents a time
 257:C:/StellarisWare/utils\scheduler.c **** //! in the past.  The returned value will, of course, be wrong if the tick
 258:C:/StellarisWare/utils\scheduler.c **** //! counter has wrapped more than once since the passed \e ulTickCount.  As a
 259:C:/StellarisWare/utils\scheduler.c **** //! result, please do not use this function if you are dealing with timeouts
 260:C:/StellarisWare/utils\scheduler.c **** //! of 497 days or longer (assuming you use a 10mS tick period).
 261:C:/StellarisWare/utils\scheduler.c **** //!
 262:C:/StellarisWare/utils\scheduler.c **** //! \return The number of ticks elapsed since the provided tick count.
 263:C:/StellarisWare/utils\scheduler.c **** //
 264:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 265:C:/StellarisWare/utils\scheduler.c **** unsigned long
 266:C:/StellarisWare/utils\scheduler.c **** SchedulerElapsedTicksGet(unsigned long ulTickCount)
 267:C:/StellarisWare/utils\scheduler.c **** {
 382              		.loc 1 267 0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 8
 385              		@ frame_needed = 1, uses_anonymous_args = 0
 386 0000 80B5     		push	{r7, lr}
 387              	.LCFI16:
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 14, -4
 390              		.cfi_offset 7, -8
 391 0002 82B0     		sub	sp, sp, #8
 392              	.LCFI17:
 393              		.cfi_def_cfa_offset 16
 394 0004 00AF     		add	r7, sp, #0
 395              	.LCFI18:
 396              		.cfi_def_cfa_register 7
 397 0006 7860     		str	r0, [r7, #4]
 268:C:/StellarisWare/utils\scheduler.c ****     //
 269:C:/StellarisWare/utils\scheduler.c ****     // Determine the calculation based upon whether the global tick count has
 270:C:/StellarisWare/utils\scheduler.c ****     // wrapped since the passed ulTickCount.
 271:C:/StellarisWare/utils\scheduler.c ****     //
 272:C:/StellarisWare/utils\scheduler.c ****     return(SchedulerElapsedTicksCalc(ulTickCount, g_ulSchedulerTickCount));
 398              		.loc 1 272 0
 399 0008 40F20003 		movw	r3, #:lower16:g_ulSchedulerTickCount
 400 000c C0F20003 		movt	r3, #:upper16:g_ulSchedulerTickCount
 401 0010 1B68     		ldr	r3, [r3, #0]
 402 0012 7868     		ldr	r0, [r7, #4]
 403 0014 1946     		mov	r1, r3
 404 0016 FFF7FEFF 		bl	SchedulerElapsedTicksCalc
 405 001a 0346     		mov	r3, r0
 273:C:/StellarisWare/utils\scheduler.c **** }
 406              		.loc 1 273 0
 407 001c 1846     		mov	r0, r3
 408 001e 07F10807 		add	r7, r7, #8
 409 0022 BD46     		mov	sp, r7
 410 0024 80BD     		pop	{r7, pc}
 411              		.cfi_endproc
 412              	.LFE6:
 414 0026 00BF     		.section	.text.SchedulerElapsedTicksCalc,"ax",%progbits
 415              		.align	2
 416              		.global	SchedulerElapsedTicksCalc
 417              		.thumb
 418              		.thumb_func
 420              	SchedulerElapsedTicksCalc:
 421              	.LFB7:
 274:C:/StellarisWare/utils\scheduler.c **** 
 275:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 276:C:/StellarisWare/utils\scheduler.c **** //
 277:C:/StellarisWare/utils\scheduler.c **** //! Returns the number of ticks elapsed between two times.
 278:C:/StellarisWare/utils\scheduler.c **** //!
 279:C:/StellarisWare/utils\scheduler.c **** //! \param ulTickStart is the system tick count for the start of the period.
 280:C:/StellarisWare/utils\scheduler.c **** //! \param ulTickEnd is the system tick count for the end of the period.
 281:C:/StellarisWare/utils\scheduler.c **** //!
 282:C:/StellarisWare/utils\scheduler.c **** //! This function may be called by a client to determine the number of ticks
 283:C:/StellarisWare/utils\scheduler.c **** //! which have elapsed between provided starting and ending tick counts.  The
 284:C:/StellarisWare/utils\scheduler.c **** //! function takes into account wrapping cases where the end tick count is
 285:C:/StellarisWare/utils\scheduler.c **** //! lower than the starting count assuming that the ending tick count always
 286:C:/StellarisWare/utils\scheduler.c **** //! represents a later time than the starting count.
 287:C:/StellarisWare/utils\scheduler.c **** //!
 288:C:/StellarisWare/utils\scheduler.c **** //! \return The number of ticks elapsed between the provided start and end
 289:C:/StellarisWare/utils\scheduler.c **** //! counts.
 290:C:/StellarisWare/utils\scheduler.c **** //
 291:C:/StellarisWare/utils\scheduler.c **** //****************************************************************************
 292:C:/StellarisWare/utils\scheduler.c **** unsigned long
 293:C:/StellarisWare/utils\scheduler.c **** SchedulerElapsedTicksCalc(unsigned long ulTickStart, unsigned long ulTickEnd)
 294:C:/StellarisWare/utils\scheduler.c **** {
 422              		.loc 1 294 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 8
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 427 0000 80B4     		push	{r7}
 428              	.LCFI19:
 429              		.cfi_def_cfa_offset 4
 430              		.cfi_offset 7, -4
 431 0002 83B0     		sub	sp, sp, #12
 432              	.LCFI20:
 433              		.cfi_def_cfa_offset 16
 434 0004 00AF     		add	r7, sp, #0
 435              	.LCFI21:
 436              		.cfi_def_cfa_register 7
 437 0006 7860     		str	r0, [r7, #4]
 438 0008 3960     		str	r1, [r7, #0]
 295:C:/StellarisWare/utils\scheduler.c ****     return((ulTickEnd > ulTickStart) ? (ulTickEnd - ulTickStart) :
 439              		.loc 1 295 0
 440 000a 3A68     		ldr	r2, [r7, #0]
 441 000c 7B68     		ldr	r3, [r7, #4]
 442 000e 9A42     		cmp	r2, r3
 443 0010 03D9     		bls	.L15
 444              		.loc 1 295 0 is_stmt 0 discriminator 1
 445 0012 3A68     		ldr	r2, [r7, #0]
 446 0014 7B68     		ldr	r3, [r7, #4]
 447 0016 D31A     		subs	r3, r2, r3
 448 0018 06E0     		b	.L16
 449              	.L15:
 296:C:/StellarisWare/utils\scheduler.c ****            ((0xFFFFFFFF - ulTickStart) + ulTickEnd + 1));
 450              		.loc 1 296 0 is_stmt 1 discriminator 2
 451 001a 7B68     		ldr	r3, [r7, #4]
 452 001c 6FEA0302 		mvn	r2, r3
 453 0020 3B68     		ldr	r3, [r7, #0]
 454 0022 D318     		adds	r3, r2, r3
 295:C:/StellarisWare/utils\scheduler.c ****     return((ulTickEnd > ulTickStart) ? (ulTickEnd - ulTickStart) :
 455              		.loc 1 295 0 discriminator 2
 456 0024 03F10103 		add	r3, r3, #1
 457              	.L16:
 297:C:/StellarisWare/utils\scheduler.c **** }
 458              		.loc 1 297 0 discriminator 3
 459 0028 1846     		mov	r0, r3
 460 002a 07F10C07 		add	r7, r7, #12
 461 002e BD46     		mov	sp, r7
 462 0030 80BC     		pop	{r7}
 463 0032 7047     		bx	lr
 464              		.cfi_endproc
 465              	.LFE7:
 467              		.text
 468              	.Letext0:
 469              		.file 2 "C:\\StellarisWare/utils/scheduler.h"
 470              		.file 3 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 scheduler.c
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:19     .bss:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:20     .bss:00000000 g_ulSchedulerTickCount
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:23     .text.SchedulerSysTickIntHandler:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:28     .text.SchedulerSysTickIntHandler:00000000 SchedulerSysTickIntHandler
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:59     .text.SchedulerInit:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:64     .text.SchedulerInit:00000000 SchedulerInit
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:101    .text.SchedulerRun:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:106    .text.SchedulerRun:00000000 SchedulerRun
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:380    .text.SchedulerElapsedTicksGet:00000000 SchedulerElapsedTicksGet
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:190    .text.SchedulerTaskEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:195    .text.SchedulerTaskEnable:00000000 SchedulerTaskEnable
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:291    .text.SchedulerTaskDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:296    .text.SchedulerTaskDisable:00000000 SchedulerTaskDisable
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:343    .text.SchedulerTickCountGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:348    .text.SchedulerTickCountGet:00000000 SchedulerTickCountGet
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:375    .text.SchedulerElapsedTicksGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:420    .text.SchedulerElapsedTicksCalc:00000000 SchedulerElapsedTicksCalc
C:\Users\Sarthak\AppData\Local\Temp\ccLjXkIc.s:415    .text.SchedulerElapsedTicksCalc:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SysCtlClockGet
SysTickPeriodSet
SysTickEnable
SysTickIntEnable
g_psSchedulerTable
g_ulSchedulerNumTasks
