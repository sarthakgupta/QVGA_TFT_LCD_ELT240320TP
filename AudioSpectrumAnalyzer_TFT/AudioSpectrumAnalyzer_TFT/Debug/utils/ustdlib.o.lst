   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ustdlib.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              	.LC0:
  21 0000 30313233 		.ascii	"0123456789abcdef\000"
  21      34353637 
  21      38396162 
  21      63646566 
  21      00
  22 0011 000000   		.align	2
  25              	g_pcHex:
  26 0014 00000000 		.word	.LC0
  27              		.section	.text.ustrncpy,"ax",%progbits
  28              		.align	2
  29              		.global	ustrncpy
  30              		.thumb
  31              		.thumb_func
  33              	ustrncpy:
  34              	.LFB0:
  35              		.file 1 "C:/StellarisWare/utils/ustdlib.c"
   1:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
   2:C:/StellarisWare/utils\ustdlib.c **** //
   3:C:/StellarisWare/utils\ustdlib.c **** // ustdlib.c - Simple standard library functions.
   4:C:/StellarisWare/utils\ustdlib.c **** //
   5:C:/StellarisWare/utils\ustdlib.c **** // Copyright (c) 2007-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/utils\ustdlib.c **** // Software License Agreement
   7:C:/StellarisWare/utils\ustdlib.c **** // 
   8:C:/StellarisWare/utils\ustdlib.c **** // Texas Instruments (TI) is supplying this software for use solely and
   9:C:/StellarisWare/utils\ustdlib.c **** // exclusively on TI's microcontroller products. The software is owned by
  10:C:/StellarisWare/utils\ustdlib.c **** // TI and/or its suppliers, and is protected under applicable copyright
  11:C:/StellarisWare/utils\ustdlib.c **** // laws. You may not combine this software with "viral" open-source
  12:C:/StellarisWare/utils\ustdlib.c **** // software in order to form a larger program.
  13:C:/StellarisWare/utils\ustdlib.c **** // 
  14:C:/StellarisWare/utils\ustdlib.c **** // THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
  15:C:/StellarisWare/utils\ustdlib.c **** // NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
  16:C:/StellarisWare/utils\ustdlib.c **** // NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  17:C:/StellarisWare/utils\ustdlib.c **** // A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
  18:C:/StellarisWare/utils\ustdlib.c **** // CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
  19:C:/StellarisWare/utils\ustdlib.c **** // DAMAGES, FOR ANY REASON WHATSOEVER.
  20:C:/StellarisWare/utils\ustdlib.c **** // 
  21:C:/StellarisWare/utils\ustdlib.c **** // This is part of revision 9107 of the Stellaris Firmware Development Package.
  22:C:/StellarisWare/utils\ustdlib.c **** //
  23:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  24:C:/StellarisWare/utils\ustdlib.c **** 
  25:C:/StellarisWare/utils\ustdlib.c **** #include <string.h>
  26:C:/StellarisWare/utils\ustdlib.c **** #include "driverlib/debug.h"
  27:C:/StellarisWare/utils\ustdlib.c **** #include "utils/ustdlib.h"
  28:C:/StellarisWare/utils\ustdlib.c **** 
  29:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  30:C:/StellarisWare/utils\ustdlib.c **** //
  31:C:/StellarisWare/utils\ustdlib.c **** //! \addtogroup ustdlib_api
  32:C:/StellarisWare/utils\ustdlib.c **** //! @{
  33:C:/StellarisWare/utils\ustdlib.c **** //
  34:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  35:C:/StellarisWare/utils\ustdlib.c **** 
  36:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  37:C:/StellarisWare/utils\ustdlib.c **** //
  38:C:/StellarisWare/utils\ustdlib.c **** // A mapping from an integer between 0 and 15 to its ASCII character
  39:C:/StellarisWare/utils\ustdlib.c **** // equivalent.
  40:C:/StellarisWare/utils\ustdlib.c **** //
  41:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  42:C:/StellarisWare/utils\ustdlib.c **** static const char * const g_pcHex = "0123456789abcdef";
  43:C:/StellarisWare/utils\ustdlib.c **** 
  44:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  45:C:/StellarisWare/utils\ustdlib.c **** //
  46:C:/StellarisWare/utils\ustdlib.c **** //! Copies a certain number of characters from one string to another.
  47:C:/StellarisWare/utils\ustdlib.c **** //!
  48:C:/StellarisWare/utils\ustdlib.c **** //! \param pcDst is a pointer to the destination buffer into which characters
  49:C:/StellarisWare/utils\ustdlib.c **** //!   are to be copied.
  50:C:/StellarisWare/utils\ustdlib.c **** //! \param pcSrc is a pointer to the string from which characters are to be
  51:C:/StellarisWare/utils\ustdlib.c **** //!   copied.
  52:C:/StellarisWare/utils\ustdlib.c **** //! \param iNum is the number of characters to copy to the destination buffer.
  53:C:/StellarisWare/utils\ustdlib.c **** //!
  54:C:/StellarisWare/utils\ustdlib.c **** //! This function copies at most \e iNum characters from the string pointed to
  55:C:/StellarisWare/utils\ustdlib.c **** //! by \e pcSrc into the buffer pointed to by \e pcDst.  If the end of \e
  56:C:/StellarisWare/utils\ustdlib.c **** //! pcSrc is found before \e iNum characters have been copied, remaining
  57:C:/StellarisWare/utils\ustdlib.c **** //! characters in \e pcDst will be padded with zeroes until \e iNum characters
  58:C:/StellarisWare/utils\ustdlib.c **** //! have been written.  Note that the destination string will only be NULL
  59:C:/StellarisWare/utils\ustdlib.c **** //! terminated if the number of characters to be copied is greater than the
  60:C:/StellarisWare/utils\ustdlib.c **** //! length of \e pcSrc.
  61:C:/StellarisWare/utils\ustdlib.c **** //!
  62:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns \e pcDst.
  63:C:/StellarisWare/utils\ustdlib.c **** //
  64:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
  65:C:/StellarisWare/utils\ustdlib.c **** char *
  66:C:/StellarisWare/utils\ustdlib.c **** ustrncpy (char *pcDst, const char *pcSrc, int iNum)
  67:C:/StellarisWare/utils\ustdlib.c **** {
  36              		.loc 1 67 0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 24
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41 0000 80B4     		push	{r7}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 4
  44              		.cfi_offset 7, -4
  45 0002 87B0     		sub	sp, sp, #28
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 32
  48 0004 00AF     		add	r7, sp, #0
  49              	.LCFI2:
  50              		.cfi_def_cfa_register 7
  51 0006 F860     		str	r0, [r7, #12]
  52 0008 B960     		str	r1, [r7, #8]
  53 000a 7A60     		str	r2, [r7, #4]
  68:C:/StellarisWare/utils\ustdlib.c ****     int iCount;
  69:C:/StellarisWare/utils\ustdlib.c **** 
  70:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcSrc);
  71:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcDst);
  72:C:/StellarisWare/utils\ustdlib.c **** 
  73:C:/StellarisWare/utils\ustdlib.c ****     //
  74:C:/StellarisWare/utils\ustdlib.c ****     // Start at the beginning of the source string.
  75:C:/StellarisWare/utils\ustdlib.c ****     //
  76:C:/StellarisWare/utils\ustdlib.c ****     iCount = 0;
  54              		.loc 1 76 0
  55 000c 4FF00003 		mov	r3, #0
  56 0010 7B61     		str	r3, [r7, #20]
  77:C:/StellarisWare/utils\ustdlib.c **** 
  78:C:/StellarisWare/utils\ustdlib.c ****     //
  79:C:/StellarisWare/utils\ustdlib.c ****     // Copy the source string until we run out of source characters or
  80:C:/StellarisWare/utils\ustdlib.c ****     // destination space.
  81:C:/StellarisWare/utils\ustdlib.c ****     //
  82:C:/StellarisWare/utils\ustdlib.c ****     while(iNum && pcSrc[iCount])
  57              		.loc 1 82 0
  58 0012 0FE0     		b	.L2
  59              	.L4:
  83:C:/StellarisWare/utils\ustdlib.c ****     {
  84:C:/StellarisWare/utils\ustdlib.c ****         pcDst[iCount] = pcSrc[iCount];
  60              		.loc 1 84 0
  61 0014 7B69     		ldr	r3, [r7, #20]
  62 0016 FA68     		ldr	r2, [r7, #12]
  63 0018 D318     		adds	r3, r2, r3
  64 001a 7A69     		ldr	r2, [r7, #20]
  65 001c B968     		ldr	r1, [r7, #8]
  66 001e 8A18     		adds	r2, r1, r2
  67 0020 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
  68 0022 1A70     		strb	r2, [r3, #0]
  85:C:/StellarisWare/utils\ustdlib.c ****         iCount++;
  69              		.loc 1 85 0
  70 0024 7B69     		ldr	r3, [r7, #20]
  71 0026 03F10103 		add	r3, r3, #1
  72 002a 7B61     		str	r3, [r7, #20]
  86:C:/StellarisWare/utils\ustdlib.c ****         iNum--;
  73              		.loc 1 86 0
  74 002c 7B68     		ldr	r3, [r7, #4]
  75 002e 03F1FF33 		add	r3, r3, #-1
  76 0032 7B60     		str	r3, [r7, #4]
  77              	.L2:
  82:C:/StellarisWare/utils\ustdlib.c ****     while(iNum && pcSrc[iCount])
  78              		.loc 1 82 0 discriminator 1
  79 0034 7B68     		ldr	r3, [r7, #4]
  80 0036 002B     		cmp	r3, #0
  81 0038 14D0     		beq	.L5
  82:C:/StellarisWare/utils\ustdlib.c ****     while(iNum && pcSrc[iCount])
  82              		.loc 1 82 0 is_stmt 0 discriminator 2
  83 003a 7B69     		ldr	r3, [r7, #20]
  84 003c BA68     		ldr	r2, [r7, #8]
  85 003e D318     		adds	r3, r2, r3
  86 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  87 0042 002B     		cmp	r3, #0
  88 0044 E6D1     		bne	.L4
  87:C:/StellarisWare/utils\ustdlib.c ****     }
  88:C:/StellarisWare/utils\ustdlib.c **** 
  89:C:/StellarisWare/utils\ustdlib.c ****     //
  90:C:/StellarisWare/utils\ustdlib.c ****     // Pad the destination if we are not yet done.
  91:C:/StellarisWare/utils\ustdlib.c ****     //
  92:C:/StellarisWare/utils\ustdlib.c ****     while(iNum)
  89              		.loc 1 92 0 is_stmt 1
  90 0046 0DE0     		b	.L5
  91              	.L6:
  93:C:/StellarisWare/utils\ustdlib.c ****     {
  94:C:/StellarisWare/utils\ustdlib.c ****         pcDst[iCount++] = (char)0;
  92              		.loc 1 94 0
  93 0048 7B69     		ldr	r3, [r7, #20]
  94 004a FA68     		ldr	r2, [r7, #12]
  95 004c D318     		adds	r3, r2, r3
  96 004e 4FF00002 		mov	r2, #0
  97 0052 1A70     		strb	r2, [r3, #0]
  98 0054 7B69     		ldr	r3, [r7, #20]
  99 0056 03F10103 		add	r3, r3, #1
 100 005a 7B61     		str	r3, [r7, #20]
  95:C:/StellarisWare/utils\ustdlib.c ****         iNum--;
 101              		.loc 1 95 0
 102 005c 7B68     		ldr	r3, [r7, #4]
 103 005e 03F1FF33 		add	r3, r3, #-1
 104 0062 7B60     		str	r3, [r7, #4]
 105              	.L5:
  92:C:/StellarisWare/utils\ustdlib.c ****     while(iNum)
 106              		.loc 1 92 0 discriminator 1
 107 0064 7B68     		ldr	r3, [r7, #4]
 108 0066 002B     		cmp	r3, #0
 109 0068 EED1     		bne	.L6
  96:C:/StellarisWare/utils\ustdlib.c ****     }
  97:C:/StellarisWare/utils\ustdlib.c **** 
  98:C:/StellarisWare/utils\ustdlib.c ****     //
  99:C:/StellarisWare/utils\ustdlib.c ****     // Pass the destination pointer back to the caller.
 100:C:/StellarisWare/utils\ustdlib.c ****     //
 101:C:/StellarisWare/utils\ustdlib.c ****     return(pcDst);
 110              		.loc 1 101 0
 111 006a FB68     		ldr	r3, [r7, #12]
 102:C:/StellarisWare/utils\ustdlib.c **** }
 112              		.loc 1 102 0
 113 006c 1846     		mov	r0, r3
 114 006e 07F11C07 		add	r7, r7, #28
 115 0072 BD46     		mov	sp, r7
 116 0074 80BC     		pop	{r7}
 117 0076 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE0:
 121              		.section	.rodata
 122              		.align	2
 123              	.LC1:
 124 0018 4552524F 		.ascii	"ERROR\000"
 124      5200
 125              		.section	.text.uvsnprintf,"ax",%progbits
 126              		.align	2
 127              		.global	uvsnprintf
 128              		.thumb
 129              		.thumb_func
 131              	uvsnprintf:
 132              	.LFB1:
 103:C:/StellarisWare/utils\ustdlib.c **** 
 104:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 105:C:/StellarisWare/utils\ustdlib.c **** //
 106:C:/StellarisWare/utils\ustdlib.c **** //! A simple vsnprintf function supporting \%c, \%d, \%p, \%s, \%u, \%x, and
 107:C:/StellarisWare/utils\ustdlib.c **** //! \%X.
 108:C:/StellarisWare/utils\ustdlib.c **** //!
 109:C:/StellarisWare/utils\ustdlib.c **** //! \param pcBuf points to the buffer where the converted string is stored.
 110:C:/StellarisWare/utils\ustdlib.c **** //! \param ulSize is the size of the buffer.
 111:C:/StellarisWare/utils\ustdlib.c **** //! \param pcString is the format string.
 112:C:/StellarisWare/utils\ustdlib.c **** //! \param vaArgP is the list of optional arguments, which depend on the
 113:C:/StellarisWare/utils\ustdlib.c **** //! contents of the format string.
 114:C:/StellarisWare/utils\ustdlib.c **** //!
 115:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>vsnprintf()</tt>
 116:C:/StellarisWare/utils\ustdlib.c **** //! function.  Only the following formatting characters are supported:
 117:C:/StellarisWare/utils\ustdlib.c **** //!
 118:C:/StellarisWare/utils\ustdlib.c **** //! - \%c to print a character
 119:C:/StellarisWare/utils\ustdlib.c **** //! - \%d to print a decimal value
 120:C:/StellarisWare/utils\ustdlib.c **** //! - \%s to print a string
 121:C:/StellarisWare/utils\ustdlib.c **** //! - \%u to print an unsigned decimal value
 122:C:/StellarisWare/utils\ustdlib.c **** //! - \%x to print a hexadecimal value using lower case letters
 123:C:/StellarisWare/utils\ustdlib.c **** //! - \%X to print a hexadecimal value using lower case letters (not upper case
 124:C:/StellarisWare/utils\ustdlib.c **** //! letters as would typically be used)
 125:C:/StellarisWare/utils\ustdlib.c **** //! - \%p to print a pointer as a hexadecimal value
 126:C:/StellarisWare/utils\ustdlib.c **** //! - \%\% to print out a \% character
 127:C:/StellarisWare/utils\ustdlib.c **** //!
 128:C:/StellarisWare/utils\ustdlib.c **** //! For \%d, \%p, \%s, \%u, \%x, and \%X, an optional number may reside between
 129:C:/StellarisWare/utils\ustdlib.c **** //! the \% and the format character, which specifies the minimum number of
 130:C:/StellarisWare/utils\ustdlib.c **** //! characters to use for that value; if preceded by a 0 then the extra
 131:C:/StellarisWare/utils\ustdlib.c **** //! characters will be filled with zeros instead of spaces.  For example,
 132:C:/StellarisWare/utils\ustdlib.c **** //! ``\%8d'' will use eight characters to print the decimal value with spaces
 133:C:/StellarisWare/utils\ustdlib.c **** //! added to reach eight; ``\%08d'' will use eight characters as well but will
 134:C:/StellarisWare/utils\ustdlib.c **** //! add zeroes instead of spaces.
 135:C:/StellarisWare/utils\ustdlib.c **** //!
 136:C:/StellarisWare/utils\ustdlib.c **** //! The type of the arguments after \e pcString must match the requirements of
 137:C:/StellarisWare/utils\ustdlib.c **** //! the format string.  For example, if an integer was passed where a string
 138:C:/StellarisWare/utils\ustdlib.c **** //! was expected, an error of some kind will most likely occur.
 139:C:/StellarisWare/utils\ustdlib.c **** //!
 140:C:/StellarisWare/utils\ustdlib.c **** //! The \e ulSize parameter limits the number of characters that will be stored
 141:C:/StellarisWare/utils\ustdlib.c **** //! in the buffer pointed to by \e pcBuf to prevent the possibility of a buffer
 142:C:/StellarisWare/utils\ustdlib.c **** //! overflow.  The buffer size should be large enough to hold the expected
 143:C:/StellarisWare/utils\ustdlib.c **** //! converted output string, including the null termination character.
 144:C:/StellarisWare/utils\ustdlib.c **** //!
 145:C:/StellarisWare/utils\ustdlib.c **** //! The function will return the number of characters that would be converted
 146:C:/StellarisWare/utils\ustdlib.c **** //! as if there were no limit on the buffer size.  Therefore it is possible for
 147:C:/StellarisWare/utils\ustdlib.c **** //! the function to return a count that is greater than the specified buffer
 148:C:/StellarisWare/utils\ustdlib.c **** //! size.  If this happens, it means that the output was truncated.
 149:C:/StellarisWare/utils\ustdlib.c **** //!
 150:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the number of characters that were to be stored, not
 151:C:/StellarisWare/utils\ustdlib.c **** //! including the NULL termination character, regardless of space in the
 152:C:/StellarisWare/utils\ustdlib.c **** //! buffer.
 153:C:/StellarisWare/utils\ustdlib.c **** //
 154:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 155:C:/StellarisWare/utils\ustdlib.c **** int
 156:C:/StellarisWare/utils\ustdlib.c **** uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
 157:C:/StellarisWare/utils\ustdlib.c ****            va_list vaArgP)
 158:C:/StellarisWare/utils\ustdlib.c **** {
 133              		.loc 1 158 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 48
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137 0000 80B5     		push	{r7, lr}
 138              	.LCFI3:
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 14, -4
 141              		.cfi_offset 7, -8
 142 0002 8CB0     		sub	sp, sp, #48
 143              	.LCFI4:
 144              		.cfi_def_cfa_offset 56
 145 0004 00AF     		add	r7, sp, #0
 146              	.LCFI5:
 147              		.cfi_def_cfa_register 7
 148 0006 F860     		str	r0, [r7, #12]
 149 0008 B960     		str	r1, [r7, #8]
 150 000a 7A60     		str	r2, [r7, #4]
 151 000c 3B60     		str	r3, [r7, #0]
 159:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulIdx, ulValue, ulCount, ulBase, ulNeg;
 160:C:/StellarisWare/utils\ustdlib.c ****     char *pcStr, cFill;
 161:C:/StellarisWare/utils\ustdlib.c ****     int iConvertCount = 0;
 152              		.loc 1 161 0
 153 000e 4FF00003 		mov	r3, #0
 154 0012 7B61     		str	r3, [r7, #20]
 162:C:/StellarisWare/utils\ustdlib.c **** 
 163:C:/StellarisWare/utils\ustdlib.c ****     //
 164:C:/StellarisWare/utils\ustdlib.c ****     // Check the arguments.
 165:C:/StellarisWare/utils\ustdlib.c ****     //
 166:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcString != 0);
 167:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcBuf != 0);
 168:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(ulSize != 0);
 169:C:/StellarisWare/utils\ustdlib.c **** 
 170:C:/StellarisWare/utils\ustdlib.c ****     //
 171:C:/StellarisWare/utils\ustdlib.c ****     // Adjust buffer size limit to allow one space for null termination.
 172:C:/StellarisWare/utils\ustdlib.c ****     //
 173:C:/StellarisWare/utils\ustdlib.c ****     if(ulSize)
 155              		.loc 1 173 0
 156 0014 BB68     		ldr	r3, [r7, #8]
 157 0016 002B     		cmp	r3, #0
 158 0018 03D0     		beq	.L8
 174:C:/StellarisWare/utils\ustdlib.c ****     {
 175:C:/StellarisWare/utils\ustdlib.c ****         ulSize--;
 159              		.loc 1 175 0
 160 001a BB68     		ldr	r3, [r7, #8]
 161 001c 03F1FF33 		add	r3, r3, #-1
 162 0020 BB60     		str	r3, [r7, #8]
 163              	.L8:
 176:C:/StellarisWare/utils\ustdlib.c ****     }
 177:C:/StellarisWare/utils\ustdlib.c **** 
 178:C:/StellarisWare/utils\ustdlib.c ****     //
 179:C:/StellarisWare/utils\ustdlib.c ****     // Initialize the count of characters converted.
 180:C:/StellarisWare/utils\ustdlib.c ****     //
 181:C:/StellarisWare/utils\ustdlib.c ****     iConvertCount = 0;
 164              		.loc 1 181 0
 165 0022 4FF00003 		mov	r3, #0
 166 0026 7B61     		str	r3, [r7, #20]
 182:C:/StellarisWare/utils\ustdlib.c **** 
 183:C:/StellarisWare/utils\ustdlib.c ****     //
 184:C:/StellarisWare/utils\ustdlib.c ****     // Loop while there are more characters in the format string.
 185:C:/StellarisWare/utils\ustdlib.c ****     //
 186:C:/StellarisWare/utils\ustdlib.c ****     while(*pcString)
 167              		.loc 1 186 0
 168 0028 BDE2     		b	.L9
 169              	.L54:
 187:C:/StellarisWare/utils\ustdlib.c ****     {
 188:C:/StellarisWare/utils\ustdlib.c ****         //
 189:C:/StellarisWare/utils\ustdlib.c ****         // Find the first non-% character, or the end of the string.
 190:C:/StellarisWare/utils\ustdlib.c ****         //
 191:C:/StellarisWare/utils\ustdlib.c ****         for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 170              		.loc 1 191 0
 171 002a 4FF00003 		mov	r3, #0
 172 002e FB62     		str	r3, [r7, #44]
 173 0030 03E0     		b	.L10
 174              	.L12:
 192:C:/StellarisWare/utils\ustdlib.c ****             ulIdx++)
 175              		.loc 1 192 0
 176 0032 FB6A     		ldr	r3, [r7, #44]
 177 0034 03F10103 		add	r3, r3, #1
 178 0038 FB62     		str	r3, [r7, #44]
 179              	.L10:
 191:C:/StellarisWare/utils\ustdlib.c ****         for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 180              		.loc 1 191 0 discriminator 1
 181 003a 7A68     		ldr	r2, [r7, #4]
 182 003c FB6A     		ldr	r3, [r7, #44]
 183 003e D318     		adds	r3, r2, r3
 184 0040 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 185 0042 252B     		cmp	r3, #37
 186 0044 05D0     		beq	.L11
 191:C:/StellarisWare/utils\ustdlib.c ****         for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 187              		.loc 1 191 0 is_stmt 0 discriminator 2
 188 0046 7A68     		ldr	r2, [r7, #4]
 189 0048 FB6A     		ldr	r3, [r7, #44]
 190 004a D318     		adds	r3, r2, r3
 191 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 192 004e 002B     		cmp	r3, #0
 193 0050 EFD1     		bne	.L12
 194              	.L11:
 193:C:/StellarisWare/utils\ustdlib.c ****         {
 194:C:/StellarisWare/utils\ustdlib.c ****         }
 195:C:/StellarisWare/utils\ustdlib.c **** 
 196:C:/StellarisWare/utils\ustdlib.c ****         //
 197:C:/StellarisWare/utils\ustdlib.c ****         // Write this portion of the string to the output buffer.  If there are
 198:C:/StellarisWare/utils\ustdlib.c ****         // more characters to write than there is space in the buffer, then
 199:C:/StellarisWare/utils\ustdlib.c ****         // only write as much as will fit in the buffer.
 200:C:/StellarisWare/utils\ustdlib.c ****         //
 201:C:/StellarisWare/utils\ustdlib.c ****         if(ulIdx > ulSize)
 195              		.loc 1 201 0 is_stmt 1
 196 0052 FA6A     		ldr	r2, [r7, #44]
 197 0054 BB68     		ldr	r3, [r7, #8]
 198 0056 9A42     		cmp	r2, r3
 199 0058 0DD9     		bls	.L13
 202:C:/StellarisWare/utils\ustdlib.c ****         {
 203:C:/StellarisWare/utils\ustdlib.c ****             ustrncpy(pcBuf, pcString, ulSize);
 200              		.loc 1 203 0
 201 005a BB68     		ldr	r3, [r7, #8]
 202 005c F868     		ldr	r0, [r7, #12]
 203 005e 7968     		ldr	r1, [r7, #4]
 204 0060 1A46     		mov	r2, r3
 205 0062 FFF7FEFF 		bl	ustrncpy
 204:C:/StellarisWare/utils\ustdlib.c ****             pcBuf += ulSize;
 206              		.loc 1 204 0
 207 0066 FA68     		ldr	r2, [r7, #12]
 208 0068 BB68     		ldr	r3, [r7, #8]
 209 006a D318     		adds	r3, r2, r3
 210 006c FB60     		str	r3, [r7, #12]
 205:C:/StellarisWare/utils\ustdlib.c ****             ulSize = 0;
 211              		.loc 1 205 0
 212 006e 4FF00003 		mov	r3, #0
 213 0072 BB60     		str	r3, [r7, #8]
 214 0074 0DE0     		b	.L14
 215              	.L13:
 206:C:/StellarisWare/utils\ustdlib.c ****         }
 207:C:/StellarisWare/utils\ustdlib.c ****         else
 208:C:/StellarisWare/utils\ustdlib.c ****         {
 209:C:/StellarisWare/utils\ustdlib.c ****             ustrncpy(pcBuf, pcString, ulIdx);
 216              		.loc 1 209 0
 217 0076 FB6A     		ldr	r3, [r7, #44]
 218 0078 F868     		ldr	r0, [r7, #12]
 219 007a 7968     		ldr	r1, [r7, #4]
 220 007c 1A46     		mov	r2, r3
 221 007e FFF7FEFF 		bl	ustrncpy
 210:C:/StellarisWare/utils\ustdlib.c ****             pcBuf += ulIdx;
 222              		.loc 1 210 0
 223 0082 FA68     		ldr	r2, [r7, #12]
 224 0084 FB6A     		ldr	r3, [r7, #44]
 225 0086 D318     		adds	r3, r2, r3
 226 0088 FB60     		str	r3, [r7, #12]
 211:C:/StellarisWare/utils\ustdlib.c ****             ulSize -= ulIdx;
 227              		.loc 1 211 0
 228 008a BA68     		ldr	r2, [r7, #8]
 229 008c FB6A     		ldr	r3, [r7, #44]
 230 008e D31A     		subs	r3, r2, r3
 231 0090 BB60     		str	r3, [r7, #8]
 232              	.L14:
 212:C:/StellarisWare/utils\ustdlib.c ****         }
 213:C:/StellarisWare/utils\ustdlib.c **** 
 214:C:/StellarisWare/utils\ustdlib.c ****         //
 215:C:/StellarisWare/utils\ustdlib.c ****         // Update the conversion count.  This will be the number of characters
 216:C:/StellarisWare/utils\ustdlib.c ****         // that should have been written, even if there was not room in the
 217:C:/StellarisWare/utils\ustdlib.c ****         // buffer.
 218:C:/StellarisWare/utils\ustdlib.c ****         //
 219:C:/StellarisWare/utils\ustdlib.c ****         iConvertCount += ulIdx;
 233              		.loc 1 219 0
 234 0092 7A69     		ldr	r2, [r7, #20]
 235 0094 FB6A     		ldr	r3, [r7, #44]
 236 0096 D318     		adds	r3, r2, r3
 237 0098 7B61     		str	r3, [r7, #20]
 220:C:/StellarisWare/utils\ustdlib.c **** 
 221:C:/StellarisWare/utils\ustdlib.c ****         //
 222:C:/StellarisWare/utils\ustdlib.c ****         // Skip the portion of the format string that was written.
 223:C:/StellarisWare/utils\ustdlib.c ****         //
 224:C:/StellarisWare/utils\ustdlib.c ****         pcString += ulIdx;
 238              		.loc 1 224 0
 239 009a 7A68     		ldr	r2, [r7, #4]
 240 009c FB6A     		ldr	r3, [r7, #44]
 241 009e D318     		adds	r3, r2, r3
 242 00a0 7B60     		str	r3, [r7, #4]
 225:C:/StellarisWare/utils\ustdlib.c **** 
 226:C:/StellarisWare/utils\ustdlib.c ****         //
 227:C:/StellarisWare/utils\ustdlib.c ****         // See if the next character is a %.
 228:C:/StellarisWare/utils\ustdlib.c ****         //
 229:C:/StellarisWare/utils\ustdlib.c ****         if(*pcString == '%')
 243              		.loc 1 229 0
 244 00a2 7B68     		ldr	r3, [r7, #4]
 245 00a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 246 00a6 252B     		cmp	r3, #37
 247 00a8 40F07D82 		bne	.L9
 230:C:/StellarisWare/utils\ustdlib.c ****         {
 231:C:/StellarisWare/utils\ustdlib.c ****             //
 232:C:/StellarisWare/utils\ustdlib.c ****             // Skip the %.
 233:C:/StellarisWare/utils\ustdlib.c ****             //
 234:C:/StellarisWare/utils\ustdlib.c ****             pcString++;
 248              		.loc 1 234 0
 249 00ac 7B68     		ldr	r3, [r7, #4]
 250 00ae 03F10103 		add	r3, r3, #1
 251 00b2 7B60     		str	r3, [r7, #4]
 235:C:/StellarisWare/utils\ustdlib.c **** 
 236:C:/StellarisWare/utils\ustdlib.c ****             //
 237:C:/StellarisWare/utils\ustdlib.c ****             // Set the digit count to zero, and the fill character to space
 238:C:/StellarisWare/utils\ustdlib.c ****             // (that is, to the defaults).
 239:C:/StellarisWare/utils\ustdlib.c ****             //
 240:C:/StellarisWare/utils\ustdlib.c ****             ulCount = 0;
 252              		.loc 1 240 0
 253 00b4 4FF00003 		mov	r3, #0
 254 00b8 7B62     		str	r3, [r7, #36]
 241:C:/StellarisWare/utils\ustdlib.c ****             cFill = ' ';
 255              		.loc 1 241 0
 256 00ba 4FF02003 		mov	r3, #32
 257 00be FB76     		strb	r3, [r7, #27]
 258              	.L15:
 242:C:/StellarisWare/utils\ustdlib.c **** 
 243:C:/StellarisWare/utils\ustdlib.c ****             //
 244:C:/StellarisWare/utils\ustdlib.c ****             // It may be necessary to get back here to process more characters.
 245:C:/StellarisWare/utils\ustdlib.c ****             // Goto's aren't pretty, but effective.  I feel extremely dirty for
 246:C:/StellarisWare/utils\ustdlib.c ****             // using not one but two of the beasts.
 247:C:/StellarisWare/utils\ustdlib.c ****             //
 248:C:/StellarisWare/utils\ustdlib.c **** again:
 249:C:/StellarisWare/utils\ustdlib.c **** 
 250:C:/StellarisWare/utils\ustdlib.c ****             //
 251:C:/StellarisWare/utils\ustdlib.c ****             // Determine how to handle the next character.
 252:C:/StellarisWare/utils\ustdlib.c ****             //
 253:C:/StellarisWare/utils\ustdlib.c ****             switch(*pcString++)
 259              		.loc 1 253 0
 260 00c0 7B68     		ldr	r3, [r7, #4]
 261 00c2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 262 00c4 7A68     		ldr	r2, [r7, #4]
 263 00c6 02F10102 		add	r2, r2, #1
 264 00ca 7A60     		str	r2, [r7, #4]
 265 00cc A3F12503 		sub	r3, r3, #37
 266 00d0 532B     		cmp	r3, #83
 267 00d2 00F23E82 		bhi	.L16
 268 00d6 01A2     		adr	r2, .L24
 269 00d8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 270              		.align	2
 271              	.L24:
 272 00dc 29050000 		.word	.L17+1
 273 00e0 53050000 		.word	.L16+1
 274 00e4 53050000 		.word	.L16+1
 275 00e8 53050000 		.word	.L16+1
 276 00ec 53050000 		.word	.L16+1
 277 00f0 53050000 		.word	.L16+1
 278 00f4 53050000 		.word	.L16+1
 279 00f8 53050000 		.word	.L16+1
 280 00fc 53050000 		.word	.L16+1
 281 0100 53050000 		.word	.L16+1
 282 0104 53050000 		.word	.L16+1
 283 0108 2D020000 		.word	.L18+1
 284 010c 2D020000 		.word	.L18+1
 285 0110 2D020000 		.word	.L18+1
 286 0114 2D020000 		.word	.L18+1
 287 0118 2D020000 		.word	.L18+1
 288 011c 2D020000 		.word	.L18+1
 289 0120 2D020000 		.word	.L18+1
 290 0124 2D020000 		.word	.L18+1
 291 0128 2D020000 		.word	.L18+1
 292 012c 2D020000 		.word	.L18+1
 293 0130 53050000 		.word	.L16+1
 294 0134 53050000 		.word	.L16+1
 295 0138 53050000 		.word	.L16+1
 296 013c 53050000 		.word	.L16+1
 297 0140 53050000 		.word	.L16+1
 298 0144 53050000 		.word	.L16+1
 299 0148 53050000 		.word	.L16+1
 300 014c 53050000 		.word	.L16+1
 301 0150 53050000 		.word	.L16+1
 302 0154 53050000 		.word	.L16+1
 303 0158 53050000 		.word	.L16+1
 304 015c 53050000 		.word	.L16+1
 305 0160 53050000 		.word	.L16+1
 306 0164 53050000 		.word	.L16+1
 307 0168 53050000 		.word	.L16+1
 308 016c 53050000 		.word	.L16+1
 309 0170 53050000 		.word	.L16+1
 310 0174 53050000 		.word	.L16+1
 311 0178 53050000 		.word	.L16+1
 312 017c 53050000 		.word	.L16+1
 313 0180 53050000 		.word	.L16+1
 314 0184 53050000 		.word	.L16+1
 315 0188 53050000 		.word	.L16+1
 316 018c 53050000 		.word	.L16+1
 317 0190 53050000 		.word	.L16+1
 318 0194 53050000 		.word	.L16+1
 319 0198 53050000 		.word	.L16+1
 320 019c 53050000 		.word	.L16+1
 321 01a0 53050000 		.word	.L16+1
 322 01a4 53050000 		.word	.L16+1
 323 01a8 BD030000 		.word	.L19+1
 324 01ac 53050000 		.word	.L16+1
 325 01b0 53050000 		.word	.L16+1
 326 01b4 53050000 		.word	.L16+1
 327 01b8 53050000 		.word	.L16+1
 328 01bc 53050000 		.word	.L16+1
 329 01c0 53050000 		.word	.L16+1
 330 01c4 53050000 		.word	.L16+1
 331 01c8 53050000 		.word	.L16+1
 332 01cc 53050000 		.word	.L16+1
 333 01d0 53050000 		.word	.L16+1
 334 01d4 6B020000 		.word	.L20+1
 335 01d8 9F020000 		.word	.L21+1
 336 01dc 53050000 		.word	.L16+1
 337 01e0 53050000 		.word	.L16+1
 338 01e4 53050000 		.word	.L16+1
 339 01e8 53050000 		.word	.L16+1
 340 01ec 53050000 		.word	.L16+1
 341 01f0 53050000 		.word	.L16+1
 342 01f4 53050000 		.word	.L16+1
 343 01f8 53050000 		.word	.L16+1
 344 01fc 53050000 		.word	.L16+1
 345 0200 53050000 		.word	.L16+1
 346 0204 53050000 		.word	.L16+1
 347 0208 BD030000 		.word	.L19+1
 348 020c 53050000 		.word	.L16+1
 349 0210 53050000 		.word	.L16+1
 350 0214 CF020000 		.word	.L22+1
 351 0218 53050000 		.word	.L16+1
 352 021c A3030000 		.word	.L23+1
 353 0220 53050000 		.word	.L16+1
 354 0224 53050000 		.word	.L16+1
 355 0228 BD030000 		.word	.L19+1
 356              	.L18:
 254:C:/StellarisWare/utils\ustdlib.c ****             {
 255:C:/StellarisWare/utils\ustdlib.c ****                 //
 256:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the digit characters.
 257:C:/StellarisWare/utils\ustdlib.c ****                 //
 258:C:/StellarisWare/utils\ustdlib.c ****                 case '0':
 259:C:/StellarisWare/utils\ustdlib.c ****                 case '1':
 260:C:/StellarisWare/utils\ustdlib.c ****                 case '2':
 261:C:/StellarisWare/utils\ustdlib.c ****                 case '3':
 262:C:/StellarisWare/utils\ustdlib.c ****                 case '4':
 263:C:/StellarisWare/utils\ustdlib.c ****                 case '5':
 264:C:/StellarisWare/utils\ustdlib.c ****                 case '6':
 265:C:/StellarisWare/utils\ustdlib.c ****                 case '7':
 266:C:/StellarisWare/utils\ustdlib.c ****                 case '8':
 267:C:/StellarisWare/utils\ustdlib.c ****                 case '9':
 268:C:/StellarisWare/utils\ustdlib.c ****                 {
 269:C:/StellarisWare/utils\ustdlib.c ****                     //
 270:C:/StellarisWare/utils\ustdlib.c ****                     // If this is a zero, and it is the first digit, then the
 271:C:/StellarisWare/utils\ustdlib.c ****                     // fill character is a zero instead of a space.
 272:C:/StellarisWare/utils\ustdlib.c ****                     //
 273:C:/StellarisWare/utils\ustdlib.c ****                     if((pcString[-1] == '0') && (ulCount == 0))
 357              		.loc 1 273 0
 358 022c 7B68     		ldr	r3, [r7, #4]
 359 022e 03F1FF33 		add	r3, r3, #-1
 360 0232 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 361 0234 302B     		cmp	r3, #48
 362 0236 05D1     		bne	.L25
 363              		.loc 1 273 0 is_stmt 0 discriminator 1
 364 0238 7B6A     		ldr	r3, [r7, #36]
 365 023a 002B     		cmp	r3, #0
 366 023c 02D1     		bne	.L25
 274:C:/StellarisWare/utils\ustdlib.c ****                     {
 275:C:/StellarisWare/utils\ustdlib.c ****                         cFill = '0';
 367              		.loc 1 275 0 is_stmt 1
 368 023e 4FF03003 		mov	r3, #48
 369 0242 FB76     		strb	r3, [r7, #27]
 370              	.L25:
 276:C:/StellarisWare/utils\ustdlib.c ****                     }
 277:C:/StellarisWare/utils\ustdlib.c **** 
 278:C:/StellarisWare/utils\ustdlib.c ****                     //
 279:C:/StellarisWare/utils\ustdlib.c ****                     // Update the digit count.
 280:C:/StellarisWare/utils\ustdlib.c ****                     //
 281:C:/StellarisWare/utils\ustdlib.c ****                     ulCount *= 10;
 371              		.loc 1 281 0
 372 0244 7A6A     		ldr	r2, [r7, #36]
 373 0246 1346     		mov	r3, r2
 374 0248 4FEA8303 		lsl	r3, r3, #2
 375 024c 9B18     		adds	r3, r3, r2
 376 024e 4FEA4303 		lsl	r3, r3, #1
 377 0252 7B62     		str	r3, [r7, #36]
 282:C:/StellarisWare/utils\ustdlib.c ****                     ulCount += pcString[-1] - '0';
 378              		.loc 1 282 0
 379 0254 7B68     		ldr	r3, [r7, #4]
 380 0256 03F1FF33 		add	r3, r3, #-1
 381 025a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 382 025c 1A46     		mov	r2, r3
 383 025e 7B6A     		ldr	r3, [r7, #36]
 384 0260 D318     		adds	r3, r2, r3
 385 0262 A3F13003 		sub	r3, r3, #48
 386 0266 7B62     		str	r3, [r7, #36]
 283:C:/StellarisWare/utils\ustdlib.c **** 
 284:C:/StellarisWare/utils\ustdlib.c ****                     //
 285:C:/StellarisWare/utils\ustdlib.c ****                     // Get the next character.
 286:C:/StellarisWare/utils\ustdlib.c ****                     //
 287:C:/StellarisWare/utils\ustdlib.c ****                     goto again;
 387              		.loc 1 287 0
 388 0268 2AE7     		b	.L15
 389              	.L20:
 288:C:/StellarisWare/utils\ustdlib.c ****                 }
 289:C:/StellarisWare/utils\ustdlib.c **** 
 290:C:/StellarisWare/utils\ustdlib.c ****                 //
 291:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %c command.
 292:C:/StellarisWare/utils\ustdlib.c ****                 //
 293:C:/StellarisWare/utils\ustdlib.c ****                 case 'c':
 294:C:/StellarisWare/utils\ustdlib.c ****                 {
 295:C:/StellarisWare/utils\ustdlib.c ****                     //
 296:C:/StellarisWare/utils\ustdlib.c ****                     // Get the value from the varargs.
 297:C:/StellarisWare/utils\ustdlib.c ****                     //
 298:C:/StellarisWare/utils\ustdlib.c ****                     ulValue = va_arg(vaArgP, unsigned long);
 390              		.loc 1 298 0
 391 026a 3B68     		ldr	r3, [r7, #0]
 392 026c 03F10402 		add	r2, r3, #4
 393 0270 3A60     		str	r2, [r7, #0]
 394 0272 1B68     		ldr	r3, [r3, #0]
 395 0274 BB62     		str	r3, [r7, #40]
 299:C:/StellarisWare/utils\ustdlib.c **** 
 300:C:/StellarisWare/utils\ustdlib.c ****                     //
 301:C:/StellarisWare/utils\ustdlib.c ****                     // Copy the character to the output buffer, if there is
 302:C:/StellarisWare/utils\ustdlib.c ****                     // room.  Update the buffer size remaining.
 303:C:/StellarisWare/utils\ustdlib.c ****                     //
 304:C:/StellarisWare/utils\ustdlib.c ****                     if(ulSize != 0)
 396              		.loc 1 304 0
 397 0276 BB68     		ldr	r3, [r7, #8]
 398 0278 002B     		cmp	r3, #0
 399 027a 0BD0     		beq	.L26
 305:C:/StellarisWare/utils\ustdlib.c ****                     {
 306:C:/StellarisWare/utils\ustdlib.c ****                         *pcBuf++ = (char)ulValue;
 400              		.loc 1 306 0
 401 027c BB6A     		ldr	r3, [r7, #40]
 402 027e DAB2     		uxtb	r2, r3
 403 0280 FB68     		ldr	r3, [r7, #12]
 404 0282 1A70     		strb	r2, [r3, #0]
 405 0284 FB68     		ldr	r3, [r7, #12]
 406 0286 03F10103 		add	r3, r3, #1
 407 028a FB60     		str	r3, [r7, #12]
 307:C:/StellarisWare/utils\ustdlib.c ****                         ulSize--;
 408              		.loc 1 307 0
 409 028c BB68     		ldr	r3, [r7, #8]
 410 028e 03F1FF33 		add	r3, r3, #-1
 411 0292 BB60     		str	r3, [r7, #8]
 412              	.L26:
 308:C:/StellarisWare/utils\ustdlib.c ****                     }
 309:C:/StellarisWare/utils\ustdlib.c **** 
 310:C:/StellarisWare/utils\ustdlib.c ****                     //
 311:C:/StellarisWare/utils\ustdlib.c ****                     // Update the conversion count.
 312:C:/StellarisWare/utils\ustdlib.c ****                     //
 313:C:/StellarisWare/utils\ustdlib.c ****                     iConvertCount++;
 413              		.loc 1 313 0
 414 0294 7B69     		ldr	r3, [r7, #20]
 415 0296 03F10103 		add	r3, r3, #1
 416 029a 7B61     		str	r3, [r7, #20]
 314:C:/StellarisWare/utils\ustdlib.c **** 
 315:C:/StellarisWare/utils\ustdlib.c ****                     //
 316:C:/StellarisWare/utils\ustdlib.c ****                     // This command has been handled.
 317:C:/StellarisWare/utils\ustdlib.c ****                     //
 318:C:/StellarisWare/utils\ustdlib.c ****                     break;
 417              		.loc 1 318 0
 418 029c 83E1     		b	.L9
 419              	.L21:
 319:C:/StellarisWare/utils\ustdlib.c ****                 }
 320:C:/StellarisWare/utils\ustdlib.c **** 
 321:C:/StellarisWare/utils\ustdlib.c ****                 //
 322:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %d command.
 323:C:/StellarisWare/utils\ustdlib.c ****                 //
 324:C:/StellarisWare/utils\ustdlib.c ****                 case 'd':
 325:C:/StellarisWare/utils\ustdlib.c ****                 {
 326:C:/StellarisWare/utils\ustdlib.c ****                     //
 327:C:/StellarisWare/utils\ustdlib.c ****                     // Get the value from the varargs.
 328:C:/StellarisWare/utils\ustdlib.c ****                     //
 329:C:/StellarisWare/utils\ustdlib.c ****                     ulValue = va_arg(vaArgP, unsigned long);
 420              		.loc 1 329 0
 421 029e 3B68     		ldr	r3, [r7, #0]
 422 02a0 03F10402 		add	r2, r3, #4
 423 02a4 3A60     		str	r2, [r7, #0]
 424 02a6 1B68     		ldr	r3, [r3, #0]
 425 02a8 BB62     		str	r3, [r7, #40]
 330:C:/StellarisWare/utils\ustdlib.c **** 
 331:C:/StellarisWare/utils\ustdlib.c ****                     //
 332:C:/StellarisWare/utils\ustdlib.c ****                     // If the value is negative, make it positive and indicate
 333:C:/StellarisWare/utils\ustdlib.c ****                     // that a minus sign is needed.
 334:C:/StellarisWare/utils\ustdlib.c ****                     //
 335:C:/StellarisWare/utils\ustdlib.c ****                     if((long)ulValue < 0)
 426              		.loc 1 335 0
 427 02aa BB6A     		ldr	r3, [r7, #40]
 428 02ac 002B     		cmp	r3, #0
 429 02ae 07DA     		bge	.L27
 336:C:/StellarisWare/utils\ustdlib.c ****                     {
 337:C:/StellarisWare/utils\ustdlib.c ****                         //
 338:C:/StellarisWare/utils\ustdlib.c ****                         // Make the value positive.
 339:C:/StellarisWare/utils\ustdlib.c ****                         //
 340:C:/StellarisWare/utils\ustdlib.c ****                         ulValue = -(long)ulValue;
 430              		.loc 1 340 0
 431 02b0 BB6A     		ldr	r3, [r7, #40]
 432 02b2 C3F10003 		rsb	r3, r3, #0
 433 02b6 BB62     		str	r3, [r7, #40]
 341:C:/StellarisWare/utils\ustdlib.c **** 
 342:C:/StellarisWare/utils\ustdlib.c ****                         //
 343:C:/StellarisWare/utils\ustdlib.c ****                         // Indicate that the value is negative.
 344:C:/StellarisWare/utils\ustdlib.c ****                         //
 345:C:/StellarisWare/utils\ustdlib.c ****                         ulNeg = 1;
 434              		.loc 1 345 0
 435 02b8 4FF00103 		mov	r3, #1
 436 02bc FB61     		str	r3, [r7, #28]
 437 02be 02E0     		b	.L28
 438              	.L27:
 346:C:/StellarisWare/utils\ustdlib.c ****                     }
 347:C:/StellarisWare/utils\ustdlib.c ****                     else
 348:C:/StellarisWare/utils\ustdlib.c ****                     {
 349:C:/StellarisWare/utils\ustdlib.c ****                         //
 350:C:/StellarisWare/utils\ustdlib.c ****                         // Indicate that the value is positive so that a
 351:C:/StellarisWare/utils\ustdlib.c ****                         // negative sign isn't inserted.
 352:C:/StellarisWare/utils\ustdlib.c ****                         //
 353:C:/StellarisWare/utils\ustdlib.c ****                         ulNeg = 0;
 439              		.loc 1 353 0
 440 02c0 4FF00003 		mov	r3, #0
 441 02c4 FB61     		str	r3, [r7, #28]
 442              	.L28:
 354:C:/StellarisWare/utils\ustdlib.c ****                     }
 355:C:/StellarisWare/utils\ustdlib.c **** 
 356:C:/StellarisWare/utils\ustdlib.c ****                     //
 357:C:/StellarisWare/utils\ustdlib.c ****                     // Set the base to 10.
 358:C:/StellarisWare/utils\ustdlib.c ****                     //
 359:C:/StellarisWare/utils\ustdlib.c ****                     ulBase = 10;
 443              		.loc 1 359 0
 444 02c6 4FF00A03 		mov	r3, #10
 445 02ca 3B62     		str	r3, [r7, #32]
 360:C:/StellarisWare/utils\ustdlib.c **** 
 361:C:/StellarisWare/utils\ustdlib.c ****                     //
 362:C:/StellarisWare/utils\ustdlib.c ****                     // Convert the value to ASCII.
 363:C:/StellarisWare/utils\ustdlib.c ****                     //
 364:C:/StellarisWare/utils\ustdlib.c ****                     goto convert;
 446              		.loc 1 364 0
 447 02cc 82E0     		b	.L29
 448              	.L22:
 365:C:/StellarisWare/utils\ustdlib.c ****                 }
 366:C:/StellarisWare/utils\ustdlib.c **** 
 367:C:/StellarisWare/utils\ustdlib.c ****                 //
 368:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %s command.
 369:C:/StellarisWare/utils\ustdlib.c ****                 //
 370:C:/StellarisWare/utils\ustdlib.c ****                 case 's':
 371:C:/StellarisWare/utils\ustdlib.c ****                 {
 372:C:/StellarisWare/utils\ustdlib.c ****                     //
 373:C:/StellarisWare/utils\ustdlib.c ****                     // Get the string pointer from the varargs.
 374:C:/StellarisWare/utils\ustdlib.c ****                     //
 375:C:/StellarisWare/utils\ustdlib.c ****                     pcStr = va_arg(vaArgP, char *);
 449              		.loc 1 375 0
 450 02ce 3B68     		ldr	r3, [r7, #0]
 451 02d0 03F10402 		add	r2, r3, #4
 452 02d4 3A60     		str	r2, [r7, #0]
 453 02d6 1B68     		ldr	r3, [r3, #0]
 454 02d8 3B61     		str	r3, [r7, #16]
 376:C:/StellarisWare/utils\ustdlib.c **** 
 377:C:/StellarisWare/utils\ustdlib.c ****                     //
 378:C:/StellarisWare/utils\ustdlib.c ****                     // Determine the length of the string.
 379:C:/StellarisWare/utils\ustdlib.c ****                     //
 380:C:/StellarisWare/utils\ustdlib.c ****                     for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
 455              		.loc 1 380 0
 456 02da 4FF00003 		mov	r3, #0
 457 02de FB62     		str	r3, [r7, #44]
 458 02e0 03E0     		b	.L30
 459              	.L31:
 460              		.loc 1 380 0 is_stmt 0 discriminator 2
 461 02e2 FB6A     		ldr	r3, [r7, #44]
 462 02e4 03F10103 		add	r3, r3, #1
 463 02e8 FB62     		str	r3, [r7, #44]
 464              	.L30:
 465              		.loc 1 380 0 discriminator 1
 466 02ea 3A69     		ldr	r2, [r7, #16]
 467 02ec FB6A     		ldr	r3, [r7, #44]
 468 02ee D318     		adds	r3, r2, r3
 469 02f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 470 02f2 002B     		cmp	r3, #0
 471 02f4 F5D1     		bne	.L31
 381:C:/StellarisWare/utils\ustdlib.c ****                     {
 382:C:/StellarisWare/utils\ustdlib.c ****                     }
 383:C:/StellarisWare/utils\ustdlib.c **** 
 384:C:/StellarisWare/utils\ustdlib.c ****                     //
 385:C:/StellarisWare/utils\ustdlib.c ****                     // Update the convert count to include any padding that
 386:C:/StellarisWare/utils\ustdlib.c ****                     // should be necessary (regardless of whether we have space
 387:C:/StellarisWare/utils\ustdlib.c ****                     // to write it or not).
 388:C:/StellarisWare/utils\ustdlib.c ****                     //
 389:C:/StellarisWare/utils\ustdlib.c ****                     if(ulCount > ulIdx)
 472              		.loc 1 389 0 is_stmt 1
 473 02f6 7A6A     		ldr	r2, [r7, #36]
 474 02f8 FB6A     		ldr	r3, [r7, #44]
 475 02fa 9A42     		cmp	r2, r3
 476 02fc 05D9     		bls	.L32
 390:C:/StellarisWare/utils\ustdlib.c ****                     {
 391:C:/StellarisWare/utils\ustdlib.c ****                         iConvertCount += (ulCount - ulIdx);
 477              		.loc 1 391 0
 478 02fe 7A6A     		ldr	r2, [r7, #36]
 479 0300 FB6A     		ldr	r3, [r7, #44]
 480 0302 D21A     		subs	r2, r2, r3
 481 0304 7B69     		ldr	r3, [r7, #20]
 482 0306 D318     		adds	r3, r2, r3
 483 0308 7B61     		str	r3, [r7, #20]
 484              	.L32:
 392:C:/StellarisWare/utils\ustdlib.c ****                     }
 393:C:/StellarisWare/utils\ustdlib.c **** 
 394:C:/StellarisWare/utils\ustdlib.c ****                     //
 395:C:/StellarisWare/utils\ustdlib.c ****                     // Copy the string to the output buffer.  Only copy as much
 396:C:/StellarisWare/utils\ustdlib.c ****                     // as will fit in the buffer.  Update the output buffer
 397:C:/StellarisWare/utils\ustdlib.c ****                     // pointer and the space remaining.
 398:C:/StellarisWare/utils\ustdlib.c ****                     //
 399:C:/StellarisWare/utils\ustdlib.c ****                     if(ulIdx > ulSize)
 485              		.loc 1 399 0
 486 030a FA6A     		ldr	r2, [r7, #44]
 487 030c BB68     		ldr	r3, [r7, #8]
 488 030e 9A42     		cmp	r2, r3
 489 0310 0DD9     		bls	.L33
 400:C:/StellarisWare/utils\ustdlib.c ****                     {
 401:C:/StellarisWare/utils\ustdlib.c ****                         ustrncpy(pcBuf, pcStr, ulSize);
 490              		.loc 1 401 0
 491 0312 BB68     		ldr	r3, [r7, #8]
 492 0314 F868     		ldr	r0, [r7, #12]
 493 0316 3969     		ldr	r1, [r7, #16]
 494 0318 1A46     		mov	r2, r3
 495 031a FFF7FEFF 		bl	ustrncpy
 402:C:/StellarisWare/utils\ustdlib.c ****                         pcBuf += ulSize;
 496              		.loc 1 402 0
 497 031e FA68     		ldr	r2, [r7, #12]
 498 0320 BB68     		ldr	r3, [r7, #8]
 499 0322 D318     		adds	r3, r2, r3
 500 0324 FB60     		str	r3, [r7, #12]
 403:C:/StellarisWare/utils\ustdlib.c ****                         ulSize = 0;
 501              		.loc 1 403 0
 502 0326 4FF00003 		mov	r3, #0
 503 032a BB60     		str	r3, [r7, #8]
 504 032c 34E0     		b	.L34
 505              	.L33:
 404:C:/StellarisWare/utils\ustdlib.c ****                     }
 405:C:/StellarisWare/utils\ustdlib.c ****                     else
 406:C:/StellarisWare/utils\ustdlib.c ****                     {
 407:C:/StellarisWare/utils\ustdlib.c ****                         ustrncpy(pcBuf, pcStr, ulIdx);
 506              		.loc 1 407 0
 507 032e FB6A     		ldr	r3, [r7, #44]
 508 0330 F868     		ldr	r0, [r7, #12]
 509 0332 3969     		ldr	r1, [r7, #16]
 510 0334 1A46     		mov	r2, r3
 511 0336 FFF7FEFF 		bl	ustrncpy
 408:C:/StellarisWare/utils\ustdlib.c ****                         pcBuf += ulIdx;
 512              		.loc 1 408 0
 513 033a FA68     		ldr	r2, [r7, #12]
 514 033c FB6A     		ldr	r3, [r7, #44]
 515 033e D318     		adds	r3, r2, r3
 516 0340 FB60     		str	r3, [r7, #12]
 409:C:/StellarisWare/utils\ustdlib.c ****                         ulSize -= ulIdx;
 517              		.loc 1 409 0
 518 0342 BA68     		ldr	r2, [r7, #8]
 519 0344 FB6A     		ldr	r3, [r7, #44]
 520 0346 D31A     		subs	r3, r2, r3
 521 0348 BB60     		str	r3, [r7, #8]
 410:C:/StellarisWare/utils\ustdlib.c **** 
 411:C:/StellarisWare/utils\ustdlib.c ****                         //
 412:C:/StellarisWare/utils\ustdlib.c ****                         // Write any required padding spaces assuming there is
 413:C:/StellarisWare/utils\ustdlib.c ****                         // still space in the buffer.
 414:C:/StellarisWare/utils\ustdlib.c ****                         //
 415:C:/StellarisWare/utils\ustdlib.c ****                         if(ulCount > ulIdx)
 522              		.loc 1 415 0
 523 034a 7A6A     		ldr	r2, [r7, #36]
 524 034c FB6A     		ldr	r3, [r7, #44]
 525 034e 9A42     		cmp	r2, r3
 526 0350 22D9     		bls	.L34
 416:C:/StellarisWare/utils\ustdlib.c ****                         {
 417:C:/StellarisWare/utils\ustdlib.c ****                             ulCount -= ulIdx;
 527              		.loc 1 417 0
 528 0352 7A6A     		ldr	r2, [r7, #36]
 529 0354 FB6A     		ldr	r3, [r7, #44]
 530 0356 D31A     		subs	r3, r2, r3
 531 0358 7B62     		str	r3, [r7, #36]
 418:C:/StellarisWare/utils\ustdlib.c ****                             if(ulCount > ulSize)
 532              		.loc 1 418 0
 533 035a 7A6A     		ldr	r2, [r7, #36]
 534 035c BB68     		ldr	r3, [r7, #8]
 535 035e 9A42     		cmp	r2, r3
 536 0360 01D9     		bls	.L35
 419:C:/StellarisWare/utils\ustdlib.c ****                             {
 420:C:/StellarisWare/utils\ustdlib.c ****                                 ulCount = ulSize;
 537              		.loc 1 420 0
 538 0362 BB68     		ldr	r3, [r7, #8]
 539 0364 7B62     		str	r3, [r7, #36]
 540              	.L35:
 421:C:/StellarisWare/utils\ustdlib.c ****                             }
 422:C:/StellarisWare/utils\ustdlib.c ****                             ulSize =- ulCount;
 541              		.loc 1 422 0
 542 0366 7B6A     		ldr	r3, [r7, #36]
 543 0368 C3F10003 		rsb	r3, r3, #0
 544 036c BB60     		str	r3, [r7, #8]
 423:C:/StellarisWare/utils\ustdlib.c **** 
 424:C:/StellarisWare/utils\ustdlib.c ****                             while(ulCount--)
 545              		.loc 1 424 0
 546 036e 07E0     		b	.L36
 547              	.L37:
 425:C:/StellarisWare/utils\ustdlib.c ****                             {
 426:C:/StellarisWare/utils\ustdlib.c ****                                 *pcBuf++ = ' ';
 548              		.loc 1 426 0
 549 0370 FB68     		ldr	r3, [r7, #12]
 550 0372 4FF02002 		mov	r2, #32
 551 0376 1A70     		strb	r2, [r3, #0]
 552 0378 FB68     		ldr	r3, [r7, #12]
 553 037a 03F10103 		add	r3, r3, #1
 554 037e FB60     		str	r3, [r7, #12]
 555              	.L36:
 424:C:/StellarisWare/utils\ustdlib.c ****                             while(ulCount--)
 556              		.loc 1 424 0 discriminator 1
 557 0380 7B6A     		ldr	r3, [r7, #36]
 558 0382 002B     		cmp	r3, #0
 559 0384 0CBF     		ite	eq
 560 0386 0023     		moveq	r3, #0
 561 0388 0123     		movne	r3, #1
 562 038a DBB2     		uxtb	r3, r3
 563 038c 7A6A     		ldr	r2, [r7, #36]
 564 038e 02F1FF32 		add	r2, r2, #-1
 565 0392 7A62     		str	r2, [r7, #36]
 566 0394 002B     		cmp	r3, #0
 567 0396 EBD1     		bne	.L37
 568              	.L34:
 427:C:/StellarisWare/utils\ustdlib.c ****                             }
 428:C:/StellarisWare/utils\ustdlib.c ****                         }
 429:C:/StellarisWare/utils\ustdlib.c ****                     }
 430:C:/StellarisWare/utils\ustdlib.c **** 
 431:C:/StellarisWare/utils\ustdlib.c ****                     //
 432:C:/StellarisWare/utils\ustdlib.c ****                     // Update the conversion count.  This will be the number of
 433:C:/StellarisWare/utils\ustdlib.c ****                     // characters that should have been written, even if there
 434:C:/StellarisWare/utils\ustdlib.c ****                     // was not room in the buffer.
 435:C:/StellarisWare/utils\ustdlib.c ****                     //
 436:C:/StellarisWare/utils\ustdlib.c ****                     iConvertCount += ulIdx;
 569              		.loc 1 436 0
 570 0398 7A69     		ldr	r2, [r7, #20]
 571 039a FB6A     		ldr	r3, [r7, #44]
 572 039c D318     		adds	r3, r2, r3
 573 039e 7B61     		str	r3, [r7, #20]
 437:C:/StellarisWare/utils\ustdlib.c **** 
 438:C:/StellarisWare/utils\ustdlib.c ****                     //
 439:C:/StellarisWare/utils\ustdlib.c ****                     // This command has been handled.
 440:C:/StellarisWare/utils\ustdlib.c ****                     //
 441:C:/StellarisWare/utils\ustdlib.c ****                     break;
 574              		.loc 1 441 0
 575 03a0 01E1     		b	.L9
 576              	.L23:
 442:C:/StellarisWare/utils\ustdlib.c ****                 }
 443:C:/StellarisWare/utils\ustdlib.c **** 
 444:C:/StellarisWare/utils\ustdlib.c ****                 //
 445:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %u command.
 446:C:/StellarisWare/utils\ustdlib.c ****                 //
 447:C:/StellarisWare/utils\ustdlib.c ****                 case 'u':
 448:C:/StellarisWare/utils\ustdlib.c ****                 {
 449:C:/StellarisWare/utils\ustdlib.c ****                     //
 450:C:/StellarisWare/utils\ustdlib.c ****                     // Get the value from the varargs.
 451:C:/StellarisWare/utils\ustdlib.c ****                     //
 452:C:/StellarisWare/utils\ustdlib.c ****                     ulValue = va_arg(vaArgP, unsigned long);
 577              		.loc 1 452 0
 578 03a2 3B68     		ldr	r3, [r7, #0]
 579 03a4 03F10402 		add	r2, r3, #4
 580 03a8 3A60     		str	r2, [r7, #0]
 581 03aa 1B68     		ldr	r3, [r3, #0]
 582 03ac BB62     		str	r3, [r7, #40]
 453:C:/StellarisWare/utils\ustdlib.c **** 
 454:C:/StellarisWare/utils\ustdlib.c ****                     //
 455:C:/StellarisWare/utils\ustdlib.c ****                     // Set the base to 10.
 456:C:/StellarisWare/utils\ustdlib.c ****                     //
 457:C:/StellarisWare/utils\ustdlib.c ****                     ulBase = 10;
 583              		.loc 1 457 0
 584 03ae 4FF00A03 		mov	r3, #10
 585 03b2 3B62     		str	r3, [r7, #32]
 458:C:/StellarisWare/utils\ustdlib.c **** 
 459:C:/StellarisWare/utils\ustdlib.c ****                     //
 460:C:/StellarisWare/utils\ustdlib.c ****                     // Indicate that the value is positive so that a minus sign
 461:C:/StellarisWare/utils\ustdlib.c ****                     // isn't inserted.
 462:C:/StellarisWare/utils\ustdlib.c ****                     //
 463:C:/StellarisWare/utils\ustdlib.c ****                     ulNeg = 0;
 586              		.loc 1 463 0
 587 03b4 4FF00003 		mov	r3, #0
 588 03b8 FB61     		str	r3, [r7, #28]
 464:C:/StellarisWare/utils\ustdlib.c **** 
 465:C:/StellarisWare/utils\ustdlib.c ****                     //
 466:C:/StellarisWare/utils\ustdlib.c ****                     // Convert the value to ASCII.
 467:C:/StellarisWare/utils\ustdlib.c ****                     //
 468:C:/StellarisWare/utils\ustdlib.c ****                     goto convert;
 589              		.loc 1 468 0
 590 03ba 0BE0     		b	.L29
 591              	.L19:
 469:C:/StellarisWare/utils\ustdlib.c ****                 }
 470:C:/StellarisWare/utils\ustdlib.c **** 
 471:C:/StellarisWare/utils\ustdlib.c ****                 //
 472:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %x and %X commands.  Note that they are treated
 473:C:/StellarisWare/utils\ustdlib.c ****                 // identically; that is, %X will use lower case letters for a-f
 474:C:/StellarisWare/utils\ustdlib.c ****                 // instead of the upper case letters is should use.  We also
 475:C:/StellarisWare/utils\ustdlib.c ****                 // alias %p to %x.
 476:C:/StellarisWare/utils\ustdlib.c ****                 //
 477:C:/StellarisWare/utils\ustdlib.c ****                 case 'x':
 478:C:/StellarisWare/utils\ustdlib.c ****                 case 'X':
 479:C:/StellarisWare/utils\ustdlib.c ****                 case 'p':
 480:C:/StellarisWare/utils\ustdlib.c ****                 {
 481:C:/StellarisWare/utils\ustdlib.c ****                     //
 482:C:/StellarisWare/utils\ustdlib.c ****                     // Get the value from the varargs.
 483:C:/StellarisWare/utils\ustdlib.c ****                     //
 484:C:/StellarisWare/utils\ustdlib.c ****                     ulValue = va_arg(vaArgP, unsigned long);
 592              		.loc 1 484 0
 593 03bc 3B68     		ldr	r3, [r7, #0]
 594 03be 03F10402 		add	r2, r3, #4
 595 03c2 3A60     		str	r2, [r7, #0]
 596 03c4 1B68     		ldr	r3, [r3, #0]
 597 03c6 BB62     		str	r3, [r7, #40]
 485:C:/StellarisWare/utils\ustdlib.c **** 
 486:C:/StellarisWare/utils\ustdlib.c ****                     //
 487:C:/StellarisWare/utils\ustdlib.c ****                     // Set the base to 16.
 488:C:/StellarisWare/utils\ustdlib.c ****                     //
 489:C:/StellarisWare/utils\ustdlib.c ****                     ulBase = 16;
 598              		.loc 1 489 0
 599 03c8 4FF01003 		mov	r3, #16
 600 03cc 3B62     		str	r3, [r7, #32]
 490:C:/StellarisWare/utils\ustdlib.c **** 
 491:C:/StellarisWare/utils\ustdlib.c ****                     //
 492:C:/StellarisWare/utils\ustdlib.c ****                     // Indicate that the value is positive so that a minus sign
 493:C:/StellarisWare/utils\ustdlib.c ****                     // isn't inserted.
 494:C:/StellarisWare/utils\ustdlib.c ****                     //
 495:C:/StellarisWare/utils\ustdlib.c ****                     ulNeg = 0;
 601              		.loc 1 495 0
 602 03ce 4FF00003 		mov	r3, #0
 603 03d2 FB61     		str	r3, [r7, #28]
 604              	.L29:
 496:C:/StellarisWare/utils\ustdlib.c **** 
 497:C:/StellarisWare/utils\ustdlib.c ****                     //
 498:C:/StellarisWare/utils\ustdlib.c ****                     // Determine the number of digits in the string version of
 499:C:/StellarisWare/utils\ustdlib.c ****                     // the value.
 500:C:/StellarisWare/utils\ustdlib.c ****                     //
 501:C:/StellarisWare/utils\ustdlib.c **** convert:
 502:C:/StellarisWare/utils\ustdlib.c ****                     for(ulIdx = 1;
 605              		.loc 1 502 0
 606 03d4 4FF00103 		mov	r3, #1
 607 03d8 FB62     		str	r3, [r7, #44]
 608 03da 08E0     		b	.L38
 609              	.L40:
 503:C:/StellarisWare/utils\ustdlib.c ****                         (((ulIdx * ulBase) <= ulValue) &&
 504:C:/StellarisWare/utils\ustdlib.c ****                          (((ulIdx * ulBase) / ulBase) == ulIdx));
 505:C:/StellarisWare/utils\ustdlib.c ****                         ulIdx *= ulBase, ulCount--)
 610              		.loc 1 505 0
 611 03dc FB6A     		ldr	r3, [r7, #44]
 612 03de 3A6A     		ldr	r2, [r7, #32]
 613 03e0 02FB03F3 		mul	r3, r2, r3
 614 03e4 FB62     		str	r3, [r7, #44]
 615 03e6 7B6A     		ldr	r3, [r7, #36]
 616 03e8 03F1FF33 		add	r3, r3, #-1
 617 03ec 7B62     		str	r3, [r7, #36]
 618              	.L38:
 503:C:/StellarisWare/utils\ustdlib.c ****                         (((ulIdx * ulBase) <= ulValue) &&
 619              		.loc 1 503 0 discriminator 1
 620 03ee FB6A     		ldr	r3, [r7, #44]
 621 03f0 3A6A     		ldr	r2, [r7, #32]
 622 03f2 02FB03F2 		mul	r2, r2, r3
 502:C:/StellarisWare/utils\ustdlib.c ****                     for(ulIdx = 1;
 623              		.loc 1 502 0 discriminator 1
 624 03f6 BB6A     		ldr	r3, [r7, #40]
 625 03f8 9A42     		cmp	r2, r3
 626 03fa 09D8     		bhi	.L39
 504:C:/StellarisWare/utils\ustdlib.c ****                          (((ulIdx * ulBase) / ulBase) == ulIdx));
 627              		.loc 1 504 0
 628 03fc FB6A     		ldr	r3, [r7, #44]
 629 03fe 3A6A     		ldr	r2, [r7, #32]
 630 0400 02FB03F2 		mul	r2, r2, r3
 631 0404 3B6A     		ldr	r3, [r7, #32]
 632 0406 B2FBF3F2 		udiv	r2, r2, r3
 503:C:/StellarisWare/utils\ustdlib.c ****                         (((ulIdx * ulBase) <= ulValue) &&
 633              		.loc 1 503 0
 634 040a FB6A     		ldr	r3, [r7, #44]
 635 040c 9A42     		cmp	r2, r3
 636 040e E5D0     		beq	.L40
 637              	.L39:
 506:C:/StellarisWare/utils\ustdlib.c ****                     {
 507:C:/StellarisWare/utils\ustdlib.c ****                     }
 508:C:/StellarisWare/utils\ustdlib.c **** 
 509:C:/StellarisWare/utils\ustdlib.c ****                     //
 510:C:/StellarisWare/utils\ustdlib.c ****                     // If the value is negative, reduce the count of padding
 511:C:/StellarisWare/utils\ustdlib.c ****                     // characters needed.
 512:C:/StellarisWare/utils\ustdlib.c ****                     //
 513:C:/StellarisWare/utils\ustdlib.c ****                     if(ulNeg)
 638              		.loc 1 513 0
 639 0410 FB69     		ldr	r3, [r7, #28]
 640 0412 002B     		cmp	r3, #0
 641 0414 03D0     		beq	.L41
 514:C:/StellarisWare/utils\ustdlib.c ****                     {
 515:C:/StellarisWare/utils\ustdlib.c ****                         ulCount--;
 642              		.loc 1 515 0
 643 0416 7B6A     		ldr	r3, [r7, #36]
 644 0418 03F1FF33 		add	r3, r3, #-1
 645 041c 7B62     		str	r3, [r7, #36]
 646              	.L41:
 516:C:/StellarisWare/utils\ustdlib.c ****                     }
 517:C:/StellarisWare/utils\ustdlib.c **** 
 518:C:/StellarisWare/utils\ustdlib.c ****                     //
 519:C:/StellarisWare/utils\ustdlib.c ****                     // If the value is negative and the value is padded with
 520:C:/StellarisWare/utils\ustdlib.c ****                     // zeros, then place the minus sign before the padding.
 521:C:/StellarisWare/utils\ustdlib.c ****                     //
 522:C:/StellarisWare/utils\ustdlib.c ****                     if(ulNeg && (ulSize != 0) && (cFill == '0'))
 647              		.loc 1 522 0
 648 041e FB69     		ldr	r3, [r7, #28]
 649 0420 002B     		cmp	r3, #0
 650 0422 18D0     		beq	.L42
 651              		.loc 1 522 0 is_stmt 0 discriminator 1
 652 0424 BB68     		ldr	r3, [r7, #8]
 653 0426 002B     		cmp	r3, #0
 654 0428 15D0     		beq	.L42
 655 042a FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 656 042c 302B     		cmp	r3, #48
 657 042e 12D1     		bne	.L42
 523:C:/StellarisWare/utils\ustdlib.c ****                     {
 524:C:/StellarisWare/utils\ustdlib.c ****                         //
 525:C:/StellarisWare/utils\ustdlib.c ****                         // Place the minus sign in the output buffer.
 526:C:/StellarisWare/utils\ustdlib.c ****                         //
 527:C:/StellarisWare/utils\ustdlib.c ****                         *pcBuf++ = '-';
 658              		.loc 1 527 0 is_stmt 1
 659 0430 FB68     		ldr	r3, [r7, #12]
 660 0432 4FF02D02 		mov	r2, #45
 661 0436 1A70     		strb	r2, [r3, #0]
 662 0438 FB68     		ldr	r3, [r7, #12]
 663 043a 03F10103 		add	r3, r3, #1
 664 043e FB60     		str	r3, [r7, #12]
 528:C:/StellarisWare/utils\ustdlib.c ****                         ulSize--;
 665              		.loc 1 528 0
 666 0440 BB68     		ldr	r3, [r7, #8]
 667 0442 03F1FF33 		add	r3, r3, #-1
 668 0446 BB60     		str	r3, [r7, #8]
 529:C:/StellarisWare/utils\ustdlib.c **** 
 530:C:/StellarisWare/utils\ustdlib.c ****                         //
 531:C:/StellarisWare/utils\ustdlib.c ****                         // Update the conversion count.
 532:C:/StellarisWare/utils\ustdlib.c ****                         //
 533:C:/StellarisWare/utils\ustdlib.c ****                         iConvertCount++;
 669              		.loc 1 533 0
 670 0448 7B69     		ldr	r3, [r7, #20]
 671 044a 03F10103 		add	r3, r3, #1
 672 044e 7B61     		str	r3, [r7, #20]
 534:C:/StellarisWare/utils\ustdlib.c **** 
 535:C:/StellarisWare/utils\ustdlib.c ****                         //
 536:C:/StellarisWare/utils\ustdlib.c ****                         // The minus sign has been placed, so turn off the
 537:C:/StellarisWare/utils\ustdlib.c ****                         // negative flag.
 538:C:/StellarisWare/utils\ustdlib.c ****                         //
 539:C:/StellarisWare/utils\ustdlib.c ****                         ulNeg = 0;
 673              		.loc 1 539 0
 674 0450 4FF00003 		mov	r3, #0
 675 0454 FB61     		str	r3, [r7, #28]
 676              	.L42:
 540:C:/StellarisWare/utils\ustdlib.c ****                     }
 541:C:/StellarisWare/utils\ustdlib.c **** 
 542:C:/StellarisWare/utils\ustdlib.c ****                     //
 543:C:/StellarisWare/utils\ustdlib.c ****                     // See if there are more characters in the specified field
 544:C:/StellarisWare/utils\ustdlib.c ****                     // width than there are in the conversion of this value.
 545:C:/StellarisWare/utils\ustdlib.c ****                     //
 546:C:/StellarisWare/utils\ustdlib.c ****                     if((ulCount > 1) && (ulCount < 65536))
 677              		.loc 1 546 0
 678 0456 7B6A     		ldr	r3, [r7, #36]
 679 0458 012B     		cmp	r3, #1
 680 045a 22D9     		bls	.L43
 681              		.loc 1 546 0 is_stmt 0 discriminator 1
 682 045c 7A6A     		ldr	r2, [r7, #36]
 683 045e 4FF6FF73 		movw	r3, #65535
 684 0462 9A42     		cmp	r2, r3
 685 0464 1DD8     		bhi	.L43
 547:C:/StellarisWare/utils\ustdlib.c ****                     {
 548:C:/StellarisWare/utils\ustdlib.c ****                         //
 549:C:/StellarisWare/utils\ustdlib.c ****                         // Loop through the required padding characters.
 550:C:/StellarisWare/utils\ustdlib.c ****                         //
 551:C:/StellarisWare/utils\ustdlib.c ****                         for(ulCount--; ulCount; ulCount--)
 686              		.loc 1 551 0 is_stmt 1
 687 0466 7B6A     		ldr	r3, [r7, #36]
 688 0468 03F1FF33 		add	r3, r3, #-1
 689 046c 7B62     		str	r3, [r7, #36]
 690 046e 15E0     		b	.L44
 691              	.L46:
 552:C:/StellarisWare/utils\ustdlib.c ****                         {
 553:C:/StellarisWare/utils\ustdlib.c ****                             //
 554:C:/StellarisWare/utils\ustdlib.c ****                             // Copy the character to the output buffer if there
 555:C:/StellarisWare/utils\ustdlib.c ****                             // is room.
 556:C:/StellarisWare/utils\ustdlib.c ****                             //
 557:C:/StellarisWare/utils\ustdlib.c ****                             if(ulSize != 0)
 692              		.loc 1 557 0
 693 0470 BB68     		ldr	r3, [r7, #8]
 694 0472 002B     		cmp	r3, #0
 695 0474 0AD0     		beq	.L45
 558:C:/StellarisWare/utils\ustdlib.c ****                             {
 559:C:/StellarisWare/utils\ustdlib.c ****                                 *pcBuf++ = cFill;
 696              		.loc 1 559 0
 697 0476 FB68     		ldr	r3, [r7, #12]
 698 0478 FA7E     		ldrb	r2, [r7, #27]
 699 047a 1A70     		strb	r2, [r3, #0]
 700 047c FB68     		ldr	r3, [r7, #12]
 701 047e 03F10103 		add	r3, r3, #1
 702 0482 FB60     		str	r3, [r7, #12]
 560:C:/StellarisWare/utils\ustdlib.c ****                                 ulSize--;
 703              		.loc 1 560 0
 704 0484 BB68     		ldr	r3, [r7, #8]
 705 0486 03F1FF33 		add	r3, r3, #-1
 706 048a BB60     		str	r3, [r7, #8]
 707              	.L45:
 561:C:/StellarisWare/utils\ustdlib.c ****                             }
 562:C:/StellarisWare/utils\ustdlib.c **** 
 563:C:/StellarisWare/utils\ustdlib.c ****                             //
 564:C:/StellarisWare/utils\ustdlib.c ****                             // Update the conversion count.
 565:C:/StellarisWare/utils\ustdlib.c ****                             //
 566:C:/StellarisWare/utils\ustdlib.c ****                             iConvertCount++;
 708              		.loc 1 566 0
 709 048c 7B69     		ldr	r3, [r7, #20]
 710 048e 03F10103 		add	r3, r3, #1
 711 0492 7B61     		str	r3, [r7, #20]
 551:C:/StellarisWare/utils\ustdlib.c ****                         for(ulCount--; ulCount; ulCount--)
 712              		.loc 1 551 0
 713 0494 7B6A     		ldr	r3, [r7, #36]
 714 0496 03F1FF33 		add	r3, r3, #-1
 715 049a 7B62     		str	r3, [r7, #36]
 716              	.L44:
 551:C:/StellarisWare/utils\ustdlib.c ****                         for(ulCount--; ulCount; ulCount--)
 717              		.loc 1 551 0 is_stmt 0 discriminator 1
 718 049c 7B6A     		ldr	r3, [r7, #36]
 719 049e 002B     		cmp	r3, #0
 720 04a0 E6D1     		bne	.L46
 721              	.L43:
 567:C:/StellarisWare/utils\ustdlib.c ****                         }
 568:C:/StellarisWare/utils\ustdlib.c ****                     }
 569:C:/StellarisWare/utils\ustdlib.c **** 
 570:C:/StellarisWare/utils\ustdlib.c ****                     //
 571:C:/StellarisWare/utils\ustdlib.c ****                     // If the value is negative, then place the minus sign
 572:C:/StellarisWare/utils\ustdlib.c ****                     // before the number.
 573:C:/StellarisWare/utils\ustdlib.c ****                     //
 574:C:/StellarisWare/utils\ustdlib.c ****                     if(ulNeg && (ulSize != 0))
 722              		.loc 1 574 0 is_stmt 1
 723 04a2 FB69     		ldr	r3, [r7, #28]
 724 04a4 002B     		cmp	r3, #0
 725 04a6 3BD0     		beq	.L48
 726              		.loc 1 574 0 is_stmt 0 discriminator 1
 727 04a8 BB68     		ldr	r3, [r7, #8]
 728 04aa 002B     		cmp	r3, #0
 729 04ac 38D0     		beq	.L48
 575:C:/StellarisWare/utils\ustdlib.c ****                     {
 576:C:/StellarisWare/utils\ustdlib.c ****                         //
 577:C:/StellarisWare/utils\ustdlib.c ****                         // Place the minus sign in the output buffer.
 578:C:/StellarisWare/utils\ustdlib.c ****                         //
 579:C:/StellarisWare/utils\ustdlib.c ****                         *pcBuf++ = '-';
 730              		.loc 1 579 0 is_stmt 1
 731 04ae FB68     		ldr	r3, [r7, #12]
 732 04b0 4FF02D02 		mov	r2, #45
 733 04b4 1A70     		strb	r2, [r3, #0]
 734 04b6 FB68     		ldr	r3, [r7, #12]
 735 04b8 03F10103 		add	r3, r3, #1
 736 04bc FB60     		str	r3, [r7, #12]
 580:C:/StellarisWare/utils\ustdlib.c ****                         ulSize--;
 737              		.loc 1 580 0
 738 04be BB68     		ldr	r3, [r7, #8]
 739 04c0 03F1FF33 		add	r3, r3, #-1
 740 04c4 BB60     		str	r3, [r7, #8]
 581:C:/StellarisWare/utils\ustdlib.c **** 
 582:C:/StellarisWare/utils\ustdlib.c ****                         //
 583:C:/StellarisWare/utils\ustdlib.c ****                         // Update the conversion count.
 584:C:/StellarisWare/utils\ustdlib.c ****                         //
 585:C:/StellarisWare/utils\ustdlib.c ****                         iConvertCount++;
 741              		.loc 1 585 0
 742 04c6 7B69     		ldr	r3, [r7, #20]
 743 04c8 03F10103 		add	r3, r3, #1
 744 04cc 7B61     		str	r3, [r7, #20]
 586:C:/StellarisWare/utils\ustdlib.c ****                     }
 587:C:/StellarisWare/utils\ustdlib.c **** 
 588:C:/StellarisWare/utils\ustdlib.c ****                     //
 589:C:/StellarisWare/utils\ustdlib.c ****                     // Convert the value into a string.
 590:C:/StellarisWare/utils\ustdlib.c ****                     //
 591:C:/StellarisWare/utils\ustdlib.c ****                     for(; ulIdx; ulIdx /= ulBase)
 745              		.loc 1 591 0
 746 04ce 27E0     		b	.L48
 747              	.L50:
 592:C:/StellarisWare/utils\ustdlib.c ****                     {
 593:C:/StellarisWare/utils\ustdlib.c ****                         //
 594:C:/StellarisWare/utils\ustdlib.c ****                         // Copy the character to the output buffer if there is
 595:C:/StellarisWare/utils\ustdlib.c ****                         // room.
 596:C:/StellarisWare/utils\ustdlib.c ****                         //
 597:C:/StellarisWare/utils\ustdlib.c ****                         if(ulSize != 0)
 748              		.loc 1 597 0
 749 04d0 BB68     		ldr	r3, [r7, #8]
 750 04d2 002B     		cmp	r3, #0
 751 04d4 1BD0     		beq	.L49
 598:C:/StellarisWare/utils\ustdlib.c ****                         {
 599:C:/StellarisWare/utils\ustdlib.c ****                             *pcBuf++ = g_pcHex[(ulValue / ulIdx) % ulBase];
 752              		.loc 1 599 0
 753 04d6 40F20003 		movw	r3, #:lower16:g_pcHex
 754 04da C0F20003 		movt	r3, #:upper16:g_pcHex
 755 04de 1A68     		ldr	r2, [r3, #0]
 756 04e0 B96A     		ldr	r1, [r7, #40]
 757 04e2 FB6A     		ldr	r3, [r7, #44]
 758 04e4 B1FBF3F3 		udiv	r3, r1, r3
 759 04e8 396A     		ldr	r1, [r7, #32]
 760 04ea B3FBF1F1 		udiv	r1, r3, r1
 761 04ee 386A     		ldr	r0, [r7, #32]
 762 04f0 00FB01F1 		mul	r1, r0, r1
 763 04f4 5B1A     		subs	r3, r3, r1
 764 04f6 D318     		adds	r3, r2, r3
 765 04f8 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 766 04fa FB68     		ldr	r3, [r7, #12]
 767 04fc 1A70     		strb	r2, [r3, #0]
 768 04fe FB68     		ldr	r3, [r7, #12]
 769 0500 03F10103 		add	r3, r3, #1
 770 0504 FB60     		str	r3, [r7, #12]
 600:C:/StellarisWare/utils\ustdlib.c ****                             ulSize--;
 771              		.loc 1 600 0
 772 0506 BB68     		ldr	r3, [r7, #8]
 773 0508 03F1FF33 		add	r3, r3, #-1
 774 050c BB60     		str	r3, [r7, #8]
 775              	.L49:
 601:C:/StellarisWare/utils\ustdlib.c ****                         }
 602:C:/StellarisWare/utils\ustdlib.c **** 
 603:C:/StellarisWare/utils\ustdlib.c ****                         //
 604:C:/StellarisWare/utils\ustdlib.c ****                         // Update the conversion count.
 605:C:/StellarisWare/utils\ustdlib.c ****                         //
 606:C:/StellarisWare/utils\ustdlib.c ****                         iConvertCount++;
 776              		.loc 1 606 0
 777 050e 7B69     		ldr	r3, [r7, #20]
 778 0510 03F10103 		add	r3, r3, #1
 779 0514 7B61     		str	r3, [r7, #20]
 591:C:/StellarisWare/utils\ustdlib.c ****                     for(; ulIdx; ulIdx /= ulBase)
 780              		.loc 1 591 0
 781 0516 FA6A     		ldr	r2, [r7, #44]
 782 0518 3B6A     		ldr	r3, [r7, #32]
 783 051a B2FBF3F3 		udiv	r3, r2, r3
 784 051e FB62     		str	r3, [r7, #44]
 785              	.L48:
 591:C:/StellarisWare/utils\ustdlib.c ****                     for(; ulIdx; ulIdx /= ulBase)
 786              		.loc 1 591 0 is_stmt 0 discriminator 1
 787 0520 FB6A     		ldr	r3, [r7, #44]
 788 0522 002B     		cmp	r3, #0
 789 0524 D4D1     		bne	.L50
 607:C:/StellarisWare/utils\ustdlib.c ****                     }
 608:C:/StellarisWare/utils\ustdlib.c **** 
 609:C:/StellarisWare/utils\ustdlib.c ****                     //
 610:C:/StellarisWare/utils\ustdlib.c ****                     // This command has been handled.
 611:C:/StellarisWare/utils\ustdlib.c ****                     //
 612:C:/StellarisWare/utils\ustdlib.c ****                     break;
 790              		.loc 1 612 0 is_stmt 1
 791 0526 3EE0     		b	.L9
 792              	.L17:
 613:C:/StellarisWare/utils\ustdlib.c ****                 }
 614:C:/StellarisWare/utils\ustdlib.c **** 
 615:C:/StellarisWare/utils\ustdlib.c ****                 //
 616:C:/StellarisWare/utils\ustdlib.c ****                 // Handle the %% command.
 617:C:/StellarisWare/utils\ustdlib.c ****                 //
 618:C:/StellarisWare/utils\ustdlib.c ****                 case '%':
 619:C:/StellarisWare/utils\ustdlib.c ****                 {
 620:C:/StellarisWare/utils\ustdlib.c ****                     //
 621:C:/StellarisWare/utils\ustdlib.c ****                     // Simply write a single %.
 622:C:/StellarisWare/utils\ustdlib.c ****                     //
 623:C:/StellarisWare/utils\ustdlib.c ****                     if(ulSize != 0)
 793              		.loc 1 623 0
 794 0528 BB68     		ldr	r3, [r7, #8]
 795 052a 002B     		cmp	r3, #0
 796 052c 0CD0     		beq	.L51
 624:C:/StellarisWare/utils\ustdlib.c ****                     {
 625:C:/StellarisWare/utils\ustdlib.c ****                         *pcBuf++ = pcString[-1];
 797              		.loc 1 625 0
 798 052e 7B68     		ldr	r3, [r7, #4]
 799 0530 13F8012C 		ldrb	r2, [r3, #-1]	@ zero_extendqisi2
 800 0534 FB68     		ldr	r3, [r7, #12]
 801 0536 1A70     		strb	r2, [r3, #0]
 802 0538 FB68     		ldr	r3, [r7, #12]
 803 053a 03F10103 		add	r3, r3, #1
 804 053e FB60     		str	r3, [r7, #12]
 626:C:/StellarisWare/utils\ustdlib.c ****                         ulSize--;
 805              		.loc 1 626 0
 806 0540 BB68     		ldr	r3, [r7, #8]
 807 0542 03F1FF33 		add	r3, r3, #-1
 808 0546 BB60     		str	r3, [r7, #8]
 809              	.L51:
 627:C:/StellarisWare/utils\ustdlib.c ****                     }
 628:C:/StellarisWare/utils\ustdlib.c **** 
 629:C:/StellarisWare/utils\ustdlib.c ****                     //
 630:C:/StellarisWare/utils\ustdlib.c ****                     // Update the conversion count.
 631:C:/StellarisWare/utils\ustdlib.c ****                     //
 632:C:/StellarisWare/utils\ustdlib.c ****                     iConvertCount++;
 810              		.loc 1 632 0
 811 0548 7B69     		ldr	r3, [r7, #20]
 812 054a 03F10103 		add	r3, r3, #1
 813 054e 7B61     		str	r3, [r7, #20]
 633:C:/StellarisWare/utils\ustdlib.c **** 
 634:C:/StellarisWare/utils\ustdlib.c ****                     //
 635:C:/StellarisWare/utils\ustdlib.c ****                     // This command has been handled.
 636:C:/StellarisWare/utils\ustdlib.c ****                     //
 637:C:/StellarisWare/utils\ustdlib.c ****                     break;
 814              		.loc 1 637 0
 815 0550 29E0     		b	.L9
 816              	.L16:
 638:C:/StellarisWare/utils\ustdlib.c ****                 }
 639:C:/StellarisWare/utils\ustdlib.c **** 
 640:C:/StellarisWare/utils\ustdlib.c ****                 //
 641:C:/StellarisWare/utils\ustdlib.c ****                 // Handle all other commands.
 642:C:/StellarisWare/utils\ustdlib.c ****                 //
 643:C:/StellarisWare/utils\ustdlib.c ****                 default:
 644:C:/StellarisWare/utils\ustdlib.c ****                 {
 645:C:/StellarisWare/utils\ustdlib.c ****                     //
 646:C:/StellarisWare/utils\ustdlib.c ****                     // Indicate an error.
 647:C:/StellarisWare/utils\ustdlib.c ****                     //
 648:C:/StellarisWare/utils\ustdlib.c ****                     if(ulSize >= 5)
 817              		.loc 1 648 0
 818 0552 BB68     		ldr	r3, [r7, #8]
 819 0554 042B     		cmp	r3, #4
 820 0556 11D9     		bls	.L52
 649:C:/StellarisWare/utils\ustdlib.c ****                     {
 650:C:/StellarisWare/utils\ustdlib.c ****                         ustrncpy(pcBuf, "ERROR", 5);
 821              		.loc 1 650 0
 822 0558 F868     		ldr	r0, [r7, #12]
 823 055a 40F20001 		movw	r1, #:lower16:.LC1
 824 055e C0F20001 		movt	r1, #:upper16:.LC1
 825 0562 4FF00502 		mov	r2, #5
 826 0566 FFF7FEFF 		bl	ustrncpy
 651:C:/StellarisWare/utils\ustdlib.c ****                         pcBuf += 5;
 827              		.loc 1 651 0
 828 056a FB68     		ldr	r3, [r7, #12]
 829 056c 03F10503 		add	r3, r3, #5
 830 0570 FB60     		str	r3, [r7, #12]
 652:C:/StellarisWare/utils\ustdlib.c ****                         ulSize -= 5;
 831              		.loc 1 652 0
 832 0572 BB68     		ldr	r3, [r7, #8]
 833 0574 A3F10503 		sub	r3, r3, #5
 834 0578 BB60     		str	r3, [r7, #8]
 835 057a 0FE0     		b	.L53
 836              	.L52:
 653:C:/StellarisWare/utils\ustdlib.c ****                     }
 654:C:/StellarisWare/utils\ustdlib.c ****                     else
 655:C:/StellarisWare/utils\ustdlib.c ****                     {
 656:C:/StellarisWare/utils\ustdlib.c ****                         ustrncpy(pcBuf, "ERROR", ulSize);
 837              		.loc 1 656 0
 838 057c BB68     		ldr	r3, [r7, #8]
 839 057e F868     		ldr	r0, [r7, #12]
 840 0580 40F20001 		movw	r1, #:lower16:.LC1
 841 0584 C0F20001 		movt	r1, #:upper16:.LC1
 842 0588 1A46     		mov	r2, r3
 843 058a FFF7FEFF 		bl	ustrncpy
 657:C:/StellarisWare/utils\ustdlib.c ****                         pcBuf += ulSize;
 844              		.loc 1 657 0
 845 058e FA68     		ldr	r2, [r7, #12]
 846 0590 BB68     		ldr	r3, [r7, #8]
 847 0592 D318     		adds	r3, r2, r3
 848 0594 FB60     		str	r3, [r7, #12]
 658:C:/StellarisWare/utils\ustdlib.c ****                         ulSize = 0;
 849              		.loc 1 658 0
 850 0596 4FF00003 		mov	r3, #0
 851 059a BB60     		str	r3, [r7, #8]
 852              	.L53:
 659:C:/StellarisWare/utils\ustdlib.c ****                     }
 660:C:/StellarisWare/utils\ustdlib.c **** 
 661:C:/StellarisWare/utils\ustdlib.c ****                     //
 662:C:/StellarisWare/utils\ustdlib.c ****                     // Update the conversion count.
 663:C:/StellarisWare/utils\ustdlib.c ****                     //
 664:C:/StellarisWare/utils\ustdlib.c ****                     iConvertCount += 5;
 853              		.loc 1 664 0
 854 059c 7B69     		ldr	r3, [r7, #20]
 855 059e 03F10503 		add	r3, r3, #5
 856 05a2 7B61     		str	r3, [r7, #20]
 665:C:/StellarisWare/utils\ustdlib.c **** 
 666:C:/StellarisWare/utils\ustdlib.c ****                     //
 667:C:/StellarisWare/utils\ustdlib.c ****                     // This command has been handled.
 668:C:/StellarisWare/utils\ustdlib.c ****                     //
 669:C:/StellarisWare/utils\ustdlib.c ****                     break;
 857              		.loc 1 669 0
 858 05a4 00BF     		nop
 859              	.L9:
 186:C:/StellarisWare/utils\ustdlib.c ****     while(*pcString)
 860              		.loc 1 186 0 discriminator 1
 861 05a6 7B68     		ldr	r3, [r7, #4]
 862 05a8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 863 05aa 002B     		cmp	r3, #0
 864 05ac 7FF43DAD 		bne	.L54
 670:C:/StellarisWare/utils\ustdlib.c ****                 }
 671:C:/StellarisWare/utils\ustdlib.c ****             }
 672:C:/StellarisWare/utils\ustdlib.c ****         }
 673:C:/StellarisWare/utils\ustdlib.c ****     }
 674:C:/StellarisWare/utils\ustdlib.c **** 
 675:C:/StellarisWare/utils\ustdlib.c ****     //
 676:C:/StellarisWare/utils\ustdlib.c ****     // Null terminate the string in the buffer.
 677:C:/StellarisWare/utils\ustdlib.c ****     //
 678:C:/StellarisWare/utils\ustdlib.c ****     *pcBuf = 0;
 865              		.loc 1 678 0
 866 05b0 FB68     		ldr	r3, [r7, #12]
 867 05b2 4FF00002 		mov	r2, #0
 868 05b6 1A70     		strb	r2, [r3, #0]
 679:C:/StellarisWare/utils\ustdlib.c **** 
 680:C:/StellarisWare/utils\ustdlib.c ****     //
 681:C:/StellarisWare/utils\ustdlib.c ****     // Return the number of characters in the full converted string.
 682:C:/StellarisWare/utils\ustdlib.c ****     //
 683:C:/StellarisWare/utils\ustdlib.c ****     return(iConvertCount);
 869              		.loc 1 683 0
 870 05b8 7B69     		ldr	r3, [r7, #20]
 684:C:/StellarisWare/utils\ustdlib.c **** }
 871              		.loc 1 684 0
 872 05ba 1846     		mov	r0, r3
 873 05bc 07F13007 		add	r7, r7, #48
 874 05c0 BD46     		mov	sp, r7
 875 05c2 80BD     		pop	{r7, pc}
 876              		.cfi_endproc
 877              	.LFE1:
 879              		.section	.text.usprintf,"ax",%progbits
 880              		.align	2
 881              		.global	usprintf
 882              		.thumb
 883              		.thumb_func
 885              	usprintf:
 886              	.LFB2:
 685:C:/StellarisWare/utils\ustdlib.c **** 
 686:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 687:C:/StellarisWare/utils\ustdlib.c **** //
 688:C:/StellarisWare/utils\ustdlib.c **** //! A simple sprintf function supporting \%c, \%d, \%p, \%s, \%u, \%x, and \%X.
 689:C:/StellarisWare/utils\ustdlib.c **** //!
 690:C:/StellarisWare/utils\ustdlib.c **** //! \param pcBuf is the buffer where the converted string is stored.
 691:C:/StellarisWare/utils\ustdlib.c **** //! \param pcString is the format string.
 692:C:/StellarisWare/utils\ustdlib.c **** //! \param ... are the optional arguments, which depend on the contents of the
 693:C:/StellarisWare/utils\ustdlib.c **** //! format string.
 694:C:/StellarisWare/utils\ustdlib.c **** //!
 695:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>sprintf()</tt> function.
 696:C:/StellarisWare/utils\ustdlib.c **** //! Only the following formatting characters are supported:
 697:C:/StellarisWare/utils\ustdlib.c **** //!
 698:C:/StellarisWare/utils\ustdlib.c **** //! - \%c to print a character
 699:C:/StellarisWare/utils\ustdlib.c **** //! - \%d to print a decimal value
 700:C:/StellarisWare/utils\ustdlib.c **** //! - \%s to print a string
 701:C:/StellarisWare/utils\ustdlib.c **** //! - \%u to print an unsigned decimal value
 702:C:/StellarisWare/utils\ustdlib.c **** //! - \%x to print a hexadecimal value using lower case letters
 703:C:/StellarisWare/utils\ustdlib.c **** //! - \%X to print a hexadecimal value using lower case letters (not upper case
 704:C:/StellarisWare/utils\ustdlib.c **** //! letters as would typically be used)
 705:C:/StellarisWare/utils\ustdlib.c **** //! - \%p to print a pointer as a hexadecimal value
 706:C:/StellarisWare/utils\ustdlib.c **** //! - \%\% to print out a \% character
 707:C:/StellarisWare/utils\ustdlib.c **** //!
 708:C:/StellarisWare/utils\ustdlib.c **** //! For \%d, \%p, \%s, \%u, \%x, and \%X, an optional number may reside between
 709:C:/StellarisWare/utils\ustdlib.c **** //! the \% and the format character, which specifies the minimum number of
 710:C:/StellarisWare/utils\ustdlib.c **** //! characters to use for that value; if preceded by a 0 then the extra
 711:C:/StellarisWare/utils\ustdlib.c **** //! characters will be filled with zeros instead of spaces.  For example,
 712:C:/StellarisWare/utils\ustdlib.c **** //! ``\%8d'' will use eight characters to print the decimal value with spaces
 713:C:/StellarisWare/utils\ustdlib.c **** //! added to reach eight; ``\%08d'' will use eight characters as well but will
 714:C:/StellarisWare/utils\ustdlib.c **** //! add zeros instead of spaces.
 715:C:/StellarisWare/utils\ustdlib.c **** //!
 716:C:/StellarisWare/utils\ustdlib.c **** //! The type of the arguments after \e pcString must match the requirements of
 717:C:/StellarisWare/utils\ustdlib.c **** //! the format string.  For example, if an integer was passed where a string
 718:C:/StellarisWare/utils\ustdlib.c **** //! was expected, an error of some kind will most likely occur.
 719:C:/StellarisWare/utils\ustdlib.c **** //!
 720:C:/StellarisWare/utils\ustdlib.c **** //! The caller must ensure that the buffer \e pcBuf is large enough to hold the
 721:C:/StellarisWare/utils\ustdlib.c **** //! entire converted string, including the null termination character.
 722:C:/StellarisWare/utils\ustdlib.c **** //!
 723:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the count of characters that were written to the output
 724:C:/StellarisWare/utils\ustdlib.c **** //! buffer, not including the NULL termination character.
 725:C:/StellarisWare/utils\ustdlib.c **** //
 726:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 727:C:/StellarisWare/utils\ustdlib.c **** int
 728:C:/StellarisWare/utils\ustdlib.c **** usprintf(char *pcBuf, const char *pcString, ...)
 729:C:/StellarisWare/utils\ustdlib.c **** {
 887              		.loc 1 729 0
 888              		.cfi_startproc
 889              		@ args = 4, pretend = 12, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 1
 891 0000 0EB4     		push	{r1, r2, r3}
 892              	.LCFI6:
 893              		.cfi_def_cfa_offset 12
 894              		.cfi_offset 3, -4
 895              		.cfi_offset 2, -8
 896              		.cfi_offset 1, -12
 897 0002 80B5     		push	{r7, lr}
 898              	.LCFI7:
 899              		.cfi_def_cfa_offset 20
 900              		.cfi_offset 14, -16
 901              		.cfi_offset 7, -20
 902 0004 85B0     		sub	sp, sp, #20
 903              	.LCFI8:
 904              		.cfi_def_cfa_offset 40
 905 0006 00AF     		add	r7, sp, #0
 906              	.LCFI9:
 907              		.cfi_def_cfa_register 7
 908 0008 7860     		str	r0, [r7, #4]
 730:C:/StellarisWare/utils\ustdlib.c ****     va_list vaArgP;
 731:C:/StellarisWare/utils\ustdlib.c ****     int iRet;
 732:C:/StellarisWare/utils\ustdlib.c **** 
 733:C:/StellarisWare/utils\ustdlib.c ****     //
 734:C:/StellarisWare/utils\ustdlib.c ****     // Start the varargs processing.
 735:C:/StellarisWare/utils\ustdlib.c ****     //
 736:C:/StellarisWare/utils\ustdlib.c ****     va_start(vaArgP, pcString);
 909              		.loc 1 736 0
 910 000a 07F12003 		add	r3, r7, #32
 911 000e BB60     		str	r3, [r7, #8]
 737:C:/StellarisWare/utils\ustdlib.c **** 
 738:C:/StellarisWare/utils\ustdlib.c ****     //
 739:C:/StellarisWare/utils\ustdlib.c ****     // Call vsnprintf to perform the conversion.  Use a large number for the
 740:C:/StellarisWare/utils\ustdlib.c ****     // buffer size.
 741:C:/StellarisWare/utils\ustdlib.c ****     //
 742:C:/StellarisWare/utils\ustdlib.c ****     iRet = uvsnprintf(pcBuf, 0xffff, pcString, vaArgP);
 912              		.loc 1 742 0
 913 0010 7868     		ldr	r0, [r7, #4]
 914 0012 4FF6FF71 		movw	r1, #65535
 915 0016 FA69     		ldr	r2, [r7, #28]
 916 0018 BB68     		ldr	r3, [r7, #8]
 917 001a FFF7FEFF 		bl	uvsnprintf
 918 001e F860     		str	r0, [r7, #12]
 743:C:/StellarisWare/utils\ustdlib.c **** 
 744:C:/StellarisWare/utils\ustdlib.c ****     //
 745:C:/StellarisWare/utils\ustdlib.c ****     // End the varargs processing.
 746:C:/StellarisWare/utils\ustdlib.c ****     //
 747:C:/StellarisWare/utils\ustdlib.c ****     va_end(vaArgP);
 748:C:/StellarisWare/utils\ustdlib.c **** 
 749:C:/StellarisWare/utils\ustdlib.c ****     //
 750:C:/StellarisWare/utils\ustdlib.c ****     // Return the conversion count.
 751:C:/StellarisWare/utils\ustdlib.c ****     //
 752:C:/StellarisWare/utils\ustdlib.c ****     return(iRet);
 919              		.loc 1 752 0
 920 0020 FB68     		ldr	r3, [r7, #12]
 753:C:/StellarisWare/utils\ustdlib.c **** }
 921              		.loc 1 753 0
 922 0022 1846     		mov	r0, r3
 923 0024 07F11407 		add	r7, r7, #20
 924 0028 BD46     		mov	sp, r7
 925 002a BDE88040 		pop	{r7, lr}
 926 002e 03B0     		add	sp, sp, #12
 927 0030 7047     		bx	lr
 928              		.cfi_endproc
 929              	.LFE2:
 931 0032 00BF     		.section	.text.usnprintf,"ax",%progbits
 932              		.align	2
 933              		.global	usnprintf
 934              		.thumb
 935              		.thumb_func
 937              	usnprintf:
 938              	.LFB3:
 754:C:/StellarisWare/utils\ustdlib.c **** 
 755:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 756:C:/StellarisWare/utils\ustdlib.c **** //
 757:C:/StellarisWare/utils\ustdlib.c **** //! A simple snprintf function supporting \%c, \%d, \%p, \%s, \%u, \%x, and
 758:C:/StellarisWare/utils\ustdlib.c **** //! \%X.
 759:C:/StellarisWare/utils\ustdlib.c **** //!
 760:C:/StellarisWare/utils\ustdlib.c **** //! \param pcBuf is the buffer where the converted string is stored.
 761:C:/StellarisWare/utils\ustdlib.c **** //! \param ulSize is the size of the buffer.
 762:C:/StellarisWare/utils\ustdlib.c **** //! \param pcString is the format string.
 763:C:/StellarisWare/utils\ustdlib.c **** //! \param ... are the optional arguments, which depend on the contents of the
 764:C:/StellarisWare/utils\ustdlib.c **** //! format string.
 765:C:/StellarisWare/utils\ustdlib.c **** //!
 766:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>sprintf()</tt> function.
 767:C:/StellarisWare/utils\ustdlib.c **** //! Only the following formatting characters are supported:
 768:C:/StellarisWare/utils\ustdlib.c **** //!
 769:C:/StellarisWare/utils\ustdlib.c **** //! - \%c to print a character
 770:C:/StellarisWare/utils\ustdlib.c **** //! - \%d to print a decimal value
 771:C:/StellarisWare/utils\ustdlib.c **** //! - \%s to print a string
 772:C:/StellarisWare/utils\ustdlib.c **** //! - \%u to print an unsigned decimal value
 773:C:/StellarisWare/utils\ustdlib.c **** //! - \%x to print a hexadecimal value using lower case letters
 774:C:/StellarisWare/utils\ustdlib.c **** //! - \%X to print a hexadecimal value using lower case letters (not upper case
 775:C:/StellarisWare/utils\ustdlib.c **** //! letters as would typically be used)
 776:C:/StellarisWare/utils\ustdlib.c **** //! - \%p to print a pointer as a hexadecimal value
 777:C:/StellarisWare/utils\ustdlib.c **** //! - \%\% to print out a \% character
 778:C:/StellarisWare/utils\ustdlib.c **** //!
 779:C:/StellarisWare/utils\ustdlib.c **** //! For \%d, \%p, \%s, \%u, \%x, and \%X, an optional number may reside between
 780:C:/StellarisWare/utils\ustdlib.c **** //! the \% and the format character, which specifies the minimum number of
 781:C:/StellarisWare/utils\ustdlib.c **** //! characters to use for that value; if preceded by a 0 then the extra
 782:C:/StellarisWare/utils\ustdlib.c **** //! characters will be filled with zeros instead of spaces.  For example,
 783:C:/StellarisWare/utils\ustdlib.c **** //! ``\%8d'' will use eight characters to print the decimal value with spaces
 784:C:/StellarisWare/utils\ustdlib.c **** //! added to reach eight; ``\%08d'' will use eight characters as well but will
 785:C:/StellarisWare/utils\ustdlib.c **** //! add zeros instead of spaces.
 786:C:/StellarisWare/utils\ustdlib.c **** //!
 787:C:/StellarisWare/utils\ustdlib.c **** //! The type of the arguments after \e pcString must match the requirements of
 788:C:/StellarisWare/utils\ustdlib.c **** //! the format string.  For example, if an integer was passed where a string
 789:C:/StellarisWare/utils\ustdlib.c **** //! was expected, an error of some kind will most likely occur.
 790:C:/StellarisWare/utils\ustdlib.c **** //!
 791:C:/StellarisWare/utils\ustdlib.c **** //! The function will copy at most \e ulSize - 1 characters into the buffer
 792:C:/StellarisWare/utils\ustdlib.c **** //! \e pcBuf.  One space is reserved in the buffer for the null termination
 793:C:/StellarisWare/utils\ustdlib.c **** //! character.
 794:C:/StellarisWare/utils\ustdlib.c **** //!
 795:C:/StellarisWare/utils\ustdlib.c **** //! The function will return the number of characters that would be converted
 796:C:/StellarisWare/utils\ustdlib.c **** //! as if there were no limit on the buffer size.  Therefore it is possible for
 797:C:/StellarisWare/utils\ustdlib.c **** //! the function to return a count that is greater than the specified buffer
 798:C:/StellarisWare/utils\ustdlib.c **** //! size.  If this happens, it means that the output was truncated.
 799:C:/StellarisWare/utils\ustdlib.c **** //!
 800:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the number of characters that were to be stored, not
 801:C:/StellarisWare/utils\ustdlib.c **** //! including the NULL termination character, regardless of space in the
 802:C:/StellarisWare/utils\ustdlib.c **** //! buffer.
 803:C:/StellarisWare/utils\ustdlib.c **** //
 804:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 805:C:/StellarisWare/utils\ustdlib.c **** int
 806:C:/StellarisWare/utils\ustdlib.c **** usnprintf(char *pcBuf, unsigned long ulSize, const char *pcString, ...)
 807:C:/StellarisWare/utils\ustdlib.c **** {
 939              		.loc 1 807 0
 940              		.cfi_startproc
 941              		@ args = 4, pretend = 8, frame = 16
 942              		@ frame_needed = 1, uses_anonymous_args = 1
 943 0000 0CB4     		push	{r2, r3}
 944              	.LCFI10:
 945              		.cfi_def_cfa_offset 8
 946              		.cfi_offset 3, -4
 947              		.cfi_offset 2, -8
 948 0002 80B5     		push	{r7, lr}
 949              	.LCFI11:
 950              		.cfi_def_cfa_offset 16
 951              		.cfi_offset 14, -12
 952              		.cfi_offset 7, -16
 953 0004 84B0     		sub	sp, sp, #16
 954              	.LCFI12:
 955              		.cfi_def_cfa_offset 32
 956 0006 00AF     		add	r7, sp, #0
 957              	.LCFI13:
 958              		.cfi_def_cfa_register 7
 959 0008 7860     		str	r0, [r7, #4]
 960 000a 3960     		str	r1, [r7, #0]
 808:C:/StellarisWare/utils\ustdlib.c ****     int iRet;
 809:C:/StellarisWare/utils\ustdlib.c ****     va_list vaArgP;
 810:C:/StellarisWare/utils\ustdlib.c **** 
 811:C:/StellarisWare/utils\ustdlib.c ****     //
 812:C:/StellarisWare/utils\ustdlib.c ****     // Start the varargs processing.
 813:C:/StellarisWare/utils\ustdlib.c ****     //
 814:C:/StellarisWare/utils\ustdlib.c ****     va_start(vaArgP, pcString);
 961              		.loc 1 814 0
 962 000c 07F11C03 		add	r3, r7, #28
 963 0010 BB60     		str	r3, [r7, #8]
 815:C:/StellarisWare/utils\ustdlib.c **** 
 816:C:/StellarisWare/utils\ustdlib.c ****     //
 817:C:/StellarisWare/utils\ustdlib.c ****     // Call vsnprintf to perform the conversion.
 818:C:/StellarisWare/utils\ustdlib.c ****     //
 819:C:/StellarisWare/utils\ustdlib.c ****     iRet = uvsnprintf(pcBuf, ulSize, pcString, vaArgP);
 964              		.loc 1 819 0
 965 0012 7868     		ldr	r0, [r7, #4]
 966 0014 3968     		ldr	r1, [r7, #0]
 967 0016 BA69     		ldr	r2, [r7, #24]
 968 0018 BB68     		ldr	r3, [r7, #8]
 969 001a FFF7FEFF 		bl	uvsnprintf
 970 001e F860     		str	r0, [r7, #12]
 820:C:/StellarisWare/utils\ustdlib.c **** 
 821:C:/StellarisWare/utils\ustdlib.c ****     //
 822:C:/StellarisWare/utils\ustdlib.c ****     // End the varargs processing.
 823:C:/StellarisWare/utils\ustdlib.c ****     //
 824:C:/StellarisWare/utils\ustdlib.c ****     va_end(vaArgP);
 825:C:/StellarisWare/utils\ustdlib.c **** 
 826:C:/StellarisWare/utils\ustdlib.c ****     //
 827:C:/StellarisWare/utils\ustdlib.c ****     // Return the conversion count.
 828:C:/StellarisWare/utils\ustdlib.c ****     //
 829:C:/StellarisWare/utils\ustdlib.c ****     return(iRet);
 971              		.loc 1 829 0
 972 0020 FB68     		ldr	r3, [r7, #12]
 830:C:/StellarisWare/utils\ustdlib.c **** }
 973              		.loc 1 830 0
 974 0022 1846     		mov	r0, r3
 975 0024 07F11007 		add	r7, r7, #16
 976 0028 BD46     		mov	sp, r7
 977 002a BDE88040 		pop	{r7, lr}
 978 002e 02B0     		add	sp, sp, #8
 979 0030 7047     		bx	lr
 980              		.cfi_endproc
 981              	.LFE3:
 983 0032 00BF     		.section	.rodata
 984 001e 0000     		.align	2
 987              	g_psDaysToMonth:
 988 0020 0000     		.short	0
 989 0022 1F00     		.short	31
 990 0024 3B00     		.short	59
 991 0026 5A00     		.short	90
 992 0028 7800     		.short	120
 993 002a 9700     		.short	151
 994 002c B500     		.short	181
 995 002e D400     		.short	212
 996 0030 F300     		.short	243
 997 0032 1101     		.short	273
 998 0034 3001     		.short	304
 999 0036 4E01     		.short	334
 1000              		.section	.text.ulocaltime,"ax",%progbits
 1001              		.align	2
 1002              		.global	ulocaltime
 1003              		.thumb
 1004              		.thumb_func
 1006              	ulocaltime:
 1007              	.LFB4:
 831:C:/StellarisWare/utils\ustdlib.c **** 
 832:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 833:C:/StellarisWare/utils\ustdlib.c **** //
 834:C:/StellarisWare/utils\ustdlib.c **** // This array contains the number of days in a year at the beginning of each
 835:C:/StellarisWare/utils\ustdlib.c **** // month of the year, in a non-leap year.
 836:C:/StellarisWare/utils\ustdlib.c **** //
 837:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 838:C:/StellarisWare/utils\ustdlib.c **** static const short g_psDaysToMonth[12] =
 839:C:/StellarisWare/utils\ustdlib.c **** {
 840:C:/StellarisWare/utils\ustdlib.c ****     0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334
 841:C:/StellarisWare/utils\ustdlib.c **** };
 842:C:/StellarisWare/utils\ustdlib.c **** 
 843:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 844:C:/StellarisWare/utils\ustdlib.c **** //
 845:C:/StellarisWare/utils\ustdlib.c **** //! Converts from seconds to calendar date and time.
 846:C:/StellarisWare/utils\ustdlib.c **** //!
 847:C:/StellarisWare/utils\ustdlib.c **** //! \param ulTime is the number of seconds.
 848:C:/StellarisWare/utils\ustdlib.c **** //! \param psTime is a pointer to the time structure that is filled in with the
 849:C:/StellarisWare/utils\ustdlib.c **** //! broken down date and time.
 850:C:/StellarisWare/utils\ustdlib.c **** //!
 851:C:/StellarisWare/utils\ustdlib.c **** //! This function converts a number of seconds since midnight GMT on January 1,
 852:C:/StellarisWare/utils\ustdlib.c **** //! 1970 (traditional Unix epoch) into the equivalent month, day, year, hours,
 853:C:/StellarisWare/utils\ustdlib.c **** //! minutes, and seconds representation.
 854:C:/StellarisWare/utils\ustdlib.c **** //!
 855:C:/StellarisWare/utils\ustdlib.c **** //! \return None.
 856:C:/StellarisWare/utils\ustdlib.c **** //
 857:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 858:C:/StellarisWare/utils\ustdlib.c **** void
 859:C:/StellarisWare/utils\ustdlib.c **** ulocaltime(unsigned long ulTime, tTime *psTime)
 860:C:/StellarisWare/utils\ustdlib.c **** {
 1008              		.loc 1 860 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013 0000 80B4     		push	{r7}
 1014              	.LCFI14:
 1015              		.cfi_def_cfa_offset 4
 1016              		.cfi_offset 7, -4
 1017 0002 85B0     		sub	sp, sp, #20
 1018              	.LCFI15:
 1019              		.cfi_def_cfa_offset 24
 1020 0004 00AF     		add	r7, sp, #0
 1021              	.LCFI16:
 1022              		.cfi_def_cfa_register 7
 1023 0006 7860     		str	r0, [r7, #4]
 1024 0008 3960     		str	r1, [r7, #0]
 861:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulTemp, ulMonths;
 862:C:/StellarisWare/utils\ustdlib.c **** 
 863:C:/StellarisWare/utils\ustdlib.c ****     //
 864:C:/StellarisWare/utils\ustdlib.c ****     // Extract the number of seconds, converting time to the number of minutes.
 865:C:/StellarisWare/utils\ustdlib.c ****     //
 866:C:/StellarisWare/utils\ustdlib.c ****     ulTemp = ulTime / 60;
 1025              		.loc 1 866 0
 1026 000a 7A68     		ldr	r2, [r7, #4]
 1027 000c 48F68903 		movw	r3, #34953
 1028 0010 C8F68803 		movt	r3, 34952
 1029 0014 A3FB0213 		umull	r1, r3, r3, r2
 1030 0018 4FEA5313 		lsr	r3, r3, #5
 1031 001c FB60     		str	r3, [r7, #12]
 867:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucSec = ulTime - (ulTemp * 60);
 1032              		.loc 1 867 0
 1033 001e 7B68     		ldr	r3, [r7, #4]
 1034 0020 DAB2     		uxtb	r2, r3
 1035 0022 FB68     		ldr	r3, [r7, #12]
 1036 0024 DBB2     		uxtb	r3, r3
 1037 0026 1946     		mov	r1, r3
 1038 0028 4FEA0111 		lsl	r1, r1, #4
 1039 002c CB1A     		subs	r3, r1, r3
 1040 002e 4FEA8303 		lsl	r3, r3, #2
 1041 0032 DBB2     		uxtb	r3, r3
 1042 0034 D31A     		subs	r3, r2, r3
 1043 0036 DAB2     		uxtb	r2, r3
 1044 0038 3B68     		ldr	r3, [r7, #0]
 1045 003a DA71     		strb	r2, [r3, #7]
 868:C:/StellarisWare/utils\ustdlib.c ****     ulTime = ulTemp;
 1046              		.loc 1 868 0
 1047 003c FB68     		ldr	r3, [r7, #12]
 1048 003e 7B60     		str	r3, [r7, #4]
 869:C:/StellarisWare/utils\ustdlib.c **** 
 870:C:/StellarisWare/utils\ustdlib.c ****     //
 871:C:/StellarisWare/utils\ustdlib.c ****     // Extract the number of minutes, converting time to the number of hours.
 872:C:/StellarisWare/utils\ustdlib.c ****     //
 873:C:/StellarisWare/utils\ustdlib.c ****     ulTemp = ulTime / 60;
 1049              		.loc 1 873 0
 1050 0040 7A68     		ldr	r2, [r7, #4]
 1051 0042 48F68903 		movw	r3, #34953
 1052 0046 C8F68803 		movt	r3, 34952
 1053 004a A3FB0213 		umull	r1, r3, r3, r2
 1054 004e 4FEA5313 		lsr	r3, r3, #5
 1055 0052 FB60     		str	r3, [r7, #12]
 874:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucMin = ulTime - (ulTemp * 60);
 1056              		.loc 1 874 0
 1057 0054 7B68     		ldr	r3, [r7, #4]
 1058 0056 DAB2     		uxtb	r2, r3
 1059 0058 FB68     		ldr	r3, [r7, #12]
 1060 005a DBB2     		uxtb	r3, r3
 1061 005c 1946     		mov	r1, r3
 1062 005e 4FEA0111 		lsl	r1, r1, #4
 1063 0062 CB1A     		subs	r3, r1, r3
 1064 0064 4FEA8303 		lsl	r3, r3, #2
 1065 0068 DBB2     		uxtb	r3, r3
 1066 006a D31A     		subs	r3, r2, r3
 1067 006c DAB2     		uxtb	r2, r3
 1068 006e 3B68     		ldr	r3, [r7, #0]
 1069 0070 9A71     		strb	r2, [r3, #6]
 875:C:/StellarisWare/utils\ustdlib.c ****     ulTime = ulTemp;
 1070              		.loc 1 875 0
 1071 0072 FB68     		ldr	r3, [r7, #12]
 1072 0074 7B60     		str	r3, [r7, #4]
 876:C:/StellarisWare/utils\ustdlib.c **** 
 877:C:/StellarisWare/utils\ustdlib.c ****     //
 878:C:/StellarisWare/utils\ustdlib.c ****     // Extract the number of hours, converting time to the number of days.
 879:C:/StellarisWare/utils\ustdlib.c ****     //
 880:C:/StellarisWare/utils\ustdlib.c ****     ulTemp = ulTime / 24;
 1073              		.loc 1 880 0
 1074 0076 7A68     		ldr	r2, [r7, #4]
 1075 0078 4AF6AB23 		movw	r3, #43691
 1076 007c CAF6AA23 		movt	r3, 43690
 1077 0080 A3FB0213 		umull	r1, r3, r3, r2
 1078 0084 4FEA1313 		lsr	r3, r3, #4
 1079 0088 FB60     		str	r3, [r7, #12]
 881:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucHour = ulTime - (ulTemp * 24);
 1080              		.loc 1 881 0
 1081 008a 7B68     		ldr	r3, [r7, #4]
 1082 008c DAB2     		uxtb	r2, r3
 1083 008e FB68     		ldr	r3, [r7, #12]
 1084 0090 DBB2     		uxtb	r3, r3
 1085 0092 1946     		mov	r1, r3
 1086 0094 4FEA4101 		lsl	r1, r1, #1
 1087 0098 CB18     		adds	r3, r1, r3
 1088 009a 4FEAC303 		lsl	r3, r3, #3
 1089 009e DBB2     		uxtb	r3, r3
 1090 00a0 D31A     		subs	r3, r2, r3
 1091 00a2 DAB2     		uxtb	r2, r3
 1092 00a4 3B68     		ldr	r3, [r7, #0]
 1093 00a6 5A71     		strb	r2, [r3, #5]
 882:C:/StellarisWare/utils\ustdlib.c ****     ulTime = ulTemp;
 1094              		.loc 1 882 0
 1095 00a8 FB68     		ldr	r3, [r7, #12]
 1096 00aa 7B60     		str	r3, [r7, #4]
 883:C:/StellarisWare/utils\ustdlib.c **** 
 884:C:/StellarisWare/utils\ustdlib.c ****     //
 885:C:/StellarisWare/utils\ustdlib.c ****     // Compute the day of the week.
 886:C:/StellarisWare/utils\ustdlib.c ****     //
 887:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucWday = (ulTime + 4) % 7;
 1097              		.loc 1 887 0
 1098 00ac 7B68     		ldr	r3, [r7, #4]
 1099 00ae 03F10401 		add	r1, r3, #4
 1100 00b2 44F62513 		movw	r3, #18725
 1101 00b6 C2F29243 		movt	r3, 9362
 1102 00ba A3FB0123 		umull	r2, r3, r3, r1
 1103 00be CA1A     		subs	r2, r1, r3
 1104 00c0 4FEA5202 		lsr	r2, r2, #1
 1105 00c4 9B18     		adds	r3, r3, r2
 1106 00c6 4FEA9302 		lsr	r2, r3, #2
 1107 00ca 1346     		mov	r3, r2
 1108 00cc 4FEAC303 		lsl	r3, r3, #3
 1109 00d0 9B1A     		subs	r3, r3, r2
 1110 00d2 CA1A     		subs	r2, r1, r3
 1111 00d4 D2B2     		uxtb	r2, r2
 1112 00d6 3B68     		ldr	r3, [r7, #0]
 1113 00d8 1A71     		strb	r2, [r3, #4]
 888:C:/StellarisWare/utils\ustdlib.c **** 
 889:C:/StellarisWare/utils\ustdlib.c ****     //
 890:C:/StellarisWare/utils\ustdlib.c ****     // Compute the number of leap years that have occurred since 1968, the
 891:C:/StellarisWare/utils\ustdlib.c ****     // first leap year before 1970.  For the beginning of a leap year, cut the
 892:C:/StellarisWare/utils\ustdlib.c ****     // month loop below at March so that the leap day is classified as February
 893:C:/StellarisWare/utils\ustdlib.c ****     // 29 followed by March 1, instead of March 1 followed by another March 1.
 894:C:/StellarisWare/utils\ustdlib.c ****     //
 895:C:/StellarisWare/utils\ustdlib.c ****     ulTime += 366 + 365;
 1114              		.loc 1 895 0
 1115 00da 7B68     		ldr	r3, [r7, #4]
 1116 00dc 03F53673 		add	r3, r3, #728
 1117 00e0 03F10303 		add	r3, r3, #3
 1118 00e4 7B60     		str	r3, [r7, #4]
 896:C:/StellarisWare/utils\ustdlib.c ****     ulTemp = ulTime / ((4 * 365) + 1);
 1119              		.loc 1 896 0
 1120 00e6 7A68     		ldr	r2, [r7, #4]
 1121 00e8 4BF27303 		movw	r3, #45171
 1122 00ec C1F26D63 		movt	r3, 5741
 1123 00f0 A3FB0213 		umull	r1, r3, r3, r2
 1124 00f4 4FEAD313 		lsr	r3, r3, #7
 1125 00f8 FB60     		str	r3, [r7, #12]
 897:C:/StellarisWare/utils\ustdlib.c ****     if((ulTime - (ulTemp * ((4 * 365) + 1))) > (31 + 28))
 1126              		.loc 1 897 0
 1127 00fa FB68     		ldr	r3, [r7, #12]
 1128 00fc 40F2B552 		movw	r2, #1461
 1129 0100 02FB03F3 		mul	r3, r2, r3
 1130 0104 7A68     		ldr	r2, [r7, #4]
 1131 0106 D31A     		subs	r3, r2, r3
 1132 0108 3B2B     		cmp	r3, #59
 1133 010a 07D9     		bls	.L58
 898:C:/StellarisWare/utils\ustdlib.c ****     {
 899:C:/StellarisWare/utils\ustdlib.c ****         ulTemp++;
 1134              		.loc 1 899 0
 1135 010c FB68     		ldr	r3, [r7, #12]
 1136 010e 03F10103 		add	r3, r3, #1
 1137 0112 FB60     		str	r3, [r7, #12]
 900:C:/StellarisWare/utils\ustdlib.c ****         ulMonths = 12;
 1138              		.loc 1 900 0
 1139 0114 4FF00C03 		mov	r3, #12
 1140 0118 BB60     		str	r3, [r7, #8]
 1141 011a 02E0     		b	.L59
 1142              	.L58:
 901:C:/StellarisWare/utils\ustdlib.c ****     }
 902:C:/StellarisWare/utils\ustdlib.c ****     else
 903:C:/StellarisWare/utils\ustdlib.c ****     {
 904:C:/StellarisWare/utils\ustdlib.c ****         ulMonths = 2;
 1143              		.loc 1 904 0
 1144 011c 4FF00203 		mov	r3, #2
 1145 0120 BB60     		str	r3, [r7, #8]
 1146              	.L59:
 905:C:/StellarisWare/utils\ustdlib.c ****     }
 906:C:/StellarisWare/utils\ustdlib.c **** 
 907:C:/StellarisWare/utils\ustdlib.c ****     //
 908:C:/StellarisWare/utils\ustdlib.c ****     // Extract the year.
 909:C:/StellarisWare/utils\ustdlib.c ****     //
 910:C:/StellarisWare/utils\ustdlib.c ****     psTime->usYear = ((ulTime - ulTemp) / 365) + 1968;
 1147              		.loc 1 910 0
 1148 0122 7A68     		ldr	r2, [r7, #4]
 1149 0124 FB68     		ldr	r3, [r7, #12]
 1150 0126 D21A     		subs	r2, r2, r3
 1151 0128 4FF26133 		movw	r3, #62305
 1152 012c C6F21973 		movt	r3, 26393
 1153 0130 A3FB0213 		umull	r1, r3, r3, r2
 1154 0134 D21A     		subs	r2, r2, r3
 1155 0136 4FEA5202 		lsr	r2, r2, #1
 1156 013a 9B18     		adds	r3, r3, r2
 1157 013c 4FEA1323 		lsr	r3, r3, #8
 1158 0140 9BB2     		uxth	r3, r3
 1159 0142 03F5F663 		add	r3, r3, #1968
 1160 0146 9AB2     		uxth	r2, r3
 1161 0148 3B68     		ldr	r3, [r7, #0]
 1162 014a 1A80     		strh	r2, [r3, #0]	@ movhi
 911:C:/StellarisWare/utils\ustdlib.c ****     ulTime -= ((psTime->usYear - 1968) * 365) + ulTemp;
 1163              		.loc 1 911 0
 1164 014c 3B68     		ldr	r3, [r7, #0]
 1165 014e 1B88     		ldrh	r3, [r3, #0]
 1166 0150 40F26D12 		movw	r2, #365
 1167 0154 02FB03F3 		mul	r3, r2, r3
 1168 0158 1A46     		mov	r2, r3
 1169 015a FB68     		ldr	r3, [r7, #12]
 1170 015c D318     		adds	r3, r2, r3
 1171 015e 7A68     		ldr	r2, [r7, #4]
 1172 0160 D21A     		subs	r2, r2, r3
 1173 0162 4FF2F053 		movw	r3, #62960
 1174 0166 C0F20A03 		movt	r3, 10
 1175 016a D318     		adds	r3, r2, r3
 1176 016c 7B60     		str	r3, [r7, #4]
 912:C:/StellarisWare/utils\ustdlib.c **** 
 913:C:/StellarisWare/utils\ustdlib.c ****     //
 914:C:/StellarisWare/utils\ustdlib.c ****     // Extract the month.
 915:C:/StellarisWare/utils\ustdlib.c ****     //
 916:C:/StellarisWare/utils\ustdlib.c ****     for(ulTemp = 0; ulTemp < ulMonths; ulTemp++)
 1177              		.loc 1 916 0
 1178 016e 4FF00003 		mov	r3, #0
 1179 0172 FB60     		str	r3, [r7, #12]
 1180 0174 0EE0     		b	.L60
 1181              	.L63:
 917:C:/StellarisWare/utils\ustdlib.c ****     {
 918:C:/StellarisWare/utils\ustdlib.c ****         if(g_psDaysToMonth[ulTemp] > ulTime)
 1182              		.loc 1 918 0
 1183 0176 40F20003 		movw	r3, #:lower16:g_psDaysToMonth
 1184 017a C0F20003 		movt	r3, #:upper16:g_psDaysToMonth
 1185 017e FA68     		ldr	r2, [r7, #12]
 1186 0180 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 1187 0184 1AB2     		sxth	r2, r3
 1188 0186 7B68     		ldr	r3, [r7, #4]
 1189 0188 9A42     		cmp	r2, r3
 1190 018a 08D8     		bhi	.L64
 1191              	.L61:
 916:C:/StellarisWare/utils\ustdlib.c ****     for(ulTemp = 0; ulTemp < ulMonths; ulTemp++)
 1192              		.loc 1 916 0
 1193 018c FB68     		ldr	r3, [r7, #12]
 1194 018e 03F10103 		add	r3, r3, #1
 1195 0192 FB60     		str	r3, [r7, #12]
 1196              	.L60:
 916:C:/StellarisWare/utils\ustdlib.c ****     for(ulTemp = 0; ulTemp < ulMonths; ulTemp++)
 1197              		.loc 1 916 0 is_stmt 0 discriminator 1
 1198 0194 FA68     		ldr	r2, [r7, #12]
 1199 0196 BB68     		ldr	r3, [r7, #8]
 1200 0198 9A42     		cmp	r2, r3
 1201 019a ECD3     		bcc	.L63
 1202 019c 00E0     		b	.L62
 1203              	.L64:
 919:C:/StellarisWare/utils\ustdlib.c ****         {
 920:C:/StellarisWare/utils\ustdlib.c ****             break;
 1204              		.loc 1 920 0 is_stmt 1
 1205 019e 00BF     		nop
 1206              	.L62:
 921:C:/StellarisWare/utils\ustdlib.c ****         }
 922:C:/StellarisWare/utils\ustdlib.c ****     }
 923:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucMon = ulTemp - 1;
 1207              		.loc 1 923 0
 1208 01a0 FB68     		ldr	r3, [r7, #12]
 1209 01a2 DBB2     		uxtb	r3, r3
 1210 01a4 03F1FF33 		add	r3, r3, #-1
 1211 01a8 DAB2     		uxtb	r2, r3
 1212 01aa 3B68     		ldr	r3, [r7, #0]
 1213 01ac 9A70     		strb	r2, [r3, #2]
 924:C:/StellarisWare/utils\ustdlib.c **** 
 925:C:/StellarisWare/utils\ustdlib.c ****     //
 926:C:/StellarisWare/utils\ustdlib.c ****     // Extract the day of the month.
 927:C:/StellarisWare/utils\ustdlib.c ****     //
 928:C:/StellarisWare/utils\ustdlib.c ****     psTime->ucMday = ulTime - g_psDaysToMonth[ulTemp - 1] + 1;
 1214              		.loc 1 928 0
 1215 01ae 7B68     		ldr	r3, [r7, #4]
 1216 01b0 DAB2     		uxtb	r2, r3
 1217 01b2 FB68     		ldr	r3, [r7, #12]
 1218 01b4 03F1FF31 		add	r1, r3, #-1
 1219 01b8 40F20003 		movw	r3, #:lower16:g_psDaysToMonth
 1220 01bc C0F20003 		movt	r3, #:upper16:g_psDaysToMonth
 1221 01c0 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 1222 01c4 DBB2     		uxtb	r3, r3
 1223 01c6 D31A     		subs	r3, r2, r3
 1224 01c8 DBB2     		uxtb	r3, r3
 1225 01ca 03F10103 		add	r3, r3, #1
 1226 01ce DAB2     		uxtb	r2, r3
 1227 01d0 3B68     		ldr	r3, [r7, #0]
 1228 01d2 DA70     		strb	r2, [r3, #3]
 929:C:/StellarisWare/utils\ustdlib.c **** }
 1229              		.loc 1 929 0
 1230 01d4 07F11407 		add	r7, r7, #20
 1231 01d8 BD46     		mov	sp, r7
 1232 01da 80BC     		pop	{r7}
 1233 01dc 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE4:
 1237 01de 00BF     		.section	.text.ucmptime,"ax",%progbits
 1238              		.align	2
 1239              		.thumb
 1240              		.thumb_func
 1242              	ucmptime:
 1243              	.LFB5:
 930:C:/StellarisWare/utils\ustdlib.c **** 
 931:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 932:C:/StellarisWare/utils\ustdlib.c **** //
 933:C:/StellarisWare/utils\ustdlib.c **** //! Compares two time structures and determines if one is greater than,
 934:C:/StellarisWare/utils\ustdlib.c **** //! less than, or equal to the other.
 935:C:/StellarisWare/utils\ustdlib.c **** //!
 936:C:/StellarisWare/utils\ustdlib.c **** //! \param pTime1 is the first time structure to compare.
 937:C:/StellarisWare/utils\ustdlib.c **** //! \param pTime2 is the second time structure to compare.
 938:C:/StellarisWare/utils\ustdlib.c **** //!
 939:C:/StellarisWare/utils\ustdlib.c **** //! This function compares two time structures and returns a signed number
 940:C:/StellarisWare/utils\ustdlib.c **** //! to indicate the result of the comparison.  If the time represented by
 941:C:/StellarisWare/utils\ustdlib.c **** //! \e pTime1 is greater than the time represented by \e pTime2 then a positive
 942:C:/StellarisWare/utils\ustdlib.c **** //! number is returned.  Likewise if \e pTime1 is less than \e pTime2 then a
 943:C:/StellarisWare/utils\ustdlib.c **** //! negative number is returned.  If the two times are equal then the function
 944:C:/StellarisWare/utils\ustdlib.c **** //! returns 0.
 945:C:/StellarisWare/utils\ustdlib.c **** //!
 946:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns 0 if the two times are equal, +1 if \e pTime1 is greater
 947:C:/StellarisWare/utils\ustdlib.c **** //! than \e pTime2, and -1 if \e pTime1 is less than \e pTime2.
 948:C:/StellarisWare/utils\ustdlib.c **** //
 949:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
 950:C:/StellarisWare/utils\ustdlib.c **** static int
 951:C:/StellarisWare/utils\ustdlib.c **** ucmptime(tTime *pTime1, tTime *pTime2)
 952:C:/StellarisWare/utils\ustdlib.c **** {
 1244              		.loc 1 952 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 8
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
 1249 0000 80B4     		push	{r7}
 1250              	.LCFI17:
 1251              		.cfi_def_cfa_offset 4
 1252              		.cfi_offset 7, -4
 1253 0002 83B0     		sub	sp, sp, #12
 1254              	.LCFI18:
 1255              		.cfi_def_cfa_offset 16
 1256 0004 00AF     		add	r7, sp, #0
 1257              	.LCFI19:
 1258              		.cfi_def_cfa_register 7
 1259 0006 7860     		str	r0, [r7, #4]
 1260 0008 3960     		str	r1, [r7, #0]
 953:C:/StellarisWare/utils\ustdlib.c ****     //
 954:C:/StellarisWare/utils\ustdlib.c ****     // Compare each field in descending signficance to determine if
 955:C:/StellarisWare/utils\ustdlib.c ****     // greater than, less than, or equal.
 956:C:/StellarisWare/utils\ustdlib.c ****     //
 957:C:/StellarisWare/utils\ustdlib.c ****     if(pTime1->usYear > pTime2->usYear)
 1261              		.loc 1 957 0
 1262 000a 7B68     		ldr	r3, [r7, #4]
 1263 000c 1A88     		ldrh	r2, [r3, #0]
 1264 000e 3B68     		ldr	r3, [r7, #0]
 1265 0010 1B88     		ldrh	r3, [r3, #0]
 1266 0012 9A42     		cmp	r2, r3
 1267 0014 02D9     		bls	.L66
 958:C:/StellarisWare/utils\ustdlib.c ****     {
 959:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1268              		.loc 1 959 0
 1269 0016 4FF00103 		mov	r3, #1
 1270 001a 64E0     		b	.L67
 1271              	.L66:
 960:C:/StellarisWare/utils\ustdlib.c ****     }
 961:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->usYear < pTime2->usYear)
 1272              		.loc 1 961 0
 1273 001c 7B68     		ldr	r3, [r7, #4]
 1274 001e 1A88     		ldrh	r2, [r3, #0]
 1275 0020 3B68     		ldr	r3, [r7, #0]
 1276 0022 1B88     		ldrh	r3, [r3, #0]
 1277 0024 9A42     		cmp	r2, r3
 1278 0026 02D2     		bcs	.L68
 962:C:/StellarisWare/utils\ustdlib.c ****     {
 963:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1279              		.loc 1 963 0
 1280 0028 4FF0FF33 		mov	r3, #-1
 1281 002c 5BE0     		b	.L67
 1282              	.L68:
 964:C:/StellarisWare/utils\ustdlib.c ****     }
 965:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMon > pTime2->ucMon)
 1283              		.loc 1 965 0
 1284 002e 7B68     		ldr	r3, [r7, #4]
 1285 0030 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1286 0032 3B68     		ldr	r3, [r7, #0]
 1287 0034 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1288 0036 9A42     		cmp	r2, r3
 1289 0038 02D9     		bls	.L69
 966:C:/StellarisWare/utils\ustdlib.c ****     {
 967:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1290              		.loc 1 967 0
 1291 003a 4FF00103 		mov	r3, #1
 1292 003e 52E0     		b	.L67
 1293              	.L69:
 968:C:/StellarisWare/utils\ustdlib.c ****     }
 969:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMon < pTime2->ucMon)
 1294              		.loc 1 969 0
 1295 0040 7B68     		ldr	r3, [r7, #4]
 1296 0042 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1297 0044 3B68     		ldr	r3, [r7, #0]
 1298 0046 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1299 0048 9A42     		cmp	r2, r3
 1300 004a 02D2     		bcs	.L70
 970:C:/StellarisWare/utils\ustdlib.c ****     {
 971:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1301              		.loc 1 971 0
 1302 004c 4FF0FF33 		mov	r3, #-1
 1303 0050 49E0     		b	.L67
 1304              	.L70:
 972:C:/StellarisWare/utils\ustdlib.c ****     }
 973:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMday > pTime2->ucMday)
 1305              		.loc 1 973 0
 1306 0052 7B68     		ldr	r3, [r7, #4]
 1307 0054 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1308 0056 3B68     		ldr	r3, [r7, #0]
 1309 0058 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1310 005a 9A42     		cmp	r2, r3
 1311 005c 02D9     		bls	.L71
 974:C:/StellarisWare/utils\ustdlib.c ****     {
 975:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1312              		.loc 1 975 0
 1313 005e 4FF00103 		mov	r3, #1
 1314 0062 40E0     		b	.L67
 1315              	.L71:
 976:C:/StellarisWare/utils\ustdlib.c ****     }
 977:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMday < pTime2->ucMday)
 1316              		.loc 1 977 0
 1317 0064 7B68     		ldr	r3, [r7, #4]
 1318 0066 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1319 0068 3B68     		ldr	r3, [r7, #0]
 1320 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1321 006c 9A42     		cmp	r2, r3
 1322 006e 02D2     		bcs	.L72
 978:C:/StellarisWare/utils\ustdlib.c ****     {
 979:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1323              		.loc 1 979 0
 1324 0070 4FF0FF33 		mov	r3, #-1
 1325 0074 37E0     		b	.L67
 1326              	.L72:
 980:C:/StellarisWare/utils\ustdlib.c ****     }
 981:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucHour > pTime2->ucHour)
 1327              		.loc 1 981 0
 1328 0076 7B68     		ldr	r3, [r7, #4]
 1329 0078 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1330 007a 3B68     		ldr	r3, [r7, #0]
 1331 007c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1332 007e 9A42     		cmp	r2, r3
 1333 0080 02D9     		bls	.L73
 982:C:/StellarisWare/utils\ustdlib.c ****     {
 983:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1334              		.loc 1 983 0
 1335 0082 4FF00103 		mov	r3, #1
 1336 0086 2EE0     		b	.L67
 1337              	.L73:
 984:C:/StellarisWare/utils\ustdlib.c ****     }
 985:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucHour < pTime2->ucHour)
 1338              		.loc 1 985 0
 1339 0088 7B68     		ldr	r3, [r7, #4]
 1340 008a 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1341 008c 3B68     		ldr	r3, [r7, #0]
 1342 008e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1343 0090 9A42     		cmp	r2, r3
 1344 0092 02D2     		bcs	.L74
 986:C:/StellarisWare/utils\ustdlib.c ****     {
 987:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1345              		.loc 1 987 0
 1346 0094 4FF0FF33 		mov	r3, #-1
 1347 0098 25E0     		b	.L67
 1348              	.L74:
 988:C:/StellarisWare/utils\ustdlib.c ****     }
 989:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMin > pTime2->ucMin)
 1349              		.loc 1 989 0
 1350 009a 7B68     		ldr	r3, [r7, #4]
 1351 009c 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 1352 009e 3B68     		ldr	r3, [r7, #0]
 1353 00a0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1354 00a2 9A42     		cmp	r2, r3
 1355 00a4 02D9     		bls	.L75
 990:C:/StellarisWare/utils\ustdlib.c ****     {
 991:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1356              		.loc 1 991 0
 1357 00a6 4FF00103 		mov	r3, #1
 1358 00aa 1CE0     		b	.L67
 1359              	.L75:
 992:C:/StellarisWare/utils\ustdlib.c ****     }
 993:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucMin < pTime2->ucMin)
 1360              		.loc 1 993 0
 1361 00ac 7B68     		ldr	r3, [r7, #4]
 1362 00ae 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 1363 00b0 3B68     		ldr	r3, [r7, #0]
 1364 00b2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1365 00b4 9A42     		cmp	r2, r3
 1366 00b6 02D2     		bcs	.L76
 994:C:/StellarisWare/utils\ustdlib.c ****     {
 995:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1367              		.loc 1 995 0
 1368 00b8 4FF0FF33 		mov	r3, #-1
 1369 00bc 13E0     		b	.L67
 1370              	.L76:
 996:C:/StellarisWare/utils\ustdlib.c ****     }
 997:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucSec > pTime2->ucSec)
 1371              		.loc 1 997 0
 1372 00be 7B68     		ldr	r3, [r7, #4]
 1373 00c0 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 1374 00c2 3B68     		ldr	r3, [r7, #0]
 1375 00c4 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1376 00c6 9A42     		cmp	r2, r3
 1377 00c8 02D9     		bls	.L77
 998:C:/StellarisWare/utils\ustdlib.c ****     {
 999:C:/StellarisWare/utils\ustdlib.c ****         return(1);
 1378              		.loc 1 999 0
 1379 00ca 4FF00103 		mov	r3, #1
 1380 00ce 0AE0     		b	.L67
 1381              	.L77:
1000:C:/StellarisWare/utils\ustdlib.c ****     }
1001:C:/StellarisWare/utils\ustdlib.c ****     else if(pTime1->ucSec < pTime2->ucSec)
 1382              		.loc 1 1001 0
 1383 00d0 7B68     		ldr	r3, [r7, #4]
 1384 00d2 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 1385 00d4 3B68     		ldr	r3, [r7, #0]
 1386 00d6 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1387 00d8 9A42     		cmp	r2, r3
 1388 00da 02D2     		bcs	.L78
1002:C:/StellarisWare/utils\ustdlib.c ****     {
1003:C:/StellarisWare/utils\ustdlib.c ****         return(-1);
 1389              		.loc 1 1003 0
 1390 00dc 4FF0FF33 		mov	r3, #-1
 1391 00e0 01E0     		b	.L67
 1392              	.L78:
1004:C:/StellarisWare/utils\ustdlib.c ****     }
1005:C:/StellarisWare/utils\ustdlib.c ****     else
1006:C:/StellarisWare/utils\ustdlib.c ****     {
1007:C:/StellarisWare/utils\ustdlib.c ****         //
1008:C:/StellarisWare/utils\ustdlib.c ****         // Reaching this branch of the conditional means that all of the
1009:C:/StellarisWare/utils\ustdlib.c ****         // fields are equal, and thus the two times are equal.
1010:C:/StellarisWare/utils\ustdlib.c ****         //
1011:C:/StellarisWare/utils\ustdlib.c ****         return(0);
 1393              		.loc 1 1011 0
 1394 00e2 4FF00003 		mov	r3, #0
 1395              	.L67:
1012:C:/StellarisWare/utils\ustdlib.c ****     }
1013:C:/StellarisWare/utils\ustdlib.c **** }
 1396              		.loc 1 1013 0
 1397 00e6 1846     		mov	r0, r3
 1398 00e8 07F10C07 		add	r7, r7, #12
 1399 00ec BD46     		mov	sp, r7
 1400 00ee 80BC     		pop	{r7}
 1401 00f0 7047     		bx	lr
 1402              		.cfi_endproc
 1403              	.LFE5:
 1405 00f2 00BF     		.section	.text.umktime,"ax",%progbits
 1406              		.align	2
 1407              		.global	umktime
 1408              		.thumb
 1409              		.thumb_func
 1411              	umktime:
 1412              	.LFB6:
1014:C:/StellarisWare/utils\ustdlib.c **** 
1015:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1016:C:/StellarisWare/utils\ustdlib.c **** //
1017:C:/StellarisWare/utils\ustdlib.c **** //! Converts calendar date and time to seconds.
1018:C:/StellarisWare/utils\ustdlib.c **** //!
1019:C:/StellarisWare/utils\ustdlib.c **** //! \param psTime is a pointer to the time structure that is filled in with the
1020:C:/StellarisWare/utils\ustdlib.c **** //! broken down date and time.
1021:C:/StellarisWare/utils\ustdlib.c **** //!
1022:C:/StellarisWare/utils\ustdlib.c **** //! This function converts the date and time represented by the \e psTime
1023:C:/StellarisWare/utils\ustdlib.c **** //! structure pointer to the number of seconds since midnight GMT on January 1,
1024:C:/StellarisWare/utils\ustdlib.c **** //! 1970 (traditional Unix epoch).
1025:C:/StellarisWare/utils\ustdlib.c **** //!
1026:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the calendar time and date as seconds.  If the conversion
1027:C:/StellarisWare/utils\ustdlib.c **** //! was not possible then the function returns (unsigned long)(-1).
1028:C:/StellarisWare/utils\ustdlib.c **** //
1029:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1030:C:/StellarisWare/utils\ustdlib.c **** unsigned long
1031:C:/StellarisWare/utils\ustdlib.c **** umktime(tTime *psTime)
1032:C:/StellarisWare/utils\ustdlib.c **** {
 1413              		.loc 1 1032 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 32
 1416              		@ frame_needed = 1, uses_anonymous_args = 0
 1417 0000 80B5     		push	{r7, lr}
 1418              	.LCFI20:
 1419              		.cfi_def_cfa_offset 8
 1420              		.cfi_offset 14, -4
 1421              		.cfi_offset 7, -8
 1422 0002 88B0     		sub	sp, sp, #32
 1423              	.LCFI21:
 1424              		.cfi_def_cfa_offset 40
 1425 0004 00AF     		add	r7, sp, #0
 1426              	.LCFI22:
 1427              		.cfi_def_cfa_register 7
 1428 0006 7860     		str	r0, [r7, #4]
1033:C:/StellarisWare/utils\ustdlib.c ****     tTime sTimeGuess;
1034:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulTimeGuess = 0x80000000;
 1429              		.loc 1 1034 0
 1430 0008 4FF00043 		mov	r3, #-2147483648
 1431 000c FB61     		str	r3, [r7, #28]
1035:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulAdjust = 0x40000000;
 1432              		.loc 1 1035 0
 1433 000e 4FF08043 		mov	r3, #1073741824
 1434 0012 BB61     		str	r3, [r7, #24]
1036:C:/StellarisWare/utils\ustdlib.c ****     int iSign;
1037:C:/StellarisWare/utils\ustdlib.c **** 
1038:C:/StellarisWare/utils\ustdlib.c ****     //
1039:C:/StellarisWare/utils\ustdlib.c ****     // Seed the binary search with the first guess.
1040:C:/StellarisWare/utils\ustdlib.c ****     //
1041:C:/StellarisWare/utils\ustdlib.c ****     ulocaltime(ulTimeGuess, &sTimeGuess);
 1435              		.loc 1 1041 0
 1436 0014 F869     		ldr	r0, [r7, #28]
 1437 0016 07F10C03 		add	r3, r7, #12
 1438 001a 1946     		mov	r1, r3
 1439 001c FFF7FEFF 		bl	ulocaltime
1042:C:/StellarisWare/utils\ustdlib.c ****     iSign = ucmptime(psTime, &sTimeGuess);
 1440              		.loc 1 1042 0
 1441 0020 7868     		ldr	r0, [r7, #4]
 1442 0022 07F10C03 		add	r3, r7, #12
 1443 0026 1946     		mov	r1, r3
 1444 0028 FFF7FEFF 		bl	ucmptime
 1445 002c 7861     		str	r0, [r7, #20]
1043:C:/StellarisWare/utils\ustdlib.c **** 
1044:C:/StellarisWare/utils\ustdlib.c ****     //
1045:C:/StellarisWare/utils\ustdlib.c ****     // While the time is not yet found, execute a binary search.
1046:C:/StellarisWare/utils\ustdlib.c ****     //
1047:C:/StellarisWare/utils\ustdlib.c ****     while(iSign && ulAdjust)
 1446              		.loc 1 1047 0
 1447 002e 1BE0     		b	.L80
 1448              	.L84:
1048:C:/StellarisWare/utils\ustdlib.c ****     {
1049:C:/StellarisWare/utils\ustdlib.c ****         //
1050:C:/StellarisWare/utils\ustdlib.c ****         // Adjust the time guess up or down depending on the result of the
1051:C:/StellarisWare/utils\ustdlib.c ****         // last compare.
1052:C:/StellarisWare/utils\ustdlib.c ****         //
1053:C:/StellarisWare/utils\ustdlib.c ****         ulTimeGuess = (iSign > 0) ? (ulTimeGuess + ulAdjust) :
 1449              		.loc 1 1053 0
 1450 0030 7B69     		ldr	r3, [r7, #20]
 1451 0032 002B     		cmp	r3, #0
 1452 0034 03DD     		ble	.L81
 1453              		.loc 1 1053 0 is_stmt 0 discriminator 1
 1454 0036 FA69     		ldr	r2, [r7, #28]
 1455 0038 BB69     		ldr	r3, [r7, #24]
 1456 003a D318     		adds	r3, r2, r3
 1457 003c 02E0     		b	.L82
 1458              	.L81:
 1459              		.loc 1 1053 0 discriminator 2
 1460 003e FA69     		ldr	r2, [r7, #28]
 1461 0040 BB69     		ldr	r3, [r7, #24]
 1462 0042 D31A     		subs	r3, r2, r3
 1463              	.L82:
 1464              		.loc 1 1053 0 discriminator 3
 1465 0044 FB61     		str	r3, [r7, #28]
1054:C:/StellarisWare/utils\ustdlib.c ****                                     (ulTimeGuess - ulAdjust);
1055:C:/StellarisWare/utils\ustdlib.c ****         ulAdjust /= 2;
 1466              		.loc 1 1055 0 is_stmt 1 discriminator 3
 1467 0046 BB69     		ldr	r3, [r7, #24]
 1468 0048 4FEA5303 		lsr	r3, r3, #1
 1469 004c BB61     		str	r3, [r7, #24]
1056:C:/StellarisWare/utils\ustdlib.c **** 
1057:C:/StellarisWare/utils\ustdlib.c ****         //
1058:C:/StellarisWare/utils\ustdlib.c ****         // Compare the new time guess against the time pointed at by the
1059:C:/StellarisWare/utils\ustdlib.c ****         // function parameters.
1060:C:/StellarisWare/utils\ustdlib.c ****         //
1061:C:/StellarisWare/utils\ustdlib.c ****         ulocaltime(ulTimeGuess, &sTimeGuess);
 1470              		.loc 1 1061 0 discriminator 3
 1471 004e F869     		ldr	r0, [r7, #28]
 1472 0050 07F10C03 		add	r3, r7, #12
 1473 0054 1946     		mov	r1, r3
 1474 0056 FFF7FEFF 		bl	ulocaltime
1062:C:/StellarisWare/utils\ustdlib.c ****         iSign = ucmptime(psTime, &sTimeGuess);
 1475              		.loc 1 1062 0 discriminator 3
 1476 005a 7868     		ldr	r0, [r7, #4]
 1477 005c 07F10C03 		add	r3, r7, #12
 1478 0060 1946     		mov	r1, r3
 1479 0062 FFF7FEFF 		bl	ucmptime
 1480 0066 7861     		str	r0, [r7, #20]
 1481              	.L80:
1047:C:/StellarisWare/utils\ustdlib.c ****     while(iSign && ulAdjust)
 1482              		.loc 1 1047 0 discriminator 1
 1483 0068 7B69     		ldr	r3, [r7, #20]
 1484 006a 002B     		cmp	r3, #0
 1485 006c 02D0     		beq	.L83
1047:C:/StellarisWare/utils\ustdlib.c ****     while(iSign && ulAdjust)
 1486              		.loc 1 1047 0 is_stmt 0 discriminator 2
 1487 006e BB69     		ldr	r3, [r7, #24]
 1488 0070 002B     		cmp	r3, #0
 1489 0072 DDD1     		bne	.L84
 1490              	.L83:
1063:C:/StellarisWare/utils\ustdlib.c ****     };
1064:C:/StellarisWare/utils\ustdlib.c **** 
1065:C:/StellarisWare/utils\ustdlib.c ****     //
1066:C:/StellarisWare/utils\ustdlib.c ****     // If the above loop was exited with iSign == 0, that means that the
1067:C:/StellarisWare/utils\ustdlib.c ****     // time in seconds was found, so return that value to the caller.
1068:C:/StellarisWare/utils\ustdlib.c ****     //
1069:C:/StellarisWare/utils\ustdlib.c ****     if(iSign == 0)
 1491              		.loc 1 1069 0 is_stmt 1
 1492 0074 7B69     		ldr	r3, [r7, #20]
 1493 0076 002B     		cmp	r3, #0
 1494 0078 01D1     		bne	.L85
1070:C:/StellarisWare/utils\ustdlib.c ****     {
1071:C:/StellarisWare/utils\ustdlib.c ****         return(ulTimeGuess);
 1495              		.loc 1 1071 0
 1496 007a FB69     		ldr	r3, [r7, #28]
 1497 007c 01E0     		b	.L86
 1498              	.L85:
1072:C:/StellarisWare/utils\ustdlib.c ****     }
1073:C:/StellarisWare/utils\ustdlib.c **** 
1074:C:/StellarisWare/utils\ustdlib.c ****     //
1075:C:/StellarisWare/utils\ustdlib.c ****     // Otherwise the time could not be converted so return an error.
1076:C:/StellarisWare/utils\ustdlib.c ****     //
1077:C:/StellarisWare/utils\ustdlib.c ****     else
1078:C:/StellarisWare/utils\ustdlib.c ****     {
1079:C:/StellarisWare/utils\ustdlib.c ****         return((unsigned long)-1);
 1499              		.loc 1 1079 0
 1500 007e 4FF0FF33 		mov	r3, #-1
 1501              	.L86:
1080:C:/StellarisWare/utils\ustdlib.c ****     }
1081:C:/StellarisWare/utils\ustdlib.c **** }
 1502              		.loc 1 1081 0
 1503 0082 1846     		mov	r0, r3
 1504 0084 07F12007 		add	r7, r7, #32
 1505 0088 BD46     		mov	sp, r7
 1506 008a 80BD     		pop	{r7, pc}
 1507              		.cfi_endproc
 1508              	.LFE6:
 1510              		.section	.text.ustrtoul,"ax",%progbits
 1511              		.align	2
 1512              		.global	ustrtoul
 1513              		.thumb
 1514              		.thumb_func
 1516              	ustrtoul:
 1517              	.LFB7:
1082:C:/StellarisWare/utils\ustdlib.c **** 
1083:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1084:C:/StellarisWare/utils\ustdlib.c **** //
1085:C:/StellarisWare/utils\ustdlib.c **** //! Converts a string into its numeric equivalent.
1086:C:/StellarisWare/utils\ustdlib.c **** //!
1087:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr is a pointer to the string containing the integer.
1088:C:/StellarisWare/utils\ustdlib.c **** //! \param ppcStrRet is a pointer that will be set to the first character past
1089:C:/StellarisWare/utils\ustdlib.c **** //! the integer in the string.
1090:C:/StellarisWare/utils\ustdlib.c **** //! \param iBase is the radix to use for the conversion; can be zero to
1091:C:/StellarisWare/utils\ustdlib.c **** //! auto-select the radix or between 2 and 16 to explicitly specify the radix.
1092:C:/StellarisWare/utils\ustdlib.c **** //!
1093:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strtoul()</tt> function.
1094:C:/StellarisWare/utils\ustdlib.c **** //! It scans a string for the first token (that is, non-white space) and
1095:C:/StellarisWare/utils\ustdlib.c **** //! converts the value at that location in the string into an integer value.
1096:C:/StellarisWare/utils\ustdlib.c **** //!
1097:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the result of the conversion.
1098:C:/StellarisWare/utils\ustdlib.c **** //
1099:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1100:C:/StellarisWare/utils\ustdlib.c **** unsigned long
1101:C:/StellarisWare/utils\ustdlib.c **** ustrtoul(const char *pcStr, const char **ppcStrRet, int iBase)
1102:C:/StellarisWare/utils\ustdlib.c **** {
 1518              		.loc 1 1102 0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 40
 1521              		@ frame_needed = 1, uses_anonymous_args = 0
 1522              		@ link register save eliminated.
 1523 0000 80B4     		push	{r7}
 1524              	.LCFI23:
 1525              		.cfi_def_cfa_offset 4
 1526              		.cfi_offset 7, -4
 1527 0002 8BB0     		sub	sp, sp, #44
 1528              	.LCFI24:
 1529              		.cfi_def_cfa_offset 48
 1530 0004 00AF     		add	r7, sp, #0
 1531              	.LCFI25:
 1532              		.cfi_def_cfa_register 7
 1533 0006 F860     		str	r0, [r7, #12]
 1534 0008 B960     		str	r1, [r7, #8]
 1535 000a 7A60     		str	r2, [r7, #4]
1103:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulRet, ulDigit, ulNeg, ulValid;
1104:C:/StellarisWare/utils\ustdlib.c ****     const char *pcPtr;
1105:C:/StellarisWare/utils\ustdlib.c **** 
1106:C:/StellarisWare/utils\ustdlib.c ****     //
1107:C:/StellarisWare/utils\ustdlib.c ****     // Check the arguments.
1108:C:/StellarisWare/utils\ustdlib.c ****     //
1109:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcStr);
1110:C:/StellarisWare/utils\ustdlib.c ****     ASSERT((iBase == 0) || ((iBase > 1) && (iBase <= 16)));
1111:C:/StellarisWare/utils\ustdlib.c **** 
1112:C:/StellarisWare/utils\ustdlib.c ****     //
1113:C:/StellarisWare/utils\ustdlib.c ****     // Initially, the result is zero.
1114:C:/StellarisWare/utils\ustdlib.c ****     //
1115:C:/StellarisWare/utils\ustdlib.c ****     ulRet = 0;
 1536              		.loc 1 1115 0
 1537 000c 4FF00003 		mov	r3, #0
 1538 0010 7B62     		str	r3, [r7, #36]
1116:C:/StellarisWare/utils\ustdlib.c ****     ulNeg = 0;
 1539              		.loc 1 1116 0
 1540 0012 4FF00003 		mov	r3, #0
 1541 0016 FB61     		str	r3, [r7, #28]
1117:C:/StellarisWare/utils\ustdlib.c ****     ulValid = 0;
 1542              		.loc 1 1117 0
 1543 0018 4FF00003 		mov	r3, #0
 1544 001c BB61     		str	r3, [r7, #24]
1118:C:/StellarisWare/utils\ustdlib.c **** 
1119:C:/StellarisWare/utils\ustdlib.c ****     //
1120:C:/StellarisWare/utils\ustdlib.c ****     // Skip past any leading white space.
1121:C:/StellarisWare/utils\ustdlib.c ****     //
1122:C:/StellarisWare/utils\ustdlib.c ****     pcPtr = pcStr;
 1545              		.loc 1 1122 0
 1546 001e FB68     		ldr	r3, [r7, #12]
 1547 0020 7B61     		str	r3, [r7, #20]
1123:C:/StellarisWare/utils\ustdlib.c ****     while((*pcPtr == ' ') || (*pcPtr == '\t'))
 1548              		.loc 1 1123 0
 1549 0022 03E0     		b	.L88
 1550              	.L89:
1124:C:/StellarisWare/utils\ustdlib.c ****     {
1125:C:/StellarisWare/utils\ustdlib.c ****         pcPtr++;
 1551              		.loc 1 1125 0
 1552 0024 7B69     		ldr	r3, [r7, #20]
 1553 0026 03F10103 		add	r3, r3, #1
 1554 002a 7B61     		str	r3, [r7, #20]
 1555              	.L88:
1123:C:/StellarisWare/utils\ustdlib.c ****     while((*pcPtr == ' ') || (*pcPtr == '\t'))
 1556              		.loc 1 1123 0 discriminator 1
 1557 002c 7B69     		ldr	r3, [r7, #20]
 1558 002e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1559 0030 202B     		cmp	r3, #32
 1560 0032 F7D0     		beq	.L89
1123:C:/StellarisWare/utils\ustdlib.c ****     while((*pcPtr == ' ') || (*pcPtr == '\t'))
 1561              		.loc 1 1123 0 is_stmt 0 discriminator 2
 1562 0034 7B69     		ldr	r3, [r7, #20]
 1563 0036 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1564 0038 092B     		cmp	r3, #9
 1565 003a F3D0     		beq	.L89
1126:C:/StellarisWare/utils\ustdlib.c ****     }
1127:C:/StellarisWare/utils\ustdlib.c **** 
1128:C:/StellarisWare/utils\ustdlib.c ****     //
1129:C:/StellarisWare/utils\ustdlib.c ****     // Take a leading + or - from the value.
1130:C:/StellarisWare/utils\ustdlib.c ****     //
1131:C:/StellarisWare/utils\ustdlib.c ****     if(*pcPtr == '-')
 1566              		.loc 1 1131 0 is_stmt 1
 1567 003c 7B69     		ldr	r3, [r7, #20]
 1568 003e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1569 0040 2D2B     		cmp	r3, #45
 1570 0042 07D1     		bne	.L90
1132:C:/StellarisWare/utils\ustdlib.c ****     {
1133:C:/StellarisWare/utils\ustdlib.c ****         ulNeg = 1;
 1571              		.loc 1 1133 0
 1572 0044 4FF00103 		mov	r3, #1
 1573 0048 FB61     		str	r3, [r7, #28]
1134:C:/StellarisWare/utils\ustdlib.c ****         pcPtr++;
 1574              		.loc 1 1134 0
 1575 004a 7B69     		ldr	r3, [r7, #20]
 1576 004c 03F10103 		add	r3, r3, #1
 1577 0050 7B61     		str	r3, [r7, #20]
 1578 0052 07E0     		b	.L91
 1579              	.L90:
1135:C:/StellarisWare/utils\ustdlib.c ****     }
1136:C:/StellarisWare/utils\ustdlib.c ****     else if(*pcPtr == '+')
 1580              		.loc 1 1136 0
 1581 0054 7B69     		ldr	r3, [r7, #20]
 1582 0056 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1583 0058 2B2B     		cmp	r3, #43
 1584 005a 03D1     		bne	.L91
1137:C:/StellarisWare/utils\ustdlib.c ****     {
1138:C:/StellarisWare/utils\ustdlib.c ****         pcPtr++;
 1585              		.loc 1 1138 0
 1586 005c 7B69     		ldr	r3, [r7, #20]
 1587 005e 03F10103 		add	r3, r3, #1
 1588 0062 7B61     		str	r3, [r7, #20]
 1589              	.L91:
1139:C:/StellarisWare/utils\ustdlib.c ****     }
1140:C:/StellarisWare/utils\ustdlib.c **** 
1141:C:/StellarisWare/utils\ustdlib.c ****     //
1142:C:/StellarisWare/utils\ustdlib.c ****     // See if the radix was not specified, or is 16, and the value starts with
1143:C:/StellarisWare/utils\ustdlib.c ****     // "0x" or "0X" (to indicate a hex value).
1144:C:/StellarisWare/utils\ustdlib.c ****     //
1145:C:/StellarisWare/utils\ustdlib.c ****     if(((iBase == 0) || (iBase == 16)) && (*pcPtr == '0') &&
 1590              		.loc 1 1145 0
 1591 0064 7B68     		ldr	r3, [r7, #4]
 1592 0066 002B     		cmp	r3, #0
 1593 0068 02D0     		beq	.L92
 1594              		.loc 1 1145 0 is_stmt 0 discriminator 2
 1595 006a 7B68     		ldr	r3, [r7, #4]
 1596 006c 102B     		cmp	r3, #16
 1597 006e 16D1     		bne	.L93
 1598              	.L92:
 1599              		.loc 1 1145 0 discriminator 1
 1600 0070 7B69     		ldr	r3, [r7, #20]
 1601 0072 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1602 0074 302B     		cmp	r3, #48
 1603 0076 12D1     		bne	.L93
1146:C:/StellarisWare/utils\ustdlib.c ****        ((pcPtr[1] == 'x') || (pcPtr[1] == 'X')))
 1604              		.loc 1 1146 0 is_stmt 1 discriminator 1
 1605 0078 7B69     		ldr	r3, [r7, #20]
 1606 007a 03F10103 		add	r3, r3, #1
 1607 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1145:C:/StellarisWare/utils\ustdlib.c ****     if(((iBase == 0) || (iBase == 16)) && (*pcPtr == '0') &&
 1608              		.loc 1 1145 0 discriminator 1
 1609 0080 782B     		cmp	r3, #120
 1610 0082 05D0     		beq	.L94
 1611              		.loc 1 1146 0
 1612 0084 7B69     		ldr	r3, [r7, #20]
 1613 0086 03F10103 		add	r3, r3, #1
 1614 008a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1615 008c 582B     		cmp	r3, #88
 1616 008e 06D1     		bne	.L93
 1617              	.L94:
1147:C:/StellarisWare/utils\ustdlib.c ****     {
1148:C:/StellarisWare/utils\ustdlib.c ****         //
1149:C:/StellarisWare/utils\ustdlib.c ****         // Skip the leading "0x".
1150:C:/StellarisWare/utils\ustdlib.c ****         //
1151:C:/StellarisWare/utils\ustdlib.c ****         pcPtr += 2;
 1618              		.loc 1 1151 0
 1619 0090 7B69     		ldr	r3, [r7, #20]
 1620 0092 03F10203 		add	r3, r3, #2
 1621 0096 7B61     		str	r3, [r7, #20]
1152:C:/StellarisWare/utils\ustdlib.c **** 
1153:C:/StellarisWare/utils\ustdlib.c ****         //
1154:C:/StellarisWare/utils\ustdlib.c ****         // Set the radix to 16.
1155:C:/StellarisWare/utils\ustdlib.c ****         //
1156:C:/StellarisWare/utils\ustdlib.c ****         iBase = 16;
 1622              		.loc 1 1156 0
 1623 0098 4FF01003 		mov	r3, #16
 1624 009c 7B60     		str	r3, [r7, #4]
 1625              	.L93:
1157:C:/StellarisWare/utils\ustdlib.c ****     }
1158:C:/StellarisWare/utils\ustdlib.c **** 
1159:C:/StellarisWare/utils\ustdlib.c ****     //
1160:C:/StellarisWare/utils\ustdlib.c ****     // See if the radix was not specified.
1161:C:/StellarisWare/utils\ustdlib.c ****     //
1162:C:/StellarisWare/utils\ustdlib.c ****     if(iBase == 0)
 1626              		.loc 1 1162 0
 1627 009e 7B68     		ldr	r3, [r7, #4]
 1628 00a0 002B     		cmp	r3, #0
 1629 00a2 0AD1     		bne	.L95
1163:C:/StellarisWare/utils\ustdlib.c ****     {
1164:C:/StellarisWare/utils\ustdlib.c ****         //
1165:C:/StellarisWare/utils\ustdlib.c ****         // See if the value starts with "0".
1166:C:/StellarisWare/utils\ustdlib.c ****         //
1167:C:/StellarisWare/utils\ustdlib.c ****         if(*pcPtr == '0')
 1630              		.loc 1 1167 0
 1631 00a4 7B69     		ldr	r3, [r7, #20]
 1632 00a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1633 00a8 302B     		cmp	r3, #48
 1634 00aa 03D1     		bne	.L96
1168:C:/StellarisWare/utils\ustdlib.c ****         {
1169:C:/StellarisWare/utils\ustdlib.c ****             //
1170:C:/StellarisWare/utils\ustdlib.c ****             // Values that start with "0" are assumed to be radix 8.
1171:C:/StellarisWare/utils\ustdlib.c ****             //
1172:C:/StellarisWare/utils\ustdlib.c ****             iBase = 8;
 1635              		.loc 1 1172 0
 1636 00ac 4FF00803 		mov	r3, #8
 1637 00b0 7B60     		str	r3, [r7, #4]
 1638 00b2 02E0     		b	.L95
 1639              	.L96:
1173:C:/StellarisWare/utils\ustdlib.c ****         }
1174:C:/StellarisWare/utils\ustdlib.c ****         else
1175:C:/StellarisWare/utils\ustdlib.c ****         {
1176:C:/StellarisWare/utils\ustdlib.c ****             //
1177:C:/StellarisWare/utils\ustdlib.c ****             // Otherwise, the values are assumed to be radix 10.
1178:C:/StellarisWare/utils\ustdlib.c ****             //
1179:C:/StellarisWare/utils\ustdlib.c ****             iBase = 10;
 1640              		.loc 1 1179 0
 1641 00b4 4FF00A03 		mov	r3, #10
 1642 00b8 7B60     		str	r3, [r7, #4]
 1643              	.L95:
1180:C:/StellarisWare/utils\ustdlib.c ****         }
1181:C:/StellarisWare/utils\ustdlib.c ****     }
1182:C:/StellarisWare/utils\ustdlib.c **** 
1183:C:/StellarisWare/utils\ustdlib.c ****     //
1184:C:/StellarisWare/utils\ustdlib.c ****     // Loop while there are more valid digits to consume.
1185:C:/StellarisWare/utils\ustdlib.c ****     //
1186:C:/StellarisWare/utils\ustdlib.c ****     while(1)
1187:C:/StellarisWare/utils\ustdlib.c ****     {
1188:C:/StellarisWare/utils\ustdlib.c ****         //
1189:C:/StellarisWare/utils\ustdlib.c ****         // See if this character is a number.
1190:C:/StellarisWare/utils\ustdlib.c ****         //
1191:C:/StellarisWare/utils\ustdlib.c ****         if((*pcPtr >= '0') && (*pcPtr <= '9'))
 1644              		.loc 1 1191 0
 1645 00ba 7B69     		ldr	r3, [r7, #20]
 1646 00bc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1647 00be 2F2B     		cmp	r3, #47
 1648 00c0 0DD9     		bls	.L97
 1649              		.loc 1 1191 0 is_stmt 0 discriminator 1
 1650 00c2 7B69     		ldr	r3, [r7, #20]
 1651 00c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1652 00c6 392B     		cmp	r3, #57
 1653 00c8 09D8     		bhi	.L97
1192:C:/StellarisWare/utils\ustdlib.c ****         {
1193:C:/StellarisWare/utils\ustdlib.c ****             //
1194:C:/StellarisWare/utils\ustdlib.c ****             // Convert the character to its integer equivalent.
1195:C:/StellarisWare/utils\ustdlib.c ****             //
1196:C:/StellarisWare/utils\ustdlib.c ****             ulDigit = *pcPtr++ - '0';
 1654              		.loc 1 1196 0 is_stmt 1
 1655 00ca 7B69     		ldr	r3, [r7, #20]
 1656 00cc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1657 00ce A3F13003 		sub	r3, r3, #48
 1658 00d2 3B62     		str	r3, [r7, #32]
 1659 00d4 7B69     		ldr	r3, [r7, #20]
 1660 00d6 03F10103 		add	r3, r3, #1
 1661 00da 7B61     		str	r3, [r7, #20]
 1662 00dc 22E0     		b	.L98
 1663              	.L97:
1197:C:/StellarisWare/utils\ustdlib.c ****         }
1198:C:/StellarisWare/utils\ustdlib.c **** 
1199:C:/StellarisWare/utils\ustdlib.c ****         //
1200:C:/StellarisWare/utils\ustdlib.c ****         // Otherwise, see if this character is an upper case letter.
1201:C:/StellarisWare/utils\ustdlib.c ****         //
1202:C:/StellarisWare/utils\ustdlib.c ****         else if((*pcPtr >= 'A') && (*pcPtr <= 'Z'))
 1664              		.loc 1 1202 0
 1665 00de 7B69     		ldr	r3, [r7, #20]
 1666 00e0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1667 00e2 402B     		cmp	r3, #64
 1668 00e4 0DD9     		bls	.L99
 1669              		.loc 1 1202 0 is_stmt 0 discriminator 1
 1670 00e6 7B69     		ldr	r3, [r7, #20]
 1671 00e8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1672 00ea 5A2B     		cmp	r3, #90
 1673 00ec 09D8     		bhi	.L99
1203:C:/StellarisWare/utils\ustdlib.c ****         {
1204:C:/StellarisWare/utils\ustdlib.c ****             //
1205:C:/StellarisWare/utils\ustdlib.c ****             // Convert the character to its integer equivalent.
1206:C:/StellarisWare/utils\ustdlib.c ****             //
1207:C:/StellarisWare/utils\ustdlib.c ****             ulDigit = *pcPtr++ - 'A' + 10;
 1674              		.loc 1 1207 0 is_stmt 1
 1675 00ee 7B69     		ldr	r3, [r7, #20]
 1676 00f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1677 00f2 A3F13703 		sub	r3, r3, #55
 1678 00f6 3B62     		str	r3, [r7, #32]
 1679 00f8 7B69     		ldr	r3, [r7, #20]
 1680 00fa 03F10103 		add	r3, r3, #1
 1681 00fe 7B61     		str	r3, [r7, #20]
 1682 0100 10E0     		b	.L98
 1683              	.L99:
1208:C:/StellarisWare/utils\ustdlib.c ****         }
1209:C:/StellarisWare/utils\ustdlib.c **** 
1210:C:/StellarisWare/utils\ustdlib.c ****         //
1211:C:/StellarisWare/utils\ustdlib.c ****         // Otherwise, see if this character is a lower case letter.
1212:C:/StellarisWare/utils\ustdlib.c ****         //
1213:C:/StellarisWare/utils\ustdlib.c ****         else if((*pcPtr >= 'a') && (*pcPtr <= 'z'))
 1684              		.loc 1 1213 0
 1685 0102 7B69     		ldr	r3, [r7, #20]
 1686 0104 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1687 0106 602B     		cmp	r3, #96
 1688 0108 22D9     		bls	.L100
 1689              		.loc 1 1213 0 is_stmt 0 discriminator 1
 1690 010a 7B69     		ldr	r3, [r7, #20]
 1691 010c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1692 010e 7A2B     		cmp	r3, #122
 1693 0110 1ED8     		bhi	.L100
1214:C:/StellarisWare/utils\ustdlib.c ****         {
1215:C:/StellarisWare/utils\ustdlib.c ****             //
1216:C:/StellarisWare/utils\ustdlib.c ****             // Convert the character to its integer equivalent.
1217:C:/StellarisWare/utils\ustdlib.c ****             //
1218:C:/StellarisWare/utils\ustdlib.c ****             ulDigit = *pcPtr++ - 'a' + 10;
 1694              		.loc 1 1218 0 is_stmt 1
 1695 0112 7B69     		ldr	r3, [r7, #20]
 1696 0114 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1697 0116 A3F15703 		sub	r3, r3, #87
 1698 011a 3B62     		str	r3, [r7, #32]
 1699 011c 7B69     		ldr	r3, [r7, #20]
 1700 011e 03F10103 		add	r3, r3, #1
 1701 0122 7B61     		str	r3, [r7, #20]
 1702              	.L98:
1219:C:/StellarisWare/utils\ustdlib.c ****         }
1220:C:/StellarisWare/utils\ustdlib.c **** 
1221:C:/StellarisWare/utils\ustdlib.c ****         //
1222:C:/StellarisWare/utils\ustdlib.c ****         // Otherwise, this is not a valid character.
1223:C:/StellarisWare/utils\ustdlib.c ****         //
1224:C:/StellarisWare/utils\ustdlib.c ****         else
1225:C:/StellarisWare/utils\ustdlib.c ****         {
1226:C:/StellarisWare/utils\ustdlib.c ****             //
1227:C:/StellarisWare/utils\ustdlib.c ****             // Stop converting this value.
1228:C:/StellarisWare/utils\ustdlib.c ****             //
1229:C:/StellarisWare/utils\ustdlib.c ****             break;
1230:C:/StellarisWare/utils\ustdlib.c ****         }
1231:C:/StellarisWare/utils\ustdlib.c **** 
1232:C:/StellarisWare/utils\ustdlib.c ****         //
1233:C:/StellarisWare/utils\ustdlib.c ****         // See if this digit is valid for the chosen radix.
1234:C:/StellarisWare/utils\ustdlib.c ****         //
1235:C:/StellarisWare/utils\ustdlib.c ****         if(ulDigit >= iBase)
 1703              		.loc 1 1235 0
 1704 0124 7A68     		ldr	r2, [r7, #4]
 1705 0126 3B6A     		ldr	r3, [r7, #32]
 1706 0128 9A42     		cmp	r2, r3
 1707 012a 04D8     		bhi	.L101
1236:C:/StellarisWare/utils\ustdlib.c ****         {
1237:C:/StellarisWare/utils\ustdlib.c ****             //
1238:C:/StellarisWare/utils\ustdlib.c ****             // Since this was not a valid digit, move the pointer back to the
1239:C:/StellarisWare/utils\ustdlib.c ****             // character that therefore should not have been consumed.
1240:C:/StellarisWare/utils\ustdlib.c ****             //
1241:C:/StellarisWare/utils\ustdlib.c ****             pcPtr--;
 1708              		.loc 1 1241 0
 1709 012c 7B69     		ldr	r3, [r7, #20]
 1710 012e 03F1FF33 		add	r3, r3, #-1
 1711 0132 7B61     		str	r3, [r7, #20]
1242:C:/StellarisWare/utils\ustdlib.c **** 
1243:C:/StellarisWare/utils\ustdlib.c ****             //
1244:C:/StellarisWare/utils\ustdlib.c ****             // Stop converting this value.
1245:C:/StellarisWare/utils\ustdlib.c ****             //
1246:C:/StellarisWare/utils\ustdlib.c ****             break;
 1712              		.loc 1 1246 0
 1713 0134 0CE0     		b	.L100
 1714              	.L101:
1247:C:/StellarisWare/utils\ustdlib.c ****         }
1248:C:/StellarisWare/utils\ustdlib.c **** 
1249:C:/StellarisWare/utils\ustdlib.c ****         //
1250:C:/StellarisWare/utils\ustdlib.c ****         // Add this digit to the converted value.
1251:C:/StellarisWare/utils\ustdlib.c ****         //
1252:C:/StellarisWare/utils\ustdlib.c ****         ulRet *= iBase;
 1715              		.loc 1 1252 0
 1716 0136 7A68     		ldr	r2, [r7, #4]
 1717 0138 7B6A     		ldr	r3, [r7, #36]
 1718 013a 02FB03F3 		mul	r3, r2, r3
 1719 013e 7B62     		str	r3, [r7, #36]
1253:C:/StellarisWare/utils\ustdlib.c ****         ulRet += ulDigit;
 1720              		.loc 1 1253 0
 1721 0140 7A6A     		ldr	r2, [r7, #36]
 1722 0142 3B6A     		ldr	r3, [r7, #32]
 1723 0144 D318     		adds	r3, r2, r3
 1724 0146 7B62     		str	r3, [r7, #36]
1254:C:/StellarisWare/utils\ustdlib.c **** 
1255:C:/StellarisWare/utils\ustdlib.c ****         //
1256:C:/StellarisWare/utils\ustdlib.c ****         // Since a digit has been added, this is now a valid result.
1257:C:/StellarisWare/utils\ustdlib.c ****         //
1258:C:/StellarisWare/utils\ustdlib.c ****         ulValid = 1;
 1725              		.loc 1 1258 0
 1726 0148 4FF00103 		mov	r3, #1
 1727 014c BB61     		str	r3, [r7, #24]
1259:C:/StellarisWare/utils\ustdlib.c ****     }
 1728              		.loc 1 1259 0
 1729 014e B4E7     		b	.L95
 1730              	.L100:
1260:C:/StellarisWare/utils\ustdlib.c **** 
1261:C:/StellarisWare/utils\ustdlib.c ****     //
1262:C:/StellarisWare/utils\ustdlib.c ****     // Set the return string pointer to the first character not consumed.
1263:C:/StellarisWare/utils\ustdlib.c ****     //
1264:C:/StellarisWare/utils\ustdlib.c ****     if(ppcStrRet)
 1731              		.loc 1 1264 0
 1732 0150 BB68     		ldr	r3, [r7, #8]
 1733 0152 002B     		cmp	r3, #0
 1734 0154 07D0     		beq	.L102
1265:C:/StellarisWare/utils\ustdlib.c ****     {
1266:C:/StellarisWare/utils\ustdlib.c ****         *ppcStrRet = ulValid ? pcPtr : pcStr;
 1735              		.loc 1 1266 0
 1736 0156 BB69     		ldr	r3, [r7, #24]
 1737 0158 002B     		cmp	r3, #0
 1738 015a 01D0     		beq	.L103
 1739              		.loc 1 1266 0 is_stmt 0 discriminator 1
 1740 015c 7B69     		ldr	r3, [r7, #20]
 1741 015e 00E0     		b	.L104
 1742              	.L103:
 1743              		.loc 1 1266 0 discriminator 2
 1744 0160 FB68     		ldr	r3, [r7, #12]
 1745              	.L104:
 1746              		.loc 1 1266 0 discriminator 3
 1747 0162 BA68     		ldr	r2, [r7, #8]
 1748 0164 1360     		str	r3, [r2, #0]
 1749              	.L102:
1267:C:/StellarisWare/utils\ustdlib.c ****     }
1268:C:/StellarisWare/utils\ustdlib.c **** 
1269:C:/StellarisWare/utils\ustdlib.c ****     //
1270:C:/StellarisWare/utils\ustdlib.c ****     // Return the converted value.
1271:C:/StellarisWare/utils\ustdlib.c ****     //
1272:C:/StellarisWare/utils\ustdlib.c ****     return(ulNeg ? (0 - ulRet) : ulRet);
 1750              		.loc 1 1272 0 is_stmt 1
 1751 0166 FB69     		ldr	r3, [r7, #28]
 1752 0168 002B     		cmp	r3, #0
 1753 016a 03D0     		beq	.L105
 1754              		.loc 1 1272 0 is_stmt 0 discriminator 1
 1755 016c 7B6A     		ldr	r3, [r7, #36]
 1756 016e C3F10003 		rsb	r3, r3, #0
 1757 0172 00E0     		b	.L106
 1758              	.L105:
 1759              		.loc 1 1272 0 discriminator 2
 1760 0174 7B6A     		ldr	r3, [r7, #36]
 1761              	.L106:
1273:C:/StellarisWare/utils\ustdlib.c **** }
 1762              		.loc 1 1273 0 is_stmt 1 discriminator 3
 1763 0176 1846     		mov	r0, r3
 1764 0178 07F12C07 		add	r7, r7, #44
 1765 017c BD46     		mov	sp, r7
 1766 017e 80BC     		pop	{r7}
 1767 0180 7047     		bx	lr
 1768              		.cfi_endproc
 1769              	.LFE7:
 1771 0182 00BF     		.section	.text.ustrlen,"ax",%progbits
 1772              		.align	2
 1773              		.global	ustrlen
 1774              		.thumb
 1775              		.thumb_func
 1777              	ustrlen:
 1778              	.LFB8:
1274:C:/StellarisWare/utils\ustdlib.c **** 
1275:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1276:C:/StellarisWare/utils\ustdlib.c **** //
1277:C:/StellarisWare/utils\ustdlib.c **** //! Retruns the length of a null-terminated string.
1278:C:/StellarisWare/utils\ustdlib.c **** //!
1279:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr is a pointer to the string whose length is to be found.
1280:C:/StellarisWare/utils\ustdlib.c **** //!
1281:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strlen()</tt> function.
1282:C:/StellarisWare/utils\ustdlib.c **** //! It determines the length of the null-terminated string passed and returns
1283:C:/StellarisWare/utils\ustdlib.c **** //! this to the caller.
1284:C:/StellarisWare/utils\ustdlib.c **** //!
1285:C:/StellarisWare/utils\ustdlib.c **** //! This implementation assumes that single byte character strings are passed
1286:C:/StellarisWare/utils\ustdlib.c **** //! and will return incorrect values if passed some UTF-8 strings.
1287:C:/StellarisWare/utils\ustdlib.c **** //!
1288:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns the length of the string pointed to by \e pcStr.
1289:C:/StellarisWare/utils\ustdlib.c **** //
1290:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1291:C:/StellarisWare/utils\ustdlib.c **** int
1292:C:/StellarisWare/utils\ustdlib.c **** ustrlen(const char * pcStr)
1293:C:/StellarisWare/utils\ustdlib.c **** {
 1779              		.loc 1 1293 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 16
 1782              		@ frame_needed = 1, uses_anonymous_args = 0
 1783              		@ link register save eliminated.
 1784 0000 80B4     		push	{r7}
 1785              	.LCFI26:
 1786              		.cfi_def_cfa_offset 4
 1787              		.cfi_offset 7, -4
 1788 0002 85B0     		sub	sp, sp, #20
 1789              	.LCFI27:
 1790              		.cfi_def_cfa_offset 24
 1791 0004 00AF     		add	r7, sp, #0
 1792              	.LCFI28:
 1793              		.cfi_def_cfa_register 7
 1794 0006 7860     		str	r0, [r7, #4]
1294:C:/StellarisWare/utils\ustdlib.c ****     int iLen;
1295:C:/StellarisWare/utils\ustdlib.c **** 
1296:C:/StellarisWare/utils\ustdlib.c ****     ASSERT(pcStr);
1297:C:/StellarisWare/utils\ustdlib.c **** 
1298:C:/StellarisWare/utils\ustdlib.c ****     //
1299:C:/StellarisWare/utils\ustdlib.c ****     // Initialize the length.
1300:C:/StellarisWare/utils\ustdlib.c ****     //
1301:C:/StellarisWare/utils\ustdlib.c ****     iLen = 0;
 1795              		.loc 1 1301 0
 1796 0008 4FF00003 		mov	r3, #0
 1797 000c FB60     		str	r3, [r7, #12]
1302:C:/StellarisWare/utils\ustdlib.c **** 
1303:C:/StellarisWare/utils\ustdlib.c ****     //
1304:C:/StellarisWare/utils\ustdlib.c ****     // Step throug the string looking for a zero character (marking its end).
1305:C:/StellarisWare/utils\ustdlib.c ****     //
1306:C:/StellarisWare/utils\ustdlib.c ****     while(pcStr[iLen])
 1798              		.loc 1 1306 0
 1799 000e 03E0     		b	.L108
 1800              	.L109:
1307:C:/StellarisWare/utils\ustdlib.c ****     {
1308:C:/StellarisWare/utils\ustdlib.c ****         //
1309:C:/StellarisWare/utils\ustdlib.c ****         // Zero not found so move on to the next character.
1310:C:/StellarisWare/utils\ustdlib.c ****         //
1311:C:/StellarisWare/utils\ustdlib.c ****         iLen++;
 1801              		.loc 1 1311 0
 1802 0010 FB68     		ldr	r3, [r7, #12]
 1803 0012 03F10103 		add	r3, r3, #1
 1804 0016 FB60     		str	r3, [r7, #12]
 1805              	.L108:
1306:C:/StellarisWare/utils\ustdlib.c ****     while(pcStr[iLen])
 1806              		.loc 1 1306 0 discriminator 1
 1807 0018 FB68     		ldr	r3, [r7, #12]
 1808 001a 7A68     		ldr	r2, [r7, #4]
 1809 001c D318     		adds	r3, r2, r3
 1810 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1811 0020 002B     		cmp	r3, #0
 1812 0022 F5D1     		bne	.L109
1312:C:/StellarisWare/utils\ustdlib.c ****     }
1313:C:/StellarisWare/utils\ustdlib.c **** 
1314:C:/StellarisWare/utils\ustdlib.c ****     return(iLen);
 1813              		.loc 1 1314 0
 1814 0024 FB68     		ldr	r3, [r7, #12]
1315:C:/StellarisWare/utils\ustdlib.c **** }
 1815              		.loc 1 1315 0
 1816 0026 1846     		mov	r0, r3
 1817 0028 07F11407 		add	r7, r7, #20
 1818 002c BD46     		mov	sp, r7
 1819 002e 80BC     		pop	{r7}
 1820 0030 7047     		bx	lr
 1821              		.cfi_endproc
 1822              	.LFE8:
 1824 0032 00BF     		.section	.text.ustrstr,"ax",%progbits
 1825              		.align	2
 1826              		.global	ustrstr
 1827              		.thumb
 1828              		.thumb_func
 1830              	ustrstr:
 1831              	.LFB9:
1316:C:/StellarisWare/utils\ustdlib.c **** 
1317:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1318:C:/StellarisWare/utils\ustdlib.c **** //
1319:C:/StellarisWare/utils\ustdlib.c **** //! Finds a substring within a string.
1320:C:/StellarisWare/utils\ustdlib.c **** //!
1321:C:/StellarisWare/utils\ustdlib.c **** //! \param pcHaystack is a pointer to the string that will be searched.
1322:C:/StellarisWare/utils\ustdlib.c **** //! \param pcNeedle is a pointer to the substring that is to be found within
1323:C:/StellarisWare/utils\ustdlib.c **** //! \e pcHaystack.
1324:C:/StellarisWare/utils\ustdlib.c **** //!
1325:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strstr()</tt> function.
1326:C:/StellarisWare/utils\ustdlib.c **** //! It scans a string for the first instance of a given substring and returns
1327:C:/StellarisWare/utils\ustdlib.c **** //! a pointer to that substring.  If the substring cannot be found, a NULL
1328:C:/StellarisWare/utils\ustdlib.c **** //! pointer is returned.
1329:C:/StellarisWare/utils\ustdlib.c **** //!
1330:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns a pointer to the first occurrence of \e pcNeedle within
1331:C:/StellarisWare/utils\ustdlib.c **** //! \e pcHaystack or NULL if no match is found.
1332:C:/StellarisWare/utils\ustdlib.c **** //
1333:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1334:C:/StellarisWare/utils\ustdlib.c **** char *
1335:C:/StellarisWare/utils\ustdlib.c **** ustrstr(const char *pcHaystack, const char *pcNeedle)
1336:C:/StellarisWare/utils\ustdlib.c **** {
 1832              		.loc 1 1336 0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 16
 1835              		@ frame_needed = 1, uses_anonymous_args = 0
 1836 0000 80B5     		push	{r7, lr}
 1837              	.LCFI29:
 1838              		.cfi_def_cfa_offset 8
 1839              		.cfi_offset 14, -4
 1840              		.cfi_offset 7, -8
 1841 0002 84B0     		sub	sp, sp, #16
 1842              	.LCFI30:
 1843              		.cfi_def_cfa_offset 24
 1844 0004 00AF     		add	r7, sp, #0
 1845              	.LCFI31:
 1846              		.cfi_def_cfa_register 7
 1847 0006 7860     		str	r0, [r7, #4]
 1848 0008 3960     		str	r1, [r7, #0]
1337:C:/StellarisWare/utils\ustdlib.c ****     unsigned long ulLength;
1338:C:/StellarisWare/utils\ustdlib.c **** 
1339:C:/StellarisWare/utils\ustdlib.c ****     //
1340:C:/StellarisWare/utils\ustdlib.c ****     // Get the length of the string to be found.
1341:C:/StellarisWare/utils\ustdlib.c ****     //
1342:C:/StellarisWare/utils\ustdlib.c ****     ulLength = ustrlen(pcNeedle);
 1849              		.loc 1 1342 0
 1850 000a 3868     		ldr	r0, [r7, #0]
 1851 000c FFF7FEFF 		bl	ustrlen
 1852 0010 0346     		mov	r3, r0
 1853 0012 FB60     		str	r3, [r7, #12]
1343:C:/StellarisWare/utils\ustdlib.c **** 
1344:C:/StellarisWare/utils\ustdlib.c ****     //
1345:C:/StellarisWare/utils\ustdlib.c ****     // Loop while we have not reached the end of the string.
1346:C:/StellarisWare/utils\ustdlib.c ****     //
1347:C:/StellarisWare/utils\ustdlib.c ****     while(*pcHaystack)
 1854              		.loc 1 1347 0
 1855 0014 0EE0     		b	.L111
 1856              	.L114:
1348:C:/StellarisWare/utils\ustdlib.c ****     {
1349:C:/StellarisWare/utils\ustdlib.c ****         //
1350:C:/StellarisWare/utils\ustdlib.c ****         // Check to see if the substring appears at this position.
1351:C:/StellarisWare/utils\ustdlib.c ****         //
1352:C:/StellarisWare/utils\ustdlib.c ****         if(ustrncmp(pcNeedle, pcHaystack, ulLength) == 0)
 1857              		.loc 1 1352 0
 1858 0016 FB68     		ldr	r3, [r7, #12]
 1859 0018 3868     		ldr	r0, [r7, #0]
 1860 001a 7968     		ldr	r1, [r7, #4]
 1861 001c 1A46     		mov	r2, r3
 1862 001e FFF7FEFF 		bl	ustrncmp
 1863 0022 0346     		mov	r3, r0
 1864 0024 002B     		cmp	r3, #0
 1865 0026 01D1     		bne	.L112
1353:C:/StellarisWare/utils\ustdlib.c ****         {
1354:C:/StellarisWare/utils\ustdlib.c ****             //
1355:C:/StellarisWare/utils\ustdlib.c ****             // It does so return the pointer.
1356:C:/StellarisWare/utils\ustdlib.c ****             //
1357:C:/StellarisWare/utils\ustdlib.c ****             return((char *)pcHaystack);
 1866              		.loc 1 1357 0
 1867 0028 7B68     		ldr	r3, [r7, #4]
 1868 002a 09E0     		b	.L113
 1869              	.L112:
1358:C:/StellarisWare/utils\ustdlib.c ****         }
1359:C:/StellarisWare/utils\ustdlib.c **** 
1360:C:/StellarisWare/utils\ustdlib.c ****         //
1361:C:/StellarisWare/utils\ustdlib.c ****         // Move to the next position in the string being searched.
1362:C:/StellarisWare/utils\ustdlib.c ****         //
1363:C:/StellarisWare/utils\ustdlib.c ****         pcHaystack++;
 1870              		.loc 1 1363 0
 1871 002c 7B68     		ldr	r3, [r7, #4]
 1872 002e 03F10103 		add	r3, r3, #1
 1873 0032 7B60     		str	r3, [r7, #4]
 1874              	.L111:
1347:C:/StellarisWare/utils\ustdlib.c ****     while(*pcHaystack)
 1875              		.loc 1 1347 0 discriminator 1
 1876 0034 7B68     		ldr	r3, [r7, #4]
 1877 0036 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1878 0038 002B     		cmp	r3, #0
 1879 003a ECD1     		bne	.L114
1364:C:/StellarisWare/utils\ustdlib.c ****     }
1365:C:/StellarisWare/utils\ustdlib.c **** 
1366:C:/StellarisWare/utils\ustdlib.c ****     //
1367:C:/StellarisWare/utils\ustdlib.c ****     // We reached the end of the string without finding the substring so
1368:C:/StellarisWare/utils\ustdlib.c ****     // return NULL.
1369:C:/StellarisWare/utils\ustdlib.c ****     //
1370:C:/StellarisWare/utils\ustdlib.c ****     return((char *)0);
 1880              		.loc 1 1370 0
 1881 003c 4FF00003 		mov	r3, #0
 1882              	.L113:
1371:C:/StellarisWare/utils\ustdlib.c **** }
 1883              		.loc 1 1371 0
 1884 0040 1846     		mov	r0, r3
 1885 0042 07F11007 		add	r7, r7, #16
 1886 0046 BD46     		mov	sp, r7
 1887 0048 80BD     		pop	{r7, pc}
 1888              		.cfi_endproc
 1889              	.LFE9:
 1891 004a 00BF     		.section	.text.ustrnicmp,"ax",%progbits
 1892              		.align	2
 1893              		.global	ustrnicmp
 1894              		.thumb
 1895              		.thumb_func
 1897              	ustrnicmp:
 1898              	.LFB10:
1372:C:/StellarisWare/utils\ustdlib.c **** 
1373:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1374:C:/StellarisWare/utils\ustdlib.c **** //
1375:C:/StellarisWare/utils\ustdlib.c **** //! Compares two strings without regard to case.
1376:C:/StellarisWare/utils\ustdlib.c **** //!
1377:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr1 points to the first string to be compared.
1378:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr2 points to the second string to be compared.
1379:C:/StellarisWare/utils\ustdlib.c **** //! \param iCount is the maximum number of characters to compare.
1380:C:/StellarisWare/utils\ustdlib.c **** //!
1381:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strnicmp()</tt> function.
1382:C:/StellarisWare/utils\ustdlib.c **** //! It compares at most \e iCount characters of two strings without regard to
1383:C:/StellarisWare/utils\ustdlib.c **** //! case.  The comparison ends if a terminating NULL character is found in
1384:C:/StellarisWare/utils\ustdlib.c **** //! either string before \e iCount characters are compared.  In this case, the
1385:C:/StellarisWare/utils\ustdlib.c **** //! shorter string is deemed the lesser.
1386:C:/StellarisWare/utils\ustdlib.c **** //!
1387:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns 0 if the two strings are equal, -1 if \e pcStr1 is less
1388:C:/StellarisWare/utils\ustdlib.c **** //! than \e pcStr2 and 1 if \e pcStr1 is greater than \e pcStr2.
1389:C:/StellarisWare/utils\ustdlib.c **** //
1390:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1391:C:/StellarisWare/utils\ustdlib.c **** int
1392:C:/StellarisWare/utils\ustdlib.c **** ustrnicmp(const char *pcStr1, const char *pcStr2, int iCount)
1393:C:/StellarisWare/utils\ustdlib.c **** {
 1899              		.loc 1 1393 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 24
 1902              		@ frame_needed = 1, uses_anonymous_args = 0
 1903              		@ link register save eliminated.
 1904 0000 80B4     		push	{r7}
 1905              	.LCFI32:
 1906              		.cfi_def_cfa_offset 4
 1907              		.cfi_offset 7, -4
 1908 0002 87B0     		sub	sp, sp, #28
 1909              	.LCFI33:
 1910              		.cfi_def_cfa_offset 32
 1911 0004 00AF     		add	r7, sp, #0
 1912              	.LCFI34:
 1913              		.cfi_def_cfa_register 7
 1914 0006 F860     		str	r0, [r7, #12]
 1915 0008 B960     		str	r1, [r7, #8]
 1916 000a 7A60     		str	r2, [r7, #4]
1394:C:/StellarisWare/utils\ustdlib.c ****     char cL1, cL2;
1395:C:/StellarisWare/utils\ustdlib.c **** 
1396:C:/StellarisWare/utils\ustdlib.c ****     while(iCount)
 1917              		.loc 1 1396 0
 1918 000c 46E0     		b	.L116
 1919              	.L125:
1397:C:/StellarisWare/utils\ustdlib.c ****     {
1398:C:/StellarisWare/utils\ustdlib.c ****         //
1399:C:/StellarisWare/utils\ustdlib.c ****         // If we reached a NULL in both strings, they must be equal so
1400:C:/StellarisWare/utils\ustdlib.c ****         // we end the comparison and return 0
1401:C:/StellarisWare/utils\ustdlib.c ****         //
1402:C:/StellarisWare/utils\ustdlib.c ****         if(!*pcStr1 && !*pcStr2)
 1920              		.loc 1 1402 0
 1921 000e FB68     		ldr	r3, [r7, #12]
 1922 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1923 0012 002B     		cmp	r3, #0
 1924 0014 06D1     		bne	.L117
 1925              		.loc 1 1402 0 is_stmt 0 discriminator 1
 1926 0016 BB68     		ldr	r3, [r7, #8]
 1927 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1928 001a 002B     		cmp	r3, #0
 1929 001c 02D1     		bne	.L117
1403:C:/StellarisWare/utils\ustdlib.c ****         {
1404:C:/StellarisWare/utils\ustdlib.c ****             return(0);
 1930              		.loc 1 1404 0 is_stmt 1
 1931 001e 4FF00003 		mov	r3, #0
 1932 0022 40E0     		b	.L118
 1933              	.L117:
1405:C:/StellarisWare/utils\ustdlib.c ****         }
1406:C:/StellarisWare/utils\ustdlib.c **** 
1407:C:/StellarisWare/utils\ustdlib.c ****         //
1408:C:/StellarisWare/utils\ustdlib.c ****         // Lower case the characters at the current position before we compare.
1409:C:/StellarisWare/utils\ustdlib.c ****         //
1410:C:/StellarisWare/utils\ustdlib.c ****         cL1 = (((*pcStr1 >= 'A') && (*pcStr1 <= 'Z')) ?
 1934              		.loc 1 1410 0
 1935 0024 FB68     		ldr	r3, [r7, #12]
 1936 0026 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1937 0028 402B     		cmp	r3, #64
 1938 002a 09D9     		bls	.L119
 1939              		.loc 1 1410 0 is_stmt 0 discriminator 1
 1940 002c FB68     		ldr	r3, [r7, #12]
 1941 002e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1942 0030 5A2B     		cmp	r3, #90
 1943 0032 05D8     		bhi	.L119
1411:C:/StellarisWare/utils\ustdlib.c ****                             (*pcStr1 + ('a' - 'A')) : *pcStr1);
 1944              		.loc 1 1411 0 is_stmt 1 discriminator 1
 1945 0034 FB68     		ldr	r3, [r7, #12]
 1946 0036 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1410:C:/StellarisWare/utils\ustdlib.c ****         cL1 = (((*pcStr1 >= 'A') && (*pcStr1 <= 'Z')) ?
 1947              		.loc 1 1410 0 discriminator 1
 1948 0038 03F12003 		add	r3, r3, #32
 1949 003c DBB2     		uxtb	r3, r3
 1950 003e 01E0     		b	.L120
 1951              	.L119:
1410:C:/StellarisWare/utils\ustdlib.c ****         cL1 = (((*pcStr1 >= 'A') && (*pcStr1 <= 'Z')) ?
 1952              		.loc 1 1410 0 is_stmt 0 discriminator 2
 1953 0040 FB68     		ldr	r3, [r7, #12]
 1954 0042 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1955              	.L120:
1410:C:/StellarisWare/utils\ustdlib.c ****         cL1 = (((*pcStr1 >= 'A') && (*pcStr1 <= 'Z')) ?
 1956              		.loc 1 1410 0 discriminator 3
 1957 0044 FB75     		strb	r3, [r7, #23]
1412:C:/StellarisWare/utils\ustdlib.c ****         cL2 = (((*pcStr2 >= 'A') && (*pcStr2 <= 'Z')) ?
 1958              		.loc 1 1412 0 is_stmt 1 discriminator 3
 1959 0046 BB68     		ldr	r3, [r7, #8]
 1960 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1961 004a 402B     		cmp	r3, #64
 1962 004c 09D9     		bls	.L121
 1963              		.loc 1 1412 0 is_stmt 0 discriminator 1
 1964 004e BB68     		ldr	r3, [r7, #8]
 1965 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1966 0052 5A2B     		cmp	r3, #90
 1967 0054 05D8     		bhi	.L121
1413:C:/StellarisWare/utils\ustdlib.c ****                             (*pcStr2  + ('a' - 'A')) : *pcStr2);
 1968              		.loc 1 1413 0 is_stmt 1 discriminator 1
 1969 0056 BB68     		ldr	r3, [r7, #8]
 1970 0058 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1412:C:/StellarisWare/utils\ustdlib.c ****         cL2 = (((*pcStr2 >= 'A') && (*pcStr2 <= 'Z')) ?
 1971              		.loc 1 1412 0 discriminator 1
 1972 005a 03F12003 		add	r3, r3, #32
 1973 005e DBB2     		uxtb	r3, r3
 1974 0060 01E0     		b	.L122
 1975              	.L121:
1412:C:/StellarisWare/utils\ustdlib.c ****         cL2 = (((*pcStr2 >= 'A') && (*pcStr2 <= 'Z')) ?
 1976              		.loc 1 1412 0 is_stmt 0 discriminator 2
 1977 0062 BB68     		ldr	r3, [r7, #8]
 1978 0064 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1979              	.L122:
1412:C:/StellarisWare/utils\ustdlib.c ****         cL2 = (((*pcStr2 >= 'A') && (*pcStr2 <= 'Z')) ?
 1980              		.loc 1 1412 0 discriminator 3
 1981 0066 BB75     		strb	r3, [r7, #22]
1414:C:/StellarisWare/utils\ustdlib.c ****         //
1415:C:/StellarisWare/utils\ustdlib.c ****         // Compare the two characters and, if different, return the relevant
1416:C:/StellarisWare/utils\ustdlib.c ****         // return code.
1417:C:/StellarisWare/utils\ustdlib.c ****         //
1418:C:/StellarisWare/utils\ustdlib.c ****         if(cL2 < cL1)
 1982              		.loc 1 1418 0 is_stmt 1 discriminator 3
 1983 0068 BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 1984 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1985 006c 9A42     		cmp	r2, r3
 1986 006e 02D2     		bcs	.L123
1419:C:/StellarisWare/utils\ustdlib.c ****         {
1420:C:/StellarisWare/utils\ustdlib.c ****             return(1);
 1987              		.loc 1 1420 0
 1988 0070 4FF00103 		mov	r3, #1
 1989 0074 17E0     		b	.L118
 1990              	.L123:
1421:C:/StellarisWare/utils\ustdlib.c ****         }
1422:C:/StellarisWare/utils\ustdlib.c ****         if(cL1 < cL2)
 1991              		.loc 1 1422 0
 1992 0076 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1993 0078 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 1994 007a 9A42     		cmp	r2, r3
 1995 007c 02D2     		bcs	.L124
1423:C:/StellarisWare/utils\ustdlib.c ****         {
1424:C:/StellarisWare/utils\ustdlib.c ****             return(-1);
 1996              		.loc 1 1424 0
 1997 007e 4FF0FF33 		mov	r3, #-1
 1998 0082 10E0     		b	.L118
 1999              	.L124:
1425:C:/StellarisWare/utils\ustdlib.c ****         }
1426:C:/StellarisWare/utils\ustdlib.c **** 
1427:C:/StellarisWare/utils\ustdlib.c ****         //
1428:C:/StellarisWare/utils\ustdlib.c ****         // Move on to the next character.
1429:C:/StellarisWare/utils\ustdlib.c ****         //
1430:C:/StellarisWare/utils\ustdlib.c ****         pcStr1++;
 2000              		.loc 1 1430 0
 2001 0084 FB68     		ldr	r3, [r7, #12]
 2002 0086 03F10103 		add	r3, r3, #1
 2003 008a FB60     		str	r3, [r7, #12]
1431:C:/StellarisWare/utils\ustdlib.c ****         pcStr2++;
 2004              		.loc 1 1431 0
 2005 008c BB68     		ldr	r3, [r7, #8]
 2006 008e 03F10103 		add	r3, r3, #1
 2007 0092 BB60     		str	r3, [r7, #8]
1432:C:/StellarisWare/utils\ustdlib.c ****         iCount--;
 2008              		.loc 1 1432 0
 2009 0094 7B68     		ldr	r3, [r7, #4]
 2010 0096 03F1FF33 		add	r3, r3, #-1
 2011 009a 7B60     		str	r3, [r7, #4]
 2012              	.L116:
1396:C:/StellarisWare/utils\ustdlib.c ****     while(iCount)
 2013              		.loc 1 1396 0 discriminator 1
 2014 009c 7B68     		ldr	r3, [r7, #4]
 2015 009e 002B     		cmp	r3, #0
 2016 00a0 B5D1     		bne	.L125
1433:C:/StellarisWare/utils\ustdlib.c ****     }
1434:C:/StellarisWare/utils\ustdlib.c **** 
1435:C:/StellarisWare/utils\ustdlib.c ****     //
1436:C:/StellarisWare/utils\ustdlib.c ****     // If we fall out, the strings must be equal for at least the first iCount
1437:C:/StellarisWare/utils\ustdlib.c ****     // characters so return 0 to indicate this.
1438:C:/StellarisWare/utils\ustdlib.c ****     //
1439:C:/StellarisWare/utils\ustdlib.c ****     return(0);
 2017              		.loc 1 1439 0
 2018 00a2 4FF00003 		mov	r3, #0
 2019              	.L118:
1440:C:/StellarisWare/utils\ustdlib.c **** }
 2020              		.loc 1 1440 0
 2021 00a6 1846     		mov	r0, r3
 2022 00a8 07F11C07 		add	r7, r7, #28
 2023 00ac BD46     		mov	sp, r7
 2024 00ae 80BC     		pop	{r7}
 2025 00b0 7047     		bx	lr
 2026              		.cfi_endproc
 2027              	.LFE10:
 2029 00b2 00BF     		.section	.text.ustrcasecmp,"ax",%progbits
 2030              		.align	2
 2031              		.global	ustrcasecmp
 2032              		.thumb
 2033              		.thumb_func
 2035              	ustrcasecmp:
 2036              	.LFB11:
1441:C:/StellarisWare/utils\ustdlib.c **** 
1442:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1443:C:/StellarisWare/utils\ustdlib.c **** //
1444:C:/StellarisWare/utils\ustdlib.c **** //! Compares two strings without regard to case.
1445:C:/StellarisWare/utils\ustdlib.c **** //!
1446:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr1 points to the first string to be compared.
1447:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr2 points to the second string to be compared.
1448:C:/StellarisWare/utils\ustdlib.c **** //!
1449:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strcasecmp()</tt>
1450:C:/StellarisWare/utils\ustdlib.c **** //! function.  It compares two strings without regard to case.  The comparison
1451:C:/StellarisWare/utils\ustdlib.c **** //! ends if a terminating NULL character is found in either string.  In this
1452:C:/StellarisWare/utils\ustdlib.c **** //! case, the shorter string is deemed the lesser.
1453:C:/StellarisWare/utils\ustdlib.c **** //!
1454:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns 0 if the two strings are equal, -1 if \e pcStr1 is less
1455:C:/StellarisWare/utils\ustdlib.c **** //! than \e pcStr2 and 1 if \e pcStr1 is greater than \e pcStr2.
1456:C:/StellarisWare/utils\ustdlib.c **** //
1457:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1458:C:/StellarisWare/utils\ustdlib.c **** int
1459:C:/StellarisWare/utils\ustdlib.c **** ustrcasecmp(const char *pcStr1, const char *pcStr2)
1460:C:/StellarisWare/utils\ustdlib.c **** {
 2037              		.loc 1 1460 0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 8
 2040              		@ frame_needed = 1, uses_anonymous_args = 0
 2041 0000 80B5     		push	{r7, lr}
 2042              	.LCFI35:
 2043              		.cfi_def_cfa_offset 8
 2044              		.cfi_offset 14, -4
 2045              		.cfi_offset 7, -8
 2046 0002 82B0     		sub	sp, sp, #8
 2047              	.LCFI36:
 2048              		.cfi_def_cfa_offset 16
 2049 0004 00AF     		add	r7, sp, #0
 2050              	.LCFI37:
 2051              		.cfi_def_cfa_register 7
 2052 0006 7860     		str	r0, [r7, #4]
 2053 0008 3960     		str	r1, [r7, #0]
1461:C:/StellarisWare/utils\ustdlib.c ****     //
1462:C:/StellarisWare/utils\ustdlib.c ****     // Just let ustrnicmp() handle this.
1463:C:/StellarisWare/utils\ustdlib.c ****     //
1464:C:/StellarisWare/utils\ustdlib.c ****     return(ustrnicmp(pcStr1, pcStr2, -1));
 2054              		.loc 1 1464 0
 2055 000a 7868     		ldr	r0, [r7, #4]
 2056 000c 3968     		ldr	r1, [r7, #0]
 2057 000e 4FF0FF32 		mov	r2, #-1
 2058 0012 FFF7FEFF 		bl	ustrnicmp
 2059 0016 0346     		mov	r3, r0
1465:C:/StellarisWare/utils\ustdlib.c **** }
 2060              		.loc 1 1465 0
 2061 0018 1846     		mov	r0, r3
 2062 001a 07F10807 		add	r7, r7, #8
 2063 001e BD46     		mov	sp, r7
 2064 0020 80BD     		pop	{r7, pc}
 2065              		.cfi_endproc
 2066              	.LFE11:
 2068 0022 00BF     		.section	.text.ustrncmp,"ax",%progbits
 2069              		.align	2
 2070              		.global	ustrncmp
 2071              		.thumb
 2072              		.thumb_func
 2074              	ustrncmp:
 2075              	.LFB12:
1466:C:/StellarisWare/utils\ustdlib.c **** 
1467:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1468:C:/StellarisWare/utils\ustdlib.c **** //
1469:C:/StellarisWare/utils\ustdlib.c **** //! Compares two strings.
1470:C:/StellarisWare/utils\ustdlib.c **** //!
1471:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr1 points to the first string to be compared.
1472:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr2 points to the second string to be compared.
1473:C:/StellarisWare/utils\ustdlib.c **** //! \param iCount is the maximum number of characters to compare.
1474:C:/StellarisWare/utils\ustdlib.c **** //!
1475:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strncmp()</tt> function.
1476:C:/StellarisWare/utils\ustdlib.c **** //! It compares at most \e iCount characters of two strings taking case into
1477:C:/StellarisWare/utils\ustdlib.c **** //! account.  The comparison ends if a terminating NULL character is found in
1478:C:/StellarisWare/utils\ustdlib.c **** //! either string before \e iCount characters are compared.  In this case, the
1479:C:/StellarisWare/utils\ustdlib.c **** //! shorter string is deemed the lesser.
1480:C:/StellarisWare/utils\ustdlib.c **** //!
1481:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns 0 if the two strings are equal, -1 if \e pcStr1 is less
1482:C:/StellarisWare/utils\ustdlib.c **** //! than \e pcStr2 and 1 if \e pcStr1 is greater than \e pcStr2.
1483:C:/StellarisWare/utils\ustdlib.c **** //
1484:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1485:C:/StellarisWare/utils\ustdlib.c **** int
1486:C:/StellarisWare/utils\ustdlib.c **** ustrncmp(const char *pcStr1, const char *pcStr2, int iCount)
1487:C:/StellarisWare/utils\ustdlib.c **** {
 2076              		.loc 1 1487 0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 16
 2079              		@ frame_needed = 1, uses_anonymous_args = 0
 2080              		@ link register save eliminated.
 2081 0000 80B4     		push	{r7}
 2082              	.LCFI38:
 2083              		.cfi_def_cfa_offset 4
 2084              		.cfi_offset 7, -4
 2085 0002 85B0     		sub	sp, sp, #20
 2086              	.LCFI39:
 2087              		.cfi_def_cfa_offset 24
 2088 0004 00AF     		add	r7, sp, #0
 2089              	.LCFI40:
 2090              		.cfi_def_cfa_register 7
 2091 0006 F860     		str	r0, [r7, #12]
 2092 0008 B960     		str	r1, [r7, #8]
 2093 000a 7A60     		str	r2, [r7, #4]
1488:C:/StellarisWare/utils\ustdlib.c ****     while(iCount)
 2094              		.loc 1 1488 0
 2095 000c 28E0     		b	.L128
 2096              	.L133:
1489:C:/StellarisWare/utils\ustdlib.c ****     {
1490:C:/StellarisWare/utils\ustdlib.c ****         //
1491:C:/StellarisWare/utils\ustdlib.c ****         // If we reached a NULL in both strings, they must be equal so
1492:C:/StellarisWare/utils\ustdlib.c ****         // we end the comparison and return 0
1493:C:/StellarisWare/utils\ustdlib.c ****         //
1494:C:/StellarisWare/utils\ustdlib.c ****         if(!*pcStr1 && !*pcStr2)
 2097              		.loc 1 1494 0
 2098 000e FB68     		ldr	r3, [r7, #12]
 2099 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2100 0012 002B     		cmp	r3, #0
 2101 0014 06D1     		bne	.L129
 2102              		.loc 1 1494 0 is_stmt 0 discriminator 1
 2103 0016 BB68     		ldr	r3, [r7, #8]
 2104 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2105 001a 002B     		cmp	r3, #0
 2106 001c 02D1     		bne	.L129
1495:C:/StellarisWare/utils\ustdlib.c ****         {
1496:C:/StellarisWare/utils\ustdlib.c ****             return(0);
 2107              		.loc 1 1496 0 is_stmt 1
 2108 001e 4FF00003 		mov	r3, #0
 2109 0022 22E0     		b	.L130
 2110              	.L129:
1497:C:/StellarisWare/utils\ustdlib.c ****         }
1498:C:/StellarisWare/utils\ustdlib.c **** 
1499:C:/StellarisWare/utils\ustdlib.c ****         //
1500:C:/StellarisWare/utils\ustdlib.c ****         // Compare the two characters and, if different, return the relevant
1501:C:/StellarisWare/utils\ustdlib.c ****         // return code.
1502:C:/StellarisWare/utils\ustdlib.c ****         //
1503:C:/StellarisWare/utils\ustdlib.c ****         if(*pcStr2 < *pcStr1)
 2111              		.loc 1 1503 0
 2112 0024 BB68     		ldr	r3, [r7, #8]
 2113 0026 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2114 0028 FB68     		ldr	r3, [r7, #12]
 2115 002a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2116 002c 9A42     		cmp	r2, r3
 2117 002e 02D2     		bcs	.L131
1504:C:/StellarisWare/utils\ustdlib.c ****         {
1505:C:/StellarisWare/utils\ustdlib.c ****             return(1);
 2118              		.loc 1 1505 0
 2119 0030 4FF00103 		mov	r3, #1
 2120 0034 19E0     		b	.L130
 2121              	.L131:
1506:C:/StellarisWare/utils\ustdlib.c ****         }
1507:C:/StellarisWare/utils\ustdlib.c ****         if(*pcStr1 < *pcStr2)
 2122              		.loc 1 1507 0
 2123 0036 FB68     		ldr	r3, [r7, #12]
 2124 0038 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2125 003a BB68     		ldr	r3, [r7, #8]
 2126 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2127 003e 9A42     		cmp	r2, r3
 2128 0040 02D2     		bcs	.L132
1508:C:/StellarisWare/utils\ustdlib.c ****         {
1509:C:/StellarisWare/utils\ustdlib.c ****             return(-1);
 2129              		.loc 1 1509 0
 2130 0042 4FF0FF33 		mov	r3, #-1
 2131 0046 10E0     		b	.L130
 2132              	.L132:
1510:C:/StellarisWare/utils\ustdlib.c ****         }
1511:C:/StellarisWare/utils\ustdlib.c **** 
1512:C:/StellarisWare/utils\ustdlib.c ****         //
1513:C:/StellarisWare/utils\ustdlib.c ****         // Move on to the next character.
1514:C:/StellarisWare/utils\ustdlib.c ****         //
1515:C:/StellarisWare/utils\ustdlib.c ****         pcStr1++;
 2133              		.loc 1 1515 0
 2134 0048 FB68     		ldr	r3, [r7, #12]
 2135 004a 03F10103 		add	r3, r3, #1
 2136 004e FB60     		str	r3, [r7, #12]
1516:C:/StellarisWare/utils\ustdlib.c ****         pcStr2++;
 2137              		.loc 1 1516 0
 2138 0050 BB68     		ldr	r3, [r7, #8]
 2139 0052 03F10103 		add	r3, r3, #1
 2140 0056 BB60     		str	r3, [r7, #8]
1517:C:/StellarisWare/utils\ustdlib.c ****         iCount--;
 2141              		.loc 1 1517 0
 2142 0058 7B68     		ldr	r3, [r7, #4]
 2143 005a 03F1FF33 		add	r3, r3, #-1
 2144 005e 7B60     		str	r3, [r7, #4]
 2145              	.L128:
1488:C:/StellarisWare/utils\ustdlib.c ****     while(iCount)
 2146              		.loc 1 1488 0 discriminator 1
 2147 0060 7B68     		ldr	r3, [r7, #4]
 2148 0062 002B     		cmp	r3, #0
 2149 0064 D3D1     		bne	.L133
1518:C:/StellarisWare/utils\ustdlib.c ****     }
1519:C:/StellarisWare/utils\ustdlib.c **** 
1520:C:/StellarisWare/utils\ustdlib.c ****     //
1521:C:/StellarisWare/utils\ustdlib.c ****     // If we fall out, the strings must be equal for at least the first iCount
1522:C:/StellarisWare/utils\ustdlib.c ****     // characters so return 0 to indicate this.
1523:C:/StellarisWare/utils\ustdlib.c ****     //
1524:C:/StellarisWare/utils\ustdlib.c ****     return(0);
 2150              		.loc 1 1524 0
 2151 0066 4FF00003 		mov	r3, #0
 2152              	.L130:
1525:C:/StellarisWare/utils\ustdlib.c **** 
1526:C:/StellarisWare/utils\ustdlib.c **** }
 2153              		.loc 1 1526 0
 2154 006a 1846     		mov	r0, r3
 2155 006c 07F11407 		add	r7, r7, #20
 2156 0070 BD46     		mov	sp, r7
 2157 0072 80BC     		pop	{r7}
 2158 0074 7047     		bx	lr
 2159              		.cfi_endproc
 2160              	.LFE12:
 2162 0076 00BF     		.section	.text.ustrcmp,"ax",%progbits
 2163              		.align	2
 2164              		.global	ustrcmp
 2165              		.thumb
 2166              		.thumb_func
 2168              	ustrcmp:
 2169              	.LFB13:
1527:C:/StellarisWare/utils\ustdlib.c **** 
1528:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1529:C:/StellarisWare/utils\ustdlib.c **** //
1530:C:/StellarisWare/utils\ustdlib.c **** //! Compares two strings.
1531:C:/StellarisWare/utils\ustdlib.c **** //!
1532:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr1 points to the first string to be compared.
1533:C:/StellarisWare/utils\ustdlib.c **** //! \param pcStr2 points to the second string to be compared.
1534:C:/StellarisWare/utils\ustdlib.c **** //!
1535:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>strcmp()</tt>
1536:C:/StellarisWare/utils\ustdlib.c **** //! function.  It compares two strings, taking case into account.  The
1537:C:/StellarisWare/utils\ustdlib.c **** //! comparison ends if a terminating NULL character is found in either string.
1538:C:/StellarisWare/utils\ustdlib.c **** //! In this case, the shorter string is deemed the lesser.
1539:C:/StellarisWare/utils\ustdlib.c **** //!
1540:C:/StellarisWare/utils\ustdlib.c **** //! \return Returns 0 if the two strings are equal, -1 if \e pcStr1 is less
1541:C:/StellarisWare/utils\ustdlib.c **** //! than \e pcStr2 and 1 if \e pcStr1 is greater than \e pcStr2.
1542:C:/StellarisWare/utils\ustdlib.c **** //
1543:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1544:C:/StellarisWare/utils\ustdlib.c **** int
1545:C:/StellarisWare/utils\ustdlib.c **** ustrcmp(const char *pcStr1, const char *pcStr2)
1546:C:/StellarisWare/utils\ustdlib.c **** {
 2170              		.loc 1 1546 0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 8
 2173              		@ frame_needed = 1, uses_anonymous_args = 0
 2174 0000 80B5     		push	{r7, lr}
 2175              	.LCFI41:
 2176              		.cfi_def_cfa_offset 8
 2177              		.cfi_offset 14, -4
 2178              		.cfi_offset 7, -8
 2179 0002 82B0     		sub	sp, sp, #8
 2180              	.LCFI42:
 2181              		.cfi_def_cfa_offset 16
 2182 0004 00AF     		add	r7, sp, #0
 2183              	.LCFI43:
 2184              		.cfi_def_cfa_register 7
 2185 0006 7860     		str	r0, [r7, #4]
 2186 0008 3960     		str	r1, [r7, #0]
1547:C:/StellarisWare/utils\ustdlib.c ****     //
1548:C:/StellarisWare/utils\ustdlib.c ****     // Pass this on to ustrncmp.
1549:C:/StellarisWare/utils\ustdlib.c ****     //
1550:C:/StellarisWare/utils\ustdlib.c ****     return(ustrncmp(pcStr1, pcStr2, -1));
 2187              		.loc 1 1550 0
 2188 000a 7868     		ldr	r0, [r7, #4]
 2189 000c 3968     		ldr	r1, [r7, #0]
 2190 000e 4FF0FF32 		mov	r2, #-1
 2191 0012 FFF7FEFF 		bl	ustrncmp
 2192 0016 0346     		mov	r3, r0
1551:C:/StellarisWare/utils\ustdlib.c **** }
 2193              		.loc 1 1551 0
 2194 0018 1846     		mov	r0, r3
 2195 001a 07F10807 		add	r7, r7, #8
 2196 001e BD46     		mov	sp, r7
 2197 0020 80BD     		pop	{r7, pc}
 2198              		.cfi_endproc
 2199              	.LFE13:
 2201 0022 00BF     		.data
 2202              		.align	2
 2205              	g_ulRandomSeed:
 2206 0000 01000000 		.word	1
 2207              		.section	.text.usrand,"ax",%progbits
 2208              		.align	2
 2209              		.global	usrand
 2210              		.thumb
 2211              		.thumb_func
 2213              	usrand:
 2214              	.LFB14:
1552:C:/StellarisWare/utils\ustdlib.c **** 
1553:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1554:C:/StellarisWare/utils\ustdlib.c **** //
1555:C:/StellarisWare/utils\ustdlib.c **** // Random Number Generator Seed Value
1556:C:/StellarisWare/utils\ustdlib.c **** //
1557:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1558:C:/StellarisWare/utils\ustdlib.c **** static unsigned long g_ulRandomSeed = 1;
1559:C:/StellarisWare/utils\ustdlib.c **** 
1560:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1561:C:/StellarisWare/utils\ustdlib.c **** //
1562:C:/StellarisWare/utils\ustdlib.c **** //! Set the random number generator seed.
1563:C:/StellarisWare/utils\ustdlib.c **** //!
1564:C:/StellarisWare/utils\ustdlib.c **** //! \param ulSeed is the new seed value to use for the random number generator.
1565:C:/StellarisWare/utils\ustdlib.c **** //!
1566:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>srand()</tt> function.
1567:C:/StellarisWare/utils\ustdlib.c **** //! It will set the seed value used in the <tt>urand()</tt> function.
1568:C:/StellarisWare/utils\ustdlib.c **** //!
1569:C:/StellarisWare/utils\ustdlib.c **** //! \return None
1570:C:/StellarisWare/utils\ustdlib.c **** //
1571:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1572:C:/StellarisWare/utils\ustdlib.c **** void
1573:C:/StellarisWare/utils\ustdlib.c **** usrand(unsigned long ulSeed)
1574:C:/StellarisWare/utils\ustdlib.c **** {
 2215              		.loc 1 1574 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 8
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219              		@ link register save eliminated.
 2220 0000 80B4     		push	{r7}
 2221              	.LCFI44:
 2222              		.cfi_def_cfa_offset 4
 2223              		.cfi_offset 7, -4
 2224 0002 83B0     		sub	sp, sp, #12
 2225              	.LCFI45:
 2226              		.cfi_def_cfa_offset 16
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI46:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
1575:C:/StellarisWare/utils\ustdlib.c ****     g_ulRandomSeed = ulSeed;
 2231              		.loc 1 1575 0
 2232 0008 40F20003 		movw	r3, #:lower16:g_ulRandomSeed
 2233 000c C0F20003 		movt	r3, #:upper16:g_ulRandomSeed
 2234 0010 7A68     		ldr	r2, [r7, #4]
 2235 0012 1A60     		str	r2, [r3, #0]
1576:C:/StellarisWare/utils\ustdlib.c **** }
 2236              		.loc 1 1576 0
 2237 0014 07F10C07 		add	r7, r7, #12
 2238 0018 BD46     		mov	sp, r7
 2239 001a 80BC     		pop	{r7}
 2240 001c 7047     		bx	lr
 2241              		.cfi_endproc
 2242              	.LFE14:
 2244 001e 00BF     		.section	.text.urand,"ax",%progbits
 2245              		.align	2
 2246              		.global	urand
 2247              		.thumb
 2248              		.thumb_func
 2250              	urand:
 2251              	.LFB15:
1577:C:/StellarisWare/utils\ustdlib.c **** 
1578:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1579:C:/StellarisWare/utils\ustdlib.c **** //
1580:C:/StellarisWare/utils\ustdlib.c **** //! Generate a new (pseudo) random number
1581:C:/StellarisWare/utils\ustdlib.c **** //!
1582:C:/StellarisWare/utils\ustdlib.c **** //! This function is very similar to the C library <tt>rand()</tt> function.
1583:C:/StellarisWare/utils\ustdlib.c **** //! It will generate a pseudo-random number sequence based on the seed value.
1584:C:/StellarisWare/utils\ustdlib.c **** //!
1585:C:/StellarisWare/utils\ustdlib.c **** //! \return A pseudo-random number will be returned.
1586:C:/StellarisWare/utils\ustdlib.c **** //
1587:C:/StellarisWare/utils\ustdlib.c **** //*****************************************************************************
1588:C:/StellarisWare/utils\ustdlib.c **** int
1589:C:/StellarisWare/utils\ustdlib.c **** urand(void)
1590:C:/StellarisWare/utils\ustdlib.c **** {
 2252              		.loc 1 1590 0
 2253              		.cfi_startproc
 2254              		@ args = 0, pretend = 0, frame = 0
 2255              		@ frame_needed = 1, uses_anonymous_args = 0
 2256              		@ link register save eliminated.
 2257 0000 80B4     		push	{r7}
 2258              	.LCFI47:
 2259              		.cfi_def_cfa_offset 4
 2260              		.cfi_offset 7, -4
 2261 0002 00AF     		add	r7, sp, #0
 2262              	.LCFI48:
 2263              		.cfi_def_cfa_register 7
1591:C:/StellarisWare/utils\ustdlib.c ****     //
1592:C:/StellarisWare/utils\ustdlib.c ****     // Generate a new pseudo-random number with a linear congruence random
1593:C:/StellarisWare/utils\ustdlib.c ****     // number generator.  This new random number becomes the seed for the next
1594:C:/StellarisWare/utils\ustdlib.c ****     // random number.
1595:C:/StellarisWare/utils\ustdlib.c ****     //
1596:C:/StellarisWare/utils\ustdlib.c ****     g_ulRandomSeed = (g_ulRandomSeed * 1664525) + 1013904223;
 2264              		.loc 1 1596 0
 2265 0004 40F20003 		movw	r3, #:lower16:g_ulRandomSeed
 2266 0008 C0F20003 		movt	r3, #:upper16:g_ulRandomSeed
 2267 000c 1A68     		ldr	r2, [r3, #0]
 2268 000e 46F20D63 		movw	r3, #26125
 2269 0012 C0F21903 		movt	r3, 25
 2270 0016 03FB02F2 		mul	r2, r3, r2
 2271 001a 4FF25F33 		movw	r3, #62303
 2272 001e C3F66E43 		movt	r3, 15470
 2273 0022 D318     		adds	r3, r2, r3
 2274 0024 40F20002 		movw	r2, #:lower16:g_ulRandomSeed
 2275 0028 C0F20002 		movt	r2, #:upper16:g_ulRandomSeed
 2276 002c 1360     		str	r3, [r2, #0]
1597:C:/StellarisWare/utils\ustdlib.c **** 
1598:C:/StellarisWare/utils\ustdlib.c ****     //
1599:C:/StellarisWare/utils\ustdlib.c ****     // Return the new random number.
1600:C:/StellarisWare/utils\ustdlib.c ****     //
1601:C:/StellarisWare/utils\ustdlib.c ****     return((int)g_ulRandomSeed);
 2277              		.loc 1 1601 0
 2278 002e 40F20003 		movw	r3, #:lower16:g_ulRandomSeed
 2279 0032 C0F20003 		movt	r3, #:upper16:g_ulRandomSeed
 2280 0036 1B68     		ldr	r3, [r3, #0]
1602:C:/StellarisWare/utils\ustdlib.c **** }
 2281              		.loc 1 1602 0
 2282 0038 1846     		mov	r0, r3
 2283 003a BD46     		mov	sp, r7
 2284 003c 80BC     		pop	{r7}
 2285 003e 7047     		bx	lr
 2286              		.cfi_endproc
 2287              	.LFE15:
 2289              		.text
 2290              	.Letext0:
 2291              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2292              		.file 3 "C:\\StellarisWare/utils/ustdlib.h"
 2293              		.file 4 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ustdlib.c
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:19     .rodata:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:25     .rodata:00000014 g_pcHex
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:28     .text.ustrncpy:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:33     .text.ustrncpy:00000000 ustrncpy
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:123    .rodata:00000018 .LC1
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:126    .text.uvsnprintf:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:131    .text.uvsnprintf:00000000 uvsnprintf
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:272    .text.uvsnprintf:000000dc $d
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:358    .text.uvsnprintf:0000022c $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:880    .text.usprintf:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:885    .text.usprintf:00000000 usprintf
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:932    .text.usnprintf:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:937    .text.usnprintf:00000000 usnprintf
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:987    .rodata:00000020 g_psDaysToMonth
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1001   .text.ulocaltime:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1006   .text.ulocaltime:00000000 ulocaltime
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1238   .text.ucmptime:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1242   .text.ucmptime:00000000 ucmptime
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1406   .text.umktime:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1411   .text.umktime:00000000 umktime
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1511   .text.ustrtoul:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1516   .text.ustrtoul:00000000 ustrtoul
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1772   .text.ustrlen:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1777   .text.ustrlen:00000000 ustrlen
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1825   .text.ustrstr:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1830   .text.ustrstr:00000000 ustrstr
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2074   .text.ustrncmp:00000000 ustrncmp
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1892   .text.ustrnicmp:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:1897   .text.ustrnicmp:00000000 ustrnicmp
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2030   .text.ustrcasecmp:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2035   .text.ustrcasecmp:00000000 ustrcasecmp
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2069   .text.ustrncmp:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2163   .text.ustrcmp:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2168   .text.ustrcmp:00000000 ustrcmp
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2202   .data:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2205   .data:00000000 g_ulRandomSeed
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2208   .text.usrand:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2213   .text.usrand:00000000 usrand
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2245   .text.urand:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccoO1onA.s:2250   .text.urand:00000000 urand
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
