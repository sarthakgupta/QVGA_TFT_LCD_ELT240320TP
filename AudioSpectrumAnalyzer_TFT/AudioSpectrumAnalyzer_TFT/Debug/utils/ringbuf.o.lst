   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ringbuf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.UpdateIndexAtomic,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	UpdateIndexAtomic:
  24              	.LFB0:
  25              		.file 1 "C:/StellarisWare/utils/ringbuf.c"
   1:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
   2:C:/StellarisWare/utils\ringbuf.c **** //
   3:C:/StellarisWare/utils\ringbuf.c **** // ringbuf.c - Ring buffer management utilities.
   4:C:/StellarisWare/utils\ringbuf.c **** //
   5:C:/StellarisWare/utils\ringbuf.c **** // Copyright (c) 2008-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/utils\ringbuf.c **** // Software License Agreement
   7:C:/StellarisWare/utils\ringbuf.c **** // 
   8:C:/StellarisWare/utils\ringbuf.c **** // Texas Instruments (TI) is supplying this software for use solely and
   9:C:/StellarisWare/utils\ringbuf.c **** // exclusively on TI's microcontroller products. The software is owned by
  10:C:/StellarisWare/utils\ringbuf.c **** // TI and/or its suppliers, and is protected under applicable copyright
  11:C:/StellarisWare/utils\ringbuf.c **** // laws. You may not combine this software with "viral" open-source
  12:C:/StellarisWare/utils\ringbuf.c **** // software in order to form a larger program.
  13:C:/StellarisWare/utils\ringbuf.c **** // 
  14:C:/StellarisWare/utils\ringbuf.c **** // THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
  15:C:/StellarisWare/utils\ringbuf.c **** // NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
  16:C:/StellarisWare/utils\ringbuf.c **** // NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  17:C:/StellarisWare/utils\ringbuf.c **** // A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
  18:C:/StellarisWare/utils\ringbuf.c **** // CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
  19:C:/StellarisWare/utils\ringbuf.c **** // DAMAGES, FOR ANY REASON WHATSOEVER.
  20:C:/StellarisWare/utils\ringbuf.c **** // 
  21:C:/StellarisWare/utils\ringbuf.c **** // This is part of revision 9107 of the Stellaris Firmware Development Package.
  22:C:/StellarisWare/utils\ringbuf.c **** //
  23:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  24:C:/StellarisWare/utils\ringbuf.c **** 
  25:C:/StellarisWare/utils\ringbuf.c **** #include "inc/hw_types.h"
  26:C:/StellarisWare/utils\ringbuf.c **** #include "driverlib/debug.h"
  27:C:/StellarisWare/utils\ringbuf.c **** #include "driverlib/interrupt.h"
  28:C:/StellarisWare/utils\ringbuf.c **** #include "utils/ringbuf.h"
  29:C:/StellarisWare/utils\ringbuf.c **** 
  30:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  31:C:/StellarisWare/utils\ringbuf.c **** //
  32:C:/StellarisWare/utils\ringbuf.c **** //! \addtogroup ringbuf_api
  33:C:/StellarisWare/utils\ringbuf.c **** //! @{
  34:C:/StellarisWare/utils\ringbuf.c **** //
  35:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  36:C:/StellarisWare/utils\ringbuf.c **** 
  37:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  38:C:/StellarisWare/utils\ringbuf.c **** //
  39:C:/StellarisWare/utils\ringbuf.c **** // Define NULL, if not already defined.
  40:C:/StellarisWare/utils\ringbuf.c **** //
  41:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  42:C:/StellarisWare/utils\ringbuf.c **** #ifndef NULL
  43:C:/StellarisWare/utils\ringbuf.c **** #define NULL                    ((void *)0)
  44:C:/StellarisWare/utils\ringbuf.c **** #endif
  45:C:/StellarisWare/utils\ringbuf.c **** 
  46:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  47:C:/StellarisWare/utils\ringbuf.c **** //
  48:C:/StellarisWare/utils\ringbuf.c **** // Change the value of a variable atomically.
  49:C:/StellarisWare/utils\ringbuf.c **** //
  50:C:/StellarisWare/utils\ringbuf.c **** // \param pulVal points to the index whose value is to be modified.
  51:C:/StellarisWare/utils\ringbuf.c **** // \param ulDelta is the number of bytes to increment the index by.
  52:C:/StellarisWare/utils\ringbuf.c **** // \param ulSize is the size of the buffer the index refers to.
  53:C:/StellarisWare/utils\ringbuf.c **** //
  54:C:/StellarisWare/utils\ringbuf.c **** // This function is used to increment a read or write buffer index that may be
  55:C:/StellarisWare/utils\ringbuf.c **** // written in various different contexts. It ensures that the read/modify/write
  56:C:/StellarisWare/utils\ringbuf.c **** // sequence is not interrupted and, hence, guards against corruption of the
  57:C:/StellarisWare/utils\ringbuf.c **** // variable. The new value is adjusted for buffer wrap.
  58:C:/StellarisWare/utils\ringbuf.c **** //
  59:C:/StellarisWare/utils\ringbuf.c **** // \return None.
  60:C:/StellarisWare/utils\ringbuf.c **** //
  61:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  62:C:/StellarisWare/utils\ringbuf.c **** static void
  63:C:/StellarisWare/utils\ringbuf.c **** UpdateIndexAtomic(volatile unsigned long *pulVal, unsigned long ulDelta,
  64:C:/StellarisWare/utils\ringbuf.c ****                   unsigned long ulSize)
  65:C:/StellarisWare/utils\ringbuf.c **** {
  26              		.loc 1 65 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 86B0     		sub	sp, sp, #24
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
  66:C:/StellarisWare/utils\ringbuf.c ****     tBoolean bIntsOff;
  67:C:/StellarisWare/utils\ringbuf.c **** 
  68:C:/StellarisWare/utils\ringbuf.c ****     //
  69:C:/StellarisWare/utils\ringbuf.c ****     // Turn interrupts off temporarily.
  70:C:/StellarisWare/utils\ringbuf.c ****     //
  71:C:/StellarisWare/utils\ringbuf.c ****     bIntsOff = IntMasterDisable();
  44              		.loc 1 71 0
  45 000c FFF7FEFF 		bl	IntMasterDisable
  46 0010 0346     		mov	r3, r0
  47 0012 FB75     		strb	r3, [r7, #23]
  72:C:/StellarisWare/utils\ringbuf.c **** 
  73:C:/StellarisWare/utils\ringbuf.c ****     //
  74:C:/StellarisWare/utils\ringbuf.c ****     // Update the variable value.
  75:C:/StellarisWare/utils\ringbuf.c ****     //
  76:C:/StellarisWare/utils\ringbuf.c ****     *pulVal += ulDelta;
  48              		.loc 1 76 0
  49 0014 FB68     		ldr	r3, [r7, #12]
  50 0016 1A68     		ldr	r2, [r3, #0]
  51 0018 BB68     		ldr	r3, [r7, #8]
  52 001a D218     		adds	r2, r2, r3
  53 001c FB68     		ldr	r3, [r7, #12]
  54 001e 1A60     		str	r2, [r3, #0]
  77:C:/StellarisWare/utils\ringbuf.c **** 
  78:C:/StellarisWare/utils\ringbuf.c ****     //
  79:C:/StellarisWare/utils\ringbuf.c ****     // Correct for wrap. We use a loop here since we don't want to use a
  80:C:/StellarisWare/utils\ringbuf.c ****     // modulus operation with interrupts off but we don't want to fail in
  81:C:/StellarisWare/utils\ringbuf.c ****     // case ulDelta is greater than ulSize (which is extremely unlikely but...)
  82:C:/StellarisWare/utils\ringbuf.c ****     //
  83:C:/StellarisWare/utils\ringbuf.c ****     while(*pulVal >= ulSize)
  55              		.loc 1 83 0
  56 0020 05E0     		b	.L2
  57              	.L3:
  84:C:/StellarisWare/utils\ringbuf.c ****     {
  85:C:/StellarisWare/utils\ringbuf.c ****         *pulVal -= ulSize;
  58              		.loc 1 85 0
  59 0022 FB68     		ldr	r3, [r7, #12]
  60 0024 1A68     		ldr	r2, [r3, #0]
  61 0026 7B68     		ldr	r3, [r7, #4]
  62 0028 D21A     		subs	r2, r2, r3
  63 002a FB68     		ldr	r3, [r7, #12]
  64 002c 1A60     		str	r2, [r3, #0]
  65              	.L2:
  83:C:/StellarisWare/utils\ringbuf.c ****     while(*pulVal >= ulSize)
  66              		.loc 1 83 0 discriminator 1
  67 002e FB68     		ldr	r3, [r7, #12]
  68 0030 1A68     		ldr	r2, [r3, #0]
  69 0032 7B68     		ldr	r3, [r7, #4]
  70 0034 9A42     		cmp	r2, r3
  71 0036 F4D2     		bcs	.L3
  86:C:/StellarisWare/utils\ringbuf.c ****     }
  87:C:/StellarisWare/utils\ringbuf.c **** 
  88:C:/StellarisWare/utils\ringbuf.c ****     //
  89:C:/StellarisWare/utils\ringbuf.c ****     // Restore the interrupt state
  90:C:/StellarisWare/utils\ringbuf.c ****     //
  91:C:/StellarisWare/utils\ringbuf.c ****     if(!bIntsOff)
  72              		.loc 1 91 0
  73 0038 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  74 003a 002B     		cmp	r3, #0
  75 003c 01D1     		bne	.L1
  92:C:/StellarisWare/utils\ringbuf.c ****     {
  93:C:/StellarisWare/utils\ringbuf.c ****         IntMasterEnable();
  76              		.loc 1 93 0
  77 003e FFF7FEFF 		bl	IntMasterEnable
  78              	.L1:
  94:C:/StellarisWare/utils\ringbuf.c ****     }
  95:C:/StellarisWare/utils\ringbuf.c **** }
  79              		.loc 1 95 0
  80 0042 07F11807 		add	r7, r7, #24
  81 0046 BD46     		mov	sp, r7
  82 0048 80BD     		pop	{r7, pc}
  83              		.cfi_endproc
  84              	.LFE0:
  86 004a 00BF     		.section	.text.RingBufFull,"ax",%progbits
  87              		.align	2
  88              		.global	RingBufFull
  89              		.thumb
  90              		.thumb_func
  92              	RingBufFull:
  93              	.LFB1:
  96:C:/StellarisWare/utils\ringbuf.c **** 
  97:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
  98:C:/StellarisWare/utils\ringbuf.c **** //
  99:C:/StellarisWare/utils\ringbuf.c **** //! Determines whether the ring buffer whose pointers and size are provided
 100:C:/StellarisWare/utils\ringbuf.c **** //! is full or not.
 101:C:/StellarisWare/utils\ringbuf.c **** //!
 102:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to empty.
 103:C:/StellarisWare/utils\ringbuf.c **** //!
 104:C:/StellarisWare/utils\ringbuf.c **** //! This function is used to determine whether or not a given ring buffer is
 105:C:/StellarisWare/utils\ringbuf.c **** //! full.  The structure is specifically to ensure that we do not see
 106:C:/StellarisWare/utils\ringbuf.c **** //! warnings from the compiler related to the order of volatile accesses
 107:C:/StellarisWare/utils\ringbuf.c **** //! being undefined.
 108:C:/StellarisWare/utils\ringbuf.c **** //!
 109:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns \b true if the buffer is full or \b false otherwise.
 110:C:/StellarisWare/utils\ringbuf.c **** //
 111:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 112:C:/StellarisWare/utils\ringbuf.c **** tBoolean
 113:C:/StellarisWare/utils\ringbuf.c **** RingBufFull(tRingBufObject *ptRingBuf)
 114:C:/StellarisWare/utils\ringbuf.c **** {
  94              		.loc 1 114 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 16
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 80B4     		push	{r7}
 100              	.LCFI3:
 101              		.cfi_def_cfa_offset 4
 102              		.cfi_offset 7, -4
 103 0002 85B0     		sub	sp, sp, #20
 104              	.LCFI4:
 105              		.cfi_def_cfa_offset 24
 106 0004 00AF     		add	r7, sp, #0
 107              	.LCFI5:
 108              		.cfi_def_cfa_register 7
 109 0006 7860     		str	r0, [r7, #4]
 115:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulWrite;
 116:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulRead;
 117:C:/StellarisWare/utils\ringbuf.c **** 
 118:C:/StellarisWare/utils\ringbuf.c ****     //
 119:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 120:C:/StellarisWare/utils\ringbuf.c ****     //
 121:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 122:C:/StellarisWare/utils\ringbuf.c **** 
 123:C:/StellarisWare/utils\ringbuf.c ****     //
 124:C:/StellarisWare/utils\ringbuf.c ****     // Copy the Read/Write indices for calculation.
 125:C:/StellarisWare/utils\ringbuf.c ****     //
 126:C:/StellarisWare/utils\ringbuf.c ****     ulWrite = ptRingBuf->ulWriteIndex;
 110              		.loc 1 126 0
 111 0008 7B68     		ldr	r3, [r7, #4]
 112 000a 5B68     		ldr	r3, [r3, #4]
 113 000c FB60     		str	r3, [r7, #12]
 127:C:/StellarisWare/utils\ringbuf.c ****     ulRead = ptRingBuf->ulReadIndex;
 114              		.loc 1 127 0
 115 000e 7B68     		ldr	r3, [r7, #4]
 116 0010 9B68     		ldr	r3, [r3, #8]
 117 0012 BB60     		str	r3, [r7, #8]
 128:C:/StellarisWare/utils\ringbuf.c **** 
 129:C:/StellarisWare/utils\ringbuf.c ****     //
 130:C:/StellarisWare/utils\ringbuf.c ****     // Return the full status of the buffer.
 131:C:/StellarisWare/utils\ringbuf.c ****     //
 132:C:/StellarisWare/utils\ringbuf.c ****     return((((ulWrite + 1) % ptRingBuf->ulSize) == ulRead) ? true : false);
 118              		.loc 1 132 0
 119 0014 FB68     		ldr	r3, [r7, #12]
 120 0016 03F10103 		add	r3, r3, #1
 121 001a 7A68     		ldr	r2, [r7, #4]
 122 001c 1268     		ldr	r2, [r2, #0]
 123 001e B3FBF2F1 		udiv	r1, r3, r2
 124 0022 02FB01F2 		mul	r2, r2, r1
 125 0026 9A1A     		subs	r2, r3, r2
 126 0028 BB68     		ldr	r3, [r7, #8]
 127 002a 9A42     		cmp	r2, r3
 128 002c 14BF     		ite	ne
 129 002e 0023     		movne	r3, #0
 130 0030 0123     		moveq	r3, #1
 131 0032 DBB2     		uxtb	r3, r3
 133:C:/StellarisWare/utils\ringbuf.c **** }
 132              		.loc 1 133 0
 133 0034 1846     		mov	r0, r3
 134 0036 07F11407 		add	r7, r7, #20
 135 003a BD46     		mov	sp, r7
 136 003c 80BC     		pop	{r7}
 137 003e 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE1:
 141              		.section	.text.RingBufEmpty,"ax",%progbits
 142              		.align	2
 143              		.global	RingBufEmpty
 144              		.thumb
 145              		.thumb_func
 147              	RingBufEmpty:
 148              	.LFB2:
 134:C:/StellarisWare/utils\ringbuf.c **** 
 135:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 136:C:/StellarisWare/utils\ringbuf.c **** //
 137:C:/StellarisWare/utils\ringbuf.c **** //! Determines whether the ring buffer whose pointers and size are provided
 138:C:/StellarisWare/utils\ringbuf.c **** //! is empty or not.
 139:C:/StellarisWare/utils\ringbuf.c **** //!
 140:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to empty.
 141:C:/StellarisWare/utils\ringbuf.c **** //!
 142:C:/StellarisWare/utils\ringbuf.c **** //! This function is used to determine whether or not a given ring buffer is
 143:C:/StellarisWare/utils\ringbuf.c **** //! empty.  The structure is specifically to ensure that we do not see
 144:C:/StellarisWare/utils\ringbuf.c **** //! warnings from the compiler related to the order of volatile accesses
 145:C:/StellarisWare/utils\ringbuf.c **** //! being undefined.
 146:C:/StellarisWare/utils\ringbuf.c **** //!
 147:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns \b true if the buffer is empty or \b false otherwise.
 148:C:/StellarisWare/utils\ringbuf.c **** //
 149:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 150:C:/StellarisWare/utils\ringbuf.c **** tBoolean
 151:C:/StellarisWare/utils\ringbuf.c **** RingBufEmpty(tRingBufObject *ptRingBuf)
 152:C:/StellarisWare/utils\ringbuf.c **** {
 149              		.loc 1 152 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 16
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154 0000 80B4     		push	{r7}
 155              	.LCFI6:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 0002 85B0     		sub	sp, sp, #20
 159              	.LCFI7:
 160              		.cfi_def_cfa_offset 24
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI8:
 163              		.cfi_def_cfa_register 7
 164 0006 7860     		str	r0, [r7, #4]
 153:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulWrite;
 154:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulRead;
 155:C:/StellarisWare/utils\ringbuf.c **** 
 156:C:/StellarisWare/utils\ringbuf.c ****     //
 157:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 158:C:/StellarisWare/utils\ringbuf.c ****     //
 159:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 160:C:/StellarisWare/utils\ringbuf.c **** 
 161:C:/StellarisWare/utils\ringbuf.c ****     //
 162:C:/StellarisWare/utils\ringbuf.c ****     // Copy the Read/Write indices for calculation.
 163:C:/StellarisWare/utils\ringbuf.c ****     //
 164:C:/StellarisWare/utils\ringbuf.c ****     ulWrite = ptRingBuf->ulWriteIndex;
 165              		.loc 1 164 0
 166 0008 7B68     		ldr	r3, [r7, #4]
 167 000a 5B68     		ldr	r3, [r3, #4]
 168 000c FB60     		str	r3, [r7, #12]
 165:C:/StellarisWare/utils\ringbuf.c ****     ulRead = ptRingBuf->ulReadIndex;
 169              		.loc 1 165 0
 170 000e 7B68     		ldr	r3, [r7, #4]
 171 0010 9B68     		ldr	r3, [r3, #8]
 172 0012 BB60     		str	r3, [r7, #8]
 166:C:/StellarisWare/utils\ringbuf.c **** 
 167:C:/StellarisWare/utils\ringbuf.c ****     //
 168:C:/StellarisWare/utils\ringbuf.c ****     // Return the empty status of the buffer.
 169:C:/StellarisWare/utils\ringbuf.c ****     //
 170:C:/StellarisWare/utils\ringbuf.c ****     return((ulWrite == ulRead) ? true : false);
 173              		.loc 1 170 0
 174 0014 FA68     		ldr	r2, [r7, #12]
 175 0016 BB68     		ldr	r3, [r7, #8]
 176 0018 9A42     		cmp	r2, r3
 177 001a 14BF     		ite	ne
 178 001c 0023     		movne	r3, #0
 179 001e 0123     		moveq	r3, #1
 180 0020 DBB2     		uxtb	r3, r3
 171:C:/StellarisWare/utils\ringbuf.c **** }
 181              		.loc 1 171 0
 182 0022 1846     		mov	r0, r3
 183 0024 07F11407 		add	r7, r7, #20
 184 0028 BD46     		mov	sp, r7
 185 002a 80BC     		pop	{r7}
 186 002c 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE2:
 190 002e 00BF     		.section	.text.RingBufFlush,"ax",%progbits
 191              		.align	2
 192              		.global	RingBufFlush
 193              		.thumb
 194              		.thumb_func
 196              	RingBufFlush:
 197              	.LFB3:
 172:C:/StellarisWare/utils\ringbuf.c **** 
 173:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 174:C:/StellarisWare/utils\ringbuf.c **** //
 175:C:/StellarisWare/utils\ringbuf.c **** //! Empties the ring buffer.
 176:C:/StellarisWare/utils\ringbuf.c **** //!
 177:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to empty.
 178:C:/StellarisWare/utils\ringbuf.c **** //!
 179:C:/StellarisWare/utils\ringbuf.c **** //! Discards all data from the ring buffer.
 180:C:/StellarisWare/utils\ringbuf.c **** //!
 181:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 182:C:/StellarisWare/utils\ringbuf.c **** //
 183:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 184:C:/StellarisWare/utils\ringbuf.c **** void
 185:C:/StellarisWare/utils\ringbuf.c **** RingBufFlush(tRingBufObject *ptRingBuf)
 186:C:/StellarisWare/utils\ringbuf.c **** {
 198              		.loc 1 186 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 16
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              	.LCFI9:
 204              		.cfi_def_cfa_offset 8
 205              		.cfi_offset 14, -4
 206              		.cfi_offset 7, -8
 207 0002 84B0     		sub	sp, sp, #16
 208              	.LCFI10:
 209              		.cfi_def_cfa_offset 24
 210 0004 00AF     		add	r7, sp, #0
 211              	.LCFI11:
 212              		.cfi_def_cfa_register 7
 213 0006 7860     		str	r0, [r7, #4]
 187:C:/StellarisWare/utils\ringbuf.c ****     tBoolean bIntsOff;
 188:C:/StellarisWare/utils\ringbuf.c **** 
 189:C:/StellarisWare/utils\ringbuf.c ****     //
 190:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 191:C:/StellarisWare/utils\ringbuf.c ****     //
 192:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 193:C:/StellarisWare/utils\ringbuf.c **** 
 194:C:/StellarisWare/utils\ringbuf.c ****     //
 195:C:/StellarisWare/utils\ringbuf.c ****     // Set the Read/Write pointers to be the same. Do this with interrupts
 196:C:/StellarisWare/utils\ringbuf.c ****     // disabled to prevent the possibility of corruption of the read index.
 197:C:/StellarisWare/utils\ringbuf.c ****     //
 198:C:/StellarisWare/utils\ringbuf.c ****     bIntsOff = IntMasterDisable();
 214              		.loc 1 198 0
 215 0008 FFF7FEFF 		bl	IntMasterDisable
 216 000c 0346     		mov	r3, r0
 217 000e FB73     		strb	r3, [r7, #15]
 199:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->ulReadIndex = ptRingBuf->ulWriteIndex;
 218              		.loc 1 199 0
 219 0010 7B68     		ldr	r3, [r7, #4]
 220 0012 5A68     		ldr	r2, [r3, #4]
 221 0014 7B68     		ldr	r3, [r7, #4]
 222 0016 9A60     		str	r2, [r3, #8]
 200:C:/StellarisWare/utils\ringbuf.c ****     if(!bIntsOff)
 223              		.loc 1 200 0
 224 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 225 001a 002B     		cmp	r3, #0
 226 001c 01D1     		bne	.L7
 201:C:/StellarisWare/utils\ringbuf.c ****     {
 202:C:/StellarisWare/utils\ringbuf.c ****         IntMasterEnable();
 227              		.loc 1 202 0
 228 001e FFF7FEFF 		bl	IntMasterEnable
 229              	.L7:
 203:C:/StellarisWare/utils\ringbuf.c ****     }
 204:C:/StellarisWare/utils\ringbuf.c **** }
 230              		.loc 1 204 0
 231 0022 07F11007 		add	r7, r7, #16
 232 0026 BD46     		mov	sp, r7
 233 0028 80BD     		pop	{r7, pc}
 234              		.cfi_endproc
 235              	.LFE3:
 237 002a 00BF     		.section	.text.RingBufUsed,"ax",%progbits
 238              		.align	2
 239              		.global	RingBufUsed
 240              		.thumb
 241              		.thumb_func
 243              	RingBufUsed:
 244              	.LFB4:
 205:C:/StellarisWare/utils\ringbuf.c **** 
 206:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 207:C:/StellarisWare/utils\ringbuf.c **** //
 208:C:/StellarisWare/utils\ringbuf.c **** //! Returns number of bytes stored in ring buffer.
 209:C:/StellarisWare/utils\ringbuf.c **** //!
 210:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to check.
 211:C:/StellarisWare/utils\ringbuf.c **** //!
 212:C:/StellarisWare/utils\ringbuf.c **** //! This function returns the number of bytes stored in the ring buffer.
 213:C:/StellarisWare/utils\ringbuf.c **** //!
 214:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns the number of bytes stored in the ring buffer.
 215:C:/StellarisWare/utils\ringbuf.c **** //
 216:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 217:C:/StellarisWare/utils\ringbuf.c **** unsigned long
 218:C:/StellarisWare/utils\ringbuf.c **** RingBufUsed(tRingBufObject *ptRingBuf)
 219:C:/StellarisWare/utils\ringbuf.c **** {
 245              		.loc 1 219 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 16
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250 0000 80B4     		push	{r7}
 251              	.LCFI12:
 252              		.cfi_def_cfa_offset 4
 253              		.cfi_offset 7, -4
 254 0002 85B0     		sub	sp, sp, #20
 255              	.LCFI13:
 256              		.cfi_def_cfa_offset 24
 257 0004 00AF     		add	r7, sp, #0
 258              	.LCFI14:
 259              		.cfi_def_cfa_register 7
 260 0006 7860     		str	r0, [r7, #4]
 220:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulWrite;
 221:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulRead;
 222:C:/StellarisWare/utils\ringbuf.c **** 
 223:C:/StellarisWare/utils\ringbuf.c ****     //
 224:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 225:C:/StellarisWare/utils\ringbuf.c ****     //
 226:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 227:C:/StellarisWare/utils\ringbuf.c **** 
 228:C:/StellarisWare/utils\ringbuf.c ****     //
 229:C:/StellarisWare/utils\ringbuf.c ****     // Copy the Read/Write indices for calculation.
 230:C:/StellarisWare/utils\ringbuf.c ****     //
 231:C:/StellarisWare/utils\ringbuf.c ****     ulWrite = ptRingBuf->ulWriteIndex;
 261              		.loc 1 231 0
 262 0008 7B68     		ldr	r3, [r7, #4]
 263 000a 5B68     		ldr	r3, [r3, #4]
 264 000c FB60     		str	r3, [r7, #12]
 232:C:/StellarisWare/utils\ringbuf.c ****     ulRead = ptRingBuf->ulReadIndex;
 265              		.loc 1 232 0
 266 000e 7B68     		ldr	r3, [r7, #4]
 267 0010 9B68     		ldr	r3, [r3, #8]
 268 0012 BB60     		str	r3, [r7, #8]
 233:C:/StellarisWare/utils\ringbuf.c **** 
 234:C:/StellarisWare/utils\ringbuf.c ****     //
 235:C:/StellarisWare/utils\ringbuf.c ****     // Return the number of bytes contained in the ring buffer.
 236:C:/StellarisWare/utils\ringbuf.c ****     //
 237:C:/StellarisWare/utils\ringbuf.c ****     return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
 269              		.loc 1 237 0
 270 0014 FA68     		ldr	r2, [r7, #12]
 271 0016 BB68     		ldr	r3, [r7, #8]
 272 0018 9A42     		cmp	r2, r3
 273 001a 03D3     		bcc	.L10
 274              		.loc 1 237 0 is_stmt 0 discriminator 1
 275 001c FA68     		ldr	r2, [r7, #12]
 276 001e BB68     		ldr	r3, [r7, #8]
 277 0020 D31A     		subs	r3, r2, r3
 278 0022 05E0     		b	.L11
 279              	.L10:
 238:C:/StellarisWare/utils\ringbuf.c ****            (ptRingBuf->ulSize - (ulRead - ulWrite)));
 280              		.loc 1 238 0 is_stmt 1 discriminator 2
 281 0024 7B68     		ldr	r3, [r7, #4]
 282 0026 1A68     		ldr	r2, [r3, #0]
 283 0028 F968     		ldr	r1, [r7, #12]
 284 002a BB68     		ldr	r3, [r7, #8]
 285 002c CB1A     		subs	r3, r1, r3
 237:C:/StellarisWare/utils\ringbuf.c ****     return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
 286              		.loc 1 237 0 discriminator 2
 287 002e D318     		adds	r3, r2, r3
 288              	.L11:
 239:C:/StellarisWare/utils\ringbuf.c **** }
 289              		.loc 1 239 0 discriminator 3
 290 0030 1846     		mov	r0, r3
 291 0032 07F11407 		add	r7, r7, #20
 292 0036 BD46     		mov	sp, r7
 293 0038 80BC     		pop	{r7}
 294 003a 7047     		bx	lr
 295              		.cfi_endproc
 296              	.LFE4:
 298              		.section	.text.RingBufFree,"ax",%progbits
 299              		.align	2
 300              		.global	RingBufFree
 301              		.thumb
 302              		.thumb_func
 304              	RingBufFree:
 305              	.LFB5:
 240:C:/StellarisWare/utils\ringbuf.c **** 
 241:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 242:C:/StellarisWare/utils\ringbuf.c **** //
 243:C:/StellarisWare/utils\ringbuf.c **** //! Returns number of bytes available in a ring buffer.
 244:C:/StellarisWare/utils\ringbuf.c **** //!
 245:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to check.
 246:C:/StellarisWare/utils\ringbuf.c **** //!
 247:C:/StellarisWare/utils\ringbuf.c **** //! This function returns the number of bytes available in the ring buffer.
 248:C:/StellarisWare/utils\ringbuf.c **** //!
 249:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns the number of bytes available in the ring buffer.
 250:C:/StellarisWare/utils\ringbuf.c **** //
 251:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 252:C:/StellarisWare/utils\ringbuf.c **** unsigned long
 253:C:/StellarisWare/utils\ringbuf.c **** RingBufFree(tRingBufObject *ptRingBuf)
 254:C:/StellarisWare/utils\ringbuf.c **** {
 306              		.loc 1 254 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 8
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310 0000 90B5     		push	{r4, r7, lr}
 311              	.LCFI15:
 312              		.cfi_def_cfa_offset 12
 313              		.cfi_offset 14, -4
 314              		.cfi_offset 7, -8
 315              		.cfi_offset 4, -12
 316 0002 83B0     		sub	sp, sp, #12
 317              	.LCFI16:
 318              		.cfi_def_cfa_offset 24
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI17:
 321              		.cfi_def_cfa_register 7
 322 0006 7860     		str	r0, [r7, #4]
 255:C:/StellarisWare/utils\ringbuf.c ****     //
 256:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 257:C:/StellarisWare/utils\ringbuf.c ****     //
 258:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 259:C:/StellarisWare/utils\ringbuf.c **** 
 260:C:/StellarisWare/utils\ringbuf.c ****     //
 261:C:/StellarisWare/utils\ringbuf.c ****     // Return the number of bytes available in the ring buffer.
 262:C:/StellarisWare/utils\ringbuf.c ****     //
 263:C:/StellarisWare/utils\ringbuf.c ****     return((ptRingBuf->ulSize - 1) - RingBufUsed(ptRingBuf));
 323              		.loc 1 263 0
 324 0008 7B68     		ldr	r3, [r7, #4]
 325 000a 1C68     		ldr	r4, [r3, #0]
 326 000c 7868     		ldr	r0, [r7, #4]
 327 000e FFF7FEFF 		bl	RingBufUsed
 328 0012 0346     		mov	r3, r0
 329 0014 E31A     		subs	r3, r4, r3
 330 0016 03F1FF33 		add	r3, r3, #-1
 264:C:/StellarisWare/utils\ringbuf.c **** }
 331              		.loc 1 264 0
 332 001a 1846     		mov	r0, r3
 333 001c 07F10C07 		add	r7, r7, #12
 334 0020 BD46     		mov	sp, r7
 335 0022 90BD     		pop	{r4, r7, pc}
 336              		.cfi_endproc
 337              	.LFE5:
 339              		.section	.text.RingBufContigUsed,"ax",%progbits
 340              		.align	2
 341              		.global	RingBufContigUsed
 342              		.thumb
 343              		.thumb_func
 345              	RingBufContigUsed:
 346              	.LFB6:
 265:C:/StellarisWare/utils\ringbuf.c **** 
 266:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 267:C:/StellarisWare/utils\ringbuf.c **** //
 268:C:/StellarisWare/utils\ringbuf.c **** //! Returns number of contiguous bytes of data stored in ring buffer ahead of
 269:C:/StellarisWare/utils\ringbuf.c **** //! the current read pointer.
 270:C:/StellarisWare/utils\ringbuf.c **** //!
 271:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to check.
 272:C:/StellarisWare/utils\ringbuf.c **** //!
 273:C:/StellarisWare/utils\ringbuf.c **** //! This function returns the number of contiguous bytes of data available in
 274:C:/StellarisWare/utils\ringbuf.c **** //! the ring buffer ahead of the current read pointer. This represents the
 275:C:/StellarisWare/utils\ringbuf.c **** //! largest block of data which does not straddle the buffer wrap.
 276:C:/StellarisWare/utils\ringbuf.c **** //!
 277:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns the number of contiguous bytes available.
 278:C:/StellarisWare/utils\ringbuf.c **** //
 279:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 280:C:/StellarisWare/utils\ringbuf.c **** unsigned long
 281:C:/StellarisWare/utils\ringbuf.c **** RingBufContigUsed(tRingBufObject *ptRingBuf)
 282:C:/StellarisWare/utils\ringbuf.c **** {
 347              		.loc 1 282 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 16
 350              		@ frame_needed = 1, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 352 0000 80B4     		push	{r7}
 353              	.LCFI18:
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 0002 85B0     		sub	sp, sp, #20
 357              	.LCFI19:
 358              		.cfi_def_cfa_offset 24
 359 0004 00AF     		add	r7, sp, #0
 360              	.LCFI20:
 361              		.cfi_def_cfa_register 7
 362 0006 7860     		str	r0, [r7, #4]
 283:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulWrite;
 284:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulRead;
 285:C:/StellarisWare/utils\ringbuf.c **** 
 286:C:/StellarisWare/utils\ringbuf.c ****     //
 287:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 288:C:/StellarisWare/utils\ringbuf.c ****     //
 289:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 290:C:/StellarisWare/utils\ringbuf.c **** 
 291:C:/StellarisWare/utils\ringbuf.c ****     //
 292:C:/StellarisWare/utils\ringbuf.c ****     // Copy the Read/Write indices for calculation.
 293:C:/StellarisWare/utils\ringbuf.c ****     //
 294:C:/StellarisWare/utils\ringbuf.c ****     ulWrite = ptRingBuf->ulWriteIndex;
 363              		.loc 1 294 0
 364 0008 7B68     		ldr	r3, [r7, #4]
 365 000a 5B68     		ldr	r3, [r3, #4]
 366 000c FB60     		str	r3, [r7, #12]
 295:C:/StellarisWare/utils\ringbuf.c ****     ulRead = ptRingBuf->ulReadIndex;
 367              		.loc 1 295 0
 368 000e 7B68     		ldr	r3, [r7, #4]
 369 0010 9B68     		ldr	r3, [r3, #8]
 370 0012 BB60     		str	r3, [r7, #8]
 296:C:/StellarisWare/utils\ringbuf.c **** 
 297:C:/StellarisWare/utils\ringbuf.c ****     //
 298:C:/StellarisWare/utils\ringbuf.c ****     // Return the number of contiguous bytes available.
 299:C:/StellarisWare/utils\ringbuf.c ****     //
 300:C:/StellarisWare/utils\ringbuf.c ****     return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
 371              		.loc 1 300 0
 372 0014 FA68     		ldr	r2, [r7, #12]
 373 0016 BB68     		ldr	r3, [r7, #8]
 374 0018 9A42     		cmp	r2, r3
 375 001a 03D3     		bcc	.L14
 376              		.loc 1 300 0 is_stmt 0 discriminator 1
 377 001c FA68     		ldr	r2, [r7, #12]
 378 001e BB68     		ldr	r3, [r7, #8]
 379 0020 D31A     		subs	r3, r2, r3
 380 0022 03E0     		b	.L15
 381              	.L14:
 301:C:/StellarisWare/utils\ringbuf.c ****            (ptRingBuf->ulSize - ulRead));
 382              		.loc 1 301 0 is_stmt 1 discriminator 2
 383 0024 7B68     		ldr	r3, [r7, #4]
 384 0026 1A68     		ldr	r2, [r3, #0]
 300:C:/StellarisWare/utils\ringbuf.c ****     return((ulWrite >= ulRead) ? (ulWrite - ulRead) :
 385              		.loc 1 300 0 discriminator 2
 386 0028 BB68     		ldr	r3, [r7, #8]
 387 002a D31A     		subs	r3, r2, r3
 388              	.L15:
 302:C:/StellarisWare/utils\ringbuf.c **** }
 389              		.loc 1 302 0 discriminator 3
 390 002c 1846     		mov	r0, r3
 391 002e 07F11407 		add	r7, r7, #20
 392 0032 BD46     		mov	sp, r7
 393 0034 80BC     		pop	{r7}
 394 0036 7047     		bx	lr
 395              		.cfi_endproc
 396              	.LFE6:
 398              		.section	.text.RingBufContigFree,"ax",%progbits
 399              		.align	2
 400              		.global	RingBufContigFree
 401              		.thumb
 402              		.thumb_func
 404              	RingBufContigFree:
 405              	.LFB7:
 303:C:/StellarisWare/utils\ringbuf.c **** 
 304:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 305:C:/StellarisWare/utils\ringbuf.c **** //
 306:C:/StellarisWare/utils\ringbuf.c **** //! Returns number of contiguous free bytes available in a ring buffer.
 307:C:/StellarisWare/utils\ringbuf.c **** //!
 308:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to check.
 309:C:/StellarisWare/utils\ringbuf.c **** //!
 310:C:/StellarisWare/utils\ringbuf.c **** //! This function returns the number of contiguous free bytes ahead of the
 311:C:/StellarisWare/utils\ringbuf.c **** //! current write pointer in the ring buffer.
 312:C:/StellarisWare/utils\ringbuf.c **** //!
 313:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns the number of contiguous bytes available in the ring
 314:C:/StellarisWare/utils\ringbuf.c **** //! buffer.
 315:C:/StellarisWare/utils\ringbuf.c **** //
 316:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 317:C:/StellarisWare/utils\ringbuf.c **** unsigned long
 318:C:/StellarisWare/utils\ringbuf.c **** RingBufContigFree(tRingBufObject *ptRingBuf)
 319:C:/StellarisWare/utils\ringbuf.c **** {
 406              		.loc 1 319 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 16
 409              		@ frame_needed = 1, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411 0000 80B4     		push	{r7}
 412              	.LCFI21:
 413              		.cfi_def_cfa_offset 4
 414              		.cfi_offset 7, -4
 415 0002 85B0     		sub	sp, sp, #20
 416              	.LCFI22:
 417              		.cfi_def_cfa_offset 24
 418 0004 00AF     		add	r7, sp, #0
 419              	.LCFI23:
 420              		.cfi_def_cfa_register 7
 421 0006 7860     		str	r0, [r7, #4]
 320:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulWrite;
 321:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulRead;
 322:C:/StellarisWare/utils\ringbuf.c **** 
 323:C:/StellarisWare/utils\ringbuf.c ****     //
 324:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 325:C:/StellarisWare/utils\ringbuf.c ****     //
 326:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 327:C:/StellarisWare/utils\ringbuf.c **** 
 328:C:/StellarisWare/utils\ringbuf.c ****     //
 329:C:/StellarisWare/utils\ringbuf.c ****     // Copy the Read/Write indices for calculation.
 330:C:/StellarisWare/utils\ringbuf.c ****     //
 331:C:/StellarisWare/utils\ringbuf.c ****     ulWrite = ptRingBuf->ulWriteIndex;
 422              		.loc 1 331 0
 423 0008 7B68     		ldr	r3, [r7, #4]
 424 000a 5B68     		ldr	r3, [r3, #4]
 425 000c FB60     		str	r3, [r7, #12]
 332:C:/StellarisWare/utils\ringbuf.c ****     ulRead = ptRingBuf->ulReadIndex;
 426              		.loc 1 332 0
 427 000e 7B68     		ldr	r3, [r7, #4]
 428 0010 9B68     		ldr	r3, [r3, #8]
 429 0012 BB60     		str	r3, [r7, #8]
 333:C:/StellarisWare/utils\ringbuf.c **** 
 334:C:/StellarisWare/utils\ringbuf.c ****     //
 335:C:/StellarisWare/utils\ringbuf.c ****     // Return the number of contiguous bytes available.
 336:C:/StellarisWare/utils\ringbuf.c ****     //
 337:C:/StellarisWare/utils\ringbuf.c ****     if(ulRead > ulWrite)
 430              		.loc 1 337 0
 431 0014 BA68     		ldr	r2, [r7, #8]
 432 0016 FB68     		ldr	r3, [r7, #12]
 433 0018 9A42     		cmp	r2, r3
 434 001a 05D9     		bls	.L17
 338:C:/StellarisWare/utils\ringbuf.c ****     {
 339:C:/StellarisWare/utils\ringbuf.c ****         //
 340:C:/StellarisWare/utils\ringbuf.c ****         // The read pointer is above the write pointer so the amount of free
 341:C:/StellarisWare/utils\ringbuf.c ****         // space is the difference between the two indices minus 1 to account
 342:C:/StellarisWare/utils\ringbuf.c ****         // for the buffer full condition (write index one behind read index).
 343:C:/StellarisWare/utils\ringbuf.c ****         //
 344:C:/StellarisWare/utils\ringbuf.c ****         return((ulRead - ulWrite) - 1);
 435              		.loc 1 344 0
 436 001c BA68     		ldr	r2, [r7, #8]
 437 001e FB68     		ldr	r3, [r7, #12]
 438 0020 D31A     		subs	r3, r2, r3
 439 0022 03F1FF33 		add	r3, r3, #-1
 440 0026 0CE0     		b	.L18
 441              	.L17:
 345:C:/StellarisWare/utils\ringbuf.c ****     }
 346:C:/StellarisWare/utils\ringbuf.c ****     else
 347:C:/StellarisWare/utils\ringbuf.c ****     {
 348:C:/StellarisWare/utils\ringbuf.c ****         //
 349:C:/StellarisWare/utils\ringbuf.c ****         // If the write pointer is above the read pointer, the amount of free
 350:C:/StellarisWare/utils\ringbuf.c ****         // space is the size of the buffer minus the write index. We need to
 351:C:/StellarisWare/utils\ringbuf.c ****         // add a special-case adjustment if the read index is 0 since we need
 352:C:/StellarisWare/utils\ringbuf.c ****         // to leave 1 byte empty to ensure we can tell the difference between
 353:C:/StellarisWare/utils\ringbuf.c ****         // the buffer being full and empty.
 354:C:/StellarisWare/utils\ringbuf.c ****         //
 355:C:/StellarisWare/utils\ringbuf.c ****         return(ptRingBuf->ulSize - ulWrite - ((ulRead == 0) ? 1 : 0));
 442              		.loc 1 355 0
 443 0028 7B68     		ldr	r3, [r7, #4]
 444 002a 1A68     		ldr	r2, [r3, #0]
 445 002c FB68     		ldr	r3, [r7, #12]
 446 002e D21A     		subs	r2, r2, r3
 447 0030 BB68     		ldr	r3, [r7, #8]
 448 0032 002B     		cmp	r3, #0
 449 0034 02D1     		bne	.L19
 450              		.loc 1 355 0 is_stmt 0 discriminator 1
 451 0036 4FF00103 		mov	r3, #1
 452 003a 01E0     		b	.L20
 453              	.L19:
 454              		.loc 1 355 0 discriminator 2
 455 003c 4FF00003 		mov	r3, #0
 456              	.L20:
 457              		.loc 1 355 0 discriminator 3
 458 0040 D31A     		subs	r3, r2, r3
 459              	.L18:
 356:C:/StellarisWare/utils\ringbuf.c ****     }
 357:C:/StellarisWare/utils\ringbuf.c **** }
 460              		.loc 1 357 0 is_stmt 1
 461 0042 1846     		mov	r0, r3
 462 0044 07F11407 		add	r7, r7, #20
 463 0048 BD46     		mov	sp, r7
 464 004a 80BC     		pop	{r7}
 465 004c 7047     		bx	lr
 466              		.cfi_endproc
 467              	.LFE7:
 469 004e 00BF     		.section	.text.RingBufSize,"ax",%progbits
 470              		.align	2
 471              		.global	RingBufSize
 472              		.thumb
 473              		.thumb_func
 475              	RingBufSize:
 476              	.LFB8:
 358:C:/StellarisWare/utils\ringbuf.c **** 
 359:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 360:C:/StellarisWare/utils\ringbuf.c **** //
 361:C:/StellarisWare/utils\ringbuf.c **** //! Return size in bytes of a ring buffer.
 362:C:/StellarisWare/utils\ringbuf.c **** //!
 363:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf is the ring buffer object to check.
 364:C:/StellarisWare/utils\ringbuf.c **** //!
 365:C:/StellarisWare/utils\ringbuf.c **** //! This function returns the size of the ring buffer.
 366:C:/StellarisWare/utils\ringbuf.c **** //!
 367:C:/StellarisWare/utils\ringbuf.c **** //! \return Returns the size in bytes of the ring buffer.
 368:C:/StellarisWare/utils\ringbuf.c **** //
 369:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 370:C:/StellarisWare/utils\ringbuf.c **** unsigned long
 371:C:/StellarisWare/utils\ringbuf.c **** RingBufSize(tRingBufObject *ptRingBuf)
 372:C:/StellarisWare/utils\ringbuf.c **** {
 477              		.loc 1 372 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 8
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481              		@ link register save eliminated.
 482 0000 80B4     		push	{r7}
 483              	.LCFI24:
 484              		.cfi_def_cfa_offset 4
 485              		.cfi_offset 7, -4
 486 0002 83B0     		sub	sp, sp, #12
 487              	.LCFI25:
 488              		.cfi_def_cfa_offset 16
 489 0004 00AF     		add	r7, sp, #0
 490              	.LCFI26:
 491              		.cfi_def_cfa_register 7
 492 0006 7860     		str	r0, [r7, #4]
 373:C:/StellarisWare/utils\ringbuf.c ****     //
 374:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 375:C:/StellarisWare/utils\ringbuf.c ****     //
 376:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 377:C:/StellarisWare/utils\ringbuf.c **** 
 378:C:/StellarisWare/utils\ringbuf.c ****     //
 379:C:/StellarisWare/utils\ringbuf.c ****     // Return the number of bytes available in the ring buffer.
 380:C:/StellarisWare/utils\ringbuf.c ****     //
 381:C:/StellarisWare/utils\ringbuf.c ****     return(ptRingBuf->ulSize);
 493              		.loc 1 381 0
 494 0008 7B68     		ldr	r3, [r7, #4]
 495 000a 1B68     		ldr	r3, [r3, #0]
 382:C:/StellarisWare/utils\ringbuf.c **** }
 496              		.loc 1 382 0
 497 000c 1846     		mov	r0, r3
 498 000e 07F10C07 		add	r7, r7, #12
 499 0012 BD46     		mov	sp, r7
 500 0014 80BC     		pop	{r7}
 501 0016 7047     		bx	lr
 502              		.cfi_endproc
 503              	.LFE8:
 505              		.section	.text.RingBufReadOne,"ax",%progbits
 506              		.align	2
 507              		.global	RingBufReadOne
 508              		.thumb
 509              		.thumb_func
 511              	RingBufReadOne:
 512              	.LFB9:
 383:C:/StellarisWare/utils\ringbuf.c **** 
 384:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 385:C:/StellarisWare/utils\ringbuf.c **** //
 386:C:/StellarisWare/utils\ringbuf.c **** //! Reads a single byte of data from a ring buffer.
 387:C:/StellarisWare/utils\ringbuf.c **** //!
 388:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to be written to.
 389:C:/StellarisWare/utils\ringbuf.c **** //!
 390:C:/StellarisWare/utils\ringbuf.c **** //! This function reads a single byte of data from a ring buffer.
 391:C:/StellarisWare/utils\ringbuf.c **** //!
 392:C:/StellarisWare/utils\ringbuf.c **** //! \return The byte read from the ring buffer.
 393:C:/StellarisWare/utils\ringbuf.c **** //
 394:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 395:C:/StellarisWare/utils\ringbuf.c **** unsigned char
 396:C:/StellarisWare/utils\ringbuf.c **** RingBufReadOne(tRingBufObject *ptRingBuf)
 397:C:/StellarisWare/utils\ringbuf.c **** {
 513              		.loc 1 397 0
 514              		.cfi_startproc
 515              		@ args = 0, pretend = 0, frame = 16
 516              		@ frame_needed = 1, uses_anonymous_args = 0
 517 0000 80B5     		push	{r7, lr}
 518              	.LCFI27:
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 14, -4
 521              		.cfi_offset 7, -8
 522 0002 84B0     		sub	sp, sp, #16
 523              	.LCFI28:
 524              		.cfi_def_cfa_offset 24
 525 0004 00AF     		add	r7, sp, #0
 526              	.LCFI29:
 527              		.cfi_def_cfa_register 7
 528 0006 7860     		str	r0, [r7, #4]
 398:C:/StellarisWare/utils\ringbuf.c ****     unsigned char ucTemp;
 399:C:/StellarisWare/utils\ringbuf.c **** 
 400:C:/StellarisWare/utils\ringbuf.c ****     //
 401:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 402:C:/StellarisWare/utils\ringbuf.c ****     //
 403:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 404:C:/StellarisWare/utils\ringbuf.c **** 
 405:C:/StellarisWare/utils\ringbuf.c ****     //
 406:C:/StellarisWare/utils\ringbuf.c ****     // Verify that space is available in the buffer.
 407:C:/StellarisWare/utils\ringbuf.c ****     //
 408:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(RingBufUsed(ptRingBuf) != 0);
 409:C:/StellarisWare/utils\ringbuf.c **** 
 410:C:/StellarisWare/utils\ringbuf.c ****     //
 411:C:/StellarisWare/utils\ringbuf.c ****     // Write the data byte.
 412:C:/StellarisWare/utils\ringbuf.c ****     //
 413:C:/StellarisWare/utils\ringbuf.c ****     ucTemp = ptRingBuf->pucBuf[ptRingBuf->ulReadIndex];
 529              		.loc 1 413 0
 530 0008 7B68     		ldr	r3, [r7, #4]
 531 000a DA68     		ldr	r2, [r3, #12]
 532 000c 7B68     		ldr	r3, [r7, #4]
 533 000e 9B68     		ldr	r3, [r3, #8]
 534 0010 D318     		adds	r3, r2, r3
 535 0012 1B78     		ldrb	r3, [r3, #0]
 536 0014 FB73     		strb	r3, [r7, #15]
 414:C:/StellarisWare/utils\ringbuf.c **** 
 415:C:/StellarisWare/utils\ringbuf.c ****     //
 416:C:/StellarisWare/utils\ringbuf.c ****     // Increment the read index.
 417:C:/StellarisWare/utils\ringbuf.c ****     //
 418:C:/StellarisWare/utils\ringbuf.c ****     UpdateIndexAtomic(&ptRingBuf->ulReadIndex, 1, ptRingBuf->ulSize);
 537              		.loc 1 418 0
 538 0016 7B68     		ldr	r3, [r7, #4]
 539 0018 03F10802 		add	r2, r3, #8
 540 001c 7B68     		ldr	r3, [r7, #4]
 541 001e 1B68     		ldr	r3, [r3, #0]
 542 0020 1046     		mov	r0, r2
 543 0022 4FF00101 		mov	r1, #1
 544 0026 1A46     		mov	r2, r3
 545 0028 FFF7FEFF 		bl	UpdateIndexAtomic
 419:C:/StellarisWare/utils\ringbuf.c **** 
 420:C:/StellarisWare/utils\ringbuf.c ****     //
 421:C:/StellarisWare/utils\ringbuf.c ****     // Return the character read.
 422:C:/StellarisWare/utils\ringbuf.c ****     //
 423:C:/StellarisWare/utils\ringbuf.c ****     return(ucTemp);
 546              		.loc 1 423 0
 547 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 424:C:/StellarisWare/utils\ringbuf.c **** }
 548              		.loc 1 424 0
 549 002e 1846     		mov	r0, r3
 550 0030 07F11007 		add	r7, r7, #16
 551 0034 BD46     		mov	sp, r7
 552 0036 80BD     		pop	{r7, pc}
 553              		.cfi_endproc
 554              	.LFE9:
 556              		.section	.text.RingBufRead,"ax",%progbits
 557              		.align	2
 558              		.global	RingBufRead
 559              		.thumb
 560              		.thumb_func
 562              	RingBufRead:
 563              	.LFB10:
 425:C:/StellarisWare/utils\ringbuf.c **** 
 426:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 427:C:/StellarisWare/utils\ringbuf.c **** //
 428:C:/StellarisWare/utils\ringbuf.c **** //! Reads data from a ring buffer.
 429:C:/StellarisWare/utils\ringbuf.c **** //!
 430:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to be read from.
 431:C:/StellarisWare/utils\ringbuf.c **** //! \param pucData points to where the data should be stored.
 432:C:/StellarisWare/utils\ringbuf.c **** //! \param ulLength is the number of bytes to be read.
 433:C:/StellarisWare/utils\ringbuf.c **** //!
 434:C:/StellarisWare/utils\ringbuf.c **** //! This function reads a sequence of bytes from a ring buffer.
 435:C:/StellarisWare/utils\ringbuf.c **** //!
 436:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 437:C:/StellarisWare/utils\ringbuf.c **** //
 438:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 439:C:/StellarisWare/utils\ringbuf.c **** void
 440:C:/StellarisWare/utils\ringbuf.c **** RingBufRead(tRingBufObject *ptRingBuf, unsigned char *pucData,
 441:C:/StellarisWare/utils\ringbuf.c ****                unsigned long ulLength)
 442:C:/StellarisWare/utils\ringbuf.c **** {
 564              		.loc 1 442 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 24
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568 0000 90B5     		push	{r4, r7, lr}
 569              	.LCFI30:
 570              		.cfi_def_cfa_offset 12
 571              		.cfi_offset 14, -4
 572              		.cfi_offset 7, -8
 573              		.cfi_offset 4, -12
 574 0002 87B0     		sub	sp, sp, #28
 575              	.LCFI31:
 576              		.cfi_def_cfa_offset 40
 577 0004 00AF     		add	r7, sp, #0
 578              	.LCFI32:
 579              		.cfi_def_cfa_register 7
 580 0006 F860     		str	r0, [r7, #12]
 581 0008 B960     		str	r1, [r7, #8]
 582 000a 7A60     		str	r2, [r7, #4]
 443:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulTemp;
 444:C:/StellarisWare/utils\ringbuf.c **** 
 445:C:/StellarisWare/utils\ringbuf.c ****     //
 446:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 447:C:/StellarisWare/utils\ringbuf.c ****     //
 448:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 449:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(pucData != NULL);
 450:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulLength != 0);
 451:C:/StellarisWare/utils\ringbuf.c **** 
 452:C:/StellarisWare/utils\ringbuf.c ****     //
 453:C:/StellarisWare/utils\ringbuf.c ****     // Verify that data is available in the buffer.
 454:C:/StellarisWare/utils\ringbuf.c ****     //
 455:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulLength <= RingBufUsed(ptRingBuf));
 456:C:/StellarisWare/utils\ringbuf.c **** 
 457:C:/StellarisWare/utils\ringbuf.c ****     //
 458:C:/StellarisWare/utils\ringbuf.c ****     // Read the data from the ring buffer.
 459:C:/StellarisWare/utils\ringbuf.c ****     //
 460:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 583              		.loc 1 460 0
 584 000c 4FF00003 		mov	r3, #0
 585 0010 7B61     		str	r3, [r7, #20]
 586 0012 0BE0     		b	.L24
 587              	.L25:
 461:C:/StellarisWare/utils\ringbuf.c ****     {
 462:C:/StellarisWare/utils\ringbuf.c ****         pucData[ulTemp] = RingBufReadOne(ptRingBuf);
 588              		.loc 1 462 0 discriminator 2
 589 0014 BA68     		ldr	r2, [r7, #8]
 590 0016 7B69     		ldr	r3, [r7, #20]
 591 0018 D418     		adds	r4, r2, r3
 592 001a F868     		ldr	r0, [r7, #12]
 593 001c FFF7FEFF 		bl	RingBufReadOne
 594 0020 0346     		mov	r3, r0
 595 0022 2370     		strb	r3, [r4, #0]
 460:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 596              		.loc 1 460 0 discriminator 2
 597 0024 7B69     		ldr	r3, [r7, #20]
 598 0026 03F10103 		add	r3, r3, #1
 599 002a 7B61     		str	r3, [r7, #20]
 600              	.L24:
 460:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 601              		.loc 1 460 0 is_stmt 0 discriminator 1
 602 002c 7A69     		ldr	r2, [r7, #20]
 603 002e 7B68     		ldr	r3, [r7, #4]
 604 0030 9A42     		cmp	r2, r3
 605 0032 EFD3     		bcc	.L25
 463:C:/StellarisWare/utils\ringbuf.c ****     }
 464:C:/StellarisWare/utils\ringbuf.c **** }
 606              		.loc 1 464 0 is_stmt 1
 607 0034 07F11C07 		add	r7, r7, #28
 608 0038 BD46     		mov	sp, r7
 609 003a 90BD     		pop	{r4, r7, pc}
 610              		.cfi_endproc
 611              	.LFE10:
 613              		.section	.text.RingBufAdvanceRead,"ax",%progbits
 614              		.align	2
 615              		.global	RingBufAdvanceRead
 616              		.thumb
 617              		.thumb_func
 619              	RingBufAdvanceRead:
 620              	.LFB11:
 465:C:/StellarisWare/utils\ringbuf.c **** 
 466:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 467:C:/StellarisWare/utils\ringbuf.c **** //
 468:C:/StellarisWare/utils\ringbuf.c **** //! Remove bytes from the ring buffer by advancing the read index.
 469:C:/StellarisWare/utils\ringbuf.c **** //!
 470:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer from which bytes are to be
 471:C:/StellarisWare/utils\ringbuf.c **** //! removed.
 472:C:/StellarisWare/utils\ringbuf.c **** //! \param ulNumBytes is the number of bytes to be removed from the buffer.
 473:C:/StellarisWare/utils\ringbuf.c **** //!
 474:C:/StellarisWare/utils\ringbuf.c **** //! This function advances the ring buffer read index by a given number of
 475:C:/StellarisWare/utils\ringbuf.c **** //! bytes, removing that number of bytes of data from the buffer. If \e
 476:C:/StellarisWare/utils\ringbuf.c **** //! ulNumBytes is larger than the number of bytes currently in the buffer, the
 477:C:/StellarisWare/utils\ringbuf.c **** //! buffer is emptied.
 478:C:/StellarisWare/utils\ringbuf.c **** //!
 479:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 480:C:/StellarisWare/utils\ringbuf.c **** //
 481:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 482:C:/StellarisWare/utils\ringbuf.c **** void
 483:C:/StellarisWare/utils\ringbuf.c **** RingBufAdvanceRead(tRingBufObject *ptRingBuf,
 484:C:/StellarisWare/utils\ringbuf.c ****                       unsigned long ulNumBytes)
 485:C:/StellarisWare/utils\ringbuf.c **** {
 621              		.loc 1 485 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 16
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625 0000 80B5     		push	{r7, lr}
 626              	.LCFI33:
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 14, -4
 629              		.cfi_offset 7, -8
 630 0002 84B0     		sub	sp, sp, #16
 631              	.LCFI34:
 632              		.cfi_def_cfa_offset 24
 633 0004 00AF     		add	r7, sp, #0
 634              	.LCFI35:
 635              		.cfi_def_cfa_register 7
 636 0006 7860     		str	r0, [r7, #4]
 637 0008 3960     		str	r1, [r7, #0]
 486:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulCount;
 487:C:/StellarisWare/utils\ringbuf.c **** 
 488:C:/StellarisWare/utils\ringbuf.c ****     //
 489:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 490:C:/StellarisWare/utils\ringbuf.c ****     //
 491:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 492:C:/StellarisWare/utils\ringbuf.c **** 
 493:C:/StellarisWare/utils\ringbuf.c ****     //
 494:C:/StellarisWare/utils\ringbuf.c ****     // Make sure that we are not being asked to remove more data than is
 495:C:/StellarisWare/utils\ringbuf.c ****     // there to be removed.
 496:C:/StellarisWare/utils\ringbuf.c ****     //
 497:C:/StellarisWare/utils\ringbuf.c ****     ulCount = RingBufUsed(ptRingBuf);
 638              		.loc 1 497 0
 639 000a 7868     		ldr	r0, [r7, #4]
 640 000c FFF7FEFF 		bl	RingBufUsed
 641 0010 F860     		str	r0, [r7, #12]
 498:C:/StellarisWare/utils\ringbuf.c ****     ulCount =  (ulCount < ulNumBytes) ? ulCount : ulNumBytes;
 642              		.loc 1 498 0
 643 0012 FA68     		ldr	r2, [r7, #12]
 644 0014 3B68     		ldr	r3, [r7, #0]
 645 0016 9A42     		cmp	r2, r3
 646 0018 38BF     		it	cc
 647 001a 1346     		movcc	r3, r2
 648 001c FB60     		str	r3, [r7, #12]
 499:C:/StellarisWare/utils\ringbuf.c **** 
 500:C:/StellarisWare/utils\ringbuf.c ****     //
 501:C:/StellarisWare/utils\ringbuf.c ****     // Advance the buffer read index by the required number of bytes.
 502:C:/StellarisWare/utils\ringbuf.c ****     //
 503:C:/StellarisWare/utils\ringbuf.c ****     UpdateIndexAtomic(&ptRingBuf->ulReadIndex, ulCount,
 649              		.loc 1 503 0
 650 001e 7B68     		ldr	r3, [r7, #4]
 651 0020 03F10802 		add	r2, r3, #8
 504:C:/StellarisWare/utils\ringbuf.c ****                       ptRingBuf->ulSize);
 652              		.loc 1 504 0
 653 0024 7B68     		ldr	r3, [r7, #4]
 503:C:/StellarisWare/utils\ringbuf.c ****     UpdateIndexAtomic(&ptRingBuf->ulReadIndex, ulCount,
 654              		.loc 1 503 0
 655 0026 1B68     		ldr	r3, [r3, #0]
 656 0028 1046     		mov	r0, r2
 657 002a F968     		ldr	r1, [r7, #12]
 658 002c 1A46     		mov	r2, r3
 659 002e FFF7FEFF 		bl	UpdateIndexAtomic
 505:C:/StellarisWare/utils\ringbuf.c **** }
 660              		.loc 1 505 0
 661 0032 07F11007 		add	r7, r7, #16
 662 0036 BD46     		mov	sp, r7
 663 0038 80BD     		pop	{r7, pc}
 664              		.cfi_endproc
 665              	.LFE11:
 667 003a 00BF     		.section	.text.RingBufAdvanceWrite,"ax",%progbits
 668              		.align	2
 669              		.global	RingBufAdvanceWrite
 670              		.thumb
 671              		.thumb_func
 673              	RingBufAdvanceWrite:
 674              	.LFB12:
 506:C:/StellarisWare/utils\ringbuf.c **** 
 507:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 508:C:/StellarisWare/utils\ringbuf.c **** //
 509:C:/StellarisWare/utils\ringbuf.c **** //! Add bytes to the ring buffer by advancing the write index.
 510:C:/StellarisWare/utils\ringbuf.c **** //!
 511:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to which bytes have been added.
 512:C:/StellarisWare/utils\ringbuf.c **** //! \param ulNumBytes is the number of bytes added to the buffer.
 513:C:/StellarisWare/utils\ringbuf.c **** //!
 514:C:/StellarisWare/utils\ringbuf.c **** //! This function should be used by clients who wish to add data to the buffer
 515:C:/StellarisWare/utils\ringbuf.c **** //! directly rather than via calls to RingBufWrite() or RingBufWriteOne(). It
 516:C:/StellarisWare/utils\ringbuf.c **** //! advances the write index by a given number of bytes.  If the \e ulNumBytes
 517:C:/StellarisWare/utils\ringbuf.c **** //! parameter is larger than the amount of free space in the buffer, the
 518:C:/StellarisWare/utils\ringbuf.c **** //! read pointer will be advanced to cater for the addition.  Note that this
 519:C:/StellarisWare/utils\ringbuf.c **** //! will result in some of the oldest data in the buffer being discarded.
 520:C:/StellarisWare/utils\ringbuf.c **** //!
 521:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 522:C:/StellarisWare/utils\ringbuf.c **** //
 523:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 524:C:/StellarisWare/utils\ringbuf.c **** void
 525:C:/StellarisWare/utils\ringbuf.c **** RingBufAdvanceWrite(tRingBufObject *ptRingBuf,
 526:C:/StellarisWare/utils\ringbuf.c ****                        unsigned long ulNumBytes)
 527:C:/StellarisWare/utils\ringbuf.c **** {
 675              		.loc 1 527 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 16
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679 0000 80B5     		push	{r7, lr}
 680              	.LCFI36:
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 14, -4
 683              		.cfi_offset 7, -8
 684 0002 84B0     		sub	sp, sp, #16
 685              	.LCFI37:
 686              		.cfi_def_cfa_offset 24
 687 0004 00AF     		add	r7, sp, #0
 688              	.LCFI38:
 689              		.cfi_def_cfa_register 7
 690 0006 7860     		str	r0, [r7, #4]
 691 0008 3960     		str	r1, [r7, #0]
 528:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulCount;
 529:C:/StellarisWare/utils\ringbuf.c ****     tBoolean bIntsOff;
 530:C:/StellarisWare/utils\ringbuf.c **** 
 531:C:/StellarisWare/utils\ringbuf.c ****     //
 532:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 533:C:/StellarisWare/utils\ringbuf.c ****     //
 534:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 535:C:/StellarisWare/utils\ringbuf.c **** 
 536:C:/StellarisWare/utils\ringbuf.c ****     //
 537:C:/StellarisWare/utils\ringbuf.c ****     // Make sure we were not asked to add a silly number of bytes.
 538:C:/StellarisWare/utils\ringbuf.c ****     //
 539:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulNumBytes <= ptRingBuf->ulSize);
 540:C:/StellarisWare/utils\ringbuf.c **** 
 541:C:/StellarisWare/utils\ringbuf.c ****     //
 542:C:/StellarisWare/utils\ringbuf.c ****     // Determine how much free space we currently think the buffer has.
 543:C:/StellarisWare/utils\ringbuf.c ****     //
 544:C:/StellarisWare/utils\ringbuf.c ****     ulCount = RingBufFree(ptRingBuf);
 692              		.loc 1 544 0
 693 000a 7868     		ldr	r0, [r7, #4]
 694 000c FFF7FEFF 		bl	RingBufFree
 695 0010 F860     		str	r0, [r7, #12]
 545:C:/StellarisWare/utils\ringbuf.c **** 
 546:C:/StellarisWare/utils\ringbuf.c ****     //
 547:C:/StellarisWare/utils\ringbuf.c ****     // Advance the buffer write index by the required number of bytes and
 548:C:/StellarisWare/utils\ringbuf.c ****     // check that we have not run past the read index. Note that we must do
 549:C:/StellarisWare/utils\ringbuf.c ****     // this within a critical section (interrupts disabled) to prevent
 550:C:/StellarisWare/utils\ringbuf.c ****     // race conditions that could corrupt one or other of the indices.
 551:C:/StellarisWare/utils\ringbuf.c ****     //
 552:C:/StellarisWare/utils\ringbuf.c ****     bIntsOff = IntMasterDisable();
 696              		.loc 1 552 0
 697 0012 FFF7FEFF 		bl	IntMasterDisable
 698 0016 0346     		mov	r3, r0
 699 0018 FB72     		strb	r3, [r7, #11]
 553:C:/StellarisWare/utils\ringbuf.c **** 
 554:C:/StellarisWare/utils\ringbuf.c ****     //
 555:C:/StellarisWare/utils\ringbuf.c ****     // Update the write pointer.
 556:C:/StellarisWare/utils\ringbuf.c ****     //
 557:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->ulWriteIndex += ulNumBytes;
 700              		.loc 1 557 0
 701 001a 7B68     		ldr	r3, [r7, #4]
 702 001c 5A68     		ldr	r2, [r3, #4]
 703 001e 3B68     		ldr	r3, [r7, #0]
 704 0020 D218     		adds	r2, r2, r3
 705 0022 7B68     		ldr	r3, [r7, #4]
 706 0024 5A60     		str	r2, [r3, #4]
 558:C:/StellarisWare/utils\ringbuf.c **** 
 559:C:/StellarisWare/utils\ringbuf.c ****     //
 560:C:/StellarisWare/utils\ringbuf.c ****     // Check and correct for wrap.
 561:C:/StellarisWare/utils\ringbuf.c ****     //
 562:C:/StellarisWare/utils\ringbuf.c ****     if(ptRingBuf->ulWriteIndex >= ptRingBuf->ulSize)
 707              		.loc 1 562 0
 708 0026 7B68     		ldr	r3, [r7, #4]
 709 0028 5A68     		ldr	r2, [r3, #4]
 710 002a 7B68     		ldr	r3, [r7, #4]
 711 002c 1B68     		ldr	r3, [r3, #0]
 712 002e 9A42     		cmp	r2, r3
 713 0030 06D3     		bcc	.L28
 563:C:/StellarisWare/utils\ringbuf.c ****     {
 564:C:/StellarisWare/utils\ringbuf.c ****         ptRingBuf->ulWriteIndex -= ptRingBuf->ulSize;
 714              		.loc 1 564 0
 715 0032 7B68     		ldr	r3, [r7, #4]
 716 0034 5A68     		ldr	r2, [r3, #4]
 717 0036 7B68     		ldr	r3, [r7, #4]
 718 0038 1B68     		ldr	r3, [r3, #0]
 719 003a D21A     		subs	r2, r2, r3
 720 003c 7B68     		ldr	r3, [r7, #4]
 721 003e 5A60     		str	r2, [r3, #4]
 722              	.L28:
 565:C:/StellarisWare/utils\ringbuf.c ****     }
 566:C:/StellarisWare/utils\ringbuf.c **** 
 567:C:/StellarisWare/utils\ringbuf.c ****     //
 568:C:/StellarisWare/utils\ringbuf.c ****     // Did the client add more bytes than the buffer had free space for?
 569:C:/StellarisWare/utils\ringbuf.c ****     //
 570:C:/StellarisWare/utils\ringbuf.c ****     if(ulCount < ulNumBytes)
 723              		.loc 1 570 0
 724 0040 FA68     		ldr	r2, [r7, #12]
 725 0042 3B68     		ldr	r3, [r7, #0]
 726 0044 9A42     		cmp	r2, r3
 727 0046 12D2     		bcs	.L29
 571:C:/StellarisWare/utils\ringbuf.c ****     {
 572:C:/StellarisWare/utils\ringbuf.c ****         //
 573:C:/StellarisWare/utils\ringbuf.c ****         // Yes - we need to advance the read pointer to ahead of the write
 574:C:/StellarisWare/utils\ringbuf.c ****         // pointer to discard some of the oldest data.
 575:C:/StellarisWare/utils\ringbuf.c ****         //
 576:C:/StellarisWare/utils\ringbuf.c ****         ptRingBuf->ulReadIndex = ptRingBuf->ulWriteIndex + 1;
 728              		.loc 1 576 0
 729 0048 7B68     		ldr	r3, [r7, #4]
 730 004a 5B68     		ldr	r3, [r3, #4]
 731 004c 03F10102 		add	r2, r3, #1
 732 0050 7B68     		ldr	r3, [r7, #4]
 733 0052 9A60     		str	r2, [r3, #8]
 577:C:/StellarisWare/utils\ringbuf.c **** 
 578:C:/StellarisWare/utils\ringbuf.c ****         //
 579:C:/StellarisWare/utils\ringbuf.c ****         // Correct for buffer wrap if necessary.
 580:C:/StellarisWare/utils\ringbuf.c ****         //
 581:C:/StellarisWare/utils\ringbuf.c ****         if(ptRingBuf->ulReadIndex >= ptRingBuf->ulSize)
 734              		.loc 1 581 0
 735 0054 7B68     		ldr	r3, [r7, #4]
 736 0056 9A68     		ldr	r2, [r3, #8]
 737 0058 7B68     		ldr	r3, [r7, #4]
 738 005a 1B68     		ldr	r3, [r3, #0]
 739 005c 9A42     		cmp	r2, r3
 740 005e 06D3     		bcc	.L29
 582:C:/StellarisWare/utils\ringbuf.c ****         {
 583:C:/StellarisWare/utils\ringbuf.c ****             ptRingBuf->ulReadIndex -= ptRingBuf->ulSize;
 741              		.loc 1 583 0
 742 0060 7B68     		ldr	r3, [r7, #4]
 743 0062 9A68     		ldr	r2, [r3, #8]
 744 0064 7B68     		ldr	r3, [r7, #4]
 745 0066 1B68     		ldr	r3, [r3, #0]
 746 0068 D21A     		subs	r2, r2, r3
 747 006a 7B68     		ldr	r3, [r7, #4]
 748 006c 9A60     		str	r2, [r3, #8]
 749              	.L29:
 584:C:/StellarisWare/utils\ringbuf.c ****         }
 585:C:/StellarisWare/utils\ringbuf.c ****     }
 586:C:/StellarisWare/utils\ringbuf.c **** 
 587:C:/StellarisWare/utils\ringbuf.c ****     //
 588:C:/StellarisWare/utils\ringbuf.c ****     // Restore interrupts if we turned them off earlier.
 589:C:/StellarisWare/utils\ringbuf.c ****     //
 590:C:/StellarisWare/utils\ringbuf.c ****     if(!bIntsOff)
 750              		.loc 1 590 0
 751 006e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 752 0070 002B     		cmp	r3, #0
 753 0072 01D1     		bne	.L27
 591:C:/StellarisWare/utils\ringbuf.c ****     {
 592:C:/StellarisWare/utils\ringbuf.c ****         IntMasterEnable();
 754              		.loc 1 592 0
 755 0074 FFF7FEFF 		bl	IntMasterEnable
 756              	.L27:
 593:C:/StellarisWare/utils\ringbuf.c ****     }
 594:C:/StellarisWare/utils\ringbuf.c **** }
 757              		.loc 1 594 0
 758 0078 07F11007 		add	r7, r7, #16
 759 007c BD46     		mov	sp, r7
 760 007e 80BD     		pop	{r7, pc}
 761              		.cfi_endproc
 762              	.LFE12:
 764              		.section	.text.RingBufWriteOne,"ax",%progbits
 765              		.align	2
 766              		.global	RingBufWriteOne
 767              		.thumb
 768              		.thumb_func
 770              	RingBufWriteOne:
 771              	.LFB13:
 595:C:/StellarisWare/utils\ringbuf.c **** 
 596:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 597:C:/StellarisWare/utils\ringbuf.c **** //
 598:C:/StellarisWare/utils\ringbuf.c **** //! Writes a single byte of data to a ring buffer.
 599:C:/StellarisWare/utils\ringbuf.c **** //!
 600:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to be written to.
 601:C:/StellarisWare/utils\ringbuf.c **** //! \param ucData is the byte to be written.
 602:C:/StellarisWare/utils\ringbuf.c **** //!
 603:C:/StellarisWare/utils\ringbuf.c **** //! This function writes a single byte of data into a ring buffer.
 604:C:/StellarisWare/utils\ringbuf.c **** //!
 605:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 606:C:/StellarisWare/utils\ringbuf.c **** //
 607:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 608:C:/StellarisWare/utils\ringbuf.c **** void
 609:C:/StellarisWare/utils\ringbuf.c **** RingBufWriteOne(tRingBufObject *ptRingBuf, unsigned char ucData)
 610:C:/StellarisWare/utils\ringbuf.c **** {
 772              		.loc 1 610 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 8
 775              		@ frame_needed = 1, uses_anonymous_args = 0
 776 0000 80B5     		push	{r7, lr}
 777              	.LCFI39:
 778              		.cfi_def_cfa_offset 8
 779              		.cfi_offset 14, -4
 780              		.cfi_offset 7, -8
 781 0002 82B0     		sub	sp, sp, #8
 782              	.LCFI40:
 783              		.cfi_def_cfa_offset 16
 784 0004 00AF     		add	r7, sp, #0
 785              	.LCFI41:
 786              		.cfi_def_cfa_register 7
 787 0006 7860     		str	r0, [r7, #4]
 788 0008 0B46     		mov	r3, r1
 789 000a FB70     		strb	r3, [r7, #3]
 611:C:/StellarisWare/utils\ringbuf.c ****     //
 612:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 613:C:/StellarisWare/utils\ringbuf.c ****     //
 614:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 615:C:/StellarisWare/utils\ringbuf.c **** 
 616:C:/StellarisWare/utils\ringbuf.c ****     //
 617:C:/StellarisWare/utils\ringbuf.c ****     // Verify that space is available in the buffer.
 618:C:/StellarisWare/utils\ringbuf.c ****     //
 619:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(RingBufFree(ptRingBuf) != 0);
 620:C:/StellarisWare/utils\ringbuf.c **** 
 621:C:/StellarisWare/utils\ringbuf.c ****     //
 622:C:/StellarisWare/utils\ringbuf.c ****     // Write the data byte.
 623:C:/StellarisWare/utils\ringbuf.c ****     //
 624:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->pucBuf[ptRingBuf->ulWriteIndex] = ucData;
 790              		.loc 1 624 0
 791 000c 7B68     		ldr	r3, [r7, #4]
 792 000e DA68     		ldr	r2, [r3, #12]
 793 0010 7B68     		ldr	r3, [r7, #4]
 794 0012 5B68     		ldr	r3, [r3, #4]
 795 0014 D318     		adds	r3, r2, r3
 796 0016 FA78     		ldrb	r2, [r7, #3]
 797 0018 1A70     		strb	r2, [r3, #0]
 625:C:/StellarisWare/utils\ringbuf.c **** 
 626:C:/StellarisWare/utils\ringbuf.c ****     //
 627:C:/StellarisWare/utils\ringbuf.c ****     // Increment the write index.
 628:C:/StellarisWare/utils\ringbuf.c ****     //
 629:C:/StellarisWare/utils\ringbuf.c ****     UpdateIndexAtomic(&ptRingBuf->ulWriteIndex, 1, ptRingBuf->ulSize);
 798              		.loc 1 629 0
 799 001a 7B68     		ldr	r3, [r7, #4]
 800 001c 03F10402 		add	r2, r3, #4
 801 0020 7B68     		ldr	r3, [r7, #4]
 802 0022 1B68     		ldr	r3, [r3, #0]
 803 0024 1046     		mov	r0, r2
 804 0026 4FF00101 		mov	r1, #1
 805 002a 1A46     		mov	r2, r3
 806 002c FFF7FEFF 		bl	UpdateIndexAtomic
 630:C:/StellarisWare/utils\ringbuf.c **** }
 807              		.loc 1 630 0
 808 0030 07F10807 		add	r7, r7, #8
 809 0034 BD46     		mov	sp, r7
 810 0036 80BD     		pop	{r7, pc}
 811              		.cfi_endproc
 812              	.LFE13:
 814              		.section	.text.RingBufWrite,"ax",%progbits
 815              		.align	2
 816              		.global	RingBufWrite
 817              		.thumb
 818              		.thumb_func
 820              	RingBufWrite:
 821              	.LFB14:
 631:C:/StellarisWare/utils\ringbuf.c **** 
 632:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 633:C:/StellarisWare/utils\ringbuf.c **** //
 634:C:/StellarisWare/utils\ringbuf.c **** //! Writes data to a ring buffer.
 635:C:/StellarisWare/utils\ringbuf.c **** //!
 636:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to be written to.
 637:C:/StellarisWare/utils\ringbuf.c **** //! \param pucData points to the data to be written.
 638:C:/StellarisWare/utils\ringbuf.c **** //! \param ulLength is the number of bytes to be written.
 639:C:/StellarisWare/utils\ringbuf.c **** //!
 640:C:/StellarisWare/utils\ringbuf.c **** //! This function write a sequence of bytes into a ring buffer.
 641:C:/StellarisWare/utils\ringbuf.c **** //!
 642:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 643:C:/StellarisWare/utils\ringbuf.c **** //
 644:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 645:C:/StellarisWare/utils\ringbuf.c **** void
 646:C:/StellarisWare/utils\ringbuf.c **** RingBufWrite(tRingBufObject *ptRingBuf, unsigned char *pucData,
 647:C:/StellarisWare/utils\ringbuf.c ****                 unsigned long ulLength)
 648:C:/StellarisWare/utils\ringbuf.c **** {
 822              		.loc 1 648 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 24
 825              		@ frame_needed = 1, uses_anonymous_args = 0
 826 0000 80B5     		push	{r7, lr}
 827              	.LCFI42:
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 14, -4
 830              		.cfi_offset 7, -8
 831 0002 86B0     		sub	sp, sp, #24
 832              	.LCFI43:
 833              		.cfi_def_cfa_offset 32
 834 0004 00AF     		add	r7, sp, #0
 835              	.LCFI44:
 836              		.cfi_def_cfa_register 7
 837 0006 F860     		str	r0, [r7, #12]
 838 0008 B960     		str	r1, [r7, #8]
 839 000a 7A60     		str	r2, [r7, #4]
 649:C:/StellarisWare/utils\ringbuf.c ****     unsigned long ulTemp;
 650:C:/StellarisWare/utils\ringbuf.c **** 
 651:C:/StellarisWare/utils\ringbuf.c ****     //
 652:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 653:C:/StellarisWare/utils\ringbuf.c ****     //
 654:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 655:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(pucData != NULL);
 656:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulLength != 0);
 657:C:/StellarisWare/utils\ringbuf.c **** 
 658:C:/StellarisWare/utils\ringbuf.c ****     //
 659:C:/StellarisWare/utils\ringbuf.c ****     // Verify that space is available in the buffer.
 660:C:/StellarisWare/utils\ringbuf.c ****     //
 661:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulLength <= RingBufFree(ptRingBuf));
 662:C:/StellarisWare/utils\ringbuf.c **** 
 663:C:/StellarisWare/utils\ringbuf.c ****     //
 664:C:/StellarisWare/utils\ringbuf.c ****     // Write the data into the ring buffer.
 665:C:/StellarisWare/utils\ringbuf.c ****     //
 666:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 840              		.loc 1 666 0
 841 000c 4FF00003 		mov	r3, #0
 842 0010 7B61     		str	r3, [r7, #20]
 843 0012 0BE0     		b	.L33
 844              	.L34:
 667:C:/StellarisWare/utils\ringbuf.c ****     {
 668:C:/StellarisWare/utils\ringbuf.c ****         RingBufWriteOne(ptRingBuf, pucData[ulTemp]);
 845              		.loc 1 668 0 discriminator 2
 846 0014 BA68     		ldr	r2, [r7, #8]
 847 0016 7B69     		ldr	r3, [r7, #20]
 848 0018 D318     		adds	r3, r2, r3
 849 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 850 001c F868     		ldr	r0, [r7, #12]
 851 001e 1946     		mov	r1, r3
 852 0020 FFF7FEFF 		bl	RingBufWriteOne
 666:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 853              		.loc 1 666 0 discriminator 2
 854 0024 7B69     		ldr	r3, [r7, #20]
 855 0026 03F10103 		add	r3, r3, #1
 856 002a 7B61     		str	r3, [r7, #20]
 857              	.L33:
 666:C:/StellarisWare/utils\ringbuf.c ****     for(ulTemp = 0; ulTemp < ulLength; ulTemp++)
 858              		.loc 1 666 0 is_stmt 0 discriminator 1
 859 002c 7A69     		ldr	r2, [r7, #20]
 860 002e 7B68     		ldr	r3, [r7, #4]
 861 0030 9A42     		cmp	r2, r3
 862 0032 EFD3     		bcc	.L34
 669:C:/StellarisWare/utils\ringbuf.c ****     }
 670:C:/StellarisWare/utils\ringbuf.c **** }
 863              		.loc 1 670 0 is_stmt 1
 864 0034 07F11807 		add	r7, r7, #24
 865 0038 BD46     		mov	sp, r7
 866 003a 80BD     		pop	{r7, pc}
 867              		.cfi_endproc
 868              	.LFE14:
 870              		.section	.text.RingBufInit,"ax",%progbits
 871              		.align	2
 872              		.global	RingBufInit
 873              		.thumb
 874              		.thumb_func
 876              	RingBufInit:
 877              	.LFB15:
 671:C:/StellarisWare/utils\ringbuf.c **** 
 672:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 673:C:/StellarisWare/utils\ringbuf.c **** //
 674:C:/StellarisWare/utils\ringbuf.c **** //! Initialize a ring buffer object.
 675:C:/StellarisWare/utils\ringbuf.c **** //!
 676:C:/StellarisWare/utils\ringbuf.c **** //! \param ptRingBuf points to the ring buffer to be initialized.
 677:C:/StellarisWare/utils\ringbuf.c **** //! \param pucBuf points to the data buffer to be used for the ring buffer.
 678:C:/StellarisWare/utils\ringbuf.c **** //! \param ulSize is the size of the buffer in bytes.
 679:C:/StellarisWare/utils\ringbuf.c **** //!
 680:C:/StellarisWare/utils\ringbuf.c **** //! This function initializes a ring buffer object, preparing it to store data.
 681:C:/StellarisWare/utils\ringbuf.c **** //!
 682:C:/StellarisWare/utils\ringbuf.c **** //! \return None.
 683:C:/StellarisWare/utils\ringbuf.c **** //
 684:C:/StellarisWare/utils\ringbuf.c **** //*****************************************************************************
 685:C:/StellarisWare/utils\ringbuf.c **** void
 686:C:/StellarisWare/utils\ringbuf.c **** RingBufInit(tRingBufObject *ptRingBuf, unsigned char *pucBuf,
 687:C:/StellarisWare/utils\ringbuf.c ****                unsigned long ulSize)
 688:C:/StellarisWare/utils\ringbuf.c **** {
 878              		.loc 1 688 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 16
 881              		@ frame_needed = 1, uses_anonymous_args = 0
 882              		@ link register save eliminated.
 883 0000 80B4     		push	{r7}
 884              	.LCFI45:
 885              		.cfi_def_cfa_offset 4
 886              		.cfi_offset 7, -4
 887 0002 85B0     		sub	sp, sp, #20
 888              	.LCFI46:
 889              		.cfi_def_cfa_offset 24
 890 0004 00AF     		add	r7, sp, #0
 891              	.LCFI47:
 892              		.cfi_def_cfa_register 7
 893 0006 F860     		str	r0, [r7, #12]
 894 0008 B960     		str	r1, [r7, #8]
 895 000a 7A60     		str	r2, [r7, #4]
 689:C:/StellarisWare/utils\ringbuf.c ****     //
 690:C:/StellarisWare/utils\ringbuf.c ****     // Check the arguments.
 691:C:/StellarisWare/utils\ringbuf.c ****     //
 692:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ptRingBuf != NULL);
 693:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(pucBuf != NULL);
 694:C:/StellarisWare/utils\ringbuf.c ****     ASSERT(ulSize != 0);
 695:C:/StellarisWare/utils\ringbuf.c **** 
 696:C:/StellarisWare/utils\ringbuf.c ****     //
 697:C:/StellarisWare/utils\ringbuf.c ****     // Initialize the ring buffer object.
 698:C:/StellarisWare/utils\ringbuf.c ****     //
 699:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->ulSize = ulSize;
 896              		.loc 1 699 0
 897 000c FB68     		ldr	r3, [r7, #12]
 898 000e 7A68     		ldr	r2, [r7, #4]
 899 0010 1A60     		str	r2, [r3, #0]
 700:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->pucBuf = pucBuf;
 900              		.loc 1 700 0
 901 0012 FB68     		ldr	r3, [r7, #12]
 902 0014 BA68     		ldr	r2, [r7, #8]
 903 0016 DA60     		str	r2, [r3, #12]
 701:C:/StellarisWare/utils\ringbuf.c ****     ptRingBuf->ulWriteIndex = ptRingBuf->ulReadIndex = 0;
 904              		.loc 1 701 0
 905 0018 4FF00003 		mov	r3, #0
 906 001c FA68     		ldr	r2, [r7, #12]
 907 001e 9360     		str	r3, [r2, #8]
 908 0020 FA68     		ldr	r2, [r7, #12]
 909 0022 5360     		str	r3, [r2, #4]
 702:C:/StellarisWare/utils\ringbuf.c **** }
 910              		.loc 1 702 0
 911 0024 07F11407 		add	r7, r7, #20
 912 0028 BD46     		mov	sp, r7
 913 002a 80BC     		pop	{r7}
 914 002c 7047     		bx	lr
 915              		.cfi_endproc
 916              	.LFE15:
 918 002e 00BF     		.text
 919              	.Letext0:
 920              		.file 2 "C:\\StellarisWare/utils/ringbuf.h"
 921              		.file 3 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ringbuf.c
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:19     .text.UpdateIndexAtomic:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:23     .text.UpdateIndexAtomic:00000000 UpdateIndexAtomic
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:87     .text.RingBufFull:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:92     .text.RingBufFull:00000000 RingBufFull
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:142    .text.RingBufEmpty:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:147    .text.RingBufEmpty:00000000 RingBufEmpty
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:191    .text.RingBufFlush:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:196    .text.RingBufFlush:00000000 RingBufFlush
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:238    .text.RingBufUsed:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:243    .text.RingBufUsed:00000000 RingBufUsed
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:299    .text.RingBufFree:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:304    .text.RingBufFree:00000000 RingBufFree
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:340    .text.RingBufContigUsed:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:345    .text.RingBufContigUsed:00000000 RingBufContigUsed
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:399    .text.RingBufContigFree:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:404    .text.RingBufContigFree:00000000 RingBufContigFree
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:470    .text.RingBufSize:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:475    .text.RingBufSize:00000000 RingBufSize
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:506    .text.RingBufReadOne:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:511    .text.RingBufReadOne:00000000 RingBufReadOne
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:557    .text.RingBufRead:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:562    .text.RingBufRead:00000000 RingBufRead
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:614    .text.RingBufAdvanceRead:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:619    .text.RingBufAdvanceRead:00000000 RingBufAdvanceRead
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:668    .text.RingBufAdvanceWrite:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:673    .text.RingBufAdvanceWrite:00000000 RingBufAdvanceWrite
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:765    .text.RingBufWriteOne:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:770    .text.RingBufWriteOne:00000000 RingBufWriteOne
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:815    .text.RingBufWrite:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:820    .text.RingBufWrite:00000000 RingBufWrite
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:871    .text.RingBufInit:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccJM2fgM.s:876    .text.RingBufInit:00000000 RingBufInit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
IntMasterDisable
IntMasterEnable
