   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"softuart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	g_pulParityOdd:
  23 0000 69969669 		.word	1771476585
  24 0004 96696996 		.word	-1771476586
  25 0008 96696996 		.word	-1771476586
  26 000c 69969669 		.word	1771476585
  27 0010 96696996 		.word	-1771476586
  28 0014 69969669 		.word	1771476585
  29 0018 69969669 		.word	1771476585
  30 001c 96696996 		.word	-1771476586
  31              		.section	.text.SoftUARTInit,"ax",%progbits
  32              		.align	2
  33              		.global	SoftUARTInit
  34              		.thumb
  35              		.thumb_func
  37              	SoftUARTInit:
  38              	.LFB0:
  39              		.file 1 "C:/StellarisWare/utils/softuart.c"
   1:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
   2:C:/StellarisWare/utils\softuart.c **** //
   3:C:/StellarisWare/utils\softuart.c **** // softuart.c - Driver for the SoftUART.
   4:C:/StellarisWare/utils\softuart.c **** //
   5:C:/StellarisWare/utils\softuart.c **** // Copyright (c) 2010-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/utils\softuart.c **** // Software License Agreement
   7:C:/StellarisWare/utils\softuart.c **** // 
   8:C:/StellarisWare/utils\softuart.c **** // Texas Instruments (TI) is supplying this software for use solely and
   9:C:/StellarisWare/utils\softuart.c **** // exclusively on TI's microcontroller products. The software is owned by
  10:C:/StellarisWare/utils\softuart.c **** // TI and/or its suppliers, and is protected under applicable copyright
  11:C:/StellarisWare/utils\softuart.c **** // laws. You may not combine this software with "viral" open-source
  12:C:/StellarisWare/utils\softuart.c **** // software in order to form a larger program.
  13:C:/StellarisWare/utils\softuart.c **** // 
  14:C:/StellarisWare/utils\softuart.c **** // THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
  15:C:/StellarisWare/utils\softuart.c **** // NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
  16:C:/StellarisWare/utils\softuart.c **** // NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  17:C:/StellarisWare/utils\softuart.c **** // A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
  18:C:/StellarisWare/utils\softuart.c **** // CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
  19:C:/StellarisWare/utils\softuart.c **** // DAMAGES, FOR ANY REASON WHATSOEVER.
  20:C:/StellarisWare/utils\softuart.c **** // 
  21:C:/StellarisWare/utils\softuart.c **** // This is part of revision 9107 of the Stellaris Firmware Development Package.
  22:C:/StellarisWare/utils\softuart.c **** //
  23:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  24:C:/StellarisWare/utils\softuart.c **** 
  25:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  26:C:/StellarisWare/utils\softuart.c **** //
  27:C:/StellarisWare/utils\softuart.c **** //! \addtogroup softuart_api
  28:C:/StellarisWare/utils\softuart.c **** //! @{
  29:C:/StellarisWare/utils\softuart.c **** //
  30:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  31:C:/StellarisWare/utils\softuart.c **** 
  32:C:/StellarisWare/utils\softuart.c **** #include <string.h>
  33:C:/StellarisWare/utils\softuart.c **** #include "inc/hw_ints.h"
  34:C:/StellarisWare/utils\softuart.c **** #include "inc/hw_memmap.h"
  35:C:/StellarisWare/utils\softuart.c **** #include "inc/hw_sysctl.h"
  36:C:/StellarisWare/utils\softuart.c **** #include "inc/hw_types.h"
  37:C:/StellarisWare/utils\softuart.c **** #include "inc/hw_uart.h"
  38:C:/StellarisWare/utils\softuart.c **** #include "driverlib/debug.h"
  39:C:/StellarisWare/utils\softuart.c **** #include "driverlib/gpio.h"
  40:C:/StellarisWare/utils\softuart.c **** #include "driverlib/interrupt.h"
  41:C:/StellarisWare/utils\softuart.c **** #include "driverlib/rom.h"
  42:C:/StellarisWare/utils\softuart.c **** #include "driverlib/rom_map.h"
  43:C:/StellarisWare/utils\softuart.c **** #include "driverlib/uart.h"
  44:C:/StellarisWare/utils\softuart.c **** #include "utils/softuart.h"
  45:C:/StellarisWare/utils\softuart.c **** 
  46:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  47:C:/StellarisWare/utils\softuart.c **** //
  48:C:/StellarisWare/utils\softuart.c **** // The states in the SoftUART transmit state machine.  The code depends upon
  49:C:/StellarisWare/utils\softuart.c **** // the fact that the value of TXSTATE_DATA_n is n + 1, and that TXSTATE_DATA_0
  50:C:/StellarisWare/utils\softuart.c **** // is 1.
  51:C:/StellarisWare/utils\softuart.c **** //
  52:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  53:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_IDLE   0
  54:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_0 1
  55:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_1 2
  56:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_2 3
  57:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_3 4
  58:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_4 5
  59:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_5 6
  60:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_6 7
  61:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_DATA_7 8
  62:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_START  9
  63:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_PARITY 10
  64:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_STOP_0 11
  65:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_STOP_1 12
  66:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_TXSTATE_BREAK  13
  67:C:/StellarisWare/utils\softuart.c **** 
  68:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  69:C:/StellarisWare/utils\softuart.c **** //
  70:C:/StellarisWare/utils\softuart.c **** // The states of the SoftUART receive state machine.  The code depends upon the
  71:C:/StellarisWare/utils\softuart.c **** // the fact that the value of RXSTATE_DATA_n is n, and that RXSTATE_DATA_0 is
  72:C:/StellarisWare/utils\softuart.c **** // 0.
  73:C:/StellarisWare/utils\softuart.c **** //
  74:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  75:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_0 0
  76:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_1 1
  77:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_2 2
  78:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_3 3
  79:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_4 4
  80:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_5 5
  81:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_6 6
  82:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DATA_7 7
  83:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_IDLE   8
  84:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_PARITY 9
  85:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_STOP_0 10
  86:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_STOP_1 11
  87:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_BREAK  12
  88:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXSTATE_DELAY  13
  89:C:/StellarisWare/utils\softuart.c **** 
  90:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  91:C:/StellarisWare/utils\softuart.c **** //
  92:C:/StellarisWare/utils\softuart.c **** // The flags in the SoftUART ucFlags structure member.
  93:C:/StellarisWare/utils\softuart.c **** //
  94:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  95:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_FLAG_ENABLE    0x01
  96:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_FLAG_TXBREAK   0x02
  97:C:/StellarisWare/utils\softuart.c **** 
  98:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
  99:C:/StellarisWare/utils\softuart.c **** //
 100:C:/StellarisWare/utils\softuart.c **** // The flags in the SoftUART ucRxFlags structure member.
 101:C:/StellarisWare/utils\softuart.c **** //
 102:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 103:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXFLAG_OE      0x08
 104:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXFLAG_BE      0x04
 105:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXFLAG_PE      0x02
 106:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_RXFLAG_FE      0x01
 107:C:/StellarisWare/utils\softuart.c **** 
 108:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 109:C:/StellarisWare/utils\softuart.c **** //
 110:C:/StellarisWare/utils\softuart.c **** // Additional internal configuration stored in the SoftUART usConfig structure
 111:C:/StellarisWare/utils\softuart.c **** // member.
 112:C:/StellarisWare/utils\softuart.c **** //
 113:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 114:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_BASE_M  0x00ff
 115:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_EXT_M   0xff00
 116:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_M 0x0700
 117:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_1 0x0000
 118:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_2 0x0100
 119:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_4 0x0200
 120:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_6 0x0300
 121:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_TXLVL_7 0x0400
 122:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_M 0x3800
 123:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_1 0x0000
 124:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_2 0x0800
 125:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_4 0x1000
 126:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_6 0x1800
 127:C:/StellarisWare/utils\softuart.c **** #define SOFTUART_CONFIG_RXLVL_7 0x2000
 128:C:/StellarisWare/utils\softuart.c **** 
 129:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 130:C:/StellarisWare/utils\softuart.c **** //
 131:C:/StellarisWare/utils\softuart.c **** // The odd parity of each possible data byte.  The odd parity of N can be found
 132:C:/StellarisWare/utils\softuart.c **** // by looking at bit N % 32 of word N / 32.
 133:C:/StellarisWare/utils\softuart.c **** //
 134:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 135:C:/StellarisWare/utils\softuart.c **** static unsigned long g_pulParityOdd[] =
 136:C:/StellarisWare/utils\softuart.c **** {
 137:C:/StellarisWare/utils\softuart.c ****     0x69969669, 0x96696996, 0x96696996, 0x69969669,
 138:C:/StellarisWare/utils\softuart.c ****     0x96696996, 0x69969669, 0x69969669, 0x96696996
 139:C:/StellarisWare/utils\softuart.c **** };
 140:C:/StellarisWare/utils\softuart.c **** 
 141:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 142:C:/StellarisWare/utils\softuart.c **** //
 143:C:/StellarisWare/utils\softuart.c **** //! Initializes the SoftUART module.
 144:C:/StellarisWare/utils\softuart.c **** //!
 145:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the soft UART data structure.
 146:C:/StellarisWare/utils\softuart.c **** //!
 147:C:/StellarisWare/utils\softuart.c **** //! This function initializes the data structure for the SoftUART module,
 148:C:/StellarisWare/utils\softuart.c **** //! putting it into the default configuration.
 149:C:/StellarisWare/utils\softuart.c **** //!
 150:C:/StellarisWare/utils\softuart.c **** //! \return None.
 151:C:/StellarisWare/utils\softuart.c **** //
 152:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 153:C:/StellarisWare/utils\softuart.c **** void
 154:C:/StellarisWare/utils\softuart.c **** SoftUARTInit(tSoftUART *pUART)
 155:C:/StellarisWare/utils\softuart.c **** {
  40              		.loc 1 155 0
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 8
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 14, -4
  48              		.cfi_offset 7, -8
  49 0002 82B0     		sub	sp, sp, #8
  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 16
  52 0004 00AF     		add	r7, sp, #0
  53              	.LCFI2:
  54              		.cfi_def_cfa_register 7
  55 0006 7860     		str	r0, [r7, #4]
 156:C:/StellarisWare/utils\softuart.c ****     //
 157:C:/StellarisWare/utils\softuart.c ****     // Clear the SoftUART data structure.
 158:C:/StellarisWare/utils\softuart.c ****     //
 159:C:/StellarisWare/utils\softuart.c ****     memset(pUART, 0, sizeof(tSoftUART));
  56              		.loc 1 159 0
  57 0008 7B68     		ldr	r3, [r7, #4]
  58 000a 4FF03402 		mov	r2, #52
  59 000e 1846     		mov	r0, r3
  60 0010 4FF00001 		mov	r1, #0
  61 0014 1346     		mov	r3, r2
  62 0016 1A46     		mov	r2, r3
  63 0018 FFF7FEFF 		bl	memset
 160:C:/StellarisWare/utils\softuart.c **** 
 161:C:/StellarisWare/utils\softuart.c ****     //
 162:C:/StellarisWare/utils\softuart.c ****     // Set the default transmit and receive buffer interrupt level.
 163:C:/StellarisWare/utils\softuart.c ****     //
 164:C:/StellarisWare/utils\softuart.c ****     pUART->usConfig = SOFTUART_CONFIG_TXLVL_4 | SOFTUART_CONFIG_RXLVL_4;
  64              		.loc 1 164 0
  65 001c 7B68     		ldr	r3, [r7, #4]
  66 001e 4FF49052 		mov	r2, #4608
  67 0022 1A85     		strh	r2, [r3, #40]	@ movhi
 165:C:/StellarisWare/utils\softuart.c **** }
  68              		.loc 1 165 0
  69 0024 07F10807 		add	r7, r7, #8
  70 0028 BD46     		mov	sp, r7
  71 002a 80BD     		pop	{r7, pc}
  72              		.cfi_endproc
  73              	.LFE0:
  75              		.section	.text.SoftUARTConfigSet,"ax",%progbits
  76              		.align	2
  77              		.global	SoftUARTConfigSet
  78              		.thumb
  79              		.thumb_func
  81              	SoftUARTConfigSet:
  82              	.LFB1:
 166:C:/StellarisWare/utils\softuart.c **** 
 167:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 168:C:/StellarisWare/utils\softuart.c **** //
 169:C:/StellarisWare/utils\softuart.c **** //! Sets the configuration of a SoftUART module.
 170:C:/StellarisWare/utils\softuart.c **** //!
 171:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
 172:C:/StellarisWare/utils\softuart.c **** //! \param ulConfig is the data format for the port (number of data bits,
 173:C:/StellarisWare/utils\softuart.c **** //! number of stop bits, and parity).
 174:C:/StellarisWare/utils\softuart.c **** //!
 175:C:/StellarisWare/utils\softuart.c **** //! This function configures the SoftUART for operation in the specified data
 176:C:/StellarisWare/utils\softuart.c **** //! format, as specified in the \e ulConfig parameter.
 177:C:/StellarisWare/utils\softuart.c **** //!
 178:C:/StellarisWare/utils\softuart.c **** //! The \e ulConfig parameter is the logical OR of three values: the number of
 179:C:/StellarisWare/utils\softuart.c **** //! data bits, the number of stop bits, and the parity.
 180:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_WLEN_8, \b SOFTUART_CONFIG_WLEN_7,
 181:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_WLEN_6, and \b SOFTUART_CONFIG_WLEN_5 select from eight
 182:C:/StellarisWare/utils\softuart.c **** //! to five data bits per byte (respectively).  \b SOFTUART_CONFIG_STOP_ONE and
 183:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_STOP_TWO select one or two stop bits (respectively).
 184:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_NONE, \b SOFTUART_CONFIG_PAR_EVEN,
 185:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_ODD, \b SOFTUART_CONFIG_PAR_ONE, and
 186:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_ZERO select the parity mode (no parity bit, even
 187:C:/StellarisWare/utils\softuart.c **** //! parity bit, odd parity bit, parity bit always one, and parity bit always
 188:C:/StellarisWare/utils\softuart.c **** //! zero, respectively).
 189:C:/StellarisWare/utils\softuart.c **** //!
 190:C:/StellarisWare/utils\softuart.c **** //! \return None.
 191:C:/StellarisWare/utils\softuart.c **** //
 192:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 193:C:/StellarisWare/utils\softuart.c **** void
 194:C:/StellarisWare/utils\softuart.c **** SoftUARTConfigSet(tSoftUART *pUART, unsigned long ulConfig)
 195:C:/StellarisWare/utils\softuart.c **** {
  83              		.loc 1 195 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 8
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 14, -4
  91              		.cfi_offset 7, -8
  92 0002 82B0     		sub	sp, sp, #8
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 16
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI5:
  97              		.cfi_def_cfa_register 7
  98 0006 7860     		str	r0, [r7, #4]
  99 0008 3960     		str	r1, [r7, #0]
 196:C:/StellarisWare/utils\softuart.c ****     //
 197:C:/StellarisWare/utils\softuart.c ****     // See if a GPIO pin has been set for Tx.
 198:C:/StellarisWare/utils\softuart.c ****     //
 199:C:/StellarisWare/utils\softuart.c ****     if(pUART->ulTxGPIO != 0)
 100              		.loc 1 199 0
 101 000a 7B68     		ldr	r3, [r7, #4]
 102 000c 5B68     		ldr	r3, [r3, #4]
 103 000e 002B     		cmp	r3, #0
 104 0010 17D0     		beq	.L3
 200:C:/StellarisWare/utils\softuart.c ****     {
 201:C:/StellarisWare/utils\softuart.c ****         //
 202:C:/StellarisWare/utils\softuart.c ****         // Configure the Tx pin.
 203:C:/StellarisWare/utils\softuart.c ****         //
 204:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOPinTypeGPIOOutput(pUART->ulTxGPIO & 0xfffff000,
 105              		.loc 1 204 0
 106 0012 7B68     		ldr	r3, [r7, #4]
 107 0014 5B68     		ldr	r3, [r3, #4]
 108 0016 23F47E63 		bic	r3, r3, #4064
 109 001a 23F01F03 		bic	r3, r3, #31
 205:C:/StellarisWare/utils\softuart.c ****                                   (pUART->ulTxGPIO & 0x00000fff) >> 2);
 110              		.loc 1 205 0
 111 001e 7A68     		ldr	r2, [r7, #4]
 112 0020 5268     		ldr	r2, [r2, #4]
 113 0022 4FEA0252 		lsl	r2, r2, #20
 114 0026 4FEA1252 		lsr	r2, r2, #20
 115 002a 4FEA9202 		lsr	r2, r2, #2
 204:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOPinTypeGPIOOutput(pUART->ulTxGPIO & 0xfffff000,
 116              		.loc 1 204 0
 117 002e D2B2     		uxtb	r2, r2
 118 0030 1846     		mov	r0, r3
 119 0032 1146     		mov	r1, r2
 120 0034 FFF7FEFF 		bl	GPIOPinTypeGPIOOutput
 206:C:/StellarisWare/utils\softuart.c **** 
 207:C:/StellarisWare/utils\softuart.c ****         //
 208:C:/StellarisWare/utils\softuart.c ****         // Set the Tx pin high.
 209:C:/StellarisWare/utils\softuart.c ****         //
 210:C:/StellarisWare/utils\softuart.c ****         HWREG(pUART->ulTxGPIO) = 255;
 121              		.loc 1 210 0
 122 0038 7B68     		ldr	r3, [r7, #4]
 123 003a 5B68     		ldr	r3, [r3, #4]
 124 003c 4FF0FF02 		mov	r2, #255
 125 0040 1A60     		str	r2, [r3, #0]
 126              	.L3:
 211:C:/StellarisWare/utils\softuart.c ****     }
 212:C:/StellarisWare/utils\softuart.c **** 
 213:C:/StellarisWare/utils\softuart.c ****     //
 214:C:/StellarisWare/utils\softuart.c ****     // See if a GPIO pin has been set for Rx.
 215:C:/StellarisWare/utils\softuart.c ****     //
 216:C:/StellarisWare/utils\softuart.c ****     if(pUART->ulRxGPIOPort != 0)
 127              		.loc 1 216 0
 128 0042 7B68     		ldr	r3, [r7, #4]
 129 0044 9B68     		ldr	r3, [r3, #8]
 130 0046 002B     		cmp	r3, #0
 131 0048 25D0     		beq	.L4
 217:C:/StellarisWare/utils\softuart.c ****     {
 218:C:/StellarisWare/utils\softuart.c ****         //
 219:C:/StellarisWare/utils\softuart.c ****         // Configure the Rx pin.
 220:C:/StellarisWare/utils\softuart.c ****         //
 221:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOPinTypeGPIOInput(pUART->ulRxGPIOPort, pUART->ucRxPin);
 132              		.loc 1 221 0
 133 004a 7B68     		ldr	r3, [r7, #4]
 134 004c 9A68     		ldr	r2, [r3, #8]
 135 004e 7B68     		ldr	r3, [r7, #4]
 136 0050 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 137 0054 1046     		mov	r0, r2
 138 0056 1946     		mov	r1, r3
 139 0058 FFF7FEFF 		bl	GPIOPinTypeGPIOInput
 222:C:/StellarisWare/utils\softuart.c **** 
 223:C:/StellarisWare/utils\softuart.c ****         //
 224:C:/StellarisWare/utils\softuart.c ****         // Set the Rx pin to generate an interrupt on the next falling edge.
 225:C:/StellarisWare/utils\softuart.c ****         //
 226:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOIntTypeSet(pUART->ulRxGPIOPort, pUART->ucRxPin,
 140              		.loc 1 226 0
 141 005c 7B68     		ldr	r3, [r7, #4]
 142 005e 9A68     		ldr	r2, [r3, #8]
 143 0060 7B68     		ldr	r3, [r7, #4]
 144 0062 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 145 0066 1046     		mov	r0, r2
 146 0068 1946     		mov	r1, r3
 147 006a 4FF00002 		mov	r2, #0
 148 006e FFF7FEFF 		bl	GPIOIntTypeSet
 227:C:/StellarisWare/utils\softuart.c ****                            GPIO_FALLING_EDGE);
 228:C:/StellarisWare/utils\softuart.c **** 
 229:C:/StellarisWare/utils\softuart.c ****         //
 230:C:/StellarisWare/utils\softuart.c ****         // Enable the Rx pin interrupt.
 231:C:/StellarisWare/utils\softuart.c ****         //
 232:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOPinIntClear(pUART->ulRxGPIOPort, pUART->ucRxPin);
 149              		.loc 1 232 0
 150 0072 7B68     		ldr	r3, [r7, #4]
 151 0074 9A68     		ldr	r2, [r3, #8]
 152 0076 7B68     		ldr	r3, [r7, #4]
 153 0078 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 154 007c 1046     		mov	r0, r2
 155 007e 1946     		mov	r1, r3
 156 0080 FFF7FEFF 		bl	GPIOPinIntClear
 233:C:/StellarisWare/utils\softuart.c ****         MAP_GPIOPinIntEnable(pUART->ulRxGPIOPort, pUART->ucRxPin);
 157              		.loc 1 233 0
 158 0084 7B68     		ldr	r3, [r7, #4]
 159 0086 9A68     		ldr	r2, [r3, #8]
 160 0088 7B68     		ldr	r3, [r7, #4]
 161 008a 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 162 008e 1046     		mov	r0, r2
 163 0090 1946     		mov	r1, r3
 164 0092 FFF7FEFF 		bl	GPIOPinIntEnable
 165              	.L4:
 234:C:/StellarisWare/utils\softuart.c ****     }
 235:C:/StellarisWare/utils\softuart.c **** 
 236:C:/StellarisWare/utils\softuart.c ****     //
 237:C:/StellarisWare/utils\softuart.c ****     // Make sure that the transmit and receive buffers are empty.
 238:C:/StellarisWare/utils\softuart.c ****     //
 239:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferRead = 0;
 166              		.loc 1 239 0
 167 0096 7B68     		ldr	r3, [r7, #4]
 168 0098 4FF00002 		mov	r2, #0
 169 009c DA82     		strh	r2, [r3, #22]	@ movhi
 240:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferWrite = 0;
 170              		.loc 1 240 0
 171 009e 7B68     		ldr	r3, [r7, #4]
 172 00a0 4FF00002 		mov	r2, #0
 173 00a4 1A83     		strh	r2, [r3, #24]	@ movhi
 241:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferRead = 0;
 174              		.loc 1 241 0
 175 00a6 7B68     		ldr	r3, [r7, #4]
 176 00a8 4FF00002 		mov	r2, #0
 177 00ac DA83     		strh	r2, [r3, #30]	@ movhi
 242:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferWrite = 0;
 178              		.loc 1 242 0
 179 00ae 7B68     		ldr	r3, [r7, #4]
 180 00b0 4FF00002 		mov	r2, #0
 181 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
 243:C:/StellarisWare/utils\softuart.c **** 
 244:C:/StellarisWare/utils\softuart.c ****     //
 245:C:/StellarisWare/utils\softuart.c ****     // Save the data format.
 246:C:/StellarisWare/utils\softuart.c ****     //
 247:C:/StellarisWare/utils\softuart.c ****     pUART->usConfig = ((pUART->usConfig & SOFTUART_CONFIG_EXT_M) |
 182              		.loc 1 247 0
 183 00b6 7B68     		ldr	r3, [r7, #4]
 184 00b8 1B8D     		ldrh	r3, [r3, #40]
 185 00ba 23F0FF03 		bic	r3, r3, #255
 186 00be 9AB2     		uxth	r2, r3
 187 00c0 3B68     		ldr	r3, [r7, #0]
 188 00c2 9BB2     		uxth	r3, r3
 189 00c4 DBB2     		uxtb	r3, r3
 190 00c6 9BB2     		uxth	r3, r3
 191 00c8 1343     		orrs	r3, r3, r2
 192 00ca 9AB2     		uxth	r2, r3
 193 00cc 7B68     		ldr	r3, [r7, #4]
 194 00ce 1A85     		strh	r2, [r3, #40]	@ movhi
 248:C:/StellarisWare/utils\softuart.c ****                        (ulConfig & SOFTUART_CONFIG_BASE_M));
 249:C:/StellarisWare/utils\softuart.c **** 
 250:C:/StellarisWare/utils\softuart.c ****     //
 251:C:/StellarisWare/utils\softuart.c ****     // Enable the SoftUART module.
 252:C:/StellarisWare/utils\softuart.c ****     //
 253:C:/StellarisWare/utils\softuart.c ****     pUART->ucFlags |= SOFTUART_FLAG_ENABLE;
 195              		.loc 1 253 0
 196 00d0 7B68     		ldr	r3, [r7, #4]
 197 00d2 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 198 00d6 43F00103 		orr	r3, r3, #1
 199 00da DAB2     		uxtb	r2, r3
 200 00dc 7B68     		ldr	r3, [r7, #4]
 201 00de 83F82A20 		strb	r2, [r3, #42]
 254:C:/StellarisWare/utils\softuart.c **** 
 255:C:/StellarisWare/utils\softuart.c ****     //
 256:C:/StellarisWare/utils\softuart.c ****     // The next value to be written to the Tx pin is one since the SoftUART is
 257:C:/StellarisWare/utils\softuart.c ****     // idle.
 258:C:/StellarisWare/utils\softuart.c ****     //
 259:C:/StellarisWare/utils\softuart.c ****     pUART->ucTxNext = 255;
 202              		.loc 1 259 0
 203 00e2 7B68     		ldr	r3, [r7, #4]
 204 00e4 4FF0FF02 		mov	r2, #255
 205 00e8 83F82C20 		strb	r2, [r3, #44]
 260:C:/StellarisWare/utils\softuart.c **** 
 261:C:/StellarisWare/utils\softuart.c ****     //
 262:C:/StellarisWare/utils\softuart.c ****     // Start the SoftUART state machines in the idle state.
 263:C:/StellarisWare/utils\softuart.c ****     //
 264:C:/StellarisWare/utils\softuart.c ****     pUART->ucTxState = SOFTUART_TXSTATE_IDLE;
 206              		.loc 1 264 0
 207 00ec 7B68     		ldr	r3, [r7, #4]
 208 00ee 4FF00002 		mov	r2, #0
 209 00f2 83F82B20 		strb	r2, [r3, #43]
 265:C:/StellarisWare/utils\softuart.c ****     pUART->ucRxState = SOFTUART_RXSTATE_IDLE;
 210              		.loc 1 265 0
 211 00f6 7B68     		ldr	r3, [r7, #4]
 212 00f8 4FF00802 		mov	r2, #8
 213 00fc 83F82F20 		strb	r2, [r3, #47]
 266:C:/StellarisWare/utils\softuart.c **** }
 214              		.loc 1 266 0
 215 0100 07F10807 		add	r7, r7, #8
 216 0104 BD46     		mov	sp, r7
 217 0106 80BD     		pop	{r7, pc}
 218              		.cfi_endproc
 219              	.LFE1:
 221              		.section	.text.SoftUARTTxTimerTick,"ax",%progbits
 222              		.align	2
 223              		.global	SoftUARTTxTimerTick
 224              		.thumb
 225              		.thumb_func
 227              	SoftUARTTxTimerTick:
 228              	.LFB2:
 267:C:/StellarisWare/utils\softuart.c **** 
 268:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 269:C:/StellarisWare/utils\softuart.c **** //
 270:C:/StellarisWare/utils\softuart.c **** //! Performs the periodic update of the SoftUART transmitter.
 271:C:/StellarisWare/utils\softuart.c **** //!
 272:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
 273:C:/StellarisWare/utils\softuart.c **** //!
 274:C:/StellarisWare/utils\softuart.c **** //! This function performs the periodic, time-based updates to the SoftUART
 275:C:/StellarisWare/utils\softuart.c **** //! transmitter.  The transmission of data from the SoftUART is performed by
 276:C:/StellarisWare/utils\softuart.c **** //! the state machine in this function.
 277:C:/StellarisWare/utils\softuart.c **** //!
 278:C:/StellarisWare/utils\softuart.c **** //! This function must be called at the desired SoftUART baud rate.  For
 279:C:/StellarisWare/utils\softuart.c **** //! example, to run the SoftUART at 115,200 baud, this function must be called
 280:C:/StellarisWare/utils\softuart.c **** //! at a 115,200 Hz rate.
 281:C:/StellarisWare/utils\softuart.c **** //!
 282:C:/StellarisWare/utils\softuart.c **** //! \return None.
 283:C:/StellarisWare/utils\softuart.c **** //
 284:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 285:C:/StellarisWare/utils\softuart.c **** void
 286:C:/StellarisWare/utils\softuart.c **** SoftUARTTxTimerTick(tSoftUART *pUART)
 287:C:/StellarisWare/utils\softuart.c **** {
 229              		.loc 1 287 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 16
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              	.LCFI6:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 14, -4
 237              		.cfi_offset 7, -8
 238 0002 84B0     		sub	sp, sp, #16
 239              	.LCFI7:
 240              		.cfi_def_cfa_offset 24
 241 0004 00AF     		add	r7, sp, #0
 242              	.LCFI8:
 243              		.cfi_def_cfa_register 7
 244 0006 7860     		str	r0, [r7, #4]
 288:C:/StellarisWare/utils\softuart.c ****     unsigned long ulTemp;
 289:C:/StellarisWare/utils\softuart.c **** 
 290:C:/StellarisWare/utils\softuart.c ****     //
 291:C:/StellarisWare/utils\softuart.c ****     // Write the next value to the Tx data line.  This value was computed on
 292:C:/StellarisWare/utils\softuart.c ****     // the previous timer tick, which helps to reduce the jitter on the Tx
 293:C:/StellarisWare/utils\softuart.c ****     // edges (which is important since a UART connection does not contain a
 294:C:/StellarisWare/utils\softuart.c ****     // clock signal).
 295:C:/StellarisWare/utils\softuart.c ****     //
 296:C:/StellarisWare/utils\softuart.c ****     HWREG(pUART->ulTxGPIO) = pUART->ucTxNext;
 245              		.loc 1 296 0
 246 0008 7B68     		ldr	r3, [r7, #4]
 247 000a 5B68     		ldr	r3, [r3, #4]
 248 000c 7A68     		ldr	r2, [r7, #4]
 249 000e 92F82C20 		ldrb	r2, [r2, #44]	@ zero_extendqisi2
 250 0012 1A60     		str	r2, [r3, #0]
 297:C:/StellarisWare/utils\softuart.c **** 
 298:C:/StellarisWare/utils\softuart.c ****     //
 299:C:/StellarisWare/utils\softuart.c ****     // Determine the current state of the state machine.
 300:C:/StellarisWare/utils\softuart.c ****     //
 301:C:/StellarisWare/utils\softuart.c ****     switch(pUART->ucTxState)
 251              		.loc 1 301 0
 252 0014 7B68     		ldr	r3, [r7, #4]
 253 0016 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 254 001a 0D2B     		cmp	r3, #13
 255 001c 00F2D781 		bhi	.L49
 256 0020 01A2     		adr	r2, .L15
 257 0022 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 258 0026 00BF     		.align	2
 259              	.L15:
 260 0028 61000000 		.word	.L7+1
 261 002c F7000000 		.word	.L8+1
 262 0030 F7000000 		.word	.L8+1
 263 0034 F7000000 		.word	.L8+1
 264 0038 F7000000 		.word	.L8+1
 265 003c 37010000 		.word	.L9+1
 266 0040 37010000 		.word	.L9+1
 267 0044 37010000 		.word	.L9+1
 268 0048 37010000 		.word	.L9+1
 269 004c B9000000 		.word	.L10+1
 270 0050 67020000 		.word	.L11+1
 271 0054 95020000 		.word	.L12+1
 272 0058 A1020000 		.word	.L13+1
 273 005c 89030000 		.word	.L14+1
 274              	.L7:
 302:C:/StellarisWare/utils\softuart.c ****     {
 303:C:/StellarisWare/utils\softuart.c ****         //
 304:C:/StellarisWare/utils\softuart.c ****         // The state machine is idle.
 305:C:/StellarisWare/utils\softuart.c ****         //
 306:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_IDLE:
 307:C:/StellarisWare/utils\softuart.c ****         {
 308:C:/StellarisWare/utils\softuart.c ****             //
 309:C:/StellarisWare/utils\softuart.c ****             // See if the SoftUART module is enabled.
 310:C:/StellarisWare/utils\softuart.c ****             //
 311:C:/StellarisWare/utils\softuart.c ****             if(!(pUART->ucFlags & SOFTUART_FLAG_ENABLE))
 275              		.loc 1 311 0
 276 0060 7B68     		ldr	r3, [r7, #4]
 277 0062 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 278 0066 03F00103 		and	r3, r3, #1
 279 006a 002B     		cmp	r3, #0
 280 006c 00F0A581 		beq	.L50
 281              	.L16:
 312:C:/StellarisWare/utils\softuart.c ****             {
 313:C:/StellarisWare/utils\softuart.c ****                 //
 314:C:/StellarisWare/utils\softuart.c ****                 // The SoftUART module is not enabled, so do nothing and stay
 315:C:/StellarisWare/utils\softuart.c ****                 // in the idle state.
 316:C:/StellarisWare/utils\softuart.c ****                 //
 317:C:/StellarisWare/utils\softuart.c ****                 break;
 318:C:/StellarisWare/utils\softuart.c ****             }
 319:C:/StellarisWare/utils\softuart.c **** 
 320:C:/StellarisWare/utils\softuart.c ****             //
 321:C:/StellarisWare/utils\softuart.c ****             // See if the break signal should be asserted.
 322:C:/StellarisWare/utils\softuart.c ****             //
 323:C:/StellarisWare/utils\softuart.c ****             else if(pUART->ucFlags & SOFTUART_FLAG_TXBREAK)
 282              		.loc 1 323 0
 283 0070 7B68     		ldr	r3, [r7, #4]
 284 0072 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 285 0076 03F00203 		and	r3, r3, #2
 286 007a 002B     		cmp	r3, #0
 287 007c 0AD0     		beq	.L17
 324:C:/StellarisWare/utils\softuart.c ****             {
 325:C:/StellarisWare/utils\softuart.c ****                 //
 326:C:/StellarisWare/utils\softuart.c ****                 // The data line should be driven low while in the break state.
 327:C:/StellarisWare/utils\softuart.c ****                 //
 328:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 288              		.loc 1 328 0
 289 007e 7B68     		ldr	r3, [r7, #4]
 290 0080 4FF00002 		mov	r2, #0
 291 0084 83F82C20 		strb	r2, [r3, #44]
 329:C:/StellarisWare/utils\softuart.c **** 
 330:C:/StellarisWare/utils\softuart.c ****                 //
 331:C:/StellarisWare/utils\softuart.c ****                 // Move to the break state.
 332:C:/StellarisWare/utils\softuart.c ****                 //
 333:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_BREAK;
 292              		.loc 1 333 0
 293 0088 7B68     		ldr	r3, [r7, #4]
 294 008a 4FF00D02 		mov	r2, #13
 295 008e 83F82B20 		strb	r2, [r3, #43]
 334:C:/StellarisWare/utils\softuart.c ****             }
 335:C:/StellarisWare/utils\softuart.c **** 
 336:C:/StellarisWare/utils\softuart.c ****             //
 337:C:/StellarisWare/utils\softuart.c ****             // Otherwise, see if there is data in the transmit buffer.
 338:C:/StellarisWare/utils\softuart.c ****             //
 339:C:/StellarisWare/utils\softuart.c ****             else if(pUART->usTxBufferRead != pUART->usTxBufferWrite)
 340:C:/StellarisWare/utils\softuart.c ****             {
 341:C:/StellarisWare/utils\softuart.c ****                 //
 342:C:/StellarisWare/utils\softuart.c ****                 // The data line should be driven low to indicate a start bit.
 343:C:/StellarisWare/utils\softuart.c ****                 //
 344:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 345:C:/StellarisWare/utils\softuart.c **** 
 346:C:/StellarisWare/utils\softuart.c ****                 //
 347:C:/StellarisWare/utils\softuart.c ****                 // Move to the start bit state.
 348:C:/StellarisWare/utils\softuart.c ****                 //
 349:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_START;
 350:C:/StellarisWare/utils\softuart.c ****             }
 351:C:/StellarisWare/utils\softuart.c **** 
 352:C:/StellarisWare/utils\softuart.c ****             //
 353:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 354:C:/StellarisWare/utils\softuart.c ****             //
 355:C:/StellarisWare/utils\softuart.c ****             break;
 296              		.loc 1 355 0
 297 0092 94E1     		b	.L51
 298              	.L17:
 339:C:/StellarisWare/utils\softuart.c ****             else if(pUART->usTxBufferRead != pUART->usTxBufferWrite)
 299              		.loc 1 339 0
 300 0094 7B68     		ldr	r3, [r7, #4]
 301 0096 DA8A     		ldrh	r2, [r3, #22]
 302 0098 7B68     		ldr	r3, [r7, #4]
 303 009a 1B8B     		ldrh	r3, [r3, #24]
 304 009c 9A42     		cmp	r2, r3
 305 009e 00F08E81 		beq	.L51
 344:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 306              		.loc 1 344 0
 307 00a2 7B68     		ldr	r3, [r7, #4]
 308 00a4 4FF00002 		mov	r2, #0
 309 00a8 83F82C20 		strb	r2, [r3, #44]
 349:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_START;
 310              		.loc 1 349 0
 311 00ac 7B68     		ldr	r3, [r7, #4]
 312 00ae 4FF00902 		mov	r2, #9
 313 00b2 83F82B20 		strb	r2, [r3, #43]
 314              		.loc 1 355 0
 315 00b6 82E1     		b	.L51
 316              	.L10:
 356:C:/StellarisWare/utils\softuart.c ****         }
 357:C:/StellarisWare/utils\softuart.c **** 
 358:C:/StellarisWare/utils\softuart.c ****         //
 359:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the start bit state.
 360:C:/StellarisWare/utils\softuart.c ****         //
 361:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_START:
 362:C:/StellarisWare/utils\softuart.c ****         {
 363:C:/StellarisWare/utils\softuart.c ****             //
 364:C:/StellarisWare/utils\softuart.c ****             // Get the next byte to be transmitted.
 365:C:/StellarisWare/utils\softuart.c ****             //
 366:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxData = pUART->pucTxBuffer[pUART->usTxBufferRead];
 317              		.loc 1 366 0
 318 00b8 7B68     		ldr	r3, [r7, #4]
 319 00ba DA68     		ldr	r2, [r3, #12]
 320 00bc 7B68     		ldr	r3, [r7, #4]
 321 00be DB8A     		ldrh	r3, [r3, #22]
 322 00c0 D318     		adds	r3, r2, r3
 323 00c2 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 324 00c4 7B68     		ldr	r3, [r7, #4]
 325 00c6 83F82D20 		strb	r2, [r3, #45]
 367:C:/StellarisWare/utils\softuart.c **** 
 368:C:/StellarisWare/utils\softuart.c ****             //
 369:C:/StellarisWare/utils\softuart.c ****             // The next value to be written to the data line is the LSB of the
 370:C:/StellarisWare/utils\softuart.c ****             // next data byte.
 371:C:/StellarisWare/utils\softuart.c ****             //
 372:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext = (pUART->ucTxData & 1) ? 255 : 0;
 326              		.loc 1 372 0
 327 00ca 7B68     		ldr	r3, [r7, #4]
 328 00cc 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 329 00d0 03F00103 		and	r3, r3, #1
 330 00d4 DBB2     		uxtb	r3, r3
 331 00d6 002B     		cmp	r3, #0
 332 00d8 02D0     		beq	.L19
 333              		.loc 1 372 0 is_stmt 0 discriminator 1
 334 00da 4FF0FF03 		mov	r3, #255
 335 00de 01E0     		b	.L20
 336              	.L19:
 337              		.loc 1 372 0 discriminator 2
 338 00e0 4FF00003 		mov	r3, #0
 339              	.L20:
 340              		.loc 1 372 0 discriminator 3
 341 00e4 7A68     		ldr	r2, [r7, #4]
 342 00e6 82F82C30 		strb	r3, [r2, #44]
 373:C:/StellarisWare/utils\softuart.c **** 
 374:C:/StellarisWare/utils\softuart.c ****             //
 375:C:/StellarisWare/utils\softuart.c ****             // Move to the data bit 0 state.
 376:C:/StellarisWare/utils\softuart.c ****             //
 377:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxState = SOFTUART_TXSTATE_DATA_0;
 343              		.loc 1 377 0 is_stmt 1 discriminator 3
 344 00ea 7B68     		ldr	r3, [r7, #4]
 345 00ec 4FF00102 		mov	r2, #1
 346 00f0 83F82B20 		strb	r2, [r3, #43]
 378:C:/StellarisWare/utils\softuart.c **** 
 379:C:/StellarisWare/utils\softuart.c ****             //
 380:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 381:C:/StellarisWare/utils\softuart.c ****             //
 382:C:/StellarisWare/utils\softuart.c ****             break;
 347              		.loc 1 382 0 discriminator 3
 348 00f4 66E1     		b	.L6
 349              	.L8:
 383:C:/StellarisWare/utils\softuart.c ****         }
 384:C:/StellarisWare/utils\softuart.c **** 
 385:C:/StellarisWare/utils\softuart.c ****         //
 386:C:/StellarisWare/utils\softuart.c ****         // In each of these states, a bit of the data byte must be output.
 387:C:/StellarisWare/utils\softuart.c ****         // This depends upon TXSTATE_DATA_n and TXSTATE_DATA_(n+1) being
 388:C:/StellarisWare/utils\softuart.c ****         // consecutively numbered.
 389:C:/StellarisWare/utils\softuart.c ****         //
 390:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_0:
 391:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_1:
 392:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_2:
 393:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_3:
 394:C:/StellarisWare/utils\softuart.c ****         {
 395:C:/StellarisWare/utils\softuart.c ****             //
 396:C:/StellarisWare/utils\softuart.c ****             // The next value to be written to the data line is the next bit of
 397:C:/StellarisWare/utils\softuart.c ****             // the data byte.
 398:C:/StellarisWare/utils\softuart.c ****             //
 399:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext =
 400:C:/StellarisWare/utils\softuart.c ****                 (pUART->ucTxData & (1 << pUART->ucTxState)) ? 255 : 0;
 350              		.loc 1 400 0
 351 00f6 7B68     		ldr	r3, [r7, #4]
 352 00f8 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 353 00fc 1A46     		mov	r2, r3
 354 00fe 7B68     		ldr	r3, [r7, #4]
 355 0100 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 356 0104 42FA03F3 		asr	r3, r2, r3
 357 0108 03F00103 		and	r3, r3, #1
 358 010c DBB2     		uxtb	r3, r3
 399:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext =
 359              		.loc 1 399 0
 360 010e 002B     		cmp	r3, #0
 361 0110 02D0     		beq	.L21
 399:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext =
 362              		.loc 1 399 0 is_stmt 0 discriminator 1
 363 0112 4FF0FF03 		mov	r3, #255
 364 0116 01E0     		b	.L22
 365              	.L21:
 399:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext =
 366              		.loc 1 399 0 discriminator 2
 367 0118 4FF00003 		mov	r3, #0
 368              	.L22:
 399:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext =
 369              		.loc 1 399 0 discriminator 3
 370 011c 7A68     		ldr	r2, [r7, #4]
 371 011e 82F82C30 		strb	r3, [r2, #44]
 401:C:/StellarisWare/utils\softuart.c **** 
 402:C:/StellarisWare/utils\softuart.c ****             //
 403:C:/StellarisWare/utils\softuart.c ****             // Advance to the next state.
 404:C:/StellarisWare/utils\softuart.c ****             //
 405:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxState++;
 372              		.loc 1 405 0 is_stmt 1 discriminator 3
 373 0122 7B68     		ldr	r3, [r7, #4]
 374 0124 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 375 0128 03F10103 		add	r3, r3, #1
 376 012c DAB2     		uxtb	r2, r3
 377 012e 7B68     		ldr	r3, [r7, #4]
 378 0130 83F82B20 		strb	r2, [r3, #43]
 406:C:/StellarisWare/utils\softuart.c **** 
 407:C:/StellarisWare/utils\softuart.c ****             //
 408:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 409:C:/StellarisWare/utils\softuart.c ****             //
 410:C:/StellarisWare/utils\softuart.c ****             break;
 379              		.loc 1 410 0 discriminator 3
 380 0134 46E1     		b	.L6
 381              	.L9:
 411:C:/StellarisWare/utils\softuart.c ****         }
 412:C:/StellarisWare/utils\softuart.c **** 
 413:C:/StellarisWare/utils\softuart.c ****         //
 414:C:/StellarisWare/utils\softuart.c ****         // In each of these states, a bit of the data byte must be output.
 415:C:/StellarisWare/utils\softuart.c ****         // Additionally, based on the configuration of the SoftUART, this bit
 416:C:/StellarisWare/utils\softuart.c ****         // might be the last data bit of the data byte.  This depends upon
 417:C:/StellarisWare/utils\softuart.c ****         // TXSTATE_DATA_n and TXSTATE_DATA_(n+1) being consecutively numbered.
 418:C:/StellarisWare/utils\softuart.c ****         //
 419:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_4:
 420:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_5:
 421:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_6:
 422:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_DATA_7:
 423:C:/StellarisWare/utils\softuart.c ****         {
 424:C:/StellarisWare/utils\softuart.c ****             //
 425:C:/StellarisWare/utils\softuart.c ****             // See if the bit that was just transferred is the last bit of the
 426:C:/StellarisWare/utils\softuart.c ****             // data byte (based on the configuration of the SoftUART).
 427:C:/StellarisWare/utils\softuart.c ****             //
 428:C:/StellarisWare/utils\softuart.c ****             if(((pUART->usConfig & SOFTUART_CONFIG_WLEN_MASK) >>
 382              		.loc 1 428 0
 383 0136 7B68     		ldr	r3, [r7, #4]
 384 0138 1B8D     		ldrh	r3, [r3, #40]
 385 013a 03F06003 		and	r3, r3, #96
 386 013e 4FEA6312 		asr	r2, r3, #5
 429:C:/StellarisWare/utils\softuart.c ****                 SOFTUART_CONFIG_WLEN_S) ==
 430:C:/StellarisWare/utils\softuart.c ****                (pUART->ucTxState - SOFTUART_TXSTATE_DATA_4))
 387              		.loc 1 430 0
 388 0142 7B68     		ldr	r3, [r7, #4]
 389 0144 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 390 0148 A3F10503 		sub	r3, r3, #5
 428:C:/StellarisWare/utils\softuart.c ****             if(((pUART->usConfig & SOFTUART_CONFIG_WLEN_MASK) >>
 391              		.loc 1 428 0
 392 014c 9A42     		cmp	r2, r3
 393 014e 6AD1     		bne	.L23
 431:C:/StellarisWare/utils\softuart.c ****             {
 432:C:/StellarisWare/utils\softuart.c ****                 //
 433:C:/StellarisWare/utils\softuart.c ****                 // See if parity is enabled.
 434:C:/StellarisWare/utils\softuart.c ****                 //
 435:C:/StellarisWare/utils\softuart.c ****                 if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) !=
 394              		.loc 1 435 0
 395 0150 7B68     		ldr	r3, [r7, #4]
 396 0152 1B8D     		ldrh	r3, [r3, #40]
 397 0154 03F08603 		and	r3, r3, #134
 398 0158 002B     		cmp	r3, #0
 399 015a 4DD0     		beq	.L24
 436:C:/StellarisWare/utils\softuart.c ****                    SOFTUART_CONFIG_PAR_NONE)
 437:C:/StellarisWare/utils\softuart.c ****                 {
 438:C:/StellarisWare/utils\softuart.c ****                     //
 439:C:/StellarisWare/utils\softuart.c ****                     // See if the parity is set to one.
 440:C:/StellarisWare/utils\softuart.c ****                     //
 441:C:/StellarisWare/utils\softuart.c ****                     if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 400              		.loc 1 441 0
 401 015c 7B68     		ldr	r3, [r7, #4]
 402 015e 1B8D     		ldrh	r3, [r3, #40]
 403 0160 03F08603 		and	r3, r3, #134
 404 0164 822B     		cmp	r3, #130
 405 0166 05D1     		bne	.L25
 442:C:/StellarisWare/utils\softuart.c ****                        SOFTUART_CONFIG_PAR_ONE)
 443:C:/StellarisWare/utils\softuart.c ****                     {
 444:C:/StellarisWare/utils\softuart.c ****                         //
 445:C:/StellarisWare/utils\softuart.c ****                         // The next value to be written to the data line is
 446:C:/StellarisWare/utils\softuart.c ****                         // one.
 447:C:/StellarisWare/utils\softuart.c ****                         //
 448:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext = 255;
 406              		.loc 1 448 0
 407 0168 7B68     		ldr	r3, [r7, #4]
 408 016a 4FF0FF02 		mov	r2, #255
 409 016e 83F82C20 		strb	r2, [r3, #44]
 410 0172 3BE0     		b	.L26
 411              	.L25:
 449:C:/StellarisWare/utils\softuart.c ****                     }
 450:C:/StellarisWare/utils\softuart.c **** 
 451:C:/StellarisWare/utils\softuart.c ****                     //
 452:C:/StellarisWare/utils\softuart.c ****                     // Otherwise, see if the parity is set to zero.
 453:C:/StellarisWare/utils\softuart.c ****                     //
 454:C:/StellarisWare/utils\softuart.c ****                     else if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 412              		.loc 1 454 0
 413 0174 7B68     		ldr	r3, [r7, #4]
 414 0176 1B8D     		ldrh	r3, [r3, #40]
 415 0178 03F08603 		and	r3, r3, #134
 416 017c 862B     		cmp	r3, #134
 417 017e 05D1     		bne	.L27
 455:C:/StellarisWare/utils\softuart.c ****                             SOFTUART_CONFIG_PAR_ZERO)
 456:C:/StellarisWare/utils\softuart.c ****                     {
 457:C:/StellarisWare/utils\softuart.c ****                         //
 458:C:/StellarisWare/utils\softuart.c ****                         // The next value to be written to the data line is
 459:C:/StellarisWare/utils\softuart.c ****                         // zero.
 460:C:/StellarisWare/utils\softuart.c ****                         //
 461:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext = 0;
 418              		.loc 1 461 0
 419 0180 7B68     		ldr	r3, [r7, #4]
 420 0182 4FF00002 		mov	r2, #0
 421 0186 83F82C20 		strb	r2, [r3, #44]
 422 018a 2FE0     		b	.L26
 423              	.L27:
 462:C:/StellarisWare/utils\softuart.c ****                     }
 463:C:/StellarisWare/utils\softuart.c **** 
 464:C:/StellarisWare/utils\softuart.c ****                     //
 465:C:/StellarisWare/utils\softuart.c ****                     // Otherwise, there is either even or odd parity.
 466:C:/StellarisWare/utils\softuart.c ****                     //
 467:C:/StellarisWare/utils\softuart.c ****                     else
 468:C:/StellarisWare/utils\softuart.c ****                     {
 469:C:/StellarisWare/utils\softuart.c ****                         //
 470:C:/StellarisWare/utils\softuart.c ****                         // Find the odd parity for the data byte.
 471:C:/StellarisWare/utils\softuart.c ****                         //
 472:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext =
 473:C:/StellarisWare/utils\softuart.c ****                             ((g_pulParityOdd[pUART->ucTxData >> 5] &
 424              		.loc 1 473 0
 425 018c 7B68     		ldr	r3, [r7, #4]
 426 018e 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 427 0192 4FEA5313 		lsr	r3, r3, #5
 428 0196 DBB2     		uxtb	r3, r3
 429 0198 1A46     		mov	r2, r3
 430 019a 40F20003 		movw	r3, #:lower16:g_pulParityOdd
 431 019e C0F20003 		movt	r3, #:upper16:g_pulParityOdd
 432 01a2 53F82220 		ldr	r2, [r3, r2, lsl #2]
 474:C:/StellarisWare/utils\softuart.c ****                               (1 << (pUART->ucTxData & 31))) ? 255 : 0);
 433              		.loc 1 474 0
 434 01a6 7B68     		ldr	r3, [r7, #4]
 435 01a8 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 436 01ac 03F01F03 		and	r3, r3, #31
 437 01b0 4FF00101 		mov	r1, #1
 438 01b4 01FA03F3 		lsl	r3, r1, r3
 473:C:/StellarisWare/utils\softuart.c ****                             ((g_pulParityOdd[pUART->ucTxData >> 5] &
 439              		.loc 1 473 0
 440 01b8 1340     		ands	r3, r3, r2
 472:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext =
 441              		.loc 1 472 0
 442 01ba 002B     		cmp	r3, #0
 443 01bc 02D0     		beq	.L28
 472:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext =
 444              		.loc 1 472 0 is_stmt 0 discriminator 1
 445 01be 4FF0FF03 		mov	r3, #255
 446 01c2 01E0     		b	.L29
 447              	.L28:
 472:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext =
 448              		.loc 1 472 0 discriminator 2
 449 01c4 4FF00003 		mov	r3, #0
 450              	.L29:
 472:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxNext =
 451              		.loc 1 472 0 discriminator 3
 452 01c8 7A68     		ldr	r2, [r7, #4]
 453 01ca 82F82C30 		strb	r3, [r2, #44]
 475:C:/StellarisWare/utils\softuart.c **** 
 476:C:/StellarisWare/utils\softuart.c ****                         //
 477:C:/StellarisWare/utils\softuart.c ****                         // If the parity is set to even, then invert the
 478:C:/StellarisWare/utils\softuart.c ****                         // parity just computed (making it even parity).
 479:C:/StellarisWare/utils\softuart.c ****                         //
 480:C:/StellarisWare/utils\softuart.c ****                         if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 454              		.loc 1 480 0 is_stmt 1 discriminator 3
 455 01ce 7B68     		ldr	r3, [r7, #4]
 456 01d0 1B8D     		ldrh	r3, [r3, #40]
 457 01d2 03F08603 		and	r3, r3, #134
 458 01d6 062B     		cmp	r3, #6
 459 01d8 08D1     		bne	.L26
 481:C:/StellarisWare/utils\softuart.c ****                            SOFTUART_CONFIG_PAR_EVEN)
 482:C:/StellarisWare/utils\softuart.c ****                         {
 483:C:/StellarisWare/utils\softuart.c ****                             pUART->ucTxNext ^= 255;
 460              		.loc 1 483 0
 461 01da 7B68     		ldr	r3, [r7, #4]
 462 01dc 93F82C30 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 463 01e0 6FEA0303 		mvn	r3, r3
 464 01e4 DAB2     		uxtb	r2, r3
 465 01e6 7B68     		ldr	r3, [r7, #4]
 466 01e8 83F82C20 		strb	r2, [r3, #44]
 467              	.L26:
 484:C:/StellarisWare/utils\softuart.c ****                         }
 485:C:/StellarisWare/utils\softuart.c ****                     }
 486:C:/StellarisWare/utils\softuart.c **** 
 487:C:/StellarisWare/utils\softuart.c ****                     //
 488:C:/StellarisWare/utils\softuart.c ****                     // Advance to the parity state.
 489:C:/StellarisWare/utils\softuart.c ****                     //
 490:C:/StellarisWare/utils\softuart.c ****                     pUART->ucTxState = SOFTUART_TXSTATE_PARITY;
 468              		.loc 1 490 0
 469 01ec 7B68     		ldr	r3, [r7, #4]
 470 01ee 4FF00A02 		mov	r2, #10
 471 01f2 83F82B20 		strb	r2, [r3, #43]
 491:C:/StellarisWare/utils\softuart.c ****                 }
 492:C:/StellarisWare/utils\softuart.c **** 
 493:C:/StellarisWare/utils\softuart.c ****                 //
 494:C:/StellarisWare/utils\softuart.c ****                 // Parity is not enabled.
 495:C:/StellarisWare/utils\softuart.c ****                 //
 496:C:/StellarisWare/utils\softuart.c ****                 else
 497:C:/StellarisWare/utils\softuart.c ****                 {
 498:C:/StellarisWare/utils\softuart.c ****                     //
 499:C:/StellarisWare/utils\softuart.c ****                     // The next value to write to the data line is the stop
 500:C:/StellarisWare/utils\softuart.c ****                     // bit.
 501:C:/StellarisWare/utils\softuart.c ****                     //
 502:C:/StellarisWare/utils\softuart.c ****                     pUART->ucTxNext = 255;
 503:C:/StellarisWare/utils\softuart.c **** 
 504:C:/StellarisWare/utils\softuart.c ****                     //
 505:C:/StellarisWare/utils\softuart.c ****                     // See if there are one or two stop bits.
 506:C:/StellarisWare/utils\softuart.c ****                     //
 507:C:/StellarisWare/utils\softuart.c ****                     if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 508:C:/StellarisWare/utils\softuart.c ****                        SOFTUART_CONFIG_STOP_TWO)
 509:C:/StellarisWare/utils\softuart.c ****                     {
 510:C:/StellarisWare/utils\softuart.c ****                         //
 511:C:/StellarisWare/utils\softuart.c ****                         // Advance to the two stop bits state.
 512:C:/StellarisWare/utils\softuart.c ****                         //
 513:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxState = SOFTUART_TXSTATE_STOP_0;
 514:C:/StellarisWare/utils\softuart.c ****                     }
 515:C:/StellarisWare/utils\softuart.c ****                     else
 516:C:/StellarisWare/utils\softuart.c ****                     {
 517:C:/StellarisWare/utils\softuart.c ****                         //
 518:C:/StellarisWare/utils\softuart.c ****                         // Advance to the one stop bit state.
 519:C:/StellarisWare/utils\softuart.c ****                         //
 520:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxState = SOFTUART_TXSTATE_STOP_1;
 521:C:/StellarisWare/utils\softuart.c ****                     }
 522:C:/StellarisWare/utils\softuart.c ****                 }
 523:C:/StellarisWare/utils\softuart.c ****             }
 524:C:/StellarisWare/utils\softuart.c **** 
 525:C:/StellarisWare/utils\softuart.c ****             //
 526:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there are more data bits to transfer.
 527:C:/StellarisWare/utils\softuart.c ****             //
 528:C:/StellarisWare/utils\softuart.c ****             else
 529:C:/StellarisWare/utils\softuart.c ****             {
 530:C:/StellarisWare/utils\softuart.c ****                 //
 531:C:/StellarisWare/utils\softuart.c ****                 // The next value to be written to the data line is the next
 532:C:/StellarisWare/utils\softuart.c ****                 // bit of the data byte.
 533:C:/StellarisWare/utils\softuart.c ****                 //
 534:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext =
 535:C:/StellarisWare/utils\softuart.c ****                     (pUART->ucTxData & (1 << pUART->ucTxState)) ? 255 : 0;
 536:C:/StellarisWare/utils\softuart.c **** 
 537:C:/StellarisWare/utils\softuart.c ****                 //
 538:C:/StellarisWare/utils\softuart.c ****                 // Advance to the next state.
 539:C:/StellarisWare/utils\softuart.c ****                 //
 540:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState++;
 541:C:/StellarisWare/utils\softuart.c ****             }
 542:C:/StellarisWare/utils\softuart.c **** 
 543:C:/StellarisWare/utils\softuart.c ****             //
 544:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 545:C:/StellarisWare/utils\softuart.c ****             //
 546:C:/StellarisWare/utils\softuart.c ****             break;
 472              		.loc 1 546 0
 473 01f6 E5E0     		b	.L6
 474              	.L24:
 502:C:/StellarisWare/utils\softuart.c ****                     pUART->ucTxNext = 255;
 475              		.loc 1 502 0
 476 01f8 7B68     		ldr	r3, [r7, #4]
 477 01fa 4FF0FF02 		mov	r2, #255
 478 01fe 83F82C20 		strb	r2, [r3, #44]
 507:C:/StellarisWare/utils\softuart.c ****                     if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 479              		.loc 1 507 0
 480 0202 7B68     		ldr	r3, [r7, #4]
 481 0204 1B8D     		ldrh	r3, [r3, #40]
 482 0206 03F00803 		and	r3, r3, #8
 483 020a 002B     		cmp	r3, #0
 484 020c 05D0     		beq	.L31
 513:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxState = SOFTUART_TXSTATE_STOP_0;
 485              		.loc 1 513 0
 486 020e 7B68     		ldr	r3, [r7, #4]
 487 0210 4FF00B02 		mov	r2, #11
 488 0214 83F82B20 		strb	r2, [r3, #43]
 489              		.loc 1 546 0
 490 0218 D4E0     		b	.L6
 491              	.L31:
 520:C:/StellarisWare/utils\softuart.c ****                         pUART->ucTxState = SOFTUART_TXSTATE_STOP_1;
 492              		.loc 1 520 0
 493 021a 7B68     		ldr	r3, [r7, #4]
 494 021c 4FF00C02 		mov	r2, #12
 495 0220 83F82B20 		strb	r2, [r3, #43]
 496              		.loc 1 546 0
 497 0224 CEE0     		b	.L6
 498              	.L23:
 535:C:/StellarisWare/utils\softuart.c ****                     (pUART->ucTxData & (1 << pUART->ucTxState)) ? 255 : 0;
 499              		.loc 1 535 0
 500 0226 7B68     		ldr	r3, [r7, #4]
 501 0228 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 502 022c 1A46     		mov	r2, r3
 503 022e 7B68     		ldr	r3, [r7, #4]
 504 0230 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 505 0234 42FA03F3 		asr	r3, r2, r3
 506 0238 03F00103 		and	r3, r3, #1
 507 023c DBB2     		uxtb	r3, r3
 534:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext =
 508              		.loc 1 534 0
 509 023e 002B     		cmp	r3, #0
 510 0240 02D0     		beq	.L32
 534:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext =
 511              		.loc 1 534 0 is_stmt 0 discriminator 1
 512 0242 4FF0FF03 		mov	r3, #255
 513 0246 01E0     		b	.L33
 514              	.L32:
 534:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext =
 515              		.loc 1 534 0 discriminator 2
 516 0248 4FF00003 		mov	r3, #0
 517              	.L33:
 534:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext =
 518              		.loc 1 534 0 discriminator 3
 519 024c 7A68     		ldr	r2, [r7, #4]
 520 024e 82F82C30 		strb	r3, [r2, #44]
 540:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState++;
 521              		.loc 1 540 0 is_stmt 1 discriminator 3
 522 0252 7B68     		ldr	r3, [r7, #4]
 523 0254 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 524 0258 03F10103 		add	r3, r3, #1
 525 025c DAB2     		uxtb	r2, r3
 526 025e 7B68     		ldr	r3, [r7, #4]
 527 0260 83F82B20 		strb	r2, [r3, #43]
 528              		.loc 1 546 0 discriminator 3
 529 0264 AEE0     		b	.L6
 530              	.L11:
 547:C:/StellarisWare/utils\softuart.c ****         }
 548:C:/StellarisWare/utils\softuart.c **** 
 549:C:/StellarisWare/utils\softuart.c ****         //
 550:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the parity bit state.
 551:C:/StellarisWare/utils\softuart.c ****         //
 552:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_PARITY:
 553:C:/StellarisWare/utils\softuart.c ****         {
 554:C:/StellarisWare/utils\softuart.c ****             //
 555:C:/StellarisWare/utils\softuart.c ****             // The next value to write to the data line is the stop bit.
 556:C:/StellarisWare/utils\softuart.c ****             //
 557:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxNext = 255;
 531              		.loc 1 557 0
 532 0266 7B68     		ldr	r3, [r7, #4]
 533 0268 4FF0FF02 		mov	r2, #255
 534 026c 83F82C20 		strb	r2, [r3, #44]
 558:C:/StellarisWare/utils\softuart.c **** 
 559:C:/StellarisWare/utils\softuart.c ****             //
 560:C:/StellarisWare/utils\softuart.c ****             // See if there are one or two stop bits.
 561:C:/StellarisWare/utils\softuart.c ****             //
 562:C:/StellarisWare/utils\softuart.c ****             if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 535              		.loc 1 562 0
 536 0270 7B68     		ldr	r3, [r7, #4]
 537 0272 1B8D     		ldrh	r3, [r3, #40]
 538 0274 03F00803 		and	r3, r3, #8
 539 0278 002B     		cmp	r3, #0
 540 027a 05D0     		beq	.L34
 563:C:/StellarisWare/utils\softuart.c ****                SOFTUART_CONFIG_STOP_TWO)
 564:C:/StellarisWare/utils\softuart.c ****             {
 565:C:/StellarisWare/utils\softuart.c ****                 //
 566:C:/StellarisWare/utils\softuart.c ****                 // Advance to the two stop bits state.
 567:C:/StellarisWare/utils\softuart.c ****                 //
 568:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_STOP_0;
 541              		.loc 1 568 0
 542 027c 7B68     		ldr	r3, [r7, #4]
 543 027e 4FF00B02 		mov	r2, #11
 544 0282 83F82B20 		strb	r2, [r3, #43]
 569:C:/StellarisWare/utils\softuart.c ****             }
 570:C:/StellarisWare/utils\softuart.c ****             else
 571:C:/StellarisWare/utils\softuart.c ****             {
 572:C:/StellarisWare/utils\softuart.c ****                 //
 573:C:/StellarisWare/utils\softuart.c ****                 // Advance to the one stop bit state.
 574:C:/StellarisWare/utils\softuart.c ****                 //
 575:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_STOP_1;
 576:C:/StellarisWare/utils\softuart.c ****             }
 577:C:/StellarisWare/utils\softuart.c **** 
 578:C:/StellarisWare/utils\softuart.c ****             //
 579:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 580:C:/StellarisWare/utils\softuart.c ****             //
 581:C:/StellarisWare/utils\softuart.c ****             break;
 545              		.loc 1 581 0
 546 0286 9DE0     		b	.L6
 547              	.L34:
 575:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_STOP_1;
 548              		.loc 1 575 0
 549 0288 7B68     		ldr	r3, [r7, #4]
 550 028a 4FF00C02 		mov	r2, #12
 551 028e 83F82B20 		strb	r2, [r3, #43]
 552              		.loc 1 581 0
 553 0292 97E0     		b	.L6
 554              	.L12:
 582:C:/StellarisWare/utils\softuart.c ****         }
 583:C:/StellarisWare/utils\softuart.c **** 
 584:C:/StellarisWare/utils\softuart.c ****         //
 585:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the two stop bits state.
 586:C:/StellarisWare/utils\softuart.c ****         //
 587:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_STOP_0:
 588:C:/StellarisWare/utils\softuart.c ****         {
 589:C:/StellarisWare/utils\softuart.c ****             //
 590:C:/StellarisWare/utils\softuart.c ****             // Advance to the one stop bit state.
 591:C:/StellarisWare/utils\softuart.c ****             //
 592:C:/StellarisWare/utils\softuart.c ****             pUART->ucTxState = SOFTUART_TXSTATE_STOP_1;
 555              		.loc 1 592 0
 556 0294 7B68     		ldr	r3, [r7, #4]
 557 0296 4FF00C02 		mov	r2, #12
 558 029a 83F82B20 		strb	r2, [r3, #43]
 593:C:/StellarisWare/utils\softuart.c **** 
 594:C:/StellarisWare/utils\softuart.c ****             //
 595:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 596:C:/StellarisWare/utils\softuart.c ****             //
 597:C:/StellarisWare/utils\softuart.c ****             break;
 559              		.loc 1 597 0
 560 029e 91E0     		b	.L6
 561              	.L13:
 598:C:/StellarisWare/utils\softuart.c ****         }
 599:C:/StellarisWare/utils\softuart.c **** 
 600:C:/StellarisWare/utils\softuart.c ****         //
 601:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the one stop bit state.
 602:C:/StellarisWare/utils\softuart.c ****         //
 603:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_STOP_1:
 604:C:/StellarisWare/utils\softuart.c ****         {
 605:C:/StellarisWare/utils\softuart.c ****             //
 606:C:/StellarisWare/utils\softuart.c ****             // The data byte has been completely transferred, so advance the
 607:C:/StellarisWare/utils\softuart.c ****             // read pointer.
 608:C:/StellarisWare/utils\softuart.c ****             //
 609:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferRead++;
 562              		.loc 1 609 0
 563 02a0 7B68     		ldr	r3, [r7, #4]
 564 02a2 DB8A     		ldrh	r3, [r3, #22]
 565 02a4 03F10103 		add	r3, r3, #1
 566 02a8 9AB2     		uxth	r2, r3
 567 02aa 7B68     		ldr	r3, [r7, #4]
 568 02ac DA82     		strh	r2, [r3, #22]	@ movhi
 610:C:/StellarisWare/utils\softuart.c ****             if(pUART->usTxBufferRead == pUART->usTxBufferLen)
 569              		.loc 1 610 0
 570 02ae 7B68     		ldr	r3, [r7, #4]
 571 02b0 DA8A     		ldrh	r2, [r3, #22]
 572 02b2 7B68     		ldr	r3, [r7, #4]
 573 02b4 9B8A     		ldrh	r3, [r3, #20]
 574 02b6 9A42     		cmp	r2, r3
 575 02b8 03D1     		bne	.L36
 611:C:/StellarisWare/utils\softuart.c ****             {
 612:C:/StellarisWare/utils\softuart.c ****                 pUART->usTxBufferRead = 0;
 576              		.loc 1 612 0
 577 02ba 7B68     		ldr	r3, [r7, #4]
 578 02bc 4FF00002 		mov	r2, #0
 579 02c0 DA82     		strh	r2, [r3, #22]	@ movhi
 580              	.L36:
 613:C:/StellarisWare/utils\softuart.c ****             }
 614:C:/StellarisWare/utils\softuart.c **** 
 615:C:/StellarisWare/utils\softuart.c ****             //
 616:C:/StellarisWare/utils\softuart.c ****             // Determine the number of characters in the transmit buffer.
 617:C:/StellarisWare/utils\softuart.c ****             //
 618:C:/StellarisWare/utils\softuart.c ****             if(pUART->usTxBufferRead > pUART->usTxBufferWrite)
 581              		.loc 1 618 0
 582 02c2 7B68     		ldr	r3, [r7, #4]
 583 02c4 DA8A     		ldrh	r2, [r3, #22]
 584 02c6 7B68     		ldr	r3, [r7, #4]
 585 02c8 1B8B     		ldrh	r3, [r3, #24]
 586 02ca 9A42     		cmp	r2, r3
 587 02cc 0BD9     		bls	.L37
 619:C:/StellarisWare/utils\softuart.c ****             {
 620:C:/StellarisWare/utils\softuart.c ****                 ulTemp = (pUART->usTxBufferLen -
 588              		.loc 1 620 0
 589 02ce 7B68     		ldr	r3, [r7, #4]
 590 02d0 9B8A     		ldrh	r3, [r3, #20]
 591 02d2 1A46     		mov	r2, r3
 621:C:/StellarisWare/utils\softuart.c ****                           (pUART->usTxBufferRead - pUART->usTxBufferWrite));
 592              		.loc 1 621 0
 593 02d4 7B68     		ldr	r3, [r7, #4]
 594 02d6 1B8B     		ldrh	r3, [r3, #24]
 595 02d8 1946     		mov	r1, r3
 596 02da 7B68     		ldr	r3, [r7, #4]
 597 02dc DB8A     		ldrh	r3, [r3, #22]
 598 02de CB1A     		subs	r3, r1, r3
 620:C:/StellarisWare/utils\softuart.c ****                 ulTemp = (pUART->usTxBufferLen -
 599              		.loc 1 620 0
 600 02e0 D318     		adds	r3, r2, r3
 601 02e2 FB60     		str	r3, [r7, #12]
 602 02e4 06E0     		b	.L38
 603              	.L37:
 622:C:/StellarisWare/utils\softuart.c ****             }
 623:C:/StellarisWare/utils\softuart.c ****             else
 624:C:/StellarisWare/utils\softuart.c ****             {
 625:C:/StellarisWare/utils\softuart.c ****                 ulTemp = pUART->usTxBufferWrite - pUART->usTxBufferRead;
 604              		.loc 1 625 0
 605 02e6 7B68     		ldr	r3, [r7, #4]
 606 02e8 1B8B     		ldrh	r3, [r3, #24]
 607 02ea 1A46     		mov	r2, r3
 608 02ec 7B68     		ldr	r3, [r7, #4]
 609 02ee DB8A     		ldrh	r3, [r3, #22]
 610 02f0 D31A     		subs	r3, r2, r3
 611 02f2 FB60     		str	r3, [r7, #12]
 612              	.L38:
 626:C:/StellarisWare/utils\softuart.c ****             }
 627:C:/StellarisWare/utils\softuart.c **** 
 628:C:/StellarisWare/utils\softuart.c ****             //
 629:C:/StellarisWare/utils\softuart.c ****             // If the transmit buffer fullness just crossed the programmed
 630:C:/StellarisWare/utils\softuart.c ****             // level, generate a transmit "interrupt".
 631:C:/StellarisWare/utils\softuart.c ****             //
 632:C:/StellarisWare/utils\softuart.c ****             if(ulTemp == pUART->usTxBufferLevel)
 613              		.loc 1 632 0
 614 02f4 7B68     		ldr	r3, [r7, #4]
 615 02f6 5B8B     		ldrh	r3, [r3, #26]
 616 02f8 1A46     		mov	r2, r3
 617 02fa FB68     		ldr	r3, [r7, #12]
 618 02fc 9A42     		cmp	r2, r3
 619 02fe 06D1     		bne	.L39
 633:C:/StellarisWare/utils\softuart.c ****             {
 634:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_TX;
 620              		.loc 1 634 0
 621 0300 7B68     		ldr	r3, [r7, #4]
 622 0302 9B8C     		ldrh	r3, [r3, #36]
 623 0304 43F02003 		orr	r3, r3, #32
 624 0308 9AB2     		uxth	r2, r3
 625 030a 7B68     		ldr	r3, [r7, #4]
 626 030c 9A84     		strh	r2, [r3, #36]	@ movhi
 627              	.L39:
 635:C:/StellarisWare/utils\softuart.c ****             }
 636:C:/StellarisWare/utils\softuart.c **** 
 637:C:/StellarisWare/utils\softuart.c ****             //
 638:C:/StellarisWare/utils\softuart.c ****             // See if the SoftUART module is enabled.
 639:C:/StellarisWare/utils\softuart.c ****             //
 640:C:/StellarisWare/utils\softuart.c ****             if(!(pUART->ucFlags & SOFTUART_FLAG_ENABLE))
 628              		.loc 1 640 0
 629 030e 7B68     		ldr	r3, [r7, #4]
 630 0310 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 631 0314 03F00103 		and	r3, r3, #1
 632 0318 002B     		cmp	r3, #0
 633 031a 05D1     		bne	.L40
 641:C:/StellarisWare/utils\softuart.c ****             {
 642:C:/StellarisWare/utils\softuart.c ****                 //
 643:C:/StellarisWare/utils\softuart.c ****                 // The SoftUART module is not enabled, so do advance to the
 644:C:/StellarisWare/utils\softuart.c ****                 // idle state.
 645:C:/StellarisWare/utils\softuart.c ****                 //
 646:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_IDLE;
 634              		.loc 1 646 0
 635 031c 7B68     		ldr	r3, [r7, #4]
 636 031e 4FF00002 		mov	r2, #0
 637 0322 83F82B20 		strb	r2, [r3, #43]
 647:C:/StellarisWare/utils\softuart.c ****             }
 648:C:/StellarisWare/utils\softuart.c **** 
 649:C:/StellarisWare/utils\softuart.c ****             //
 650:C:/StellarisWare/utils\softuart.c ****             // See if the break signal should be asserted.
 651:C:/StellarisWare/utils\softuart.c ****             //
 652:C:/StellarisWare/utils\softuart.c ****             else if(pUART->ucFlags & SOFTUART_FLAG_TXBREAK)
 653:C:/StellarisWare/utils\softuart.c ****             {
 654:C:/StellarisWare/utils\softuart.c ****                 //
 655:C:/StellarisWare/utils\softuart.c ****                 // The data line should be driven low while in the break state.
 656:C:/StellarisWare/utils\softuart.c ****                 //
 657:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 658:C:/StellarisWare/utils\softuart.c **** 
 659:C:/StellarisWare/utils\softuart.c ****                 //
 660:C:/StellarisWare/utils\softuart.c ****                 // Move to the break state.
 661:C:/StellarisWare/utils\softuart.c ****                 //
 662:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_BREAK;
 663:C:/StellarisWare/utils\softuart.c ****             }
 664:C:/StellarisWare/utils\softuart.c **** 
 665:C:/StellarisWare/utils\softuart.c ****             //
 666:C:/StellarisWare/utils\softuart.c ****             // Otherwise, see if there is data in the transmit buffer.
 667:C:/StellarisWare/utils\softuart.c ****             //
 668:C:/StellarisWare/utils\softuart.c ****             else if(pUART->usTxBufferRead != pUART->usTxBufferWrite)
 669:C:/StellarisWare/utils\softuart.c ****             {
 670:C:/StellarisWare/utils\softuart.c ****                 //
 671:C:/StellarisWare/utils\softuart.c ****                 // The data line should be driven low to indicate a start bit.
 672:C:/StellarisWare/utils\softuart.c ****                 //
 673:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 674:C:/StellarisWare/utils\softuart.c **** 
 675:C:/StellarisWare/utils\softuart.c ****                 //
 676:C:/StellarisWare/utils\softuart.c ****                 // Move to the start bit state.
 677:C:/StellarisWare/utils\softuart.c ****                 //
 678:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_START;
 679:C:/StellarisWare/utils\softuart.c ****             }
 680:C:/StellarisWare/utils\softuart.c **** 
 681:C:/StellarisWare/utils\softuart.c ****             //
 682:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there is nothing to do.
 683:C:/StellarisWare/utils\softuart.c ****             //
 684:C:/StellarisWare/utils\softuart.c ****             else
 685:C:/StellarisWare/utils\softuart.c ****             {
 686:C:/StellarisWare/utils\softuart.c ****                 //
 687:C:/StellarisWare/utils\softuart.c ****                 // Assert the end of transmission "interrupt".
 688:C:/StellarisWare/utils\softuart.c ****                 //
 689:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_EOT;
 690:C:/StellarisWare/utils\softuart.c **** 
 691:C:/StellarisWare/utils\softuart.c ****                 //
 692:C:/StellarisWare/utils\softuart.c ****                 // Advance to the idle state.
 693:C:/StellarisWare/utils\softuart.c ****                 //
 694:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_IDLE;
 695:C:/StellarisWare/utils\softuart.c ****             }
 696:C:/StellarisWare/utils\softuart.c **** 
 697:C:/StellarisWare/utils\softuart.c ****             //
 698:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 699:C:/StellarisWare/utils\softuart.c ****             //
 700:C:/StellarisWare/utils\softuart.c ****             break;
 638              		.loc 1 700 0
 639 0326 4DE0     		b	.L6
 640              	.L40:
 652:C:/StellarisWare/utils\softuart.c ****             else if(pUART->ucFlags & SOFTUART_FLAG_TXBREAK)
 641              		.loc 1 652 0
 642 0328 7B68     		ldr	r3, [r7, #4]
 643 032a 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 644 032e 03F00203 		and	r3, r3, #2
 645 0332 002B     		cmp	r3, #0
 646 0334 0AD0     		beq	.L42
 657:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 647              		.loc 1 657 0
 648 0336 7B68     		ldr	r3, [r7, #4]
 649 0338 4FF00002 		mov	r2, #0
 650 033c 83F82C20 		strb	r2, [r3, #44]
 662:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_BREAK;
 651              		.loc 1 662 0
 652 0340 7B68     		ldr	r3, [r7, #4]
 653 0342 4FF00D02 		mov	r2, #13
 654 0346 83F82B20 		strb	r2, [r3, #43]
 655              		.loc 1 700 0
 656 034a 3BE0     		b	.L6
 657              	.L42:
 668:C:/StellarisWare/utils\softuart.c ****             else if(pUART->usTxBufferRead != pUART->usTxBufferWrite)
 658              		.loc 1 668 0
 659 034c 7B68     		ldr	r3, [r7, #4]
 660 034e DA8A     		ldrh	r2, [r3, #22]
 661 0350 7B68     		ldr	r3, [r7, #4]
 662 0352 1B8B     		ldrh	r3, [r3, #24]
 663 0354 9A42     		cmp	r2, r3
 664 0356 0AD0     		beq	.L43
 673:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 0;
 665              		.loc 1 673 0
 666 0358 7B68     		ldr	r3, [r7, #4]
 667 035a 4FF00002 		mov	r2, #0
 668 035e 83F82C20 		strb	r2, [r3, #44]
 678:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_START;
 669              		.loc 1 678 0
 670 0362 7B68     		ldr	r3, [r7, #4]
 671 0364 4FF00902 		mov	r2, #9
 672 0368 83F82B20 		strb	r2, [r3, #43]
 673              		.loc 1 700 0
 674 036c 2AE0     		b	.L6
 675              	.L43:
 689:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_EOT;
 676              		.loc 1 689 0
 677 036e 7B68     		ldr	r3, [r7, #4]
 678 0370 9B8C     		ldrh	r3, [r3, #36]
 679 0372 43F40063 		orr	r3, r3, #2048
 680 0376 9AB2     		uxth	r2, r3
 681 0378 7B68     		ldr	r3, [r7, #4]
 682 037a 9A84     		strh	r2, [r3, #36]	@ movhi
 694:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_IDLE;
 683              		.loc 1 694 0
 684 037c 7B68     		ldr	r3, [r7, #4]
 685 037e 4FF00002 		mov	r2, #0
 686 0382 83F82B20 		strb	r2, [r3, #43]
 687              		.loc 1 700 0
 688 0386 1DE0     		b	.L6
 689              	.L14:
 701:C:/StellarisWare/utils\softuart.c ****         }
 702:C:/StellarisWare/utils\softuart.c **** 
 703:C:/StellarisWare/utils\softuart.c ****         //
 704:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the break state.
 705:C:/StellarisWare/utils\softuart.c ****         //
 706:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_TXSTATE_BREAK:
 707:C:/StellarisWare/utils\softuart.c ****         {
 708:C:/StellarisWare/utils\softuart.c ****             //
 709:C:/StellarisWare/utils\softuart.c ****             // See if the break should be deasserted.
 710:C:/StellarisWare/utils\softuart.c ****             //
 711:C:/StellarisWare/utils\softuart.c ****             if(!(pUART->ucFlags & SOFTUART_FLAG_ENABLE) ||
 690              		.loc 1 711 0
 691 0388 7B68     		ldr	r3, [r7, #4]
 692 038a 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 693 038e 03F00103 		and	r3, r3, #1
 694 0392 002B     		cmp	r3, #0
 695 0394 06D0     		beq	.L44
 712:C:/StellarisWare/utils\softuart.c ****                !(pUART->ucFlags & SOFTUART_FLAG_TXBREAK))
 696              		.loc 1 712 0 discriminator 1
 697 0396 7B68     		ldr	r3, [r7, #4]
 698 0398 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 699 039c 03F00203 		and	r3, r3, #2
 711:C:/StellarisWare/utils\softuart.c ****             if(!(pUART->ucFlags & SOFTUART_FLAG_ENABLE) ||
 700              		.loc 1 711 0 discriminator 1
 701 03a0 002B     		cmp	r3, #0
 702 03a2 0ED1     		bne	.L52
 703              	.L44:
 713:C:/StellarisWare/utils\softuart.c ****             {
 714:C:/StellarisWare/utils\softuart.c ****                 //
 715:C:/StellarisWare/utils\softuart.c ****                 // The data line should be driven high to indicate it is idle.
 716:C:/StellarisWare/utils\softuart.c ****                 //
 717:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxNext = 255;
 704              		.loc 1 717 0
 705 03a4 7B68     		ldr	r3, [r7, #4]
 706 03a6 4FF0FF02 		mov	r2, #255
 707 03aa 83F82C20 		strb	r2, [r3, #44]
 718:C:/StellarisWare/utils\softuart.c **** 
 719:C:/StellarisWare/utils\softuart.c ****                 //
 720:C:/StellarisWare/utils\softuart.c ****                 // Advance to the idle state.
 721:C:/StellarisWare/utils\softuart.c ****                 //
 722:C:/StellarisWare/utils\softuart.c ****                 pUART->ucTxState = SOFTUART_TXSTATE_IDLE;
 708              		.loc 1 722 0
 709 03ae 7B68     		ldr	r3, [r7, #4]
 710 03b0 4FF00002 		mov	r2, #0
 711 03b4 83F82B20 		strb	r2, [r3, #43]
 723:C:/StellarisWare/utils\softuart.c ****             }
 724:C:/StellarisWare/utils\softuart.c **** 
 725:C:/StellarisWare/utils\softuart.c ****             //
 726:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 727:C:/StellarisWare/utils\softuart.c ****             //
 728:C:/StellarisWare/utils\softuart.c ****             break;
 712              		.loc 1 728 0
 713 03b8 03E0     		b	.L52
 714              	.L50:
 317:C:/StellarisWare/utils\softuart.c ****                 break;
 715              		.loc 1 317 0
 716 03ba 00BF     		nop
 717 03bc 02E0     		b	.L6
 718              	.L51:
 355:C:/StellarisWare/utils\softuart.c ****             break;
 719              		.loc 1 355 0
 720 03be 00BF     		nop
 721 03c0 00E0     		b	.L6
 722              	.L52:
 723              		.loc 1 728 0
 724 03c2 00BF     		nop
 725              	.L6:
 729:C:/StellarisWare/utils\softuart.c ****         }
 730:C:/StellarisWare/utils\softuart.c ****     }
 731:C:/StellarisWare/utils\softuart.c **** 
 732:C:/StellarisWare/utils\softuart.c ****     //
 733:C:/StellarisWare/utils\softuart.c ****     // Call the "interrupt" callback while there are enabled "interrupts"
 734:C:/StellarisWare/utils\softuart.c ****     // asserted.  By calling in a loop until the "interrupts" are no longer
 735:C:/StellarisWare/utils\softuart.c ****     // asserted, this mimics the behavior of a real hardware implementation of
 736:C:/StellarisWare/utils\softuart.c ****     // the UART peripheral.
 737:C:/StellarisWare/utils\softuart.c ****     //
 738:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 726              		.loc 1 738 0
 727 03c4 03E0     		b	.L49
 728              	.L48:
 739:C:/StellarisWare/utils\softuart.c ****           (pUART->pfnIntCallback != 0))
 740:C:/StellarisWare/utils\softuart.c ****     {
 741:C:/StellarisWare/utils\softuart.c ****         //
 742:C:/StellarisWare/utils\softuart.c ****         // Call the callback function.
 743:C:/StellarisWare/utils\softuart.c ****         //
 744:C:/StellarisWare/utils\softuart.c ****         pUART->pfnIntCallback();
 729              		.loc 1 744 0
 730 03c6 7B68     		ldr	r3, [r7, #4]
 731 03c8 1B68     		ldr	r3, [r3, #0]
 732 03ca 9847     		blx	r3
 733 03cc 00E0     		b	.L46
 734              	.L49:
 738:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 735              		.loc 1 738 0
 736 03ce 00BF     		nop
 737              	.L46:
 738:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 738              		.loc 1 738 0 is_stmt 0 discriminator 1
 739 03d0 7B68     		ldr	r3, [r7, #4]
 740 03d2 9A8C     		ldrh	r2, [r3, #36]
 741 03d4 7B68     		ldr	r3, [r7, #4]
 742 03d6 DB8C     		ldrh	r3, [r3, #38]
 743 03d8 1340     		ands	r3, r3, r2
 744 03da 9BB2     		uxth	r3, r3
 745 03dc 002B     		cmp	r3, #0
 746 03de 03D0     		beq	.L5
 739:C:/StellarisWare/utils\softuart.c ****           (pUART->pfnIntCallback != 0))
 747              		.loc 1 739 0 is_stmt 1 discriminator 2
 748 03e0 7B68     		ldr	r3, [r7, #4]
 749 03e2 1B68     		ldr	r3, [r3, #0]
 738:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 750              		.loc 1 738 0 discriminator 2
 751 03e4 002B     		cmp	r3, #0
 752 03e6 EED1     		bne	.L48
 753              	.L5:
 745:C:/StellarisWare/utils\softuart.c ****     }
 746:C:/StellarisWare/utils\softuart.c **** }
 754              		.loc 1 746 0
 755 03e8 07F11007 		add	r7, r7, #16
 756 03ec BD46     		mov	sp, r7
 757 03ee 80BD     		pop	{r7, pc}
 758              		.cfi_endproc
 759              	.LFE2:
 761              		.section	.text.SoftUARTRxWriteInt,"ax",%progbits
 762              		.align	2
 763              		.thumb
 764              		.thumb_func
 766              	SoftUARTRxWriteInt:
 767              	.LFB3:
 747:C:/StellarisWare/utils\softuart.c **** 
 748:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 749:C:/StellarisWare/utils\softuart.c **** //
 750:C:/StellarisWare/utils\softuart.c **** //! Handles the assertion of the receive ``interrupt''.
 751:C:/StellarisWare/utils\softuart.c **** //!
 752:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
 753:C:/StellarisWare/utils\softuart.c **** //!
 754:C:/StellarisWare/utils\softuart.c **** //! This function is used to determine when to assert the receive ``interrupt''
 755:C:/StellarisWare/utils\softuart.c **** //! as a result of writing data into the receive buffer (when characters are
 756:C:/StellarisWare/utils\softuart.c **** //! received from the Rx pin).
 757:C:/StellarisWare/utils\softuart.c **** //!
 758:C:/StellarisWare/utils\softuart.c **** //! \return None.
 759:C:/StellarisWare/utils\softuart.c **** //
 760:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 761:C:/StellarisWare/utils\softuart.c **** static void
 762:C:/StellarisWare/utils\softuart.c **** SoftUARTRxWriteInt(tSoftUART *pUART)
 763:C:/StellarisWare/utils\softuart.c **** {
 768              		.loc 1 763 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 16
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772              		@ link register save eliminated.
 773 0000 80B4     		push	{r7}
 774              	.LCFI9:
 775              		.cfi_def_cfa_offset 4
 776              		.cfi_offset 7, -4
 777 0002 85B0     		sub	sp, sp, #20
 778              	.LCFI10:
 779              		.cfi_def_cfa_offset 24
 780 0004 00AF     		add	r7, sp, #0
 781              	.LCFI11:
 782              		.cfi_def_cfa_register 7
 783 0006 7860     		str	r0, [r7, #4]
 764:C:/StellarisWare/utils\softuart.c ****     unsigned long ulTemp;
 765:C:/StellarisWare/utils\softuart.c **** 
 766:C:/StellarisWare/utils\softuart.c ****     //
 767:C:/StellarisWare/utils\softuart.c ****     // Determine the number of characters in the receive buffer.
 768:C:/StellarisWare/utils\softuart.c ****     //
 769:C:/StellarisWare/utils\softuart.c ****     if(pUART->usRxBufferWrite > pUART->usRxBufferRead)
 784              		.loc 1 769 0
 785 0008 7B68     		ldr	r3, [r7, #4]
 786 000a 1A8C     		ldrh	r2, [r3, #32]
 787 000c 7B68     		ldr	r3, [r7, #4]
 788 000e DB8B     		ldrh	r3, [r3, #30]
 789 0010 9A42     		cmp	r2, r3
 790 0012 07D9     		bls	.L54
 770:C:/StellarisWare/utils\softuart.c ****     {
 771:C:/StellarisWare/utils\softuart.c ****         ulTemp = pUART->usRxBufferWrite - pUART->usRxBufferRead;
 791              		.loc 1 771 0
 792 0014 7B68     		ldr	r3, [r7, #4]
 793 0016 1B8C     		ldrh	r3, [r3, #32]
 794 0018 1A46     		mov	r2, r3
 795 001a 7B68     		ldr	r3, [r7, #4]
 796 001c DB8B     		ldrh	r3, [r3, #30]
 797 001e D31A     		subs	r3, r2, r3
 798 0020 FB60     		str	r3, [r7, #12]
 799 0022 09E0     		b	.L55
 800              	.L54:
 772:C:/StellarisWare/utils\softuart.c ****     }
 773:C:/StellarisWare/utils\softuart.c ****     else
 774:C:/StellarisWare/utils\softuart.c ****     {
 775:C:/StellarisWare/utils\softuart.c ****         ulTemp = (pUART->usRxBufferLen + pUART->usRxBufferWrite -
 801              		.loc 1 775 0
 802 0024 7B68     		ldr	r3, [r7, #4]
 803 0026 9B8B     		ldrh	r3, [r3, #28]
 804 0028 1A46     		mov	r2, r3
 805 002a 7B68     		ldr	r3, [r7, #4]
 806 002c 1B8C     		ldrh	r3, [r3, #32]
 807 002e D218     		adds	r2, r2, r3
 776:C:/StellarisWare/utils\softuart.c ****                   pUART->usRxBufferRead);
 808              		.loc 1 776 0
 809 0030 7B68     		ldr	r3, [r7, #4]
 810 0032 DB8B     		ldrh	r3, [r3, #30]
 775:C:/StellarisWare/utils\softuart.c ****         ulTemp = (pUART->usRxBufferLen + pUART->usRxBufferWrite -
 811              		.loc 1 775 0
 812 0034 D31A     		subs	r3, r2, r3
 813 0036 FB60     		str	r3, [r7, #12]
 814              	.L55:
 777:C:/StellarisWare/utils\softuart.c ****     }
 778:C:/StellarisWare/utils\softuart.c **** 
 779:C:/StellarisWare/utils\softuart.c ****     //
 780:C:/StellarisWare/utils\softuart.c ****     // If the receive buffer fullness just crossed the programmed level,
 781:C:/StellarisWare/utils\softuart.c ****     // generate a receive "interrupt".
 782:C:/StellarisWare/utils\softuart.c ****     //
 783:C:/StellarisWare/utils\softuart.c ****     if(ulTemp == pUART->usRxBufferLevel)
 815              		.loc 1 783 0
 816 0038 7B68     		ldr	r3, [r7, #4]
 817 003a 5B8C     		ldrh	r3, [r3, #34]
 818 003c 1A46     		mov	r2, r3
 819 003e FB68     		ldr	r3, [r7, #12]
 820 0040 9A42     		cmp	r2, r3
 821 0042 06D1     		bne	.L53
 784:C:/StellarisWare/utils\softuart.c ****     {
 785:C:/StellarisWare/utils\softuart.c ****         pUART->usIntStatus |= SOFTUART_INT_RX;
 822              		.loc 1 785 0
 823 0044 7B68     		ldr	r3, [r7, #4]
 824 0046 9B8C     		ldrh	r3, [r3, #36]
 825 0048 43F01003 		orr	r3, r3, #16
 826 004c 9AB2     		uxth	r2, r3
 827 004e 7B68     		ldr	r3, [r7, #4]
 828 0050 9A84     		strh	r2, [r3, #36]	@ movhi
 829              	.L53:
 786:C:/StellarisWare/utils\softuart.c ****     }
 787:C:/StellarisWare/utils\softuart.c **** }
 830              		.loc 1 787 0
 831 0052 07F11407 		add	r7, r7, #20
 832 0056 BD46     		mov	sp, r7
 833 0058 80BC     		pop	{r7}
 834 005a 7047     		bx	lr
 835              		.cfi_endproc
 836              	.LFE3:
 838              		.section	.text.SoftUARTRxTick,"ax",%progbits
 839              		.align	2
 840              		.global	SoftUARTRxTick
 841              		.thumb
 842              		.thumb_func
 844              	SoftUARTRxTick:
 845              	.LFB4:
 788:C:/StellarisWare/utils\softuart.c **** 
 789:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 790:C:/StellarisWare/utils\softuart.c **** //
 791:C:/StellarisWare/utils\softuart.c **** //! Performs the periodic update of the SoftUART receiver.
 792:C:/StellarisWare/utils\softuart.c **** //!
 793:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
 794:C:/StellarisWare/utils\softuart.c **** //! \param bEdgeInt should be \b true if this function is being called because
 795:C:/StellarisWare/utils\softuart.c **** //! of a GPIO edge interrupt and \b false if it is being called because of a
 796:C:/StellarisWare/utils\softuart.c **** //! timer interrupt.
 797:C:/StellarisWare/utils\softuart.c **** //!
 798:C:/StellarisWare/utils\softuart.c **** //! This function performs the periodic, time-based updates to the SoftUART
 799:C:/StellarisWare/utils\softuart.c **** //! receiver.  The reception of data to the SoftUART is performed by the state
 800:C:/StellarisWare/utils\softuart.c **** //! machine in this function.
 801:C:/StellarisWare/utils\softuart.c **** //!
 802:C:/StellarisWare/utils\softuart.c **** //! This function must be called by the GPIO interrupt handler, and then
 803:C:/StellarisWare/utils\softuart.c **** //! periodically at the desired SoftUART baud rate.  For example, to run the
 804:C:/StellarisWare/utils\softuart.c **** //! SoftUART at 115,200 baud, this function must be called at a 115,200 Hz
 805:C:/StellarisWare/utils\softuart.c **** //! rate.
 806:C:/StellarisWare/utils\softuart.c **** //!
 807:C:/StellarisWare/utils\softuart.c **** //! \return Returns \b SOFTUART_RXTIMER_NOP if the receive timer should
 808:C:/StellarisWare/utils\softuart.c **** //! continue to operate or \b SOFTUART_RXTIMER_END if it should be stopped.
 809:C:/StellarisWare/utils\softuart.c **** //
 810:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
 811:C:/StellarisWare/utils\softuart.c **** unsigned long
 812:C:/StellarisWare/utils\softuart.c **** SoftUARTRxTick(tSoftUART *pUART, tBoolean bEdgeInt)
 813:C:/StellarisWare/utils\softuart.c **** {
 846              		.loc 1 813 0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 24
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850 0000 80B5     		push	{r7, lr}
 851              	.LCFI12:
 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 14, -4
 854              		.cfi_offset 7, -8
 855 0002 86B0     		sub	sp, sp, #24
 856              	.LCFI13:
 857              		.cfi_def_cfa_offset 32
 858 0004 00AF     		add	r7, sp, #0
 859              	.LCFI14:
 860              		.cfi_def_cfa_register 7
 861 0006 7860     		str	r0, [r7, #4]
 862 0008 0B46     		mov	r3, r1
 863 000a FB70     		strb	r3, [r7, #3]
 814:C:/StellarisWare/utils\softuart.c ****     unsigned long ulPinState, ulTemp, ulRet;
 815:C:/StellarisWare/utils\softuart.c **** 
 816:C:/StellarisWare/utils\softuart.c ****     //
 817:C:/StellarisWare/utils\softuart.c ****     // Read the current state of the Rx data line.
 818:C:/StellarisWare/utils\softuart.c ****     //
 819:C:/StellarisWare/utils\softuart.c ****     ulPinState = MAP_GPIOPinRead(pUART->ulRxGPIOPort, pUART->ucRxPin);
 864              		.loc 1 819 0
 865 000c 7B68     		ldr	r3, [r7, #4]
 866 000e 9A68     		ldr	r2, [r3, #8]
 867 0010 7B68     		ldr	r3, [r7, #4]
 868 0012 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 869 0016 1046     		mov	r0, r2
 870 0018 1946     		mov	r1, r3
 871 001a FFF7FEFF 		bl	GPIOPinRead
 872 001e 0346     		mov	r3, r0
 873 0020 FB60     		str	r3, [r7, #12]
 820:C:/StellarisWare/utils\softuart.c **** 
 821:C:/StellarisWare/utils\softuart.c ****     //
 822:C:/StellarisWare/utils\softuart.c ****     // The default return code inidicates that the receive timer does not need
 823:C:/StellarisWare/utils\softuart.c ****     // to be stopped.
 824:C:/StellarisWare/utils\softuart.c ****     //
 825:C:/StellarisWare/utils\softuart.c ****     ulRet = SOFTUART_RXTIMER_NOP;
 874              		.loc 1 825 0
 875 0022 4FF00003 		mov	r3, #0
 876 0026 3B61     		str	r3, [r7, #16]
 826:C:/StellarisWare/utils\softuart.c **** 
 827:C:/StellarisWare/utils\softuart.c ****     //
 828:C:/StellarisWare/utils\softuart.c ****     // See if this is an edge interrupt while delaying for the receive timeout
 829:C:/StellarisWare/utils\softuart.c ****     // interrupt.
 830:C:/StellarisWare/utils\softuart.c ****     //
 831:C:/StellarisWare/utils\softuart.c ****     if(bEdgeInt && (pUART->ucRxState == SOFTUART_RXSTATE_DELAY))
 877              		.loc 1 831 0
 878 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 879 002a 002B     		cmp	r3, #0
 880 002c 09D0     		beq	.L58
 881              		.loc 1 831 0 is_stmt 0 discriminator 1
 882 002e 7B68     		ldr	r3, [r7, #4]
 883 0030 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 884 0034 0D2B     		cmp	r3, #13
 885 0036 04D1     		bne	.L58
 832:C:/StellarisWare/utils\softuart.c ****     {
 833:C:/StellarisWare/utils\softuart.c ****         //
 834:C:/StellarisWare/utils\softuart.c ****         // The receive timeout has been cancelled since the next character has
 835:C:/StellarisWare/utils\softuart.c ****         // started, so go to the idle state.
 836:C:/StellarisWare/utils\softuart.c ****         //
 837:C:/StellarisWare/utils\softuart.c ****         pUART->ucRxState = SOFTUART_RXSTATE_IDLE;
 886              		.loc 1 837 0 is_stmt 1
 887 0038 7B68     		ldr	r3, [r7, #4]
 888 003a 4FF00802 		mov	r2, #8
 889 003e 83F82F20 		strb	r2, [r3, #47]
 890              	.L58:
 838:C:/StellarisWare/utils\softuart.c ****     }
 839:C:/StellarisWare/utils\softuart.c **** 
 840:C:/StellarisWare/utils\softuart.c ****     //
 841:C:/StellarisWare/utils\softuart.c ****     // Determine the current state of the state machine.
 842:C:/StellarisWare/utils\softuart.c ****     //
 843:C:/StellarisWare/utils\softuart.c ****     switch(pUART->ucRxState)
 891              		.loc 1 843 0
 892 0042 7B68     		ldr	r3, [r7, #4]
 893 0044 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 894 0048 0D2B     		cmp	r3, #13
 895 004a 00F2C282 		bhi	.L104
 896 004e 01A2     		adr	r2, .L68
 897 0050 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 898              		.align	2
 899              	.L68:
 900 0054 E3000000 		.word	.L60+1
 901 0058 E3000000 		.word	.L60+1
 902 005c E3000000 		.word	.L60+1
 903 0060 E3000000 		.word	.L60+1
 904 0064 33010000 		.word	.L61+1
 905 0068 33010000 		.word	.L61+1
 906 006c 33010000 		.word	.L61+1
 907 0070 33010000 		.word	.L61+1
 908 0074 8D000000 		.word	.L62+1
 909 0078 D9010000 		.word	.L63+1
 910 007c B1020000 		.word	.L64+1
 911 0080 E9020000 		.word	.L65+1
 912 0084 4F040000 		.word	.L66+1
 913 0088 93050000 		.word	.L67+1
 914              	.L62:
 844:C:/StellarisWare/utils\softuart.c ****     {
 845:C:/StellarisWare/utils\softuart.c ****         //
 846:C:/StellarisWare/utils\softuart.c ****         // The state machine is idle.
 847:C:/StellarisWare/utils\softuart.c ****         //
 848:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_IDLE:
 849:C:/StellarisWare/utils\softuart.c ****         {
 850:C:/StellarisWare/utils\softuart.c ****             //
 851:C:/StellarisWare/utils\softuart.c ****             // The falling edge of the start bit was just sampled, so disable
 852:C:/StellarisWare/utils\softuart.c ****             // the GPIO edge interrupt since the remainder of the character
 853:C:/StellarisWare/utils\softuart.c ****             // will be read using a timer tick.
 854:C:/StellarisWare/utils\softuart.c ****             //
 855:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntClear(pUART->ulRxGPIOPort, pUART->ucRxPin);
 915              		.loc 1 855 0
 916 008c 7B68     		ldr	r3, [r7, #4]
 917 008e 9A68     		ldr	r2, [r3, #8]
 918 0090 7B68     		ldr	r3, [r7, #4]
 919 0092 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 920 0096 1046     		mov	r0, r2
 921 0098 1946     		mov	r1, r3
 922 009a FFF7FEFF 		bl	GPIOPinIntClear
 856:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntDisable(pUART->ulRxGPIOPort, pUART->ucRxPin);
 923              		.loc 1 856 0
 924 009e 7B68     		ldr	r3, [r7, #4]
 925 00a0 9A68     		ldr	r2, [r3, #8]
 926 00a2 7B68     		ldr	r3, [r7, #4]
 927 00a4 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 928 00a8 1046     		mov	r0, r2
 929 00aa 1946     		mov	r1, r3
 930 00ac FFF7FEFF 		bl	GPIOPinIntDisable
 857:C:/StellarisWare/utils\softuart.c **** 
 858:C:/StellarisWare/utils\softuart.c ****             //
 859:C:/StellarisWare/utils\softuart.c ****             // Clear the receive data buffer.
 860:C:/StellarisWare/utils\softuart.c ****             //
 861:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxData = 0;
 931              		.loc 1 861 0
 932 00b0 7B68     		ldr	r3, [r7, #4]
 933 00b2 4FF00002 		mov	r2, #0
 934 00b6 83F83020 		strb	r2, [r3, #48]
 862:C:/StellarisWare/utils\softuart.c **** 
 863:C:/StellarisWare/utils\softuart.c ****             //
 864:C:/StellarisWare/utils\softuart.c ****             // Clear all reception errors other than overrun (which is cleared
 865:C:/StellarisWare/utils\softuart.c ****             // only when the first character after the overrun is written into
 866:C:/StellarisWare/utils\softuart.c ****             // the receive buffer), and set the break error (which is cleared
 867:C:/StellarisWare/utils\softuart.c ****             // if any non-zero bits are read during this character).
 868:C:/StellarisWare/utils\softuart.c ****             //
 869:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxFlags = ((pUART->ucRxFlags & SOFTUART_RXFLAG_OE) |
 935              		.loc 1 869 0
 936 00ba 7B68     		ldr	r3, [r7, #4]
 937 00bc 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 938 00c0 DBB2     		uxtb	r3, r3
 939 00c2 03F00803 		and	r3, r3, #8
 940 00c6 DBB2     		uxtb	r3, r3
 941 00c8 43F00403 		orr	r3, r3, #4
 942 00cc DBB2     		uxtb	r3, r3
 943 00ce DAB2     		uxtb	r2, r3
 944 00d0 7B68     		ldr	r3, [r7, #4]
 945 00d2 83F83120 		strb	r2, [r3, #49]
 870:C:/StellarisWare/utils\softuart.c ****                                 SOFTUART_RXFLAG_BE);
 871:C:/StellarisWare/utils\softuart.c **** 
 872:C:/StellarisWare/utils\softuart.c ****             //
 873:C:/StellarisWare/utils\softuart.c ****             // Advance to the first data bit state.
 874:C:/StellarisWare/utils\softuart.c ****             //
 875:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxState = SOFTUART_RXSTATE_DATA_0;
 946              		.loc 1 875 0
 947 00d6 7B68     		ldr	r3, [r7, #4]
 948 00d8 4FF00002 		mov	r2, #0
 949 00dc 83F82F20 		strb	r2, [r3, #47]
 876:C:/StellarisWare/utils\softuart.c **** 
 877:C:/StellarisWare/utils\softuart.c ****             //
 878:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 879:C:/StellarisWare/utils\softuart.c ****             //
 880:C:/StellarisWare/utils\softuart.c ****             break;
 950              		.loc 1 880 0
 951 00e0 72E2     		b	.L59
 952              	.L60:
 881:C:/StellarisWare/utils\softuart.c ****         }
 882:C:/StellarisWare/utils\softuart.c **** 
 883:C:/StellarisWare/utils\softuart.c ****         //
 884:C:/StellarisWare/utils\softuart.c ****         // In each of these states, a bit of the data byte is read.  This
 885:C:/StellarisWare/utils\softuart.c ****         // depends upon RXSTATE_DATA_n and RXSTATE_DATA_(n+1) being
 886:C:/StellarisWare/utils\softuart.c ****         // consecutively numbered.
 887:C:/StellarisWare/utils\softuart.c ****         //
 888:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_0:
 889:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_1:
 890:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_2:
 891:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_3:
 892:C:/StellarisWare/utils\softuart.c ****         {
 893:C:/StellarisWare/utils\softuart.c ****             //
 894:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is high.
 895:C:/StellarisWare/utils\softuart.c ****             //
 896:C:/StellarisWare/utils\softuart.c ****             if(ulPinState != 0)
 953              		.loc 1 896 0
 954 00e2 FB68     		ldr	r3, [r7, #12]
 955 00e4 002B     		cmp	r3, #0
 956 00e6 1AD0     		beq	.L69
 897:C:/StellarisWare/utils\softuart.c ****             {
 898:C:/StellarisWare/utils\softuart.c ****                 //
 899:C:/StellarisWare/utils\softuart.c ****                 // Set this bit of the received character.
 900:C:/StellarisWare/utils\softuart.c ****                 //
 901:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxData |= 1 << pUART->ucRxState;
 957              		.loc 1 901 0
 958 00e8 7B68     		ldr	r3, [r7, #4]
 959 00ea 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 960 00ee DAB2     		uxtb	r2, r3
 961 00f0 7B68     		ldr	r3, [r7, #4]
 962 00f2 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 963 00f6 4FF00101 		mov	r1, #1
 964 00fa 01FA03F3 		lsl	r3, r1, r3
 965 00fe DBB2     		uxtb	r3, r3
 966 0100 1343     		orrs	r3, r3, r2
 967 0102 DBB2     		uxtb	r3, r3
 968 0104 DAB2     		uxtb	r2, r3
 969 0106 7B68     		ldr	r3, [r7, #4]
 970 0108 83F83020 		strb	r2, [r3, #48]
 902:C:/StellarisWare/utils\softuart.c **** 
 903:C:/StellarisWare/utils\softuart.c ****                 //
 904:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
 905:C:/StellarisWare/utils\softuart.c ****                 //
 906:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 971              		.loc 1 906 0
 972 010c 7B68     		ldr	r3, [r7, #4]
 973 010e 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 974 0112 23F00403 		bic	r3, r3, #4
 975 0116 DAB2     		uxtb	r2, r3
 976 0118 7B68     		ldr	r3, [r7, #4]
 977 011a 83F83120 		strb	r2, [r3, #49]
 978              	.L69:
 907:C:/StellarisWare/utils\softuart.c ****             }
 908:C:/StellarisWare/utils\softuart.c **** 
 909:C:/StellarisWare/utils\softuart.c ****             //
 910:C:/StellarisWare/utils\softuart.c ****             // Advance to the next state.
 911:C:/StellarisWare/utils\softuart.c ****             //
 912:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxState++;
 979              		.loc 1 912 0
 980 011e 7B68     		ldr	r3, [r7, #4]
 981 0120 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 982 0124 03F10103 		add	r3, r3, #1
 983 0128 DAB2     		uxtb	r2, r3
 984 012a 7B68     		ldr	r3, [r7, #4]
 985 012c 83F82F20 		strb	r2, [r3, #47]
 913:C:/StellarisWare/utils\softuart.c **** 
 914:C:/StellarisWare/utils\softuart.c ****             //
 915:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
 916:C:/StellarisWare/utils\softuart.c ****             //
 917:C:/StellarisWare/utils\softuart.c ****             break;
 986              		.loc 1 917 0
 987 0130 4AE2     		b	.L59
 988              	.L61:
 918:C:/StellarisWare/utils\softuart.c ****         }
 919:C:/StellarisWare/utils\softuart.c **** 
 920:C:/StellarisWare/utils\softuart.c ****         //
 921:C:/StellarisWare/utils\softuart.c ****         // In each of these states, a bit of the data byte is read.
 922:C:/StellarisWare/utils\softuart.c ****         // Additionally, based on the configuration of the SoftUART, this bit
 923:C:/StellarisWare/utils\softuart.c ****         // might be the last bit of the data byte.  This depends upon
 924:C:/StellarisWare/utils\softuart.c ****         // RXSTATE_DATA_n and RXSTATE_DATA_(n+1) being consecutively numbered.
 925:C:/StellarisWare/utils\softuart.c ****         //
 926:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_4:
 927:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_5:
 928:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_6:
 929:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DATA_7:
 930:C:/StellarisWare/utils\softuart.c ****         {
 931:C:/StellarisWare/utils\softuart.c ****             //
 932:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is high.
 933:C:/StellarisWare/utils\softuart.c ****             //
 934:C:/StellarisWare/utils\softuart.c ****             if(ulPinState != 0)
 989              		.loc 1 934 0
 990 0132 FB68     		ldr	r3, [r7, #12]
 991 0134 002B     		cmp	r3, #0
 992 0136 1AD0     		beq	.L70
 935:C:/StellarisWare/utils\softuart.c ****             {
 936:C:/StellarisWare/utils\softuart.c ****                 //
 937:C:/StellarisWare/utils\softuart.c ****                 // Set this bit of the received character.
 938:C:/StellarisWare/utils\softuart.c ****                 //
 939:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxData |= 1 << pUART->ucRxState;
 993              		.loc 1 939 0
 994 0138 7B68     		ldr	r3, [r7, #4]
 995 013a 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 996 013e DAB2     		uxtb	r2, r3
 997 0140 7B68     		ldr	r3, [r7, #4]
 998 0142 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 999 0146 4FF00101 		mov	r1, #1
 1000 014a 01FA03F3 		lsl	r3, r1, r3
 1001 014e DBB2     		uxtb	r3, r3
 1002 0150 1343     		orrs	r3, r3, r2
 1003 0152 DBB2     		uxtb	r3, r3
 1004 0154 DAB2     		uxtb	r2, r3
 1005 0156 7B68     		ldr	r3, [r7, #4]
 1006 0158 83F83020 		strb	r2, [r3, #48]
 940:C:/StellarisWare/utils\softuart.c **** 
 941:C:/StellarisWare/utils\softuart.c ****                 //
 942:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
 943:C:/StellarisWare/utils\softuart.c ****                 //
 944:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 1007              		.loc 1 944 0
 1008 015c 7B68     		ldr	r3, [r7, #4]
 1009 015e 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1010 0162 23F00403 		bic	r3, r3, #4
 1011 0166 DAB2     		uxtb	r2, r3
 1012 0168 7B68     		ldr	r3, [r7, #4]
 1013 016a 83F83120 		strb	r2, [r3, #49]
 1014              	.L70:
 945:C:/StellarisWare/utils\softuart.c ****             }
 946:C:/StellarisWare/utils\softuart.c **** 
 947:C:/StellarisWare/utils\softuart.c ****             //
 948:C:/StellarisWare/utils\softuart.c ****             // See if the bit that was just transferred is the last bit of the
 949:C:/StellarisWare/utils\softuart.c ****             // data byte (based on the configuration of the SoftUART).
 950:C:/StellarisWare/utils\softuart.c ****             //
 951:C:/StellarisWare/utils\softuart.c ****             if(((pUART->usConfig & SOFTUART_CONFIG_WLEN_MASK) >>
 1015              		.loc 1 951 0
 1016 016e 7B68     		ldr	r3, [r7, #4]
 1017 0170 1B8D     		ldrh	r3, [r3, #40]
 1018 0172 03F06003 		and	r3, r3, #96
 1019 0176 4FEA6312 		asr	r2, r3, #5
 952:C:/StellarisWare/utils\softuart.c ****                 SOFTUART_CONFIG_WLEN_S) ==
 953:C:/StellarisWare/utils\softuart.c ****                (pUART->ucRxState - SOFTUART_RXSTATE_DATA_4))
 1020              		.loc 1 953 0
 1021 017a 7B68     		ldr	r3, [r7, #4]
 1022 017c 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 1023 0180 A3F10403 		sub	r3, r3, #4
 951:C:/StellarisWare/utils\softuart.c ****             if(((pUART->usConfig & SOFTUART_CONFIG_WLEN_MASK) >>
 1024              		.loc 1 951 0
 1025 0184 9A42     		cmp	r2, r3
 1026 0186 1DD1     		bne	.L71
 954:C:/StellarisWare/utils\softuart.c ****             {
 955:C:/StellarisWare/utils\softuart.c ****                 //
 956:C:/StellarisWare/utils\softuart.c ****                 // See if parity is enabled.
 957:C:/StellarisWare/utils\softuart.c ****                 //
 958:C:/StellarisWare/utils\softuart.c ****                 if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) !=
 1027              		.loc 1 958 0
 1028 0188 7B68     		ldr	r3, [r7, #4]
 1029 018a 1B8D     		ldrh	r3, [r3, #40]
 1030 018c 03F08603 		and	r3, r3, #134
 1031 0190 002B     		cmp	r3, #0
 1032 0192 05D0     		beq	.L72
 959:C:/StellarisWare/utils\softuart.c ****                    SOFTUART_CONFIG_PAR_NONE)
 960:C:/StellarisWare/utils\softuart.c ****                 {
 961:C:/StellarisWare/utils\softuart.c ****                     //
 962:C:/StellarisWare/utils\softuart.c ****                     // Advance to the parity state.
 963:C:/StellarisWare/utils\softuart.c ****                     //
 964:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxState = SOFTUART_RXSTATE_PARITY;
 1033              		.loc 1 964 0
 1034 0194 7B68     		ldr	r3, [r7, #4]
 1035 0196 4FF00902 		mov	r2, #9
 1036 019a 83F82F20 		strb	r2, [r3, #47]
 965:C:/StellarisWare/utils\softuart.c ****                 }
 966:C:/StellarisWare/utils\softuart.c **** 
 967:C:/StellarisWare/utils\softuart.c ****                 //
 968:C:/StellarisWare/utils\softuart.c ****                 // Otherwise, see if there are one or two stop bits.
 969:C:/StellarisWare/utils\softuart.c ****                 //
 970:C:/StellarisWare/utils\softuart.c ****                 else if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 971:C:/StellarisWare/utils\softuart.c ****                         SOFTUART_CONFIG_STOP_TWO)
 972:C:/StellarisWare/utils\softuart.c ****                 {
 973:C:/StellarisWare/utils\softuart.c ****                     //
 974:C:/StellarisWare/utils\softuart.c ****                     // Advance to the two stop bits state.
 975:C:/StellarisWare/utils\softuart.c ****                     //
 976:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxState = SOFTUART_RXSTATE_STOP_0;
 977:C:/StellarisWare/utils\softuart.c ****                 }
 978:C:/StellarisWare/utils\softuart.c **** 
 979:C:/StellarisWare/utils\softuart.c ****                 //
 980:C:/StellarisWare/utils\softuart.c ****                 // Otherwise, advance to the one stop bit state.
 981:C:/StellarisWare/utils\softuart.c ****                 //
 982:C:/StellarisWare/utils\softuart.c ****                 else
 983:C:/StellarisWare/utils\softuart.c ****                 {
 984:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxState = SOFTUART_RXSTATE_STOP_1;
 985:C:/StellarisWare/utils\softuart.c ****                 }
 986:C:/StellarisWare/utils\softuart.c ****             }
 987:C:/StellarisWare/utils\softuart.c **** 
 988:C:/StellarisWare/utils\softuart.c ****             //
 989:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there are more bits to receive.
 990:C:/StellarisWare/utils\softuart.c ****             //
 991:C:/StellarisWare/utils\softuart.c ****             else
 992:C:/StellarisWare/utils\softuart.c ****             {
 993:C:/StellarisWare/utils\softuart.c ****                 //
 994:C:/StellarisWare/utils\softuart.c ****                 // Advance to the next state.
 995:C:/StellarisWare/utils\softuart.c ****                 //
 996:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState++;
 997:C:/StellarisWare/utils\softuart.c ****             }
 998:C:/StellarisWare/utils\softuart.c **** 
 999:C:/StellarisWare/utils\softuart.c ****             //
1000:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1001:C:/StellarisWare/utils\softuart.c ****             //
1002:C:/StellarisWare/utils\softuart.c ****             break;
 1037              		.loc 1 1002 0
 1038 019e 13E2     		b	.L59
 1039              	.L72:
 970:C:/StellarisWare/utils\softuart.c ****                 else if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 1040              		.loc 1 970 0
 1041 01a0 7B68     		ldr	r3, [r7, #4]
 1042 01a2 1B8D     		ldrh	r3, [r3, #40]
 1043 01a4 03F00803 		and	r3, r3, #8
 1044 01a8 002B     		cmp	r3, #0
 1045 01aa 05D0     		beq	.L74
 976:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxState = SOFTUART_RXSTATE_STOP_0;
 1046              		.loc 1 976 0
 1047 01ac 7B68     		ldr	r3, [r7, #4]
 1048 01ae 4FF00A02 		mov	r2, #10
 1049 01b2 83F82F20 		strb	r2, [r3, #47]
 1050              		.loc 1 1002 0
 1051 01b6 07E2     		b	.L59
 1052              	.L74:
 984:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxState = SOFTUART_RXSTATE_STOP_1;
 1053              		.loc 1 984 0
 1054 01b8 7B68     		ldr	r3, [r7, #4]
 1055 01ba 4FF00B02 		mov	r2, #11
 1056 01be 83F82F20 		strb	r2, [r3, #47]
 1057              		.loc 1 1002 0
 1058 01c2 01E2     		b	.L59
 1059              	.L71:
 996:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState++;
 1060              		.loc 1 996 0
 1061 01c4 7B68     		ldr	r3, [r7, #4]
 1062 01c6 93F82F30 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 1063 01ca 03F10103 		add	r3, r3, #1
 1064 01ce DAB2     		uxtb	r2, r3
 1065 01d0 7B68     		ldr	r3, [r7, #4]
 1066 01d2 83F82F20 		strb	r2, [r3, #47]
 1067              		.loc 1 1002 0
 1068 01d6 F7E1     		b	.L59
 1069              	.L63:
1003:C:/StellarisWare/utils\softuart.c ****         }
1004:C:/StellarisWare/utils\softuart.c **** 
1005:C:/StellarisWare/utils\softuart.c ****         //
1006:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the parity bit state.
1007:C:/StellarisWare/utils\softuart.c ****         //
1008:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_PARITY:
1009:C:/StellarisWare/utils\softuart.c ****         {
1010:C:/StellarisWare/utils\softuart.c ****             //
1011:C:/StellarisWare/utils\softuart.c ****             // See if the parity is set to one.
1012:C:/StellarisWare/utils\softuart.c ****             //
1013:C:/StellarisWare/utils\softuart.c ****             if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 1070              		.loc 1 1013 0
 1071 01d8 7B68     		ldr	r3, [r7, #4]
 1072 01da 1B8D     		ldrh	r3, [r3, #40]
 1073 01dc 03F08603 		and	r3, r3, #134
 1074 01e0 822B     		cmp	r3, #130
 1075 01e2 04D1     		bne	.L75
1014:C:/StellarisWare/utils\softuart.c ****                SOFTUART_CONFIG_PAR_ONE)
1015:C:/StellarisWare/utils\softuart.c ****             {
1016:C:/StellarisWare/utils\softuart.c ****                 //
1017:C:/StellarisWare/utils\softuart.c ****                 // Set the expected parity to one.
1018:C:/StellarisWare/utils\softuart.c ****                 //
1019:C:/StellarisWare/utils\softuart.c ****                 ulTemp = pUART->ucRxPin;
 1076              		.loc 1 1019 0
 1077 01e4 7B68     		ldr	r3, [r7, #4]
 1078 01e6 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1079 01ea 7B61     		str	r3, [r7, #20]
 1080 01ec 35E0     		b	.L76
 1081              	.L75:
1020:C:/StellarisWare/utils\softuart.c ****             }
1021:C:/StellarisWare/utils\softuart.c **** 
1022:C:/StellarisWare/utils\softuart.c ****             //
1023:C:/StellarisWare/utils\softuart.c ****             // Otherwise, see if the parity is set to zero.
1024:C:/StellarisWare/utils\softuart.c ****             //
1025:C:/StellarisWare/utils\softuart.c ****             else if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 1082              		.loc 1 1025 0
 1083 01ee 7B68     		ldr	r3, [r7, #4]
 1084 01f0 1B8D     		ldrh	r3, [r3, #40]
 1085 01f2 03F08603 		and	r3, r3, #134
 1086 01f6 862B     		cmp	r3, #134
 1087 01f8 03D1     		bne	.L77
1026:C:/StellarisWare/utils\softuart.c ****                     SOFTUART_CONFIG_PAR_ZERO)
1027:C:/StellarisWare/utils\softuart.c ****             {
1028:C:/StellarisWare/utils\softuart.c ****                 //
1029:C:/StellarisWare/utils\softuart.c ****                 // Set the expected parity to zero.
1030:C:/StellarisWare/utils\softuart.c ****                 //
1031:C:/StellarisWare/utils\softuart.c ****                 ulTemp = 0;
 1088              		.loc 1 1031 0
 1089 01fa 4FF00003 		mov	r3, #0
 1090 01fe 7B61     		str	r3, [r7, #20]
 1091 0200 2BE0     		b	.L76
 1092              	.L77:
1032:C:/StellarisWare/utils\softuart.c ****             }
1033:C:/StellarisWare/utils\softuart.c **** 
1034:C:/StellarisWare/utils\softuart.c ****             //
1035:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there is either even or odd parity.
1036:C:/StellarisWare/utils\softuart.c ****             //
1037:C:/StellarisWare/utils\softuart.c ****             else
1038:C:/StellarisWare/utils\softuart.c ****             {
1039:C:/StellarisWare/utils\softuart.c ****                 //
1040:C:/StellarisWare/utils\softuart.c ****                 // Find the odd parity for the data byte.
1041:C:/StellarisWare/utils\softuart.c ****                 //
1042:C:/StellarisWare/utils\softuart.c ****                 ulTemp = ((g_pulParityOdd[pUART->ucRxData >> 5] &
 1093              		.loc 1 1042 0
 1094 0202 7B68     		ldr	r3, [r7, #4]
 1095 0204 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1096 0208 4FEA5313 		lsr	r3, r3, #5
 1097 020c DBB2     		uxtb	r3, r3
 1098 020e 1A46     		mov	r2, r3
 1099 0210 40F20003 		movw	r3, #:lower16:g_pulParityOdd
 1100 0214 C0F20003 		movt	r3, #:upper16:g_pulParityOdd
 1101 0218 53F82220 		ldr	r2, [r3, r2, lsl #2]
1043:C:/StellarisWare/utils\softuart.c ****                            (1 << (pUART->ucRxData & 31))) ?
 1102              		.loc 1 1043 0
 1103 021c 7B68     		ldr	r3, [r7, #4]
 1104 021e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1105 0222 03F01F03 		and	r3, r3, #31
 1106 0226 4FF00101 		mov	r1, #1
 1107 022a 01FA03F3 		lsl	r3, r1, r3
1042:C:/StellarisWare/utils\softuart.c ****                 ulTemp = ((g_pulParityOdd[pUART->ucRxData >> 5] &
 1108              		.loc 1 1042 0
 1109 022e 1340     		ands	r3, r3, r2
 1110 0230 002B     		cmp	r3, #0
 1111 0232 03D0     		beq	.L78
1044:C:/StellarisWare/utils\softuart.c ****                           pUART->ucRxPin : 0);
 1112              		.loc 1 1044 0
 1113 0234 7B68     		ldr	r3, [r7, #4]
 1114 0236 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1115 023a 01E0     		b	.L79
 1116              	.L78:
1042:C:/StellarisWare/utils\softuart.c ****                 ulTemp = ((g_pulParityOdd[pUART->ucRxData >> 5] &
 1117              		.loc 1 1042 0 discriminator 1
 1118 023c 4FF00003 		mov	r3, #0
 1119              	.L79:
1042:C:/StellarisWare/utils\softuart.c ****                 ulTemp = ((g_pulParityOdd[pUART->ucRxData >> 5] &
 1120              		.loc 1 1042 0 is_stmt 0 discriminator 2
 1121 0240 7B61     		str	r3, [r7, #20]
1045:C:/StellarisWare/utils\softuart.c **** 
1046:C:/StellarisWare/utils\softuart.c ****                 //
1047:C:/StellarisWare/utils\softuart.c ****                 // If the parity is set to even, then invert the parity just
1048:C:/StellarisWare/utils\softuart.c ****                 // computed (making it even parity).
1049:C:/StellarisWare/utils\softuart.c ****                 //
1050:C:/StellarisWare/utils\softuart.c ****                 if((pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) ==
 1122              		.loc 1 1050 0 is_stmt 1 discriminator 2
 1123 0242 7B68     		ldr	r3, [r7, #4]
 1124 0244 1B8D     		ldrh	r3, [r3, #40]
 1125 0246 03F08603 		and	r3, r3, #134
 1126 024a 062B     		cmp	r3, #6
 1127 024c 05D1     		bne	.L76
1051:C:/StellarisWare/utils\softuart.c ****                    SOFTUART_CONFIG_PAR_EVEN)
1052:C:/StellarisWare/utils\softuart.c ****                 {
1053:C:/StellarisWare/utils\softuart.c ****                     ulTemp ^= pUART->ucRxPin;
 1128              		.loc 1 1053 0
 1129 024e 7B68     		ldr	r3, [r7, #4]
 1130 0250 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1131 0254 7A69     		ldr	r2, [r7, #20]
 1132 0256 5340     		eors	r3, r3, r2
 1133 0258 7B61     		str	r3, [r7, #20]
 1134              	.L76:
1054:C:/StellarisWare/utils\softuart.c ****                 }
1055:C:/StellarisWare/utils\softuart.c ****             }
1056:C:/StellarisWare/utils\softuart.c **** 
1057:C:/StellarisWare/utils\softuart.c ****             //
1058:C:/StellarisWare/utils\softuart.c ****             // See if the pin state matches the expected parity.
1059:C:/StellarisWare/utils\softuart.c ****             //
1060:C:/StellarisWare/utils\softuart.c ****             if(ulPinState != ulTemp)
 1135              		.loc 1 1060 0
 1136 025a FA68     		ldr	r2, [r7, #12]
 1137 025c 7B69     		ldr	r3, [r7, #20]
 1138 025e 9A42     		cmp	r2, r3
 1139 0260 08D0     		beq	.L80
1061:C:/StellarisWare/utils\softuart.c ****             {
1062:C:/StellarisWare/utils\softuart.c ****                 //
1063:C:/StellarisWare/utils\softuart.c ****                 // The parity does not match, so set the parity error flag.
1064:C:/StellarisWare/utils\softuart.c ****                 //
1065:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags |= SOFTUART_RXFLAG_PE;
 1140              		.loc 1 1065 0
 1141 0262 7B68     		ldr	r3, [r7, #4]
 1142 0264 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1143 0268 43F00203 		orr	r3, r3, #2
 1144 026c DAB2     		uxtb	r2, r3
 1145 026e 7B68     		ldr	r3, [r7, #4]
 1146 0270 83F83120 		strb	r2, [r3, #49]
 1147              	.L80:
1066:C:/StellarisWare/utils\softuart.c ****             }
1067:C:/StellarisWare/utils\softuart.c **** 
1068:C:/StellarisWare/utils\softuart.c ****             //
1069:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is high.
1070:C:/StellarisWare/utils\softuart.c ****             //
1071:C:/StellarisWare/utils\softuart.c ****             if(ulPinState != 0)
 1148              		.loc 1 1071 0
 1149 0274 FB68     		ldr	r3, [r7, #12]
 1150 0276 002B     		cmp	r3, #0
 1151 0278 08D0     		beq	.L81
1072:C:/StellarisWare/utils\softuart.c ****             {
1073:C:/StellarisWare/utils\softuart.c ****                 //
1074:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
1075:C:/StellarisWare/utils\softuart.c ****                 //
1076:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 1152              		.loc 1 1076 0
 1153 027a 7B68     		ldr	r3, [r7, #4]
 1154 027c 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1155 0280 23F00403 		bic	r3, r3, #4
 1156 0284 DAB2     		uxtb	r2, r3
 1157 0286 7B68     		ldr	r3, [r7, #4]
 1158 0288 83F83120 		strb	r2, [r3, #49]
 1159              	.L81:
1077:C:/StellarisWare/utils\softuart.c ****             }
1078:C:/StellarisWare/utils\softuart.c **** 
1079:C:/StellarisWare/utils\softuart.c ****             //
1080:C:/StellarisWare/utils\softuart.c ****             // See if there are one or two stop bits.
1081:C:/StellarisWare/utils\softuart.c ****             //
1082:C:/StellarisWare/utils\softuart.c ****             if((pUART->usConfig & SOFTUART_CONFIG_STOP_MASK) ==
 1160              		.loc 1 1082 0
 1161 028c 7B68     		ldr	r3, [r7, #4]
 1162 028e 1B8D     		ldrh	r3, [r3, #40]
 1163 0290 03F00803 		and	r3, r3, #8
 1164 0294 002B     		cmp	r3, #0
 1165 0296 05D0     		beq	.L82
1083:C:/StellarisWare/utils\softuart.c ****                SOFTUART_CONFIG_STOP_TWO)
1084:C:/StellarisWare/utils\softuart.c ****             {
1085:C:/StellarisWare/utils\softuart.c ****                 //
1086:C:/StellarisWare/utils\softuart.c ****                 // Advance to the two stop bits state.
1087:C:/StellarisWare/utils\softuart.c ****                 //
1088:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState = SOFTUART_RXSTATE_STOP_0;
 1166              		.loc 1 1088 0
 1167 0298 7B68     		ldr	r3, [r7, #4]
 1168 029a 4FF00A02 		mov	r2, #10
 1169 029e 83F82F20 		strb	r2, [r3, #47]
1089:C:/StellarisWare/utils\softuart.c ****             }
1090:C:/StellarisWare/utils\softuart.c ****             else
1091:C:/StellarisWare/utils\softuart.c ****             {
1092:C:/StellarisWare/utils\softuart.c ****                 //
1093:C:/StellarisWare/utils\softuart.c ****                 // Advance to the one stop bit state.
1094:C:/StellarisWare/utils\softuart.c ****                 //
1095:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState = SOFTUART_RXSTATE_STOP_1;
1096:C:/StellarisWare/utils\softuart.c ****             }
1097:C:/StellarisWare/utils\softuart.c **** 
1098:C:/StellarisWare/utils\softuart.c ****             //
1099:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1100:C:/StellarisWare/utils\softuart.c ****             //
1101:C:/StellarisWare/utils\softuart.c ****             break;
 1170              		.loc 1 1101 0
 1171 02a2 91E1     		b	.L59
 1172              	.L82:
1095:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState = SOFTUART_RXSTATE_STOP_1;
 1173              		.loc 1 1095 0
 1174 02a4 7B68     		ldr	r3, [r7, #4]
 1175 02a6 4FF00B02 		mov	r2, #11
 1176 02aa 83F82F20 		strb	r2, [r3, #47]
 1177              		.loc 1 1101 0
 1178 02ae 8BE1     		b	.L59
 1179              	.L64:
1102:C:/StellarisWare/utils\softuart.c ****         }
1103:C:/StellarisWare/utils\softuart.c **** 
1104:C:/StellarisWare/utils\softuart.c ****         //
1105:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the two stop bits state.
1106:C:/StellarisWare/utils\softuart.c ****         //
1107:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_STOP_0:
1108:C:/StellarisWare/utils\softuart.c ****         {
1109:C:/StellarisWare/utils\softuart.c ****             //
1110:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is low.
1111:C:/StellarisWare/utils\softuart.c ****             //
1112:C:/StellarisWare/utils\softuart.c ****             if(ulPinState == 0)
 1180              		.loc 1 1112 0
 1181 02b0 FB68     		ldr	r3, [r7, #12]
 1182 02b2 002B     		cmp	r3, #0
 1183 02b4 09D1     		bne	.L84
1113:C:/StellarisWare/utils\softuart.c ****             {
1114:C:/StellarisWare/utils\softuart.c ****                 //
1115:C:/StellarisWare/utils\softuart.c ****                 // Since the Rx pin is low, there is a framing error.
1116:C:/StellarisWare/utils\softuart.c ****                 //
1117:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags |= SOFTUART_RXFLAG_FE;
 1184              		.loc 1 1117 0
 1185 02b6 7B68     		ldr	r3, [r7, #4]
 1186 02b8 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1187 02bc 43F00103 		orr	r3, r3, #1
 1188 02c0 DAB2     		uxtb	r2, r3
 1189 02c2 7B68     		ldr	r3, [r7, #4]
 1190 02c4 83F83120 		strb	r2, [r3, #49]
 1191 02c8 08E0     		b	.L85
 1192              	.L84:
1118:C:/StellarisWare/utils\softuart.c ****             }
1119:C:/StellarisWare/utils\softuart.c ****             else
1120:C:/StellarisWare/utils\softuart.c ****             {
1121:C:/StellarisWare/utils\softuart.c ****                 //
1122:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
1123:C:/StellarisWare/utils\softuart.c ****                 //
1124:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 1193              		.loc 1 1124 0
 1194 02ca 7B68     		ldr	r3, [r7, #4]
 1195 02cc 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1196 02d0 23F00403 		bic	r3, r3, #4
 1197 02d4 DAB2     		uxtb	r2, r3
 1198 02d6 7B68     		ldr	r3, [r7, #4]
 1199 02d8 83F83120 		strb	r2, [r3, #49]
 1200              	.L85:
1125:C:/StellarisWare/utils\softuart.c ****             }
1126:C:/StellarisWare/utils\softuart.c **** 
1127:C:/StellarisWare/utils\softuart.c ****             //
1128:C:/StellarisWare/utils\softuart.c ****             // Advance to the one stop bit state.
1129:C:/StellarisWare/utils\softuart.c ****             //
1130:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxState = SOFTUART_RXSTATE_STOP_1;
 1201              		.loc 1 1130 0
 1202 02dc 7B68     		ldr	r3, [r7, #4]
 1203 02de 4FF00B02 		mov	r2, #11
 1204 02e2 83F82F20 		strb	r2, [r3, #47]
1131:C:/StellarisWare/utils\softuart.c **** 
1132:C:/StellarisWare/utils\softuart.c ****             //
1133:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1134:C:/StellarisWare/utils\softuart.c ****             //
1135:C:/StellarisWare/utils\softuart.c ****             break;
 1205              		.loc 1 1135 0
 1206 02e6 6FE1     		b	.L59
 1207              	.L65:
1136:C:/StellarisWare/utils\softuart.c ****         }
1137:C:/StellarisWare/utils\softuart.c **** 
1138:C:/StellarisWare/utils\softuart.c ****         //
1139:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the one stop bit state.
1140:C:/StellarisWare/utils\softuart.c ****         //
1141:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_STOP_1:
1142:C:/StellarisWare/utils\softuart.c ****         {
1143:C:/StellarisWare/utils\softuart.c ****             //
1144:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is low.
1145:C:/StellarisWare/utils\softuart.c ****             //
1146:C:/StellarisWare/utils\softuart.c ****             if(ulPinState == 0)
 1208              		.loc 1 1146 0
 1209 02e8 FB68     		ldr	r3, [r7, #12]
 1210 02ea 002B     		cmp	r3, #0
 1211 02ec 09D1     		bne	.L86
1147:C:/StellarisWare/utils\softuart.c ****             {
1148:C:/StellarisWare/utils\softuart.c ****                 //
1149:C:/StellarisWare/utils\softuart.c ****                 // Since the Rx pin is low, there is a framing error.
1150:C:/StellarisWare/utils\softuart.c ****                 //
1151:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags |= SOFTUART_RXFLAG_FE;
 1212              		.loc 1 1151 0
 1213 02ee 7B68     		ldr	r3, [r7, #4]
 1214 02f0 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1215 02f4 43F00103 		orr	r3, r3, #1
 1216 02f8 DAB2     		uxtb	r2, r3
 1217 02fa 7B68     		ldr	r3, [r7, #4]
 1218 02fc 83F83120 		strb	r2, [r3, #49]
 1219 0300 08E0     		b	.L87
 1220              	.L86:
1152:C:/StellarisWare/utils\softuart.c ****             }
1153:C:/StellarisWare/utils\softuart.c ****             else
1154:C:/StellarisWare/utils\softuart.c ****             {
1155:C:/StellarisWare/utils\softuart.c ****                 //
1156:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
1157:C:/StellarisWare/utils\softuart.c ****                 //
1158:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 1221              		.loc 1 1158 0
 1222 0302 7B68     		ldr	r3, [r7, #4]
 1223 0304 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1224 0308 23F00403 		bic	r3, r3, #4
 1225 030c DAB2     		uxtb	r2, r3
 1226 030e 7B68     		ldr	r3, [r7, #4]
 1227 0310 83F83120 		strb	r2, [r3, #49]
 1228              	.L87:
1159:C:/StellarisWare/utils\softuart.c ****             }
1160:C:/StellarisWare/utils\softuart.c **** 
1161:C:/StellarisWare/utils\softuart.c ****             //
1162:C:/StellarisWare/utils\softuart.c ****             // See if the break error is still asserted (meaning that every bit
1163:C:/StellarisWare/utils\softuart.c ****             // received was zero).
1164:C:/StellarisWare/utils\softuart.c ****             //
1165:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxFlags & SOFTUART_RXFLAG_BE)
 1229              		.loc 1 1165 0
 1230 0314 7B68     		ldr	r3, [r7, #4]
 1231 0316 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1232 031a 03F00403 		and	r3, r3, #4
 1233 031e 002B     		cmp	r3, #0
 1234 0320 05D0     		beq	.L88
1166:C:/StellarisWare/utils\softuart.c ****             {
1167:C:/StellarisWare/utils\softuart.c ****                 //
1168:C:/StellarisWare/utils\softuart.c ****                 // Since every bit was zero, advance to the break state.
1169:C:/StellarisWare/utils\softuart.c ****                 //
1170:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxState = SOFTUART_RXSTATE_BREAK;
 1235              		.loc 1 1170 0
 1236 0322 7B68     		ldr	r3, [r7, #4]
 1237 0324 4FF00C02 		mov	r2, #12
 1238 0328 83F82F20 		strb	r2, [r3, #47]
1171:C:/StellarisWare/utils\softuart.c **** 
1172:C:/StellarisWare/utils\softuart.c ****                 //
1173:C:/StellarisWare/utils\softuart.c ****                 // This state has been handled.
1174:C:/StellarisWare/utils\softuart.c ****                 //
1175:C:/StellarisWare/utils\softuart.c ****                 break;
 1239              		.loc 1 1175 0
 1240 032c 4CE1     		b	.L59
 1241              	.L88:
1176:C:/StellarisWare/utils\softuart.c ****             }
1177:C:/StellarisWare/utils\softuart.c **** 
1178:C:/StellarisWare/utils\softuart.c ****             //
1179:C:/StellarisWare/utils\softuart.c ****             // Compute the value of the write pointer advanced by one.
1180:C:/StellarisWare/utils\softuart.c ****             //
1181:C:/StellarisWare/utils\softuart.c ****             ulTemp = pUART->usRxBufferWrite + 1;
 1242              		.loc 1 1181 0
 1243 032e 7B68     		ldr	r3, [r7, #4]
 1244 0330 1B8C     		ldrh	r3, [r3, #32]
 1245 0332 03F10103 		add	r3, r3, #1
 1246 0336 7B61     		str	r3, [r7, #20]
1182:C:/StellarisWare/utils\softuart.c ****             if(ulTemp == pUART->usRxBufferLen)
 1247              		.loc 1 1182 0
 1248 0338 7B68     		ldr	r3, [r7, #4]
 1249 033a 9B8B     		ldrh	r3, [r3, #28]
 1250 033c 1A46     		mov	r2, r3
 1251 033e 7B69     		ldr	r3, [r7, #20]
 1252 0340 9A42     		cmp	r2, r3
 1253 0342 02D1     		bne	.L89
1183:C:/StellarisWare/utils\softuart.c ****             {
1184:C:/StellarisWare/utils\softuart.c ****                 ulTemp = 0;
 1254              		.loc 1 1184 0
 1255 0344 4FF00003 		mov	r3, #0
 1256 0348 7B61     		str	r3, [r7, #20]
 1257              	.L89:
1185:C:/StellarisWare/utils\softuart.c ****             }
1186:C:/StellarisWare/utils\softuart.c **** 
1187:C:/StellarisWare/utils\softuart.c ****             //
1188:C:/StellarisWare/utils\softuart.c ****             // See if there is space in the receive buffer.
1189:C:/StellarisWare/utils\softuart.c ****             //
1190:C:/StellarisWare/utils\softuart.c ****             if(ulTemp == pUART->usRxBufferRead)
 1258              		.loc 1 1190 0
 1259 034a 7B68     		ldr	r3, [r7, #4]
 1260 034c DB8B     		ldrh	r3, [r3, #30]
 1261 034e 1A46     		mov	r2, r3
 1262 0350 7B69     		ldr	r3, [r7, #20]
 1263 0352 9A42     		cmp	r2, r3
 1264 0354 20D1     		bne	.L90
1191:C:/StellarisWare/utils\softuart.c ****             {
1192:C:/StellarisWare/utils\softuart.c ****                 //
1193:C:/StellarisWare/utils\softuart.c ****                 // Set the overrun error flag.  This will remain set until a
1194:C:/StellarisWare/utils\softuart.c ****                 // new character can be placed into the receive buffer, which
1195:C:/StellarisWare/utils\softuart.c ****                 // will then be given this status.
1196:C:/StellarisWare/utils\softuart.c ****                 //
1197:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags |= SOFTUART_RXFLAG_OE;
 1265              		.loc 1 1197 0
 1266 0356 7B68     		ldr	r3, [r7, #4]
 1267 0358 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1268 035c 43F00803 		orr	r3, r3, #8
 1269 0360 DAB2     		uxtb	r2, r3
 1270 0362 7B68     		ldr	r3, [r7, #4]
 1271 0364 83F83120 		strb	r2, [r3, #49]
1198:C:/StellarisWare/utils\softuart.c **** 
1199:C:/StellarisWare/utils\softuart.c ****                 //
1200:C:/StellarisWare/utils\softuart.c ****                 // Set the receive overrun "interrupt" and status if it is not
1201:C:/StellarisWare/utils\softuart.c ****                 // already set.
1202:C:/StellarisWare/utils\softuart.c ****                 //
1203:C:/StellarisWare/utils\softuart.c ****                 if(!(pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN))
 1272              		.loc 1 1203 0
 1273 0368 7B68     		ldr	r3, [r7, #4]
 1274 036a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1275 036e 03F00803 		and	r3, r3, #8
 1276 0372 002B     		cmp	r3, #0
 1277 0374 31D1     		bne	.L91
1204:C:/StellarisWare/utils\softuart.c ****                 {
1205:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxStatus |= SOFTUART_RXERROR_OVERRUN;
 1278              		.loc 1 1205 0
 1279 0376 7B68     		ldr	r3, [r7, #4]
 1280 0378 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1281 037c 43F00803 		orr	r3, r3, #8
 1282 0380 DAB2     		uxtb	r2, r3
 1283 0382 7B68     		ldr	r3, [r7, #4]
 1284 0384 83F83220 		strb	r2, [r3, #50]
1206:C:/StellarisWare/utils\softuart.c ****                     pUART->usIntStatus |= SOFTUART_INT_OE;
 1285              		.loc 1 1206 0
 1286 0388 7B68     		ldr	r3, [r7, #4]
 1287 038a 9B8C     		ldrh	r3, [r3, #36]
 1288 038c 43F48063 		orr	r3, r3, #1024
 1289 0390 9AB2     		uxth	r2, r3
 1290 0392 7B68     		ldr	r3, [r7, #4]
 1291 0394 9A84     		strh	r2, [r3, #36]	@ movhi
 1292 0396 20E0     		b	.L91
 1293              	.L90:
1207:C:/StellarisWare/utils\softuart.c ****                 }
1208:C:/StellarisWare/utils\softuart.c ****             }
1209:C:/StellarisWare/utils\softuart.c **** 
1210:C:/StellarisWare/utils\softuart.c ****             //
1211:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there is space in the receive buffer.
1212:C:/StellarisWare/utils\softuart.c ****             //
1213:C:/StellarisWare/utils\softuart.c ****             else
1214:C:/StellarisWare/utils\softuart.c ****             {
1215:C:/StellarisWare/utils\softuart.c ****                 //
1216:C:/StellarisWare/utils\softuart.c ****                 // Write this data byte, along with the receive flags, into the
1217:C:/StellarisWare/utils\softuart.c ****                 // receive buffer.
1218:C:/StellarisWare/utils\softuart.c ****                 //
1219:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1294              		.loc 1 1219 0
 1295 0398 7B68     		ldr	r3, [r7, #4]
 1296 039a 1A69     		ldr	r2, [r3, #16]
 1297 039c 7B68     		ldr	r3, [r7, #4]
 1298 039e 1B8C     		ldrh	r3, [r3, #32]
 1299 03a0 4FEA4303 		lsl	r3, r3, #1
 1300 03a4 D318     		adds	r3, r2, r3
1220:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxData | (pUART->ucRxFlags << 8);
 1301              		.loc 1 1220 0
 1302 03a6 7A68     		ldr	r2, [r7, #4]
 1303 03a8 92F83020 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
1219:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1304              		.loc 1 1219 0
 1305 03ac 1146     		mov	r1, r2
 1306              		.loc 1 1220 0
 1307 03ae 7A68     		ldr	r2, [r7, #4]
 1308 03b0 92F83120 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 1309 03b4 4FEA0222 		lsl	r2, r2, #8
1219:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1310              		.loc 1 1219 0
 1311 03b8 92B2     		uxth	r2, r2
 1312 03ba 0A43     		orrs	r2, r2, r1
 1313 03bc 92B2     		uxth	r2, r2
 1314 03be 92B2     		uxth	r2, r2
 1315 03c0 1A80     		strh	r2, [r3, #0]	@ movhi
1221:C:/StellarisWare/utils\softuart.c **** 
1222:C:/StellarisWare/utils\softuart.c ****                 //
1223:C:/StellarisWare/utils\softuart.c ****                 // Advance the write pointer.
1224:C:/StellarisWare/utils\softuart.c ****                 //
1225:C:/StellarisWare/utils\softuart.c ****                 pUART->usRxBufferWrite = ulTemp;
 1316              		.loc 1 1225 0
 1317 03c2 7B69     		ldr	r3, [r7, #20]
 1318 03c4 9AB2     		uxth	r2, r3
 1319 03c6 7B68     		ldr	r3, [r7, #4]
 1320 03c8 1A84     		strh	r2, [r3, #32]	@ movhi
1226:C:/StellarisWare/utils\softuart.c **** 
1227:C:/StellarisWare/utils\softuart.c ****                 //
1228:C:/StellarisWare/utils\softuart.c ****                 // Clear the receive flags, most importantly the overrun flag
1229:C:/StellarisWare/utils\softuart.c ****                 // since it was just written into the receive buffer.
1230:C:/StellarisWare/utils\softuart.c ****                 //
1231:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags = 0;
 1321              		.loc 1 1231 0
 1322 03ca 7B68     		ldr	r3, [r7, #4]
 1323 03cc 4FF00002 		mov	r2, #0
 1324 03d0 83F83120 		strb	r2, [r3, #49]
1232:C:/StellarisWare/utils\softuart.c **** 
1233:C:/StellarisWare/utils\softuart.c ****                 //
1234:C:/StellarisWare/utils\softuart.c ****                 // Assert the receive "interrupt" if appropriate.
1235:C:/StellarisWare/utils\softuart.c ****                 //
1236:C:/StellarisWare/utils\softuart.c ****                 SoftUARTRxWriteInt(pUART);
 1325              		.loc 1 1236 0
 1326 03d4 7868     		ldr	r0, [r7, #4]
 1327 03d6 FFF7FEFF 		bl	SoftUARTRxWriteInt
 1328              	.L91:
1237:C:/StellarisWare/utils\softuart.c ****             }
1238:C:/StellarisWare/utils\softuart.c **** 
1239:C:/StellarisWare/utils\softuart.c ****             //
1240:C:/StellarisWare/utils\softuart.c ****             // See if this character had a parity error.
1241:C:/StellarisWare/utils\softuart.c ****             //
1242:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxFlags & SOFTUART_RXFLAG_PE)
 1329              		.loc 1 1242 0
 1330 03da 7B68     		ldr	r3, [r7, #4]
 1331 03dc 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1332 03e0 03F00203 		and	r3, r3, #2
 1333 03e4 002B     		cmp	r3, #0
 1334 03e6 06D0     		beq	.L92
1243:C:/StellarisWare/utils\softuart.c ****             {
1244:C:/StellarisWare/utils\softuart.c ****                 //
1245:C:/StellarisWare/utils\softuart.c ****                 // Assert the parity error "interrupt".
1246:C:/StellarisWare/utils\softuart.c ****                 //
1247:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_PE;
 1335              		.loc 1 1247 0
 1336 03e8 7B68     		ldr	r3, [r7, #4]
 1337 03ea 9B8C     		ldrh	r3, [r3, #36]
 1338 03ec 43F48073 		orr	r3, r3, #256
 1339 03f0 9AB2     		uxth	r2, r3
 1340 03f2 7B68     		ldr	r3, [r7, #4]
 1341 03f4 9A84     		strh	r2, [r3, #36]	@ movhi
 1342              	.L92:
1248:C:/StellarisWare/utils\softuart.c ****             }
1249:C:/StellarisWare/utils\softuart.c **** 
1250:C:/StellarisWare/utils\softuart.c ****             //
1251:C:/StellarisWare/utils\softuart.c ****             // See if this character had a framing error.
1252:C:/StellarisWare/utils\softuart.c ****             //
1253:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxFlags & SOFTUART_RXFLAG_FE)
 1343              		.loc 1 1253 0
 1344 03f6 7B68     		ldr	r3, [r7, #4]
 1345 03f8 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1346 03fc 03F00103 		and	r3, r3, #1
 1347 0400 DBB2     		uxtb	r3, r3
 1348 0402 002B     		cmp	r3, #0
 1349 0404 06D0     		beq	.L93
1254:C:/StellarisWare/utils\softuart.c ****             {
1255:C:/StellarisWare/utils\softuart.c ****                 //
1256:C:/StellarisWare/utils\softuart.c ****                 // Assert the framing error "interrupt".
1257:C:/StellarisWare/utils\softuart.c ****                 //
1258:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_FE;
 1350              		.loc 1 1258 0
 1351 0406 7B68     		ldr	r3, [r7, #4]
 1352 0408 9B8C     		ldrh	r3, [r3, #36]
 1353 040a 43F08003 		orr	r3, r3, #128
 1354 040e 9AB2     		uxth	r2, r3
 1355 0410 7B68     		ldr	r3, [r7, #4]
 1356 0412 9A84     		strh	r2, [r3, #36]	@ movhi
 1357              	.L93:
1259:C:/StellarisWare/utils\softuart.c ****             }
1260:C:/StellarisWare/utils\softuart.c **** 
1261:C:/StellarisWare/utils\softuart.c ****             //
1262:C:/StellarisWare/utils\softuart.c ****             // Enable the falling edge interrupt on the Rx pin so that the next
1263:C:/StellarisWare/utils\softuart.c ****             // start bit can be detected.
1264:C:/StellarisWare/utils\softuart.c ****             //
1265:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntClear(pUART->ulRxGPIOPort, pUART->ucRxPin);
 1358              		.loc 1 1265 0
 1359 0414 7B68     		ldr	r3, [r7, #4]
 1360 0416 9A68     		ldr	r2, [r3, #8]
 1361 0418 7B68     		ldr	r3, [r7, #4]
 1362 041a 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1363 041e 1046     		mov	r0, r2
 1364 0420 1946     		mov	r1, r3
 1365 0422 FFF7FEFF 		bl	GPIOPinIntClear
1266:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntEnable(pUART->ulRxGPIOPort, pUART->ucRxPin);
 1366              		.loc 1 1266 0
 1367 0426 7B68     		ldr	r3, [r7, #4]
 1368 0428 9A68     		ldr	r2, [r3, #8]
 1369 042a 7B68     		ldr	r3, [r7, #4]
 1370 042c 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1371 0430 1046     		mov	r0, r2
 1372 0432 1946     		mov	r1, r3
 1373 0434 FFF7FEFF 		bl	GPIOPinIntEnable
1267:C:/StellarisWare/utils\softuart.c **** 
1268:C:/StellarisWare/utils\softuart.c ****             //
1269:C:/StellarisWare/utils\softuart.c ****             // Advance to the receive timeout delay state.
1270:C:/StellarisWare/utils\softuart.c ****             //
1271:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxData = 0;
 1374              		.loc 1 1271 0
 1375 0438 7B68     		ldr	r3, [r7, #4]
 1376 043a 4FF00002 		mov	r2, #0
 1377 043e 83F83020 		strb	r2, [r3, #48]
1272:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxState = SOFTUART_RXSTATE_DELAY;
 1378              		.loc 1 1272 0
 1379 0442 7B68     		ldr	r3, [r7, #4]
 1380 0444 4FF00D02 		mov	r2, #13
 1381 0448 83F82F20 		strb	r2, [r3, #47]
1273:C:/StellarisWare/utils\softuart.c **** 
1274:C:/StellarisWare/utils\softuart.c ****             //
1275:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1276:C:/StellarisWare/utils\softuart.c ****             //
1277:C:/StellarisWare/utils\softuart.c ****             break;
 1382              		.loc 1 1277 0
 1383 044c BCE0     		b	.L59
 1384              	.L66:
1278:C:/StellarisWare/utils\softuart.c ****         }
1279:C:/StellarisWare/utils\softuart.c **** 
1280:C:/StellarisWare/utils\softuart.c ****         //
1281:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the break state.
1282:C:/StellarisWare/utils\softuart.c ****         //
1283:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_BREAK:
1284:C:/StellarisWare/utils\softuart.c ****         {
1285:C:/StellarisWare/utils\softuart.c ****             //
1286:C:/StellarisWare/utils\softuart.c ****             // See if the Rx pin is high.
1287:C:/StellarisWare/utils\softuart.c ****             //
1288:C:/StellarisWare/utils\softuart.c ****             if(ulPinState != 0)
 1385              		.loc 1 1288 0
 1386 044e FB68     		ldr	r3, [r7, #12]
 1387 0450 002B     		cmp	r3, #0
 1388 0452 08D0     		beq	.L94
1289:C:/StellarisWare/utils\softuart.c ****             {
1290:C:/StellarisWare/utils\softuart.c ****                 //
1291:C:/StellarisWare/utils\softuart.c ****                 // Clear the break error since a non-zero bit was received.
1292:C:/StellarisWare/utils\softuart.c ****                 //
1293:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags &= ~(SOFTUART_RXFLAG_BE);
 1389              		.loc 1 1293 0
 1390 0454 7B68     		ldr	r3, [r7, #4]
 1391 0456 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1392 045a 23F00403 		bic	r3, r3, #4
 1393 045e DAB2     		uxtb	r2, r3
 1394 0460 7B68     		ldr	r3, [r7, #4]
 1395 0462 83F83120 		strb	r2, [r3, #49]
 1396              	.L94:
1294:C:/StellarisWare/utils\softuart.c ****             }
1295:C:/StellarisWare/utils\softuart.c **** 
1296:C:/StellarisWare/utils\softuart.c ****             //
1297:C:/StellarisWare/utils\softuart.c ****             // Compute the value of the write pointer advanced by one.
1298:C:/StellarisWare/utils\softuart.c ****             //
1299:C:/StellarisWare/utils\softuart.c ****             ulTemp = pUART->usRxBufferWrite + 1;
 1397              		.loc 1 1299 0
 1398 0466 7B68     		ldr	r3, [r7, #4]
 1399 0468 1B8C     		ldrh	r3, [r3, #32]
 1400 046a 03F10103 		add	r3, r3, #1
 1401 046e 7B61     		str	r3, [r7, #20]
1300:C:/StellarisWare/utils\softuart.c ****             if(ulTemp == pUART->usRxBufferLen)
 1402              		.loc 1 1300 0
 1403 0470 7B68     		ldr	r3, [r7, #4]
 1404 0472 9B8B     		ldrh	r3, [r3, #28]
 1405 0474 1A46     		mov	r2, r3
 1406 0476 7B69     		ldr	r3, [r7, #20]
 1407 0478 9A42     		cmp	r2, r3
 1408 047a 02D1     		bne	.L95
1301:C:/StellarisWare/utils\softuart.c ****             {
1302:C:/StellarisWare/utils\softuart.c ****                 ulTemp = 0;
 1409              		.loc 1 1302 0
 1410 047c 4FF00003 		mov	r3, #0
 1411 0480 7B61     		str	r3, [r7, #20]
 1412              	.L95:
1303:C:/StellarisWare/utils\softuart.c ****             }
1304:C:/StellarisWare/utils\softuart.c **** 
1305:C:/StellarisWare/utils\softuart.c ****             //
1306:C:/StellarisWare/utils\softuart.c ****             // See if there is space in the receive buffer.
1307:C:/StellarisWare/utils\softuart.c ****             //
1308:C:/StellarisWare/utils\softuart.c ****             if(ulTemp == pUART->usRxBufferRead)
 1413              		.loc 1 1308 0
 1414 0482 7B68     		ldr	r3, [r7, #4]
 1415 0484 DB8B     		ldrh	r3, [r3, #30]
 1416 0486 1A46     		mov	r2, r3
 1417 0488 7B69     		ldr	r3, [r7, #20]
 1418 048a 9A42     		cmp	r2, r3
 1419 048c 20D1     		bne	.L96
1309:C:/StellarisWare/utils\softuart.c ****             {
1310:C:/StellarisWare/utils\softuart.c ****                 //
1311:C:/StellarisWare/utils\softuart.c ****                 // Set the overrun error flag.  This will remain set until a
1312:C:/StellarisWare/utils\softuart.c ****                 // new character can be placed into the receive buffer, which
1313:C:/StellarisWare/utils\softuart.c ****                 // will then be given this status.
1314:C:/StellarisWare/utils\softuart.c ****                 //
1315:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags |= SOFTUART_RXFLAG_OE;
 1420              		.loc 1 1315 0
 1421 048e 7B68     		ldr	r3, [r7, #4]
 1422 0490 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1423 0494 43F00803 		orr	r3, r3, #8
 1424 0498 DAB2     		uxtb	r2, r3
 1425 049a 7B68     		ldr	r3, [r7, #4]
 1426 049c 83F83120 		strb	r2, [r3, #49]
1316:C:/StellarisWare/utils\softuart.c **** 
1317:C:/StellarisWare/utils\softuart.c ****                 //
1318:C:/StellarisWare/utils\softuart.c ****                 // Set the receive overrun "interrupt" and status if it is not
1319:C:/StellarisWare/utils\softuart.c ****                 // already set.
1320:C:/StellarisWare/utils\softuart.c ****                 //
1321:C:/StellarisWare/utils\softuart.c ****                 if(!(pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN))
 1427              		.loc 1 1321 0
 1428 04a0 7B68     		ldr	r3, [r7, #4]
 1429 04a2 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1430 04a6 03F00803 		and	r3, r3, #8
 1431 04aa 002B     		cmp	r3, #0
 1432 04ac 31D1     		bne	.L97
1322:C:/StellarisWare/utils\softuart.c ****                 {
1323:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxStatus |= SOFTUART_RXERROR_OVERRUN;
 1433              		.loc 1 1323 0
 1434 04ae 7B68     		ldr	r3, [r7, #4]
 1435 04b0 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1436 04b4 43F00803 		orr	r3, r3, #8
 1437 04b8 DAB2     		uxtb	r2, r3
 1438 04ba 7B68     		ldr	r3, [r7, #4]
 1439 04bc 83F83220 		strb	r2, [r3, #50]
1324:C:/StellarisWare/utils\softuart.c ****                     pUART->usIntStatus |= SOFTUART_INT_OE;
 1440              		.loc 1 1324 0
 1441 04c0 7B68     		ldr	r3, [r7, #4]
 1442 04c2 9B8C     		ldrh	r3, [r3, #36]
 1443 04c4 43F48063 		orr	r3, r3, #1024
 1444 04c8 9AB2     		uxth	r2, r3
 1445 04ca 7B68     		ldr	r3, [r7, #4]
 1446 04cc 9A84     		strh	r2, [r3, #36]	@ movhi
 1447 04ce 20E0     		b	.L97
 1448              	.L96:
1325:C:/StellarisWare/utils\softuart.c ****                 }
1326:C:/StellarisWare/utils\softuart.c ****             }
1327:C:/StellarisWare/utils\softuart.c **** 
1328:C:/StellarisWare/utils\softuart.c ****             //
1329:C:/StellarisWare/utils\softuart.c ****             // Otherwise, there is space in the receive buffer.
1330:C:/StellarisWare/utils\softuart.c ****             //
1331:C:/StellarisWare/utils\softuart.c ****             else
1332:C:/StellarisWare/utils\softuart.c ****             {
1333:C:/StellarisWare/utils\softuart.c ****                 //
1334:C:/StellarisWare/utils\softuart.c ****                 // Write this data byte, along with the receive flags, into the
1335:C:/StellarisWare/utils\softuart.c ****                 // receive buffer.
1336:C:/StellarisWare/utils\softuart.c ****                 //
1337:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1449              		.loc 1 1337 0
 1450 04d0 7B68     		ldr	r3, [r7, #4]
 1451 04d2 1A69     		ldr	r2, [r3, #16]
 1452 04d4 7B68     		ldr	r3, [r7, #4]
 1453 04d6 1B8C     		ldrh	r3, [r3, #32]
 1454 04d8 4FEA4303 		lsl	r3, r3, #1
 1455 04dc D318     		adds	r3, r2, r3
1338:C:/StellarisWare/utils\softuart.c ****                     pUART->ucRxData | (pUART->ucRxFlags << 8);
 1456              		.loc 1 1338 0
 1457 04de 7A68     		ldr	r2, [r7, #4]
 1458 04e0 92F83020 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
1337:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1459              		.loc 1 1337 0
 1460 04e4 1146     		mov	r1, r2
 1461              		.loc 1 1338 0
 1462 04e6 7A68     		ldr	r2, [r7, #4]
 1463 04e8 92F83120 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 1464 04ec 4FEA0222 		lsl	r2, r2, #8
1337:C:/StellarisWare/utils\softuart.c ****                 pUART->pusRxBuffer[pUART->usRxBufferWrite] =
 1465              		.loc 1 1337 0
 1466 04f0 92B2     		uxth	r2, r2
 1467 04f2 0A43     		orrs	r2, r2, r1
 1468 04f4 92B2     		uxth	r2, r2
 1469 04f6 92B2     		uxth	r2, r2
 1470 04f8 1A80     		strh	r2, [r3, #0]	@ movhi
1339:C:/StellarisWare/utils\softuart.c **** 
1340:C:/StellarisWare/utils\softuart.c ****                 //
1341:C:/StellarisWare/utils\softuart.c ****                 // Advance the write pointer.
1342:C:/StellarisWare/utils\softuart.c ****                 //
1343:C:/StellarisWare/utils\softuart.c ****                 pUART->usRxBufferWrite = ulTemp;
 1471              		.loc 1 1343 0
 1472 04fa 7B69     		ldr	r3, [r7, #20]
 1473 04fc 9AB2     		uxth	r2, r3
 1474 04fe 7B68     		ldr	r3, [r7, #4]
 1475 0500 1A84     		strh	r2, [r3, #32]	@ movhi
1344:C:/StellarisWare/utils\softuart.c **** 
1345:C:/StellarisWare/utils\softuart.c ****                 //
1346:C:/StellarisWare/utils\softuart.c ****                 // Clear the receive flags, most importantly the overrun flag
1347:C:/StellarisWare/utils\softuart.c ****                 // since it was just written into the receive buffer.
1348:C:/StellarisWare/utils\softuart.c ****                 //
1349:C:/StellarisWare/utils\softuart.c ****                 pUART->ucRxFlags = 0;
 1476              		.loc 1 1349 0
 1477 0502 7B68     		ldr	r3, [r7, #4]
 1478 0504 4FF00002 		mov	r2, #0
 1479 0508 83F83120 		strb	r2, [r3, #49]
1350:C:/StellarisWare/utils\softuart.c **** 
1351:C:/StellarisWare/utils\softuart.c ****                 //
1352:C:/StellarisWare/utils\softuart.c ****                 // Assert the receive "interrupt" if appropriate.
1353:C:/StellarisWare/utils\softuart.c ****                 //
1354:C:/StellarisWare/utils\softuart.c ****                 SoftUARTRxWriteInt(pUART);
 1480              		.loc 1 1354 0
 1481 050c 7868     		ldr	r0, [r7, #4]
 1482 050e FFF7FEFF 		bl	SoftUARTRxWriteInt
 1483              	.L97:
1355:C:/StellarisWare/utils\softuart.c ****             }
1356:C:/StellarisWare/utils\softuart.c **** 
1357:C:/StellarisWare/utils\softuart.c ****             //
1358:C:/StellarisWare/utils\softuart.c ****             // See if this was a break error.
1359:C:/StellarisWare/utils\softuart.c ****             //
1360:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxFlags & SOFTUART_RXFLAG_BE)
 1484              		.loc 1 1360 0
 1485 0512 7B68     		ldr	r3, [r7, #4]
 1486 0514 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1487 0518 03F00403 		and	r3, r3, #4
 1488 051c 002B     		cmp	r3, #0
 1489 051e 06D0     		beq	.L98
1361:C:/StellarisWare/utils\softuart.c ****             {
1362:C:/StellarisWare/utils\softuart.c ****                 //
1363:C:/StellarisWare/utils\softuart.c ****                 // Assert the break error "interrupt".
1364:C:/StellarisWare/utils\softuart.c ****                 //
1365:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_BE;
 1490              		.loc 1 1365 0
 1491 0520 7B68     		ldr	r3, [r7, #4]
 1492 0522 9B8C     		ldrh	r3, [r3, #36]
 1493 0524 43F40073 		orr	r3, r3, #512
 1494 0528 9AB2     		uxth	r2, r3
 1495 052a 7B68     		ldr	r3, [r7, #4]
 1496 052c 9A84     		strh	r2, [r3, #36]	@ movhi
 1497              	.L98:
1366:C:/StellarisWare/utils\softuart.c ****             }
1367:C:/StellarisWare/utils\softuart.c **** 
1368:C:/StellarisWare/utils\softuart.c ****             //
1369:C:/StellarisWare/utils\softuart.c ****             // See if this character had a parity error.
1370:C:/StellarisWare/utils\softuart.c ****             //
1371:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxFlags & SOFTUART_RXFLAG_PE)
 1498              		.loc 1 1371 0
 1499 052e 7B68     		ldr	r3, [r7, #4]
 1500 0530 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1501 0534 03F00203 		and	r3, r3, #2
 1502 0538 002B     		cmp	r3, #0
 1503 053a 06D0     		beq	.L99
1372:C:/StellarisWare/utils\softuart.c ****             {
1373:C:/StellarisWare/utils\softuart.c ****                 //
1374:C:/StellarisWare/utils\softuart.c ****                 // Assert the parity error "interrupt".
1375:C:/StellarisWare/utils\softuart.c ****                 //
1376:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_PE;
 1504              		.loc 1 1376 0
 1505 053c 7B68     		ldr	r3, [r7, #4]
 1506 053e 9B8C     		ldrh	r3, [r3, #36]
 1507 0540 43F48073 		orr	r3, r3, #256
 1508 0544 9AB2     		uxth	r2, r3
 1509 0546 7B68     		ldr	r3, [r7, #4]
 1510 0548 9A84     		strh	r2, [r3, #36]	@ movhi
 1511              	.L99:
1377:C:/StellarisWare/utils\softuart.c ****             }
1378:C:/StellarisWare/utils\softuart.c **** 
1379:C:/StellarisWare/utils\softuart.c ****             //
1380:C:/StellarisWare/utils\softuart.c ****             // Assert the framing error "interrupt".
1381:C:/StellarisWare/utils\softuart.c ****             //
1382:C:/StellarisWare/utils\softuart.c ****             pUART->usIntStatus |= SOFTUART_INT_FE;
 1512              		.loc 1 1382 0
 1513 054a 7B68     		ldr	r3, [r7, #4]
 1514 054c 9B8C     		ldrh	r3, [r3, #36]
 1515 054e 43F08003 		orr	r3, r3, #128
 1516 0552 9AB2     		uxth	r2, r3
 1517 0554 7B68     		ldr	r3, [r7, #4]
 1518 0556 9A84     		strh	r2, [r3, #36]	@ movhi
1383:C:/StellarisWare/utils\softuart.c **** 
1384:C:/StellarisWare/utils\softuart.c ****             //
1385:C:/StellarisWare/utils\softuart.c ****             // Enable the falling edge interrupt on the Rx pin so that the next
1386:C:/StellarisWare/utils\softuart.c ****             // start bit can be detected.
1387:C:/StellarisWare/utils\softuart.c ****             //
1388:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntClear(pUART->ulRxGPIOPort, pUART->ucRxPin);
 1519              		.loc 1 1388 0
 1520 0558 7B68     		ldr	r3, [r7, #4]
 1521 055a 9A68     		ldr	r2, [r3, #8]
 1522 055c 7B68     		ldr	r3, [r7, #4]
 1523 055e 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1524 0562 1046     		mov	r0, r2
 1525 0564 1946     		mov	r1, r3
 1526 0566 FFF7FEFF 		bl	GPIOPinIntClear
1389:C:/StellarisWare/utils\softuart.c ****             MAP_GPIOPinIntEnable(pUART->ulRxGPIOPort, pUART->ucRxPin);
 1527              		.loc 1 1389 0
 1528 056a 7B68     		ldr	r3, [r7, #4]
 1529 056c 9A68     		ldr	r2, [r3, #8]
 1530 056e 7B68     		ldr	r3, [r7, #4]
 1531 0570 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 1532 0574 1046     		mov	r0, r2
 1533 0576 1946     		mov	r1, r3
 1534 0578 FFF7FEFF 		bl	GPIOPinIntEnable
1390:C:/StellarisWare/utils\softuart.c **** 
1391:C:/StellarisWare/utils\softuart.c ****             //
1392:C:/StellarisWare/utils\softuart.c ****             // Advance to the receive timeout delay state.
1393:C:/StellarisWare/utils\softuart.c ****             //
1394:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxData = 0;
 1535              		.loc 1 1394 0
 1536 057c 7B68     		ldr	r3, [r7, #4]
 1537 057e 4FF00002 		mov	r2, #0
 1538 0582 83F83020 		strb	r2, [r3, #48]
1395:C:/StellarisWare/utils\softuart.c ****             pUART->ucRxState = SOFTUART_RXSTATE_DELAY;
 1539              		.loc 1 1395 0
 1540 0586 7B68     		ldr	r3, [r7, #4]
 1541 0588 4FF00D02 		mov	r2, #13
 1542 058c 83F82F20 		strb	r2, [r3, #47]
1396:C:/StellarisWare/utils\softuart.c **** 
1397:C:/StellarisWare/utils\softuart.c ****             //
1398:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1399:C:/StellarisWare/utils\softuart.c ****             //
1400:C:/StellarisWare/utils\softuart.c ****             break;
 1543              		.loc 1 1400 0
 1544 0590 1AE0     		b	.L59
 1545              	.L67:
1401:C:/StellarisWare/utils\softuart.c ****         }
1402:C:/StellarisWare/utils\softuart.c **** 
1403:C:/StellarisWare/utils\softuart.c ****         //
1404:C:/StellarisWare/utils\softuart.c ****         // The state machine is in the receive timeout delay state.
1405:C:/StellarisWare/utils\softuart.c ****         //
1406:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_RXSTATE_DELAY:
1407:C:/StellarisWare/utils\softuart.c ****         {
1408:C:/StellarisWare/utils\softuart.c ****             //
1409:C:/StellarisWare/utils\softuart.c ****             // See if the receive timeout has expired.
1410:C:/StellarisWare/utils\softuart.c ****             //
1411:C:/StellarisWare/utils\softuart.c ****             if(pUART->ucRxData++ == 32)
 1546              		.loc 1 1411 0
 1547 0592 7B68     		ldr	r3, [r7, #4]
 1548 0594 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1549 0598 202B     		cmp	r3, #32
 1550 059a 14BF     		ite	ne
 1551 059c 0022     		movne	r2, #0
 1552 059e 0122     		moveq	r2, #1
 1553 05a0 D2B2     		uxtb	r2, r2
 1554 05a2 03F10103 		add	r3, r3, #1
 1555 05a6 D9B2     		uxtb	r1, r3
 1556 05a8 7B68     		ldr	r3, [r7, #4]
 1557 05aa 83F83010 		strb	r1, [r3, #48]
 1558 05ae 002A     		cmp	r2, #0
 1559 05b0 09D0     		beq	.L105
1412:C:/StellarisWare/utils\softuart.c ****             {
1413:C:/StellarisWare/utils\softuart.c ****                 //
1414:C:/StellarisWare/utils\softuart.c ****                 // Assert the receive timeout "interrupt".
1415:C:/StellarisWare/utils\softuart.c ****                 //
1416:C:/StellarisWare/utils\softuart.c ****                 pUART->usIntStatus |= SOFTUART_INT_RT;
 1560              		.loc 1 1416 0
 1561 05b2 7B68     		ldr	r3, [r7, #4]
 1562 05b4 9B8C     		ldrh	r3, [r3, #36]
 1563 05b6 43F04003 		orr	r3, r3, #64
 1564 05ba 9AB2     		uxth	r2, r3
 1565 05bc 7B68     		ldr	r3, [r7, #4]
 1566 05be 9A84     		strh	r2, [r3, #36]	@ movhi
1417:C:/StellarisWare/utils\softuart.c **** 
1418:C:/StellarisWare/utils\softuart.c ****                 //
1419:C:/StellarisWare/utils\softuart.c ****                 // Tell the caller that the receive timer can be disabled.
1420:C:/StellarisWare/utils\softuart.c ****                 //
1421:C:/StellarisWare/utils\softuart.c ****                 ulRet = SOFTUART_RXTIMER_END;
 1567              		.loc 1 1421 0
 1568 05c0 4FF00103 		mov	r3, #1
 1569 05c4 3B61     		str	r3, [r7, #16]
 1570              	.L105:
1422:C:/StellarisWare/utils\softuart.c ****             }
1423:C:/StellarisWare/utils\softuart.c **** 
1424:C:/StellarisWare/utils\softuart.c ****             //
1425:C:/StellarisWare/utils\softuart.c ****             // This state has been handled.
1426:C:/StellarisWare/utils\softuart.c ****             //
1427:C:/StellarisWare/utils\softuart.c ****             break;
 1571              		.loc 1 1427 0
 1572 05c6 00BF     		nop
 1573              	.L59:
1428:C:/StellarisWare/utils\softuart.c ****         }
1429:C:/StellarisWare/utils\softuart.c ****     }
1430:C:/StellarisWare/utils\softuart.c **** 
1431:C:/StellarisWare/utils\softuart.c ****     //
1432:C:/StellarisWare/utils\softuart.c ****     // Call the "interrupt" callback while there are enabled "interrupts"
1433:C:/StellarisWare/utils\softuart.c ****     // asserted.  By calling in a loop until the "interrupts" are no longer
1434:C:/StellarisWare/utils\softuart.c ****     // asserted, this mimics the behavior of a real hardware implementation of
1435:C:/StellarisWare/utils\softuart.c ****     // the UART peripheral.
1436:C:/StellarisWare/utils\softuart.c ****     //
1437:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 1574              		.loc 1 1437 0
 1575 05c8 03E0     		b	.L104
 1576              	.L103:
1438:C:/StellarisWare/utils\softuart.c ****           (pUART->pfnIntCallback != 0))
1439:C:/StellarisWare/utils\softuart.c ****     {
1440:C:/StellarisWare/utils\softuart.c ****         //
1441:C:/StellarisWare/utils\softuart.c ****         // Call the callback function.
1442:C:/StellarisWare/utils\softuart.c ****         //
1443:C:/StellarisWare/utils\softuart.c ****         pUART->pfnIntCallback();
 1577              		.loc 1 1443 0
 1578 05ca 7B68     		ldr	r3, [r7, #4]
 1579 05cc 1B68     		ldr	r3, [r3, #0]
 1580 05ce 9847     		blx	r3
 1581 05d0 00E0     		b	.L101
 1582              	.L104:
1437:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 1583              		.loc 1 1437 0
 1584 05d2 00BF     		nop
 1585              	.L101:
1437:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 1586              		.loc 1 1437 0 is_stmt 0 discriminator 1
 1587 05d4 7B68     		ldr	r3, [r7, #4]
 1588 05d6 9A8C     		ldrh	r2, [r3, #36]
 1589 05d8 7B68     		ldr	r3, [r7, #4]
 1590 05da DB8C     		ldrh	r3, [r3, #38]
 1591 05dc 1340     		ands	r3, r3, r2
 1592 05de 9BB2     		uxth	r3, r3
 1593 05e0 002B     		cmp	r3, #0
 1594 05e2 03D0     		beq	.L102
1438:C:/StellarisWare/utils\softuart.c ****           (pUART->pfnIntCallback != 0))
 1595              		.loc 1 1438 0 is_stmt 1 discriminator 2
 1596 05e4 7B68     		ldr	r3, [r7, #4]
 1597 05e6 1B68     		ldr	r3, [r3, #0]
1437:C:/StellarisWare/utils\softuart.c ****     while(((pUART->usIntStatus & pUART->usIntMask) != 0) &&
 1598              		.loc 1 1437 0 discriminator 2
 1599 05e8 002B     		cmp	r3, #0
 1600 05ea EED1     		bne	.L103
 1601              	.L102:
1444:C:/StellarisWare/utils\softuart.c ****     }
1445:C:/StellarisWare/utils\softuart.c **** 
1446:C:/StellarisWare/utils\softuart.c ****     //
1447:C:/StellarisWare/utils\softuart.c ****     // Return to the caller.
1448:C:/StellarisWare/utils\softuart.c ****     //
1449:C:/StellarisWare/utils\softuart.c ****     return(ulRet);
 1602              		.loc 1 1449 0
 1603 05ec 3B69     		ldr	r3, [r7, #16]
1450:C:/StellarisWare/utils\softuart.c **** }
 1604              		.loc 1 1450 0
 1605 05ee 1846     		mov	r0, r3
 1606 05f0 07F11807 		add	r7, r7, #24
 1607 05f4 BD46     		mov	sp, r7
 1608 05f6 80BD     		pop	{r7, pc}
 1609              		.cfi_endproc
 1610              	.LFE4:
 1612              		.section	.text.SoftUARTParityModeSet,"ax",%progbits
 1613              		.align	2
 1614              		.global	SoftUARTParityModeSet
 1615              		.thumb
 1616              		.thumb_func
 1618              	SoftUARTParityModeSet:
 1619              	.LFB5:
1451:C:/StellarisWare/utils\softuart.c **** 
1452:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1453:C:/StellarisWare/utils\softuart.c **** //
1454:C:/StellarisWare/utils\softuart.c **** //! Sets the type of parity.
1455:C:/StellarisWare/utils\softuart.c **** //!
1456:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1457:C:/StellarisWare/utils\softuart.c **** //! \param ulParity specifies the type of parity to use.
1458:C:/StellarisWare/utils\softuart.c **** //!
1459:C:/StellarisWare/utils\softuart.c **** //! Sets the type of parity to use for transmitting and expect when receiving.
1460:C:/StellarisWare/utils\softuart.c **** //! The \e ulParity parameter must be one of \b SOFTUART_CONFIG_PAR_NONE,
1461:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_EVEN, \b SOFTUART_CONFIG_PAR_ODD,
1462:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_ONE, or \b SOFTUART_CONFIG_PAR_ZERO.  The last two
1463:C:/StellarisWare/utils\softuart.c **** //! allow direct control of the parity bit; it is always either one or zero
1464:C:/StellarisWare/utils\softuart.c **** //! based on the mode.
1465:C:/StellarisWare/utils\softuart.c **** //!
1466:C:/StellarisWare/utils\softuart.c **** //! \return None.
1467:C:/StellarisWare/utils\softuart.c **** //
1468:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1469:C:/StellarisWare/utils\softuart.c **** void
1470:C:/StellarisWare/utils\softuart.c **** SoftUARTParityModeSet(tSoftUART *pUART, unsigned long ulParity)
1471:C:/StellarisWare/utils\softuart.c **** {
 1620              		.loc 1 1471 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 1625 0000 80B4     		push	{r7}
 1626              	.LCFI15:
 1627              		.cfi_def_cfa_offset 4
 1628              		.cfi_offset 7, -4
 1629 0002 83B0     		sub	sp, sp, #12
 1630              	.LCFI16:
 1631              		.cfi_def_cfa_offset 16
 1632 0004 00AF     		add	r7, sp, #0
 1633              	.LCFI17:
 1634              		.cfi_def_cfa_register 7
 1635 0006 7860     		str	r0, [r7, #4]
 1636 0008 3960     		str	r1, [r7, #0]
1472:C:/StellarisWare/utils\softuart.c ****     //
1473:C:/StellarisWare/utils\softuart.c ****     // Check the arguments.
1474:C:/StellarisWare/utils\softuart.c ****     //
1475:C:/StellarisWare/utils\softuart.c ****     ASSERT((ulParity == SOFTUART_CONFIG_PAR_NONE) ||
1476:C:/StellarisWare/utils\softuart.c ****            (ulParity == SOFTUART_CONFIG_PAR_EVEN) ||
1477:C:/StellarisWare/utils\softuart.c ****            (ulParity == SOFTUART_CONFIG_PAR_ODD) ||
1478:C:/StellarisWare/utils\softuart.c ****            (ulParity == SOFTUART_CONFIG_PAR_ONE) ||
1479:C:/StellarisWare/utils\softuart.c ****            (ulParity == SOFTUART_CONFIG_PAR_ZERO));
1480:C:/StellarisWare/utils\softuart.c **** 
1481:C:/StellarisWare/utils\softuart.c ****     //
1482:C:/StellarisWare/utils\softuart.c ****     // Set the parity mode.
1483:C:/StellarisWare/utils\softuart.c ****     //
1484:C:/StellarisWare/utils\softuart.c ****     pUART->usConfig = (pUART->usConfig & SOFTUART_CONFIG_PAR_MASK) | ulParity;
 1637              		.loc 1 1484 0
 1638 000a 7B68     		ldr	r3, [r7, #4]
 1639 000c 1B8D     		ldrh	r3, [r3, #40]
 1640 000e 03F08603 		and	r3, r3, #134
 1641 0012 9AB2     		uxth	r2, r3
 1642 0014 3B68     		ldr	r3, [r7, #0]
 1643 0016 9BB2     		uxth	r3, r3
 1644 0018 1343     		orrs	r3, r3, r2
 1645 001a 9AB2     		uxth	r2, r3
 1646 001c 7B68     		ldr	r3, [r7, #4]
 1647 001e 1A85     		strh	r2, [r3, #40]	@ movhi
1485:C:/StellarisWare/utils\softuart.c **** }
 1648              		.loc 1 1485 0
 1649 0020 07F10C07 		add	r7, r7, #12
 1650 0024 BD46     		mov	sp, r7
 1651 0026 80BC     		pop	{r7}
 1652 0028 7047     		bx	lr
 1653              		.cfi_endproc
 1654              	.LFE5:
 1656 002a 00BF     		.section	.text.SoftUARTParityModeGet,"ax",%progbits
 1657              		.align	2
 1658              		.global	SoftUARTParityModeGet
 1659              		.thumb
 1660              		.thumb_func
 1662              	SoftUARTParityModeGet:
 1663              	.LFB6:
1486:C:/StellarisWare/utils\softuart.c **** 
1487:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1488:C:/StellarisWare/utils\softuart.c **** //
1489:C:/StellarisWare/utils\softuart.c **** //! Gets the type of parity currently being used.
1490:C:/StellarisWare/utils\softuart.c **** //!
1491:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1492:C:/StellarisWare/utils\softuart.c **** //!
1493:C:/StellarisWare/utils\softuart.c **** //! This function gets the type of parity used for transmitting data and
1494:C:/StellarisWare/utils\softuart.c **** //! expected when receiving data.
1495:C:/StellarisWare/utils\softuart.c **** //!
1496:C:/StellarisWare/utils\softuart.c **** //! \return Returns the current parity settings, specified as one of
1497:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_NONE, \b SOFTUART_CONFIG_PAR_EVEN,
1498:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_ODD, \b SOFTUART_CONFIG_PAR_ONE, or
1499:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_CONFIG_PAR_ZERO.
1500:C:/StellarisWare/utils\softuart.c **** //
1501:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1502:C:/StellarisWare/utils\softuart.c **** unsigned long
1503:C:/StellarisWare/utils\softuart.c **** SoftUARTParityModeGet(tSoftUART *pUART)
1504:C:/StellarisWare/utils\softuart.c **** {
 1664              		.loc 1 1504 0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 8
 1667              		@ frame_needed = 1, uses_anonymous_args = 0
 1668              		@ link register save eliminated.
 1669 0000 80B4     		push	{r7}
 1670              	.LCFI18:
 1671              		.cfi_def_cfa_offset 4
 1672              		.cfi_offset 7, -4
 1673 0002 83B0     		sub	sp, sp, #12
 1674              	.LCFI19:
 1675              		.cfi_def_cfa_offset 16
 1676 0004 00AF     		add	r7, sp, #0
 1677              	.LCFI20:
 1678              		.cfi_def_cfa_register 7
 1679 0006 7860     		str	r0, [r7, #4]
1505:C:/StellarisWare/utils\softuart.c ****     //
1506:C:/StellarisWare/utils\softuart.c ****     // Return the current parity setting.
1507:C:/StellarisWare/utils\softuart.c ****     //
1508:C:/StellarisWare/utils\softuart.c ****     return(pUART->usConfig & SOFTUART_CONFIG_PAR_MASK);
 1680              		.loc 1 1508 0
 1681 0008 7B68     		ldr	r3, [r7, #4]
 1682 000a 1B8D     		ldrh	r3, [r3, #40]
 1683 000c 03F08603 		and	r3, r3, #134
1509:C:/StellarisWare/utils\softuart.c **** }
 1684              		.loc 1 1509 0
 1685 0010 1846     		mov	r0, r3
 1686 0012 07F10C07 		add	r7, r7, #12
 1687 0016 BD46     		mov	sp, r7
 1688 0018 80BC     		pop	{r7}
 1689 001a 7047     		bx	lr
 1690              		.cfi_endproc
 1691              	.LFE6:
 1693              		.section	.text.SoftUARTTxLevelSet,"ax",%progbits
 1694              		.align	2
 1695              		.thumb
 1696              		.thumb_func
 1698              	SoftUARTTxLevelSet:
 1699              	.LFB7:
1510:C:/StellarisWare/utils\softuart.c **** 
1511:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1512:C:/StellarisWare/utils\softuart.c **** //
1513:C:/StellarisWare/utils\softuart.c **** //! Sets the transmit ``interrupt'' buffer level.
1514:C:/StellarisWare/utils\softuart.c **** //!
1515:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the soft UART data structure.
1516:C:/StellarisWare/utils\softuart.c **** //!
1517:C:/StellarisWare/utils\softuart.c **** //! This function computes the transmit buffer level at which the transmit
1518:C:/StellarisWare/utils\softuart.c **** //! ``interrupt'' is generated.
1519:C:/StellarisWare/utils\softuart.c **** //!
1520:C:/StellarisWare/utils\softuart.c **** //! \return None.
1521:C:/StellarisWare/utils\softuart.c **** //
1522:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1523:C:/StellarisWare/utils\softuart.c **** static void
1524:C:/StellarisWare/utils\softuart.c **** SoftUARTTxLevelSet(tSoftUART *pUART)
1525:C:/StellarisWare/utils\softuart.c **** {
 1700              		.loc 1 1525 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 8
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705 0000 80B4     		push	{r7}
 1706              	.LCFI21:
 1707              		.cfi_def_cfa_offset 4
 1708              		.cfi_offset 7, -4
 1709 0002 83B0     		sub	sp, sp, #12
 1710              	.LCFI22:
 1711              		.cfi_def_cfa_offset 16
 1712 0004 00AF     		add	r7, sp, #0
 1713              	.LCFI23:
 1714              		.cfi_def_cfa_register 7
 1715 0006 7860     		str	r0, [r7, #4]
1526:C:/StellarisWare/utils\softuart.c ****     //
1527:C:/StellarisWare/utils\softuart.c ****     // Determine the transmit buffer "interrupt" fullness setting.
1528:C:/StellarisWare/utils\softuart.c ****     //
1529:C:/StellarisWare/utils\softuart.c ****     switch(pUART->usConfig & SOFTUART_CONFIG_TXLVL_M)
 1716              		.loc 1 1529 0
 1717 0008 7B68     		ldr	r3, [r7, #4]
 1718 000a 1B8D     		ldrh	r3, [r3, #40]
 1719 000c 03F4E063 		and	r3, r3, #1792
 1720 0010 B3F5007F 		cmp	r3, #512
 1721 0014 1FD0     		beq	.L112
 1722 0016 B3F5007F 		cmp	r3, #512
 1723 001a 05DC     		bgt	.L115
 1724 001c 002B     		cmp	r3, #0
 1725 001e 0AD0     		beq	.L110
 1726 0020 B3F5807F 		cmp	r3, #256
 1727 0024 0FD0     		beq	.L111
 1728 0026 42E0     		b	.L108
 1729              	.L115:
 1730 0028 B3F5407F 		cmp	r3, #768
 1731 002c 1BD0     		beq	.L113
 1732 002e B3F5806F 		cmp	r3, #1024
 1733 0032 2AD0     		beq	.L114
 1734 0034 3BE0     		b	.L108
 1735              	.L110:
1530:C:/StellarisWare/utils\softuart.c ****     {
1531:C:/StellarisWare/utils\softuart.c ****         //
1532:C:/StellarisWare/utils\softuart.c ****         // The transmit "interrupt" should be generated when the buffer is 1/8
1533:C:/StellarisWare/utils\softuart.c ****         // full.
1534:C:/StellarisWare/utils\softuart.c ****         //
1535:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_TXLVL_1:
1536:C:/StellarisWare/utils\softuart.c ****         {
1537:C:/StellarisWare/utils\softuart.c ****             //
1538:C:/StellarisWare/utils\softuart.c ****             // Set the transmit buffer level to 1/8 of the buffer length.
1539:C:/StellarisWare/utils\softuart.c ****             //
1540:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferLevel = pUART->usTxBufferLen / 8;
 1736              		.loc 1 1540 0
 1737 0036 7B68     		ldr	r3, [r7, #4]
 1738 0038 9B8A     		ldrh	r3, [r3, #20]
 1739 003a 4FEAD303 		lsr	r3, r3, #3
 1740 003e 9AB2     		uxth	r2, r3
 1741 0040 7B68     		ldr	r3, [r7, #4]
 1742 0042 5A83     		strh	r2, [r3, #26]	@ movhi
1541:C:/StellarisWare/utils\softuart.c **** 
1542:C:/StellarisWare/utils\softuart.c ****             //
1543:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1544:C:/StellarisWare/utils\softuart.c ****             //
1545:C:/StellarisWare/utils\softuart.c ****             break;
 1743              		.loc 1 1545 0
 1744 0044 33E0     		b	.L108
 1745              	.L111:
1546:C:/StellarisWare/utils\softuart.c ****         }
1547:C:/StellarisWare/utils\softuart.c **** 
1548:C:/StellarisWare/utils\softuart.c ****         //
1549:C:/StellarisWare/utils\softuart.c ****         // The transmit "interrupt" should be generated when the buffer is 1/4
1550:C:/StellarisWare/utils\softuart.c ****         // (2/8) full.
1551:C:/StellarisWare/utils\softuart.c ****         //
1552:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_TXLVL_2:
1553:C:/StellarisWare/utils\softuart.c ****         {
1554:C:/StellarisWare/utils\softuart.c ****             //
1555:C:/StellarisWare/utils\softuart.c ****             // Set the transmit buffer level to 1/4 of the buffer length.
1556:C:/StellarisWare/utils\softuart.c ****             //
1557:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferLevel = pUART->usTxBufferLen / 4;
 1746              		.loc 1 1557 0
 1747 0046 7B68     		ldr	r3, [r7, #4]
 1748 0048 9B8A     		ldrh	r3, [r3, #20]
 1749 004a 4FEA9303 		lsr	r3, r3, #2
 1750 004e 9AB2     		uxth	r2, r3
 1751 0050 7B68     		ldr	r3, [r7, #4]
 1752 0052 5A83     		strh	r2, [r3, #26]	@ movhi
1558:C:/StellarisWare/utils\softuart.c **** 
1559:C:/StellarisWare/utils\softuart.c ****             //
1560:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1561:C:/StellarisWare/utils\softuart.c ****             //
1562:C:/StellarisWare/utils\softuart.c ****             break;
 1753              		.loc 1 1562 0
 1754 0054 2BE0     		b	.L108
 1755              	.L112:
1563:C:/StellarisWare/utils\softuart.c ****         }
1564:C:/StellarisWare/utils\softuart.c **** 
1565:C:/StellarisWare/utils\softuart.c ****         //
1566:C:/StellarisWare/utils\softuart.c ****         // The transmit "interrupt" should be generated when the buffer is 1/2
1567:C:/StellarisWare/utils\softuart.c ****         // (4/8) full.
1568:C:/StellarisWare/utils\softuart.c ****         //
1569:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_TXLVL_4:
1570:C:/StellarisWare/utils\softuart.c ****         {
1571:C:/StellarisWare/utils\softuart.c ****             //
1572:C:/StellarisWare/utils\softuart.c ****             // Set the transmit buffer level to 1/2 of the buffer length.
1573:C:/StellarisWare/utils\softuart.c ****             //
1574:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferLevel = pUART->usTxBufferLen / 2;
 1756              		.loc 1 1574 0
 1757 0056 7B68     		ldr	r3, [r7, #4]
 1758 0058 9B8A     		ldrh	r3, [r3, #20]
 1759 005a 4FEA5303 		lsr	r3, r3, #1
 1760 005e 9AB2     		uxth	r2, r3
 1761 0060 7B68     		ldr	r3, [r7, #4]
 1762 0062 5A83     		strh	r2, [r3, #26]	@ movhi
1575:C:/StellarisWare/utils\softuart.c **** 
1576:C:/StellarisWare/utils\softuart.c ****             //
1577:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1578:C:/StellarisWare/utils\softuart.c ****             //
1579:C:/StellarisWare/utils\softuart.c ****             break;
 1763              		.loc 1 1579 0
 1764 0064 23E0     		b	.L108
 1765              	.L113:
1580:C:/StellarisWare/utils\softuart.c ****         }
1581:C:/StellarisWare/utils\softuart.c **** 
1582:C:/StellarisWare/utils\softuart.c ****         //
1583:C:/StellarisWare/utils\softuart.c ****         // The transmit "interrupt" should be generated when the buffer is 3/4
1584:C:/StellarisWare/utils\softuart.c ****         // (6/8) full.
1585:C:/StellarisWare/utils\softuart.c ****         //
1586:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_TXLVL_6:
1587:C:/StellarisWare/utils\softuart.c ****         {
1588:C:/StellarisWare/utils\softuart.c ****             //
1589:C:/StellarisWare/utils\softuart.c ****             // Set the transmit buffer level to 3/4 of the buffer length.
1590:C:/StellarisWare/utils\softuart.c ****             //
1591:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferLevel = (pUART->usTxBufferLen * 3) / 4;
 1766              		.loc 1 1591 0
 1767 0066 7B68     		ldr	r3, [r7, #4]
 1768 0068 9B8A     		ldrh	r3, [r3, #20]
 1769 006a 1A46     		mov	r2, r3
 1770 006c 1346     		mov	r3, r2
 1771 006e 4FEA4303 		lsl	r3, r3, #1
 1772 0072 9B18     		adds	r3, r3, r2
 1773 0074 03F10302 		add	r2, r3, #3
 1774 0078 002B     		cmp	r3, #0
 1775 007a B8BF     		it	lt
 1776 007c 1346     		movlt	r3, r2
 1777 007e 4FEAA303 		asr	r3, r3, #2
 1778 0082 9AB2     		uxth	r2, r3
 1779 0084 7B68     		ldr	r3, [r7, #4]
 1780 0086 5A83     		strh	r2, [r3, #26]	@ movhi
1592:C:/StellarisWare/utils\softuart.c **** 
1593:C:/StellarisWare/utils\softuart.c ****             //
1594:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1595:C:/StellarisWare/utils\softuart.c ****             //
1596:C:/StellarisWare/utils\softuart.c ****             break;
 1781              		.loc 1 1596 0
 1782 0088 11E0     		b	.L108
 1783              	.L114:
1597:C:/StellarisWare/utils\softuart.c ****         }
1598:C:/StellarisWare/utils\softuart.c **** 
1599:C:/StellarisWare/utils\softuart.c ****         //
1600:C:/StellarisWare/utils\softuart.c ****         // The transmit "interrupt" should be generated when the buffer is 7/8
1601:C:/StellarisWare/utils\softuart.c ****         // full.
1602:C:/StellarisWare/utils\softuart.c ****         //
1603:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_TXLVL_7:
1604:C:/StellarisWare/utils\softuart.c ****         {
1605:C:/StellarisWare/utils\softuart.c ****             //
1606:C:/StellarisWare/utils\softuart.c ****             // Set the transmit buffer level to 7/8 of the buffer length.
1607:C:/StellarisWare/utils\softuart.c ****             //
1608:C:/StellarisWare/utils\softuart.c ****             pUART->usTxBufferLevel = (pUART->usTxBufferLen * 7) / 8;
 1784              		.loc 1 1608 0
 1785 008a 7B68     		ldr	r3, [r7, #4]
 1786 008c 9B8A     		ldrh	r3, [r3, #20]
 1787 008e 1A46     		mov	r2, r3
 1788 0090 1346     		mov	r3, r2
 1789 0092 4FEAC303 		lsl	r3, r3, #3
 1790 0096 9B1A     		subs	r3, r3, r2
 1791 0098 03F10702 		add	r2, r3, #7
 1792 009c 002B     		cmp	r3, #0
 1793 009e B8BF     		it	lt
 1794 00a0 1346     		movlt	r3, r2
 1795 00a2 4FEAE303 		asr	r3, r3, #3
 1796 00a6 9AB2     		uxth	r2, r3
 1797 00a8 7B68     		ldr	r3, [r7, #4]
 1798 00aa 5A83     		strh	r2, [r3, #26]	@ movhi
1609:C:/StellarisWare/utils\softuart.c **** 
1610:C:/StellarisWare/utils\softuart.c ****             //
1611:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1612:C:/StellarisWare/utils\softuart.c ****             //
1613:C:/StellarisWare/utils\softuart.c ****             break;
 1799              		.loc 1 1613 0
 1800 00ac 00BF     		nop
 1801              	.L108:
1614:C:/StellarisWare/utils\softuart.c ****         }
1615:C:/StellarisWare/utils\softuart.c ****     }
1616:C:/StellarisWare/utils\softuart.c **** }
 1802              		.loc 1 1616 0
 1803 00ae 07F10C07 		add	r7, r7, #12
 1804 00b2 BD46     		mov	sp, r7
 1805 00b4 80BC     		pop	{r7}
 1806 00b6 7047     		bx	lr
 1807              		.cfi_endproc
 1808              	.LFE7:
 1810              		.section	.text.SoftUARTRxLevelSet,"ax",%progbits
 1811              		.align	2
 1812              		.thumb
 1813              		.thumb_func
 1815              	SoftUARTRxLevelSet:
 1816              	.LFB8:
1617:C:/StellarisWare/utils\softuart.c **** 
1618:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1619:C:/StellarisWare/utils\softuart.c **** //
1620:C:/StellarisWare/utils\softuart.c **** //! Sets the receive ``interrupt'' buffer level.
1621:C:/StellarisWare/utils\softuart.c **** //!
1622:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the soft UART data structure.
1623:C:/StellarisWare/utils\softuart.c **** //!
1624:C:/StellarisWare/utils\softuart.c **** //! This function computes the receive buffer level at which the receive
1625:C:/StellarisWare/utils\softuart.c **** //! ``interrupt'' is generated.
1626:C:/StellarisWare/utils\softuart.c **** //!
1627:C:/StellarisWare/utils\softuart.c **** //! \return None.
1628:C:/StellarisWare/utils\softuart.c **** //
1629:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1630:C:/StellarisWare/utils\softuart.c **** static void
1631:C:/StellarisWare/utils\softuart.c **** SoftUARTRxLevelSet(tSoftUART *pUART)
1632:C:/StellarisWare/utils\softuart.c **** {
 1817              		.loc 1 1632 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 8
 1820              		@ frame_needed = 1, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822 0000 80B4     		push	{r7}
 1823              	.LCFI24:
 1824              		.cfi_def_cfa_offset 4
 1825              		.cfi_offset 7, -4
 1826 0002 83B0     		sub	sp, sp, #12
 1827              	.LCFI25:
 1828              		.cfi_def_cfa_offset 16
 1829 0004 00AF     		add	r7, sp, #0
 1830              	.LCFI26:
 1831              		.cfi_def_cfa_register 7
 1832 0006 7860     		str	r0, [r7, #4]
1633:C:/StellarisWare/utils\softuart.c ****     //
1634:C:/StellarisWare/utils\softuart.c ****     // Determine the receive buffer "interrupt" fullness setting.
1635:C:/StellarisWare/utils\softuart.c ****     //
1636:C:/StellarisWare/utils\softuart.c ****     switch(pUART->usConfig & SOFTUART_CONFIG_RXLVL_M)
 1833              		.loc 1 1636 0
 1834 0008 7B68     		ldr	r3, [r7, #4]
 1835 000a 1B8D     		ldrh	r3, [r3, #40]
 1836 000c 03F46053 		and	r3, r3, #14336
 1837 0010 B3F5805F 		cmp	r3, #4096
 1838 0014 1FD0     		beq	.L120
 1839 0016 B3F5805F 		cmp	r3, #4096
 1840 001a 05DC     		bgt	.L123
 1841 001c 002B     		cmp	r3, #0
 1842 001e 0AD0     		beq	.L118
 1843 0020 B3F5006F 		cmp	r3, #2048
 1844 0024 0FD0     		beq	.L119
 1845 0026 42E0     		b	.L116
 1846              	.L123:
 1847 0028 B3F5C05F 		cmp	r3, #6144
 1848 002c 1BD0     		beq	.L121
 1849 002e B3F5005F 		cmp	r3, #8192
 1850 0032 2AD0     		beq	.L122
 1851 0034 3BE0     		b	.L116
 1852              	.L118:
1637:C:/StellarisWare/utils\softuart.c ****     {
1638:C:/StellarisWare/utils\softuart.c ****         //
1639:C:/StellarisWare/utils\softuart.c ****         // The receive "interrupt" should be generated when the buffer is 1/8
1640:C:/StellarisWare/utils\softuart.c ****         // full.
1641:C:/StellarisWare/utils\softuart.c ****         //
1642:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_RXLVL_1:
1643:C:/StellarisWare/utils\softuart.c ****         {
1644:C:/StellarisWare/utils\softuart.c ****             //
1645:C:/StellarisWare/utils\softuart.c ****             // Set the receive buffer level to 1/8 of the buffer length.
1646:C:/StellarisWare/utils\softuart.c ****             //
1647:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferLevel = pUART->usRxBufferLen / 8;
 1853              		.loc 1 1647 0
 1854 0036 7B68     		ldr	r3, [r7, #4]
 1855 0038 9B8B     		ldrh	r3, [r3, #28]
 1856 003a 4FEAD303 		lsr	r3, r3, #3
 1857 003e 9AB2     		uxth	r2, r3
 1858 0040 7B68     		ldr	r3, [r7, #4]
 1859 0042 5A84     		strh	r2, [r3, #34]	@ movhi
1648:C:/StellarisWare/utils\softuart.c **** 
1649:C:/StellarisWare/utils\softuart.c ****             //
1650:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1651:C:/StellarisWare/utils\softuart.c ****             //
1652:C:/StellarisWare/utils\softuart.c ****             break;
 1860              		.loc 1 1652 0
 1861 0044 33E0     		b	.L116
 1862              	.L119:
1653:C:/StellarisWare/utils\softuart.c ****         }
1654:C:/StellarisWare/utils\softuart.c **** 
1655:C:/StellarisWare/utils\softuart.c ****         //
1656:C:/StellarisWare/utils\softuart.c ****         // The receive "interrupt" should be generated when the buffer is 1/4
1657:C:/StellarisWare/utils\softuart.c ****         // (2/8) full.
1658:C:/StellarisWare/utils\softuart.c ****         //
1659:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_RXLVL_2:
1660:C:/StellarisWare/utils\softuart.c ****         {
1661:C:/StellarisWare/utils\softuart.c ****             //
1662:C:/StellarisWare/utils\softuart.c ****             // Set the receive buffer level to 1/4 of the buffer length.
1663:C:/StellarisWare/utils\softuart.c ****             //
1664:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferLevel = pUART->usRxBufferLen / 4;
 1863              		.loc 1 1664 0
 1864 0046 7B68     		ldr	r3, [r7, #4]
 1865 0048 9B8B     		ldrh	r3, [r3, #28]
 1866 004a 4FEA9303 		lsr	r3, r3, #2
 1867 004e 9AB2     		uxth	r2, r3
 1868 0050 7B68     		ldr	r3, [r7, #4]
 1869 0052 5A84     		strh	r2, [r3, #34]	@ movhi
1665:C:/StellarisWare/utils\softuart.c **** 
1666:C:/StellarisWare/utils\softuart.c ****             //
1667:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1668:C:/StellarisWare/utils\softuart.c ****             //
1669:C:/StellarisWare/utils\softuart.c ****             break;
 1870              		.loc 1 1669 0
 1871 0054 2BE0     		b	.L116
 1872              	.L120:
1670:C:/StellarisWare/utils\softuart.c ****         }
1671:C:/StellarisWare/utils\softuart.c **** 
1672:C:/StellarisWare/utils\softuart.c ****         //
1673:C:/StellarisWare/utils\softuart.c ****         // The receive "interrupt" should be generated when the buffer is 1/2
1674:C:/StellarisWare/utils\softuart.c ****         // (4/8) full.
1675:C:/StellarisWare/utils\softuart.c ****         //
1676:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_RXLVL_4:
1677:C:/StellarisWare/utils\softuart.c ****         {
1678:C:/StellarisWare/utils\softuart.c ****             //
1679:C:/StellarisWare/utils\softuart.c ****             // Set the receive buffer level to 1/2 of the buffer length.
1680:C:/StellarisWare/utils\softuart.c ****             //
1681:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferLevel = pUART->usRxBufferLen / 2;
 1873              		.loc 1 1681 0
 1874 0056 7B68     		ldr	r3, [r7, #4]
 1875 0058 9B8B     		ldrh	r3, [r3, #28]
 1876 005a 4FEA5303 		lsr	r3, r3, #1
 1877 005e 9AB2     		uxth	r2, r3
 1878 0060 7B68     		ldr	r3, [r7, #4]
 1879 0062 5A84     		strh	r2, [r3, #34]	@ movhi
1682:C:/StellarisWare/utils\softuart.c **** 
1683:C:/StellarisWare/utils\softuart.c ****             //
1684:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1685:C:/StellarisWare/utils\softuart.c ****             //
1686:C:/StellarisWare/utils\softuart.c ****             break;
 1880              		.loc 1 1686 0
 1881 0064 23E0     		b	.L116
 1882              	.L121:
1687:C:/StellarisWare/utils\softuart.c ****         }
1688:C:/StellarisWare/utils\softuart.c **** 
1689:C:/StellarisWare/utils\softuart.c ****         //
1690:C:/StellarisWare/utils\softuart.c ****         // The receive "interrupt" should be generated when the buffer is 3/4
1691:C:/StellarisWare/utils\softuart.c ****         // (6/8) full.
1692:C:/StellarisWare/utils\softuart.c ****         //
1693:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_RXLVL_6:
1694:C:/StellarisWare/utils\softuart.c ****         {
1695:C:/StellarisWare/utils\softuart.c ****             //
1696:C:/StellarisWare/utils\softuart.c ****             // Set the receive buffer level to 3/4 of the buffer length.
1697:C:/StellarisWare/utils\softuart.c ****             //
1698:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferLevel = (pUART->usRxBufferLen * 3) / 4;
 1883              		.loc 1 1698 0
 1884 0066 7B68     		ldr	r3, [r7, #4]
 1885 0068 9B8B     		ldrh	r3, [r3, #28]
 1886 006a 1A46     		mov	r2, r3
 1887 006c 1346     		mov	r3, r2
 1888 006e 4FEA4303 		lsl	r3, r3, #1
 1889 0072 9B18     		adds	r3, r3, r2
 1890 0074 03F10302 		add	r2, r3, #3
 1891 0078 002B     		cmp	r3, #0
 1892 007a B8BF     		it	lt
 1893 007c 1346     		movlt	r3, r2
 1894 007e 4FEAA303 		asr	r3, r3, #2
 1895 0082 9AB2     		uxth	r2, r3
 1896 0084 7B68     		ldr	r3, [r7, #4]
 1897 0086 5A84     		strh	r2, [r3, #34]	@ movhi
1699:C:/StellarisWare/utils\softuart.c **** 
1700:C:/StellarisWare/utils\softuart.c ****             //
1701:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1702:C:/StellarisWare/utils\softuart.c ****             //
1703:C:/StellarisWare/utils\softuart.c ****             break;
 1898              		.loc 1 1703 0
 1899 0088 11E0     		b	.L116
 1900              	.L122:
1704:C:/StellarisWare/utils\softuart.c ****         }
1705:C:/StellarisWare/utils\softuart.c **** 
1706:C:/StellarisWare/utils\softuart.c ****         //
1707:C:/StellarisWare/utils\softuart.c ****         // The receive "interrupt" should be generated when the buffer is 7/8
1708:C:/StellarisWare/utils\softuart.c ****         // full.
1709:C:/StellarisWare/utils\softuart.c ****         //
1710:C:/StellarisWare/utils\softuart.c ****         case SOFTUART_CONFIG_RXLVL_7:
1711:C:/StellarisWare/utils\softuart.c ****         {
1712:C:/StellarisWare/utils\softuart.c ****             //
1713:C:/StellarisWare/utils\softuart.c ****             // Set the receive buffer level to 7/8 of the buffer length.
1714:C:/StellarisWare/utils\softuart.c ****             //
1715:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferLevel = (pUART->usRxBufferLen * 7) / 8;
 1901              		.loc 1 1715 0
 1902 008a 7B68     		ldr	r3, [r7, #4]
 1903 008c 9B8B     		ldrh	r3, [r3, #28]
 1904 008e 1A46     		mov	r2, r3
 1905 0090 1346     		mov	r3, r2
 1906 0092 4FEAC303 		lsl	r3, r3, #3
 1907 0096 9B1A     		subs	r3, r3, r2
 1908 0098 03F10702 		add	r2, r3, #7
 1909 009c 002B     		cmp	r3, #0
 1910 009e B8BF     		it	lt
 1911 00a0 1346     		movlt	r3, r2
 1912 00a2 4FEAE303 		asr	r3, r3, #3
 1913 00a6 9AB2     		uxth	r2, r3
 1914 00a8 7B68     		ldr	r3, [r7, #4]
 1915 00aa 5A84     		strh	r2, [r3, #34]	@ movhi
1716:C:/StellarisWare/utils\softuart.c **** 
1717:C:/StellarisWare/utils\softuart.c ****             //
1718:C:/StellarisWare/utils\softuart.c ****             // This setting has been handled.
1719:C:/StellarisWare/utils\softuart.c ****             //
1720:C:/StellarisWare/utils\softuart.c ****             break;
 1916              		.loc 1 1720 0
 1917 00ac 00BF     		nop
 1918              	.L116:
1721:C:/StellarisWare/utils\softuart.c ****         }
1722:C:/StellarisWare/utils\softuart.c ****     }
1723:C:/StellarisWare/utils\softuart.c **** }
 1919              		.loc 1 1723 0
 1920 00ae 07F10C07 		add	r7, r7, #12
 1921 00b2 BD46     		mov	sp, r7
 1922 00b4 80BC     		pop	{r7}
 1923 00b6 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE8:
 1927              		.section	.text.SoftUARTFIFOLevelSet,"ax",%progbits
 1928              		.align	2
 1929              		.global	SoftUARTFIFOLevelSet
 1930              		.thumb
 1931              		.thumb_func
 1933              	SoftUARTFIFOLevelSet:
 1934              	.LFB9:
1724:C:/StellarisWare/utils\softuart.c **** 
1725:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1726:C:/StellarisWare/utils\softuart.c **** //
1727:C:/StellarisWare/utils\softuart.c **** //! Sets the buffer level at which ``interrupts'' are generated.
1728:C:/StellarisWare/utils\softuart.c **** //!
1729:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1730:C:/StellarisWare/utils\softuart.c **** //! \param ulTxLevel is the transmit buffer ``interrupt'' level, specified as
1731:C:/StellarisWare/utils\softuart.c **** //! one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8, \b UART_FIFO_TX4_8,
1732:C:/StellarisWare/utils\softuart.c **** //! \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
1733:C:/StellarisWare/utils\softuart.c **** //! \param ulRxLevel is the receive buffer ``interrupt'' level, specified as
1734:C:/StellarisWare/utils\softuart.c **** //! one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8, \b UART_FIFO_RX4_8,
1735:C:/StellarisWare/utils\softuart.c **** //! \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
1736:C:/StellarisWare/utils\softuart.c **** //!
1737:C:/StellarisWare/utils\softuart.c **** //! This function sets the buffer level at which transmit and receive
1738:C:/StellarisWare/utils\softuart.c **** //! ``interrupts'' are generated.
1739:C:/StellarisWare/utils\softuart.c **** //!
1740:C:/StellarisWare/utils\softuart.c **** //! \return None.
1741:C:/StellarisWare/utils\softuart.c **** //
1742:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1743:C:/StellarisWare/utils\softuart.c **** void
1744:C:/StellarisWare/utils\softuart.c **** SoftUARTFIFOLevelSet(tSoftUART *pUART, unsigned long ulTxLevel,
1745:C:/StellarisWare/utils\softuart.c ****                      unsigned long ulRxLevel)
1746:C:/StellarisWare/utils\softuart.c **** {
 1935              		.loc 1 1746 0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 16
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939 0000 80B5     		push	{r7, lr}
 1940              	.LCFI27:
 1941              		.cfi_def_cfa_offset 8
 1942              		.cfi_offset 14, -4
 1943              		.cfi_offset 7, -8
 1944 0002 84B0     		sub	sp, sp, #16
 1945              	.LCFI28:
 1946              		.cfi_def_cfa_offset 24
 1947 0004 00AF     		add	r7, sp, #0
 1948              	.LCFI29:
 1949              		.cfi_def_cfa_register 7
 1950 0006 F860     		str	r0, [r7, #12]
 1951 0008 B960     		str	r1, [r7, #8]
 1952 000a 7A60     		str	r2, [r7, #4]
1747:C:/StellarisWare/utils\softuart.c ****     //
1748:C:/StellarisWare/utils\softuart.c ****     // Check the arguments.
1749:C:/StellarisWare/utils\softuart.c ****     //
1750:C:/StellarisWare/utils\softuart.c ****     ASSERT((ulTxLevel == SOFTUART_FIFO_TX1_8) ||
1751:C:/StellarisWare/utils\softuart.c ****            (ulTxLevel == SOFTUART_FIFO_TX2_8) ||
1752:C:/StellarisWare/utils\softuart.c ****            (ulTxLevel == SOFTUART_FIFO_TX4_8) ||
1753:C:/StellarisWare/utils\softuart.c ****            (ulTxLevel == SOFTUART_FIFO_TX6_8) ||
1754:C:/StellarisWare/utils\softuart.c ****            (ulTxLevel == SOFTUART_FIFO_TX7_8));
1755:C:/StellarisWare/utils\softuart.c ****     ASSERT((ulRxLevel == SOFTUART_FIFO_RX1_8) ||
1756:C:/StellarisWare/utils\softuart.c ****            (ulRxLevel == SOFTUART_FIFO_RX2_8) ||
1757:C:/StellarisWare/utils\softuart.c ****            (ulRxLevel == SOFTUART_FIFO_RX4_8) ||
1758:C:/StellarisWare/utils\softuart.c ****            (ulRxLevel == SOFTUART_FIFO_RX6_8) ||
1759:C:/StellarisWare/utils\softuart.c ****            (ulRxLevel == SOFTUART_FIFO_RX7_8));
1760:C:/StellarisWare/utils\softuart.c **** 
1761:C:/StellarisWare/utils\softuart.c ****     //
1762:C:/StellarisWare/utils\softuart.c ****     // Save the buffer "interrupt" levels.
1763:C:/StellarisWare/utils\softuart.c ****     //
1764:C:/StellarisWare/utils\softuart.c ****     pUART->usConfig = ((pUART->usConfig & SOFTUART_CONFIG_BASE_M) |
 1953              		.loc 1 1764 0
 1954 000c FB68     		ldr	r3, [r7, #12]
 1955 000e 1B8D     		ldrh	r3, [r3, #40]
 1956 0010 DBB2     		uxtb	r3, r3
 1957 0012 9AB2     		uxth	r2, r3
 1958 0014 BB68     		ldr	r3, [r7, #8]
 1959 0016 99B2     		uxth	r1, r3
 1960 0018 7B68     		ldr	r3, [r7, #4]
 1961 001a 9BB2     		uxth	r3, r3
 1962 001c 0B43     		orrs	r3, r3, r1
 1963 001e 9BB2     		uxth	r3, r3
 1964 0020 4FEA0323 		lsl	r3, r3, #8
 1965 0024 9BB2     		uxth	r3, r3
 1966 0026 1343     		orrs	r3, r3, r2
 1967 0028 9AB2     		uxth	r2, r3
 1968 002a FB68     		ldr	r3, [r7, #12]
 1969 002c 1A85     		strh	r2, [r3, #40]	@ movhi
1765:C:/StellarisWare/utils\softuart.c ****                        ((ulTxLevel | ulRxLevel) << 8));
1766:C:/StellarisWare/utils\softuart.c **** 
1767:C:/StellarisWare/utils\softuart.c ****     //
1768:C:/StellarisWare/utils\softuart.c ****     // Compute the new buffer "interrupt" levels.
1769:C:/StellarisWare/utils\softuart.c ****     //
1770:C:/StellarisWare/utils\softuart.c ****     SoftUARTTxLevelSet(pUART);
 1970              		.loc 1 1770 0
 1971 002e F868     		ldr	r0, [r7, #12]
 1972 0030 FFF7FEFF 		bl	SoftUARTTxLevelSet
1771:C:/StellarisWare/utils\softuart.c ****     SoftUARTRxLevelSet(pUART);
 1973              		.loc 1 1771 0
 1974 0034 F868     		ldr	r0, [r7, #12]
 1975 0036 FFF7FEFF 		bl	SoftUARTRxLevelSet
1772:C:/StellarisWare/utils\softuart.c **** }
 1976              		.loc 1 1772 0
 1977 003a 07F11007 		add	r7, r7, #16
 1978 003e BD46     		mov	sp, r7
 1979 0040 80BD     		pop	{r7, pc}
 1980              		.cfi_endproc
 1981              	.LFE9:
 1983 0042 00BF     		.section	.text.SoftUARTFIFOLevelGet,"ax",%progbits
 1984              		.align	2
 1985              		.global	SoftUARTFIFOLevelGet
 1986              		.thumb
 1987              		.thumb_func
 1989              	SoftUARTFIFOLevelGet:
 1990              	.LFB10:
1773:C:/StellarisWare/utils\softuart.c **** 
1774:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1775:C:/StellarisWare/utils\softuart.c **** //
1776:C:/StellarisWare/utils\softuart.c **** //! Gets the buffer level at which ``interrupts'' are generated.
1777:C:/StellarisWare/utils\softuart.c **** //!
1778:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1779:C:/StellarisWare/utils\softuart.c **** //! \param pulTxLevel is a pointer to storage for the transmit buffer level,
1780:C:/StellarisWare/utils\softuart.c **** //! returned as one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8,
1781:C:/StellarisWare/utils\softuart.c **** //! \b UART_FIFO_TX4_8, \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
1782:C:/StellarisWare/utils\softuart.c **** //! \param pulRxLevel is a pointer to storage for the receive buffer level,
1783:C:/StellarisWare/utils\softuart.c **** //! returned as one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8,
1784:C:/StellarisWare/utils\softuart.c **** //! \b UART_FIFO_RX4_8, \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
1785:C:/StellarisWare/utils\softuart.c **** //!
1786:C:/StellarisWare/utils\softuart.c **** //! This function gets the buffer level at which transmit and receive
1787:C:/StellarisWare/utils\softuart.c **** //! ``interrupts'' are generated.
1788:C:/StellarisWare/utils\softuart.c **** //!
1789:C:/StellarisWare/utils\softuart.c **** //! \return None.
1790:C:/StellarisWare/utils\softuart.c **** //
1791:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1792:C:/StellarisWare/utils\softuart.c **** void
1793:C:/StellarisWare/utils\softuart.c **** SoftUARTFIFOLevelGet(tSoftUART *pUART, unsigned long *pulTxLevel,
1794:C:/StellarisWare/utils\softuart.c ****                  unsigned long *pulRxLevel)
1795:C:/StellarisWare/utils\softuart.c **** {
 1991              		.loc 1 1795 0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 16
 1994              		@ frame_needed = 1, uses_anonymous_args = 0
 1995              		@ link register save eliminated.
 1996 0000 80B4     		push	{r7}
 1997              	.LCFI30:
 1998              		.cfi_def_cfa_offset 4
 1999              		.cfi_offset 7, -4
 2000 0002 85B0     		sub	sp, sp, #20
 2001              	.LCFI31:
 2002              		.cfi_def_cfa_offset 24
 2003 0004 00AF     		add	r7, sp, #0
 2004              	.LCFI32:
 2005              		.cfi_def_cfa_register 7
 2006 0006 F860     		str	r0, [r7, #12]
 2007 0008 B960     		str	r1, [r7, #8]
 2008 000a 7A60     		str	r2, [r7, #4]
1796:C:/StellarisWare/utils\softuart.c ****     //
1797:C:/StellarisWare/utils\softuart.c ****     // Extract the transmit and receive buffer levels.
1798:C:/StellarisWare/utils\softuart.c ****     //
1799:C:/StellarisWare/utils\softuart.c ****     *pulTxLevel = (pUART->usConfig & SOFTUART_CONFIG_TXLVL_M) >> 8;
 2009              		.loc 1 1799 0
 2010 000c FB68     		ldr	r3, [r7, #12]
 2011 000e 1B8D     		ldrh	r3, [r3, #40]
 2012 0010 03F4E063 		and	r3, r3, #1792
 2013 0014 4FEA2323 		asr	r3, r3, #8
 2014 0018 1A46     		mov	r2, r3
 2015 001a BB68     		ldr	r3, [r7, #8]
 2016 001c 1A60     		str	r2, [r3, #0]
1800:C:/StellarisWare/utils\softuart.c ****     *pulRxLevel = (pUART->usConfig & SOFTUART_CONFIG_RXLVL_M) >> 8;
 2017              		.loc 1 1800 0
 2018 001e FB68     		ldr	r3, [r7, #12]
 2019 0020 1B8D     		ldrh	r3, [r3, #40]
 2020 0022 03F46053 		and	r3, r3, #14336
 2021 0026 4FEA2323 		asr	r3, r3, #8
 2022 002a 1A46     		mov	r2, r3
 2023 002c 7B68     		ldr	r3, [r7, #4]
 2024 002e 1A60     		str	r2, [r3, #0]
1801:C:/StellarisWare/utils\softuart.c **** }
 2025              		.loc 1 1801 0
 2026 0030 07F11407 		add	r7, r7, #20
 2027 0034 BD46     		mov	sp, r7
 2028 0036 80BC     		pop	{r7}
 2029 0038 7047     		bx	lr
 2030              		.cfi_endproc
 2031              	.LFE10:
 2033 003a 00BF     		.section	.text.SoftUARTConfigGet,"ax",%progbits
 2034              		.align	2
 2035              		.global	SoftUARTConfigGet
 2036              		.thumb
 2037              		.thumb_func
 2039              	SoftUARTConfigGet:
 2040              	.LFB11:
1802:C:/StellarisWare/utils\softuart.c **** 
1803:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1804:C:/StellarisWare/utils\softuart.c **** //
1805:C:/StellarisWare/utils\softuart.c **** //! Gets the current configuration of a UART.
1806:C:/StellarisWare/utils\softuart.c **** //!
1807:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1808:C:/StellarisWare/utils\softuart.c **** //! \param pulConfig is a pointer to storage for the data format.
1809:C:/StellarisWare/utils\softuart.c **** //!
1810:C:/StellarisWare/utils\softuart.c **** //! Returns the data format of the SoftUART.  The data format returned in
1811:C:/StellarisWare/utils\softuart.c **** //! \e pulConfig is enumerated the same as the \e ulConfig parameter of
1812:C:/StellarisWare/utils\softuart.c **** //! SoftUARTConfigSet().
1813:C:/StellarisWare/utils\softuart.c **** //!
1814:C:/StellarisWare/utils\softuart.c **** //! \return None.
1815:C:/StellarisWare/utils\softuart.c **** //
1816:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1817:C:/StellarisWare/utils\softuart.c **** void
1818:C:/StellarisWare/utils\softuart.c **** SoftUARTConfigGet(tSoftUART *pUART, unsigned long *pulConfig)
1819:C:/StellarisWare/utils\softuart.c **** {
 2041              		.loc 1 1819 0
 2042              		.cfi_startproc
 2043              		@ args = 0, pretend = 0, frame = 8
 2044              		@ frame_needed = 1, uses_anonymous_args = 0
 2045              		@ link register save eliminated.
 2046 0000 80B4     		push	{r7}
 2047              	.LCFI33:
 2048              		.cfi_def_cfa_offset 4
 2049              		.cfi_offset 7, -4
 2050 0002 83B0     		sub	sp, sp, #12
 2051              	.LCFI34:
 2052              		.cfi_def_cfa_offset 16
 2053 0004 00AF     		add	r7, sp, #0
 2054              	.LCFI35:
 2055              		.cfi_def_cfa_register 7
 2056 0006 7860     		str	r0, [r7, #4]
 2057 0008 3960     		str	r1, [r7, #0]
1820:C:/StellarisWare/utils\softuart.c ****     //
1821:C:/StellarisWare/utils\softuart.c ****     // Get the data format.
1822:C:/StellarisWare/utils\softuart.c ****     //
1823:C:/StellarisWare/utils\softuart.c ****     *pulConfig = pUART->usConfig & SOFTUART_CONFIG_BASE_M;
 2058              		.loc 1 1823 0
 2059 000a 7B68     		ldr	r3, [r7, #4]
 2060 000c 1B8D     		ldrh	r3, [r3, #40]
 2061 000e DAB2     		uxtb	r2, r3
 2062 0010 3B68     		ldr	r3, [r7, #0]
 2063 0012 1A60     		str	r2, [r3, #0]
1824:C:/StellarisWare/utils\softuart.c **** }
 2064              		.loc 1 1824 0
 2065 0014 07F10C07 		add	r7, r7, #12
 2066 0018 BD46     		mov	sp, r7
 2067 001a 80BC     		pop	{r7}
 2068 001c 7047     		bx	lr
 2069              		.cfi_endproc
 2070              	.LFE11:
 2072 001e 00BF     		.section	.text.SoftUARTEnable,"ax",%progbits
 2073              		.align	2
 2074              		.global	SoftUARTEnable
 2075              		.thumb
 2076              		.thumb_func
 2078              	SoftUARTEnable:
 2079              	.LFB12:
1825:C:/StellarisWare/utils\softuart.c **** 
1826:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1827:C:/StellarisWare/utils\softuart.c **** //
1828:C:/StellarisWare/utils\softuart.c **** //! Enables the SoftUART.
1829:C:/StellarisWare/utils\softuart.c **** //!
1830:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1831:C:/StellarisWare/utils\softuart.c **** //!
1832:C:/StellarisWare/utils\softuart.c **** //! This function enables the SoftUART, allowing data to be transmitted and
1833:C:/StellarisWare/utils\softuart.c **** //! received.
1834:C:/StellarisWare/utils\softuart.c **** //!
1835:C:/StellarisWare/utils\softuart.c **** //! \return None.
1836:C:/StellarisWare/utils\softuart.c **** //
1837:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1838:C:/StellarisWare/utils\softuart.c **** void
1839:C:/StellarisWare/utils\softuart.c **** SoftUARTEnable(tSoftUART *pUART)
1840:C:/StellarisWare/utils\softuart.c **** {
 2080              		.loc 1 1840 0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 8
 2083              		@ frame_needed = 1, uses_anonymous_args = 0
 2084              		@ link register save eliminated.
 2085 0000 80B4     		push	{r7}
 2086              	.LCFI36:
 2087              		.cfi_def_cfa_offset 4
 2088              		.cfi_offset 7, -4
 2089 0002 83B0     		sub	sp, sp, #12
 2090              	.LCFI37:
 2091              		.cfi_def_cfa_offset 16
 2092 0004 00AF     		add	r7, sp, #0
 2093              	.LCFI38:
 2094              		.cfi_def_cfa_register 7
 2095 0006 7860     		str	r0, [r7, #4]
1841:C:/StellarisWare/utils\softuart.c ****     //
1842:C:/StellarisWare/utils\softuart.c ****     // Enable the SoftUART.
1843:C:/StellarisWare/utils\softuart.c ****     //
1844:C:/StellarisWare/utils\softuart.c ****     pUART->ucFlags |= SOFTUART_FLAG_ENABLE;
 2096              		.loc 1 1844 0
 2097 0008 7B68     		ldr	r3, [r7, #4]
 2098 000a 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2099 000e 43F00103 		orr	r3, r3, #1
 2100 0012 DAB2     		uxtb	r2, r3
 2101 0014 7B68     		ldr	r3, [r7, #4]
 2102 0016 83F82A20 		strb	r2, [r3, #42]
1845:C:/StellarisWare/utils\softuart.c **** }
 2103              		.loc 1 1845 0
 2104 001a 07F10C07 		add	r7, r7, #12
 2105 001e BD46     		mov	sp, r7
 2106 0020 80BC     		pop	{r7}
 2107 0022 7047     		bx	lr
 2108              		.cfi_endproc
 2109              	.LFE12:
 2111              		.section	.text.SoftUARTDisable,"ax",%progbits
 2112              		.align	2
 2113              		.global	SoftUARTDisable
 2114              		.thumb
 2115              		.thumb_func
 2117              	SoftUARTDisable:
 2118              	.LFB13:
1846:C:/StellarisWare/utils\softuart.c **** 
1847:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1848:C:/StellarisWare/utils\softuart.c **** //
1849:C:/StellarisWare/utils\softuart.c **** //! Disables the SoftUART.
1850:C:/StellarisWare/utils\softuart.c **** //!
1851:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1852:C:/StellarisWare/utils\softuart.c **** //!
1853:C:/StellarisWare/utils\softuart.c **** //! This function disables the SoftUART after waiting for it to become idle.
1854:C:/StellarisWare/utils\softuart.c **** //!
1855:C:/StellarisWare/utils\softuart.c **** //! \return None.
1856:C:/StellarisWare/utils\softuart.c **** //
1857:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1858:C:/StellarisWare/utils\softuart.c **** void
1859:C:/StellarisWare/utils\softuart.c **** SoftUARTDisable(tSoftUART *pUART)
1860:C:/StellarisWare/utils\softuart.c **** {
 2119              		.loc 1 1860 0
 2120              		.cfi_startproc
 2121              		@ args = 0, pretend = 0, frame = 8
 2122              		@ frame_needed = 1, uses_anonymous_args = 0
 2123 0000 80B5     		push	{r7, lr}
 2124              	.LCFI39:
 2125              		.cfi_def_cfa_offset 8
 2126              		.cfi_offset 14, -4
 2127              		.cfi_offset 7, -8
 2128 0002 82B0     		sub	sp, sp, #8
 2129              	.LCFI40:
 2130              		.cfi_def_cfa_offset 16
 2131 0004 00AF     		add	r7, sp, #0
 2132              	.LCFI41:
 2133              		.cfi_def_cfa_register 7
 2134 0006 7860     		str	r0, [r7, #4]
1861:C:/StellarisWare/utils\softuart.c ****     //
1862:C:/StellarisWare/utils\softuart.c ****     // Wait for end of TX.
1863:C:/StellarisWare/utils\softuart.c ****     //
1864:C:/StellarisWare/utils\softuart.c ****     while(SoftUARTBusy(pUART))
 2135              		.loc 1 1864 0
 2136 0008 00BF     		nop
 2137              	.L129:
 2138              		.loc 1 1864 0 is_stmt 0 discriminator 1
 2139 000a 7868     		ldr	r0, [r7, #4]
 2140 000c FFF7FEFF 		bl	SoftUARTBusy
 2141 0010 0346     		mov	r3, r0
 2142 0012 002B     		cmp	r3, #0
 2143 0014 F9D1     		bne	.L129
1865:C:/StellarisWare/utils\softuart.c ****     {
1866:C:/StellarisWare/utils\softuart.c ****     }
1867:C:/StellarisWare/utils\softuart.c **** 
1868:C:/StellarisWare/utils\softuart.c ****     //
1869:C:/StellarisWare/utils\softuart.c ****     // Disable the SoftUART.
1870:C:/StellarisWare/utils\softuart.c ****     //
1871:C:/StellarisWare/utils\softuart.c ****     pUART->ucFlags &= ~(SOFTUART_FLAG_ENABLE);
 2144              		.loc 1 1871 0 is_stmt 1
 2145 0016 7B68     		ldr	r3, [r7, #4]
 2146 0018 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2147 001c 23F00103 		bic	r3, r3, #1
 2148 0020 DAB2     		uxtb	r2, r3
 2149 0022 7B68     		ldr	r3, [r7, #4]
 2150 0024 83F82A20 		strb	r2, [r3, #42]
1872:C:/StellarisWare/utils\softuart.c **** }
 2151              		.loc 1 1872 0
 2152 0028 07F10807 		add	r7, r7, #8
 2153 002c BD46     		mov	sp, r7
 2154 002e 80BD     		pop	{r7, pc}
 2155              		.cfi_endproc
 2156              	.LFE13:
 2158              		.section	.text.SoftUARTCharsAvail,"ax",%progbits
 2159              		.align	2
 2160              		.global	SoftUARTCharsAvail
 2161              		.thumb
 2162              		.thumb_func
 2164              	SoftUARTCharsAvail:
 2165              	.LFB14:
1873:C:/StellarisWare/utils\softuart.c **** 
1874:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1875:C:/StellarisWare/utils\softuart.c **** //
1876:C:/StellarisWare/utils\softuart.c **** //! Determines if there are any characters in the receive buffer.
1877:C:/StellarisWare/utils\softuart.c **** //!
1878:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1879:C:/StellarisWare/utils\softuart.c **** //!
1880:C:/StellarisWare/utils\softuart.c **** //! This function returns a flag indicating whether or not there is data
1881:C:/StellarisWare/utils\softuart.c **** //! available in the receive buffer.
1882:C:/StellarisWare/utils\softuart.c **** //!
1883:C:/StellarisWare/utils\softuart.c **** //! \return Returns \b true if there is data in the receive buffer or \b false
1884:C:/StellarisWare/utils\softuart.c **** //! if there is no data in the receive buffer.
1885:C:/StellarisWare/utils\softuart.c **** //
1886:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1887:C:/StellarisWare/utils\softuart.c **** tBoolean
1888:C:/StellarisWare/utils\softuart.c **** SoftUARTCharsAvail(tSoftUART *pUART)
1889:C:/StellarisWare/utils\softuart.c **** {
 2166              		.loc 1 1889 0
 2167              		.cfi_startproc
 2168              		@ args = 0, pretend = 0, frame = 8
 2169              		@ frame_needed = 1, uses_anonymous_args = 0
 2170              		@ link register save eliminated.
 2171 0000 80B4     		push	{r7}
 2172              	.LCFI42:
 2173              		.cfi_def_cfa_offset 4
 2174              		.cfi_offset 7, -4
 2175 0002 83B0     		sub	sp, sp, #12
 2176              	.LCFI43:
 2177              		.cfi_def_cfa_offset 16
 2178 0004 00AF     		add	r7, sp, #0
 2179              	.LCFI44:
 2180              		.cfi_def_cfa_register 7
 2181 0006 7860     		str	r0, [r7, #4]
1890:C:/StellarisWare/utils\softuart.c ****     //
1891:C:/StellarisWare/utils\softuart.c ****     // Return the availability of characters.
1892:C:/StellarisWare/utils\softuart.c ****     //
1893:C:/StellarisWare/utils\softuart.c ****     return((pUART->usRxBufferRead == pUART->usRxBufferWrite) ? false : true);
 2182              		.loc 1 1893 0
 2183 0008 7B68     		ldr	r3, [r7, #4]
 2184 000a DA8B     		ldrh	r2, [r3, #30]
 2185 000c 7B68     		ldr	r3, [r7, #4]
 2186 000e 1B8C     		ldrh	r3, [r3, #32]
 2187 0010 9A42     		cmp	r2, r3
 2188 0012 0CBF     		ite	eq
 2189 0014 0023     		moveq	r3, #0
 2190 0016 0123     		movne	r3, #1
 2191 0018 DBB2     		uxtb	r3, r3
1894:C:/StellarisWare/utils\softuart.c **** }
 2192              		.loc 1 1894 0
 2193 001a 1846     		mov	r0, r3
 2194 001c 07F10C07 		add	r7, r7, #12
 2195 0020 BD46     		mov	sp, r7
 2196 0022 80BC     		pop	{r7}
 2197 0024 7047     		bx	lr
 2198              		.cfi_endproc
 2199              	.LFE14:
 2201 0026 00BF     		.section	.text.SoftUARTSpaceAvail,"ax",%progbits
 2202              		.align	2
 2203              		.global	SoftUARTSpaceAvail
 2204              		.thumb
 2205              		.thumb_func
 2207              	SoftUARTSpaceAvail:
 2208              	.LFB15:
1895:C:/StellarisWare/utils\softuart.c **** 
1896:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1897:C:/StellarisWare/utils\softuart.c **** //
1898:C:/StellarisWare/utils\softuart.c **** //! Determines if there is any space in the transmit buffer.
1899:C:/StellarisWare/utils\softuart.c **** //!
1900:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1901:C:/StellarisWare/utils\softuart.c **** //!
1902:C:/StellarisWare/utils\softuart.c **** //! This function returns a flag indicating whether or not there is space
1903:C:/StellarisWare/utils\softuart.c **** //! available in the transmit buffer.
1904:C:/StellarisWare/utils\softuart.c **** //!
1905:C:/StellarisWare/utils\softuart.c **** //! \return Returns \b true if there is space available in the transmit buffer
1906:C:/StellarisWare/utils\softuart.c **** //! or \b false if there is no space available in the transmit buffer.
1907:C:/StellarisWare/utils\softuart.c **** //
1908:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1909:C:/StellarisWare/utils\softuart.c **** tBoolean
1910:C:/StellarisWare/utils\softuart.c **** SoftUARTSpaceAvail(tSoftUART *pUART)
1911:C:/StellarisWare/utils\softuart.c **** {
 2209              		.loc 1 1911 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 16
 2212              		@ frame_needed = 1, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
 2214 0000 80B4     		push	{r7}
 2215              	.LCFI45:
 2216              		.cfi_def_cfa_offset 4
 2217              		.cfi_offset 7, -4
 2218 0002 85B0     		sub	sp, sp, #20
 2219              	.LCFI46:
 2220              		.cfi_def_cfa_offset 24
 2221 0004 00AF     		add	r7, sp, #0
 2222              	.LCFI47:
 2223              		.cfi_def_cfa_register 7
 2224 0006 7860     		str	r0, [r7, #4]
1912:C:/StellarisWare/utils\softuart.c ****     unsigned short usTemp;
1913:C:/StellarisWare/utils\softuart.c **** 
1914:C:/StellarisWare/utils\softuart.c ****     //
1915:C:/StellarisWare/utils\softuart.c ****     // Determine the values of the write pointer once incremented.
1916:C:/StellarisWare/utils\softuart.c ****     //
1917:C:/StellarisWare/utils\softuart.c ****     usTemp = pUART->usTxBufferWrite + 1;
 2225              		.loc 1 1917 0
 2226 0008 7B68     		ldr	r3, [r7, #4]
 2227 000a 1B8B     		ldrh	r3, [r3, #24]
 2228 000c 03F10103 		add	r3, r3, #1
 2229 0010 FB81     		strh	r3, [r7, #14]	@ movhi
1918:C:/StellarisWare/utils\softuart.c ****     if(usTemp == pUART->usTxBufferLen)
 2230              		.loc 1 1918 0
 2231 0012 7B68     		ldr	r3, [r7, #4]
 2232 0014 9B8A     		ldrh	r3, [r3, #20]
 2233 0016 FA89     		ldrh	r2, [r7, #14]
 2234 0018 9A42     		cmp	r2, r3
 2235 001a 02D1     		bne	.L132
1919:C:/StellarisWare/utils\softuart.c ****     {
1920:C:/StellarisWare/utils\softuart.c ****         usTemp = 0;
 2236              		.loc 1 1920 0
 2237 001c 4FF00003 		mov	r3, #0
 2238 0020 FB81     		strh	r3, [r7, #14]	@ movhi
 2239              	.L132:
1921:C:/StellarisWare/utils\softuart.c ****     }
1922:C:/StellarisWare/utils\softuart.c **** 
1923:C:/StellarisWare/utils\softuart.c ****     //
1924:C:/StellarisWare/utils\softuart.c ****     // Return the availability of space.
1925:C:/StellarisWare/utils\softuart.c ****     //
1926:C:/StellarisWare/utils\softuart.c ****     return((pUART->usTxBufferRead == usTemp) ? false : true);
 2240              		.loc 1 1926 0
 2241 0022 7B68     		ldr	r3, [r7, #4]
 2242 0024 DB8A     		ldrh	r3, [r3, #22]
 2243 0026 FA89     		ldrh	r2, [r7, #14]
 2244 0028 9A42     		cmp	r2, r3
 2245 002a 0CBF     		ite	eq
 2246 002c 0023     		moveq	r3, #0
 2247 002e 0123     		movne	r3, #1
 2248 0030 DBB2     		uxtb	r3, r3
1927:C:/StellarisWare/utils\softuart.c **** }
 2249              		.loc 1 1927 0
 2250 0032 1846     		mov	r0, r3
 2251 0034 07F11407 		add	r7, r7, #20
 2252 0038 BD46     		mov	sp, r7
 2253 003a 80BC     		pop	{r7}
 2254 003c 7047     		bx	lr
 2255              		.cfi_endproc
 2256              	.LFE15:
 2258 003e 00BF     		.section	.text.SoftUARTRxReadInt,"ax",%progbits
 2259              		.align	2
 2260              		.thumb
 2261              		.thumb_func
 2263              	SoftUARTRxReadInt:
 2264              	.LFB16:
1928:C:/StellarisWare/utils\softuart.c **** 
1929:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1930:C:/StellarisWare/utils\softuart.c **** //
1931:C:/StellarisWare/utils\softuart.c **** //! Handles the deassertion of the receive ``interrupts''.
1932:C:/StellarisWare/utils\softuart.c **** //!
1933:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1934:C:/StellarisWare/utils\softuart.c **** //!
1935:C:/StellarisWare/utils\softuart.c **** //! This function is used to determine when to deassert the receive
1936:C:/StellarisWare/utils\softuart.c **** //! ``interrupt'' as a result of reading data from the receive buffer.
1937:C:/StellarisWare/utils\softuart.c **** //!
1938:C:/StellarisWare/utils\softuart.c **** //! \return None.
1939:C:/StellarisWare/utils\softuart.c **** //
1940:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1941:C:/StellarisWare/utils\softuart.c **** static void
1942:C:/StellarisWare/utils\softuart.c **** SoftUARTRxReadInt(tSoftUART *pUART)
1943:C:/StellarisWare/utils\softuart.c **** {
 2265              		.loc 1 1943 0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 16
 2268              		@ frame_needed = 1, uses_anonymous_args = 0
 2269              		@ link register save eliminated.
 2270 0000 80B4     		push	{r7}
 2271              	.LCFI48:
 2272              		.cfi_def_cfa_offset 4
 2273              		.cfi_offset 7, -4
 2274 0002 85B0     		sub	sp, sp, #20
 2275              	.LCFI49:
 2276              		.cfi_def_cfa_offset 24
 2277 0004 00AF     		add	r7, sp, #0
 2278              	.LCFI50:
 2279              		.cfi_def_cfa_register 7
 2280 0006 7860     		str	r0, [r7, #4]
1944:C:/StellarisWare/utils\softuart.c ****     unsigned long ulTemp;
1945:C:/StellarisWare/utils\softuart.c **** 
1946:C:/StellarisWare/utils\softuart.c ****     //
1947:C:/StellarisWare/utils\softuart.c ****     // Determine the number of characters in the receive buffer.
1948:C:/StellarisWare/utils\softuart.c ****     //
1949:C:/StellarisWare/utils\softuart.c ****     if(pUART->usRxBufferWrite > pUART->usRxBufferRead)
 2281              		.loc 1 1949 0
 2282 0008 7B68     		ldr	r3, [r7, #4]
 2283 000a 1A8C     		ldrh	r2, [r3, #32]
 2284 000c 7B68     		ldr	r3, [r7, #4]
 2285 000e DB8B     		ldrh	r3, [r3, #30]
 2286 0010 9A42     		cmp	r2, r3
 2287 0012 07D9     		bls	.L134
1950:C:/StellarisWare/utils\softuart.c ****     {
1951:C:/StellarisWare/utils\softuart.c ****         ulTemp = pUART->usRxBufferWrite - pUART->usRxBufferRead;
 2288              		.loc 1 1951 0
 2289 0014 7B68     		ldr	r3, [r7, #4]
 2290 0016 1B8C     		ldrh	r3, [r3, #32]
 2291 0018 1A46     		mov	r2, r3
 2292 001a 7B68     		ldr	r3, [r7, #4]
 2293 001c DB8B     		ldrh	r3, [r3, #30]
 2294 001e D31A     		subs	r3, r2, r3
 2295 0020 FB60     		str	r3, [r7, #12]
 2296 0022 09E0     		b	.L135
 2297              	.L134:
1952:C:/StellarisWare/utils\softuart.c ****     }
1953:C:/StellarisWare/utils\softuart.c ****     else
1954:C:/StellarisWare/utils\softuart.c ****     {
1955:C:/StellarisWare/utils\softuart.c ****         ulTemp = (pUART->usRxBufferLen + pUART->usRxBufferWrite -
 2298              		.loc 1 1955 0
 2299 0024 7B68     		ldr	r3, [r7, #4]
 2300 0026 9B8B     		ldrh	r3, [r3, #28]
 2301 0028 1A46     		mov	r2, r3
 2302 002a 7B68     		ldr	r3, [r7, #4]
 2303 002c 1B8C     		ldrh	r3, [r3, #32]
 2304 002e D218     		adds	r2, r2, r3
1956:C:/StellarisWare/utils\softuart.c ****                   pUART->usRxBufferRead);
 2305              		.loc 1 1956 0
 2306 0030 7B68     		ldr	r3, [r7, #4]
 2307 0032 DB8B     		ldrh	r3, [r3, #30]
1955:C:/StellarisWare/utils\softuart.c ****         ulTemp = (pUART->usRxBufferLen + pUART->usRxBufferWrite -
 2308              		.loc 1 1955 0
 2309 0034 D31A     		subs	r3, r2, r3
 2310 0036 FB60     		str	r3, [r7, #12]
 2311              	.L135:
1957:C:/StellarisWare/utils\softuart.c ****     }
1958:C:/StellarisWare/utils\softuart.c **** 
1959:C:/StellarisWare/utils\softuart.c ****     //
1960:C:/StellarisWare/utils\softuart.c ****     // See if the number of characters in the receive buffer have dropped below
1961:C:/StellarisWare/utils\softuart.c ****     // the receive trigger level.
1962:C:/StellarisWare/utils\softuart.c ****     //
1963:C:/StellarisWare/utils\softuart.c ****     if(ulTemp < pUART->usRxBufferLevel)
 2312              		.loc 1 1963 0
 2313 0038 7B68     		ldr	r3, [r7, #4]
 2314 003a 5B8C     		ldrh	r3, [r3, #34]
 2315 003c 1A46     		mov	r2, r3
 2316 003e FB68     		ldr	r3, [r7, #12]
 2317 0040 9A42     		cmp	r2, r3
 2318 0042 06D9     		bls	.L136
1964:C:/StellarisWare/utils\softuart.c ****     {
1965:C:/StellarisWare/utils\softuart.c ****         //
1966:C:/StellarisWare/utils\softuart.c ****         // Deassert the receive "interrupt".
1967:C:/StellarisWare/utils\softuart.c ****         //
1968:C:/StellarisWare/utils\softuart.c ****         pUART->usIntStatus &= ~(SOFTUART_INT_RX);
 2319              		.loc 1 1968 0
 2320 0044 7B68     		ldr	r3, [r7, #4]
 2321 0046 9B8C     		ldrh	r3, [r3, #36]
 2322 0048 23F01003 		bic	r3, r3, #16
 2323 004c 9AB2     		uxth	r2, r3
 2324 004e 7B68     		ldr	r3, [r7, #4]
 2325 0050 9A84     		strh	r2, [r3, #36]	@ movhi
 2326              	.L136:
1969:C:/StellarisWare/utils\softuart.c ****     }
1970:C:/StellarisWare/utils\softuart.c **** 
1971:C:/StellarisWare/utils\softuart.c ****     //
1972:C:/StellarisWare/utils\softuart.c ****     // See if the receive buffer is now empty.
1973:C:/StellarisWare/utils\softuart.c ****     //
1974:C:/StellarisWare/utils\softuart.c ****     if(ulTemp == 0)
 2327              		.loc 1 1974 0
 2328 0052 FB68     		ldr	r3, [r7, #12]
 2329 0054 002B     		cmp	r3, #0
 2330 0056 06D1     		bne	.L133
1975:C:/StellarisWare/utils\softuart.c ****     {
1976:C:/StellarisWare/utils\softuart.c ****         //
1977:C:/StellarisWare/utils\softuart.c ****         // Deassert the receive timeout "interrupt".
1978:C:/StellarisWare/utils\softuart.c ****         //
1979:C:/StellarisWare/utils\softuart.c ****         pUART->usIntStatus &= ~(SOFTUART_INT_RT);
 2331              		.loc 1 1979 0
 2332 0058 7B68     		ldr	r3, [r7, #4]
 2333 005a 9B8C     		ldrh	r3, [r3, #36]
 2334 005c 23F04003 		bic	r3, r3, #64
 2335 0060 9AB2     		uxth	r2, r3
 2336 0062 7B68     		ldr	r3, [r7, #4]
 2337 0064 9A84     		strh	r2, [r3, #36]	@ movhi
 2338              	.L133:
1980:C:/StellarisWare/utils\softuart.c ****     }
1981:C:/StellarisWare/utils\softuart.c **** }
 2339              		.loc 1 1981 0
 2340 0066 07F11407 		add	r7, r7, #20
 2341 006a BD46     		mov	sp, r7
 2342 006c 80BC     		pop	{r7}
 2343 006e 7047     		bx	lr
 2344              		.cfi_endproc
 2345              	.LFE16:
 2347              		.section	.text.SoftUARTCharGetNonBlocking,"ax",%progbits
 2348              		.align	2
 2349              		.global	SoftUARTCharGetNonBlocking
 2350              		.thumb
 2351              		.thumb_func
 2353              	SoftUARTCharGetNonBlocking:
 2354              	.LFB17:
1982:C:/StellarisWare/utils\softuart.c **** 
1983:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1984:C:/StellarisWare/utils\softuart.c **** //
1985:C:/StellarisWare/utils\softuart.c **** //! Receives a character from the specified port.
1986:C:/StellarisWare/utils\softuart.c **** //!
1987:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
1988:C:/StellarisWare/utils\softuart.c **** //!
1989:C:/StellarisWare/utils\softuart.c **** //! Gets a character from the receive buffer for the specified port.
1990:C:/StellarisWare/utils\softuart.c **** //!
1991:C:/StellarisWare/utils\softuart.c **** //! \return Returns the character read from the specified port, cast as a
1992:C:/StellarisWare/utils\softuart.c **** //! \e long.  A \b -1 isreturned if there are no characters present in the
1993:C:/StellarisWare/utils\softuart.c **** //! receive buffer.  The SoftUARTCharsAvail() function should be called before
1994:C:/StellarisWare/utils\softuart.c **** //! attempting to call this function.
1995:C:/StellarisWare/utils\softuart.c **** //
1996:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
1997:C:/StellarisWare/utils\softuart.c **** long
1998:C:/StellarisWare/utils\softuart.c **** SoftUARTCharGetNonBlocking(tSoftUART *pUART)
1999:C:/StellarisWare/utils\softuart.c **** {
 2355              		.loc 1 1999 0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 16
 2358              		@ frame_needed = 1, uses_anonymous_args = 0
 2359 0000 80B5     		push	{r7, lr}
 2360              	.LCFI51:
 2361              		.cfi_def_cfa_offset 8
 2362              		.cfi_offset 14, -4
 2363              		.cfi_offset 7, -8
 2364 0002 84B0     		sub	sp, sp, #16
 2365              	.LCFI52:
 2366              		.cfi_def_cfa_offset 24
 2367 0004 00AF     		add	r7, sp, #0
 2368              	.LCFI53:
 2369              		.cfi_def_cfa_register 7
 2370 0006 7860     		str	r0, [r7, #4]
2000:C:/StellarisWare/utils\softuart.c ****     long lTemp;
2001:C:/StellarisWare/utils\softuart.c **** 
2002:C:/StellarisWare/utils\softuart.c ****     //
2003:C:/StellarisWare/utils\softuart.c ****     // See if there are any characters in the receive buffer.
2004:C:/StellarisWare/utils\softuart.c ****     //
2005:C:/StellarisWare/utils\softuart.c ****     if(pUART->usRxBufferRead != pUART->usRxBufferWrite)
 2371              		.loc 1 2005 0
 2372 0008 7B68     		ldr	r3, [r7, #4]
 2373 000a DA8B     		ldrh	r2, [r3, #30]
 2374 000c 7B68     		ldr	r3, [r7, #4]
 2375 000e 1B8C     		ldrh	r3, [r3, #32]
 2376 0010 9A42     		cmp	r2, r3
 2377 0012 32D0     		beq	.L139
2006:C:/StellarisWare/utils\softuart.c ****     {
2007:C:/StellarisWare/utils\softuart.c ****         //
2008:C:/StellarisWare/utils\softuart.c ****         // Read the next character.
2009:C:/StellarisWare/utils\softuart.c ****         //
2010:C:/StellarisWare/utils\softuart.c ****         lTemp = pUART->pusRxBuffer[pUART->usRxBufferRead];
 2378              		.loc 1 2010 0
 2379 0014 7B68     		ldr	r3, [r7, #4]
 2380 0016 1A69     		ldr	r2, [r3, #16]
 2381 0018 7B68     		ldr	r3, [r7, #4]
 2382 001a DB8B     		ldrh	r3, [r3, #30]
 2383 001c 4FEA4303 		lsl	r3, r3, #1
 2384 0020 D318     		adds	r3, r2, r3
 2385 0022 1B88     		ldrh	r3, [r3, #0]
 2386 0024 FB60     		str	r3, [r7, #12]
2011:C:/StellarisWare/utils\softuart.c ****         pUART->usRxBufferRead++;
 2387              		.loc 1 2011 0
 2388 0026 7B68     		ldr	r3, [r7, #4]
 2389 0028 DB8B     		ldrh	r3, [r3, #30]
 2390 002a 03F10103 		add	r3, r3, #1
 2391 002e 9AB2     		uxth	r2, r3
 2392 0030 7B68     		ldr	r3, [r7, #4]
 2393 0032 DA83     		strh	r2, [r3, #30]	@ movhi
2012:C:/StellarisWare/utils\softuart.c ****         if(pUART->usRxBufferRead == pUART->usRxBufferLen)
 2394              		.loc 1 2012 0
 2395 0034 7B68     		ldr	r3, [r7, #4]
 2396 0036 DA8B     		ldrh	r2, [r3, #30]
 2397 0038 7B68     		ldr	r3, [r7, #4]
 2398 003a 9B8B     		ldrh	r3, [r3, #28]
 2399 003c 9A42     		cmp	r2, r3
 2400 003e 03D1     		bne	.L140
2013:C:/StellarisWare/utils\softuart.c ****         {
2014:C:/StellarisWare/utils\softuart.c ****             pUART->usRxBufferRead = 0;
 2401              		.loc 1 2014 0
 2402 0040 7B68     		ldr	r3, [r7, #4]
 2403 0042 4FF00002 		mov	r2, #0
 2404 0046 DA83     		strh	r2, [r3, #30]	@ movhi
 2405              	.L140:
2015:C:/StellarisWare/utils\softuart.c ****         }
2016:C:/StellarisWare/utils\softuart.c **** 
2017:C:/StellarisWare/utils\softuart.c ****         //
2018:C:/StellarisWare/utils\softuart.c ****         // Deassert the receive "interrupt(s)" if appropriate.
2019:C:/StellarisWare/utils\softuart.c ****         //
2020:C:/StellarisWare/utils\softuart.c ****         SoftUARTRxReadInt(pUART);
 2406              		.loc 1 2020 0
 2407 0048 7868     		ldr	r0, [r7, #4]
 2408 004a FFF7FEFF 		bl	SoftUARTRxReadInt
2021:C:/StellarisWare/utils\softuart.c **** 
2022:C:/StellarisWare/utils\softuart.c ****         //
2023:C:/StellarisWare/utils\softuart.c ****         // Set the receive status to match this character.
2024:C:/StellarisWare/utils\softuart.c ****         //
2025:C:/StellarisWare/utils\softuart.c ****         pUART->ucRxStatus = ((pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN) |
 2409              		.loc 1 2025 0
 2410 004e 7B68     		ldr	r3, [r7, #4]
 2411 0050 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 2412 0054 DBB2     		uxtb	r3, r3
 2413 0056 03F00803 		and	r3, r3, #8
 2414 005a DAB2     		uxtb	r2, r3
2026:C:/StellarisWare/utils\softuart.c ****                              ((lTemp >> 8) & ~(SOFTUART_RXERROR_OVERRUN)));
 2415              		.loc 1 2026 0
 2416 005c FB68     		ldr	r3, [r7, #12]
 2417 005e 4FEA2323 		asr	r3, r3, #8
2025:C:/StellarisWare/utils\softuart.c ****         pUART->ucRxStatus = ((pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN) |
 2418              		.loc 1 2025 0
 2419 0062 DBB2     		uxtb	r3, r3
 2420 0064 23F00803 		bic	r3, r3, #8
 2421 0068 DBB2     		uxtb	r3, r3
 2422 006a 1343     		orrs	r3, r3, r2
 2423 006c DBB2     		uxtb	r3, r3
 2424 006e DAB2     		uxtb	r2, r3
 2425 0070 7B68     		ldr	r3, [r7, #4]
 2426 0072 83F83220 		strb	r2, [r3, #50]
2027:C:/StellarisWare/utils\softuart.c **** 
2028:C:/StellarisWare/utils\softuart.c ****         //
2029:C:/StellarisWare/utils\softuart.c ****         // Return this character.
2030:C:/StellarisWare/utils\softuart.c ****         //
2031:C:/StellarisWare/utils\softuart.c ****         return(lTemp);
 2427              		.loc 1 2031 0
 2428 0076 FB68     		ldr	r3, [r7, #12]
 2429 0078 01E0     		b	.L141
 2430              	.L139:
2032:C:/StellarisWare/utils\softuart.c ****     }
2033:C:/StellarisWare/utils\softuart.c ****     else
2034:C:/StellarisWare/utils\softuart.c ****     {
2035:C:/StellarisWare/utils\softuart.c ****         //
2036:C:/StellarisWare/utils\softuart.c ****         // There are no characters, so return a failure.
2037:C:/StellarisWare/utils\softuart.c ****         //
2038:C:/StellarisWare/utils\softuart.c ****         return(-1);
 2431              		.loc 1 2038 0
 2432 007a 4FF0FF33 		mov	r3, #-1
 2433              	.L141:
2039:C:/StellarisWare/utils\softuart.c ****     }
2040:C:/StellarisWare/utils\softuart.c **** }
 2434              		.loc 1 2040 0
 2435 007e 1846     		mov	r0, r3
 2436 0080 07F11007 		add	r7, r7, #16
 2437 0084 BD46     		mov	sp, r7
 2438 0086 80BD     		pop	{r7, pc}
 2439              		.cfi_endproc
 2440              	.LFE17:
 2442              		.section	.text.SoftUARTCharGet,"ax",%progbits
 2443              		.align	2
 2444              		.global	SoftUARTCharGet
 2445              		.thumb
 2446              		.thumb_func
 2448              	SoftUARTCharGet:
 2449              	.LFB18:
2041:C:/StellarisWare/utils\softuart.c **** 
2042:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2043:C:/StellarisWare/utils\softuart.c **** //
2044:C:/StellarisWare/utils\softuart.c **** //! Waits for a character from the specified port.
2045:C:/StellarisWare/utils\softuart.c **** //!
2046:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2047:C:/StellarisWare/utils\softuart.c **** //!
2048:C:/StellarisWare/utils\softuart.c **** //! Gets a character from the receive buffer for the specified port.  If there
2049:C:/StellarisWare/utils\softuart.c **** //! are no characters available, this function waits until a character is
2050:C:/StellarisWare/utils\softuart.c **** //! received before returning.
2051:C:/StellarisWare/utils\softuart.c **** //!
2052:C:/StellarisWare/utils\softuart.c **** //! \return Returns the character read from the specified port, cast as a
2053:C:/StellarisWare/utils\softuart.c **** //! \e long.
2054:C:/StellarisWare/utils\softuart.c **** //
2055:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2056:C:/StellarisWare/utils\softuart.c **** long
2057:C:/StellarisWare/utils\softuart.c **** SoftUARTCharGet(tSoftUART *pUART)
2058:C:/StellarisWare/utils\softuart.c **** {
 2450              		.loc 1 2058 0
 2451              		.cfi_startproc
 2452              		@ args = 0, pretend = 0, frame = 16
 2453              		@ frame_needed = 1, uses_anonymous_args = 0
 2454 0000 80B5     		push	{r7, lr}
 2455              	.LCFI54:
 2456              		.cfi_def_cfa_offset 8
 2457              		.cfi_offset 14, -4
 2458              		.cfi_offset 7, -8
 2459 0002 84B0     		sub	sp, sp, #16
 2460              	.LCFI55:
 2461              		.cfi_def_cfa_offset 24
 2462 0004 00AF     		add	r7, sp, #0
 2463              	.LCFI56:
 2464              		.cfi_def_cfa_register 7
 2465 0006 7860     		str	r0, [r7, #4]
2059:C:/StellarisWare/utils\softuart.c ****     long lTemp;
2060:C:/StellarisWare/utils\softuart.c **** 
2061:C:/StellarisWare/utils\softuart.c ****     //
2062:C:/StellarisWare/utils\softuart.c ****     // Wait until a char is available.
2063:C:/StellarisWare/utils\softuart.c ****     //
2064:C:/StellarisWare/utils\softuart.c ****     while(pUART->usRxBufferRead ==
 2466              		.loc 1 2064 0
 2467 0008 00BF     		nop
 2468              	.L143:
 2469              		.loc 1 2064 0 is_stmt 0 discriminator 1
 2470 000a 7B68     		ldr	r3, [r7, #4]
 2471 000c DA8B     		ldrh	r2, [r3, #30]
2065:C:/StellarisWare/utils\softuart.c ****           *(volatile unsigned short *)(&(pUART->usRxBufferWrite)))
 2472              		.loc 1 2065 0 is_stmt 1 discriminator 1
 2473 000e 7B68     		ldr	r3, [r7, #4]
 2474 0010 03F12003 		add	r3, r3, #32
 2475 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2476 0016 9BB2     		uxth	r3, r3
2064:C:/StellarisWare/utils\softuart.c ****     while(pUART->usRxBufferRead ==
 2477              		.loc 1 2064 0 discriminator 1
 2478 0018 9A42     		cmp	r2, r3
 2479 001a F6D0     		beq	.L143
2066:C:/StellarisWare/utils\softuart.c ****     {
2067:C:/StellarisWare/utils\softuart.c ****     }
2068:C:/StellarisWare/utils\softuart.c **** 
2069:C:/StellarisWare/utils\softuart.c ****     //
2070:C:/StellarisWare/utils\softuart.c ****     // Read the next character.
2071:C:/StellarisWare/utils\softuart.c ****     //
2072:C:/StellarisWare/utils\softuart.c ****     lTemp = pUART->pusRxBuffer[pUART->usRxBufferRead];
 2480              		.loc 1 2072 0
 2481 001c 7B68     		ldr	r3, [r7, #4]
 2482 001e 1A69     		ldr	r2, [r3, #16]
 2483 0020 7B68     		ldr	r3, [r7, #4]
 2484 0022 DB8B     		ldrh	r3, [r3, #30]
 2485 0024 4FEA4303 		lsl	r3, r3, #1
 2486 0028 D318     		adds	r3, r2, r3
 2487 002a 1B88     		ldrh	r3, [r3, #0]
 2488 002c FB60     		str	r3, [r7, #12]
2073:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferRead++;
 2489              		.loc 1 2073 0
 2490 002e 7B68     		ldr	r3, [r7, #4]
 2491 0030 DB8B     		ldrh	r3, [r3, #30]
 2492 0032 03F10103 		add	r3, r3, #1
 2493 0036 9AB2     		uxth	r2, r3
 2494 0038 7B68     		ldr	r3, [r7, #4]
 2495 003a DA83     		strh	r2, [r3, #30]	@ movhi
2074:C:/StellarisWare/utils\softuart.c ****     if(pUART->usRxBufferRead == pUART->usRxBufferLen)
 2496              		.loc 1 2074 0
 2497 003c 7B68     		ldr	r3, [r7, #4]
 2498 003e DA8B     		ldrh	r2, [r3, #30]
 2499 0040 7B68     		ldr	r3, [r7, #4]
 2500 0042 9B8B     		ldrh	r3, [r3, #28]
 2501 0044 9A42     		cmp	r2, r3
 2502 0046 03D1     		bne	.L144
2075:C:/StellarisWare/utils\softuart.c ****     {
2076:C:/StellarisWare/utils\softuart.c ****         pUART->usRxBufferRead = 0;
 2503              		.loc 1 2076 0
 2504 0048 7B68     		ldr	r3, [r7, #4]
 2505 004a 4FF00002 		mov	r2, #0
 2506 004e DA83     		strh	r2, [r3, #30]	@ movhi
 2507              	.L144:
2077:C:/StellarisWare/utils\softuart.c ****     }
2078:C:/StellarisWare/utils\softuart.c **** 
2079:C:/StellarisWare/utils\softuart.c ****     //
2080:C:/StellarisWare/utils\softuart.c ****     // Deassert the receive "interrupt(s)" if appropriate.
2081:C:/StellarisWare/utils\softuart.c ****     //
2082:C:/StellarisWare/utils\softuart.c ****     SoftUARTRxReadInt(pUART);
 2508              		.loc 1 2082 0
 2509 0050 7868     		ldr	r0, [r7, #4]
 2510 0052 FFF7FEFF 		bl	SoftUARTRxReadInt
2083:C:/StellarisWare/utils\softuart.c **** 
2084:C:/StellarisWare/utils\softuart.c ****     //
2085:C:/StellarisWare/utils\softuart.c ****     // Set the receive status to match this character.
2086:C:/StellarisWare/utils\softuart.c ****     //
2087:C:/StellarisWare/utils\softuart.c ****     pUART->ucRxStatus = ((pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN) |
 2511              		.loc 1 2087 0
 2512 0056 7B68     		ldr	r3, [r7, #4]
 2513 0058 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 2514 005c DBB2     		uxtb	r3, r3
 2515 005e 03F00803 		and	r3, r3, #8
 2516 0062 DAB2     		uxtb	r2, r3
2088:C:/StellarisWare/utils\softuart.c ****                          ((lTemp >> 8) & ~(SOFTUART_RXERROR_OVERRUN)));
 2517              		.loc 1 2088 0
 2518 0064 FB68     		ldr	r3, [r7, #12]
 2519 0066 4FEA2323 		asr	r3, r3, #8
2087:C:/StellarisWare/utils\softuart.c ****     pUART->ucRxStatus = ((pUART->ucRxStatus & SOFTUART_RXERROR_OVERRUN) |
 2520              		.loc 1 2087 0
 2521 006a DBB2     		uxtb	r3, r3
 2522 006c 23F00803 		bic	r3, r3, #8
 2523 0070 DBB2     		uxtb	r3, r3
 2524 0072 1343     		orrs	r3, r3, r2
 2525 0074 DBB2     		uxtb	r3, r3
 2526 0076 DAB2     		uxtb	r2, r3
 2527 0078 7B68     		ldr	r3, [r7, #4]
 2528 007a 83F83220 		strb	r2, [r3, #50]
2089:C:/StellarisWare/utils\softuart.c **** 
2090:C:/StellarisWare/utils\softuart.c ****     //
2091:C:/StellarisWare/utils\softuart.c ****     // Return this character.
2092:C:/StellarisWare/utils\softuart.c ****     //
2093:C:/StellarisWare/utils\softuart.c ****     return(lTemp);
 2529              		.loc 1 2093 0
 2530 007e FB68     		ldr	r3, [r7, #12]
2094:C:/StellarisWare/utils\softuart.c **** }
 2531              		.loc 1 2094 0
 2532 0080 1846     		mov	r0, r3
 2533 0082 07F11007 		add	r7, r7, #16
 2534 0086 BD46     		mov	sp, r7
 2535 0088 80BD     		pop	{r7, pc}
 2536              		.cfi_endproc
 2537              	.LFE18:
 2539 008a 00BF     		.section	.text.SoftUARTCharPutNonBlocking,"ax",%progbits
 2540              		.align	2
 2541              		.global	SoftUARTCharPutNonBlocking
 2542              		.thumb
 2543              		.thumb_func
 2545              	SoftUARTCharPutNonBlocking:
 2546              	.LFB19:
2095:C:/StellarisWare/utils\softuart.c **** 
2096:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2097:C:/StellarisWare/utils\softuart.c **** //
2098:C:/StellarisWare/utils\softuart.c **** //! Sends a character to the specified port.
2099:C:/StellarisWare/utils\softuart.c **** //!
2100:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2101:C:/StellarisWare/utils\softuart.c **** //! \param ucData is the character to be transmitted.
2102:C:/StellarisWare/utils\softuart.c **** //!
2103:C:/StellarisWare/utils\softuart.c **** //! Writes the character \e ucData to the transmit buffer for the specified
2104:C:/StellarisWare/utils\softuart.c **** //! port.  This function does not block, so if there is no space available,
2105:C:/StellarisWare/utils\softuart.c **** //! then a \b false is returned, and the application must retry the function
2106:C:/StellarisWare/utils\softuart.c **** //! later.
2107:C:/StellarisWare/utils\softuart.c **** //!
2108:C:/StellarisWare/utils\softuart.c **** //! \return Returns \b true if the character was successfully placed in the
2109:C:/StellarisWare/utils\softuart.c **** //! transmit buffer or \b false if there was no space available in the
2110:C:/StellarisWare/utils\softuart.c **** //! transmit buffer.
2111:C:/StellarisWare/utils\softuart.c **** //
2112:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2113:C:/StellarisWare/utils\softuart.c **** tBoolean
2114:C:/StellarisWare/utils\softuart.c **** SoftUARTCharPutNonBlocking(tSoftUART *pUART, unsigned char ucData)
2115:C:/StellarisWare/utils\softuart.c **** {
 2547              		.loc 1 2115 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 16
 2550              		@ frame_needed = 1, uses_anonymous_args = 0
 2551              		@ link register save eliminated.
 2552 0000 80B4     		push	{r7}
 2553              	.LCFI57:
 2554              		.cfi_def_cfa_offset 4
 2555              		.cfi_offset 7, -4
 2556 0002 85B0     		sub	sp, sp, #20
 2557              	.LCFI58:
 2558              		.cfi_def_cfa_offset 24
 2559 0004 00AF     		add	r7, sp, #0
 2560              	.LCFI59:
 2561              		.cfi_def_cfa_register 7
 2562 0006 7860     		str	r0, [r7, #4]
 2563 0008 0B46     		mov	r3, r1
 2564 000a FB70     		strb	r3, [r7, #3]
2116:C:/StellarisWare/utils\softuart.c ****     unsigned short usTemp;
2117:C:/StellarisWare/utils\softuart.c **** 
2118:C:/StellarisWare/utils\softuart.c ****     //
2119:C:/StellarisWare/utils\softuart.c ****     // Determine the values of the write pointer once incremented.
2120:C:/StellarisWare/utils\softuart.c ****     //
2121:C:/StellarisWare/utils\softuart.c ****     usTemp = pUART->usTxBufferWrite + 1;
 2565              		.loc 1 2121 0
 2566 000c 7B68     		ldr	r3, [r7, #4]
 2567 000e 1B8B     		ldrh	r3, [r3, #24]
 2568 0010 03F10103 		add	r3, r3, #1
 2569 0014 FB81     		strh	r3, [r7, #14]	@ movhi
2122:C:/StellarisWare/utils\softuart.c ****     if(usTemp == pUART->usTxBufferLen)
 2570              		.loc 1 2122 0
 2571 0016 7B68     		ldr	r3, [r7, #4]
 2572 0018 9B8A     		ldrh	r3, [r3, #20]
 2573 001a FA89     		ldrh	r2, [r7, #14]
 2574 001c 9A42     		cmp	r2, r3
 2575 001e 02D1     		bne	.L146
2123:C:/StellarisWare/utils\softuart.c ****     {
2124:C:/StellarisWare/utils\softuart.c ****         usTemp = 0;
 2576              		.loc 1 2124 0
 2577 0020 4FF00003 		mov	r3, #0
 2578 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 2579              	.L146:
2125:C:/StellarisWare/utils\softuart.c ****     }
2126:C:/StellarisWare/utils\softuart.c **** 
2127:C:/StellarisWare/utils\softuart.c ****     //
2128:C:/StellarisWare/utils\softuart.c ****     // See if there is space in the transmit buffer.
2129:C:/StellarisWare/utils\softuart.c ****     //
2130:C:/StellarisWare/utils\softuart.c ****     if(usTemp != pUART->usTxBufferRead)
 2580              		.loc 1 2130 0
 2581 0026 7B68     		ldr	r3, [r7, #4]
 2582 0028 DB8A     		ldrh	r3, [r3, #22]
 2583 002a FA89     		ldrh	r2, [r7, #14]
 2584 002c 9A42     		cmp	r2, r3
 2585 002e 0CD0     		beq	.L147
2131:C:/StellarisWare/utils\softuart.c ****     {
2132:C:/StellarisWare/utils\softuart.c ****         //
2133:C:/StellarisWare/utils\softuart.c ****         // Write this character to the transmit buffer.
2134:C:/StellarisWare/utils\softuart.c ****         //
2135:C:/StellarisWare/utils\softuart.c ****         pUART->pucTxBuffer[pUART->usTxBufferWrite] = ucData;
 2586              		.loc 1 2135 0
 2587 0030 7B68     		ldr	r3, [r7, #4]
 2588 0032 DA68     		ldr	r2, [r3, #12]
 2589 0034 7B68     		ldr	r3, [r7, #4]
 2590 0036 1B8B     		ldrh	r3, [r3, #24]
 2591 0038 D318     		adds	r3, r2, r3
 2592 003a FA78     		ldrb	r2, [r7, #3]
 2593 003c 1A70     		strb	r2, [r3, #0]
2136:C:/StellarisWare/utils\softuart.c ****         pUART->usTxBufferWrite = usTemp;
 2594              		.loc 1 2136 0
 2595 003e 7B68     		ldr	r3, [r7, #4]
 2596 0040 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2597 0042 1A83     		strh	r2, [r3, #24]	@ movhi
2137:C:/StellarisWare/utils\softuart.c **** 
2138:C:/StellarisWare/utils\softuart.c ****         //
2139:C:/StellarisWare/utils\softuart.c ****         // Success.
2140:C:/StellarisWare/utils\softuart.c ****         //
2141:C:/StellarisWare/utils\softuart.c ****         return(true);
 2598              		.loc 1 2141 0
 2599 0044 4FF00103 		mov	r3, #1
 2600 0048 01E0     		b	.L148
 2601              	.L147:
2142:C:/StellarisWare/utils\softuart.c ****     }
2143:C:/StellarisWare/utils\softuart.c ****     else
2144:C:/StellarisWare/utils\softuart.c ****     {
2145:C:/StellarisWare/utils\softuart.c ****         //
2146:C:/StellarisWare/utils\softuart.c ****         // There is no space in the transmit buffer, so return a failure.
2147:C:/StellarisWare/utils\softuart.c ****         //
2148:C:/StellarisWare/utils\softuart.c ****         return(false);
 2602              		.loc 1 2148 0
 2603 004a 4FF00003 		mov	r3, #0
 2604              	.L148:
2149:C:/StellarisWare/utils\softuart.c ****     }
2150:C:/StellarisWare/utils\softuart.c **** }
 2605              		.loc 1 2150 0
 2606 004e 1846     		mov	r0, r3
 2607 0050 07F11407 		add	r7, r7, #20
 2608 0054 BD46     		mov	sp, r7
 2609 0056 80BC     		pop	{r7}
 2610 0058 7047     		bx	lr
 2611              		.cfi_endproc
 2612              	.LFE19:
 2614 005a 00BF     		.section	.text.SoftUARTCharPut,"ax",%progbits
 2615              		.align	2
 2616              		.global	SoftUARTCharPut
 2617              		.thumb
 2618              		.thumb_func
 2620              	SoftUARTCharPut:
 2621              	.LFB20:
2151:C:/StellarisWare/utils\softuart.c **** 
2152:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2153:C:/StellarisWare/utils\softuart.c **** //
2154:C:/StellarisWare/utils\softuart.c **** //! Waits to send a character from the specified port.
2155:C:/StellarisWare/utils\softuart.c **** //!
2156:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2157:C:/StellarisWare/utils\softuart.c **** //! \param ucData is the character to be transmitted.
2158:C:/StellarisWare/utils\softuart.c **** //!
2159:C:/StellarisWare/utils\softuart.c **** //! Sends the character \e ucData to the transmit buffer for the specified
2160:C:/StellarisWare/utils\softuart.c **** //! port.  If there is no space available in the transmit buffer, this function
2161:C:/StellarisWare/utils\softuart.c **** //! waits until there is space available before returning.
2162:C:/StellarisWare/utils\softuart.c **** //!
2163:C:/StellarisWare/utils\softuart.c **** //! \return None.
2164:C:/StellarisWare/utils\softuart.c **** //
2165:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2166:C:/StellarisWare/utils\softuart.c **** void
2167:C:/StellarisWare/utils\softuart.c **** SoftUARTCharPut(tSoftUART *pUART, unsigned char ucData)
2168:C:/StellarisWare/utils\softuart.c **** {
 2622              		.loc 1 2168 0
 2623              		.cfi_startproc
 2624              		@ args = 0, pretend = 0, frame = 16
 2625              		@ frame_needed = 1, uses_anonymous_args = 0
 2626              		@ link register save eliminated.
 2627 0000 80B4     		push	{r7}
 2628              	.LCFI60:
 2629              		.cfi_def_cfa_offset 4
 2630              		.cfi_offset 7, -4
 2631 0002 85B0     		sub	sp, sp, #20
 2632              	.LCFI61:
 2633              		.cfi_def_cfa_offset 24
 2634 0004 00AF     		add	r7, sp, #0
 2635              	.LCFI62:
 2636              		.cfi_def_cfa_register 7
 2637 0006 7860     		str	r0, [r7, #4]
 2638 0008 0B46     		mov	r3, r1
 2639 000a FB70     		strb	r3, [r7, #3]
2169:C:/StellarisWare/utils\softuart.c ****     unsigned short usTemp;
2170:C:/StellarisWare/utils\softuart.c **** 
2171:C:/StellarisWare/utils\softuart.c ****     //
2172:C:/StellarisWare/utils\softuart.c ****     // Wait until space is available.
2173:C:/StellarisWare/utils\softuart.c ****     //
2174:C:/StellarisWare/utils\softuart.c ****     usTemp = pUART->usTxBufferWrite + 1;
 2640              		.loc 1 2174 0
 2641 000c 7B68     		ldr	r3, [r7, #4]
 2642 000e 1B8B     		ldrh	r3, [r3, #24]
 2643 0010 03F10103 		add	r3, r3, #1
 2644 0014 FB81     		strh	r3, [r7, #14]	@ movhi
2175:C:/StellarisWare/utils\softuart.c ****     if(usTemp == pUART->usTxBufferLen)
 2645              		.loc 1 2175 0
 2646 0016 7B68     		ldr	r3, [r7, #4]
 2647 0018 9B8A     		ldrh	r3, [r3, #20]
 2648 001a FA89     		ldrh	r2, [r7, #14]
 2649 001c 9A42     		cmp	r2, r3
 2650 001e 02D1     		bne	.L152
2176:C:/StellarisWare/utils\softuart.c ****     {
2177:C:/StellarisWare/utils\softuart.c ****         usTemp = 0;
 2651              		.loc 1 2177 0
 2652 0020 4FF00003 		mov	r3, #0
 2653 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 2654              	.L152:
2178:C:/StellarisWare/utils\softuart.c ****     }
2179:C:/StellarisWare/utils\softuart.c ****     while(usTemp == *(volatile unsigned short *)(&(pUART->usTxBufferRead)))
 2655              		.loc 1 2179 0
 2656 0026 00BF     		nop
 2657              	.L151:
 2658              		.loc 1 2179 0 is_stmt 0 discriminator 1
 2659 0028 7B68     		ldr	r3, [r7, #4]
 2660 002a 03F11603 		add	r3, r3, #22
 2661 002e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2662 0030 9BB2     		uxth	r3, r3
 2663 0032 FA89     		ldrh	r2, [r7, #14]
 2664 0034 9A42     		cmp	r2, r3
 2665 0036 F7D0     		beq	.L151
2180:C:/StellarisWare/utils\softuart.c ****     {
2181:C:/StellarisWare/utils\softuart.c ****     }
2182:C:/StellarisWare/utils\softuart.c **** 
2183:C:/StellarisWare/utils\softuart.c ****     //
2184:C:/StellarisWare/utils\softuart.c ****     // Send the char.
2185:C:/StellarisWare/utils\softuart.c ****     //
2186:C:/StellarisWare/utils\softuart.c ****     pUART->pucTxBuffer[pUART->usTxBufferWrite] = ucData;
 2666              		.loc 1 2186 0 is_stmt 1
 2667 0038 7B68     		ldr	r3, [r7, #4]
 2668 003a DA68     		ldr	r2, [r3, #12]
 2669 003c 7B68     		ldr	r3, [r7, #4]
 2670 003e 1B8B     		ldrh	r3, [r3, #24]
 2671 0040 D318     		adds	r3, r2, r3
 2672 0042 FA78     		ldrb	r2, [r7, #3]
 2673 0044 1A70     		strb	r2, [r3, #0]
2187:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferWrite = usTemp;
 2674              		.loc 1 2187 0
 2675 0046 7B68     		ldr	r3, [r7, #4]
 2676 0048 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2677 004a 1A83     		strh	r2, [r3, #24]	@ movhi
2188:C:/StellarisWare/utils\softuart.c **** }
 2678              		.loc 1 2188 0
 2679 004c 07F11407 		add	r7, r7, #20
 2680 0050 BD46     		mov	sp, r7
 2681 0052 80BC     		pop	{r7}
 2682 0054 7047     		bx	lr
 2683              		.cfi_endproc
 2684              	.LFE20:
 2686 0056 00BF     		.section	.text.SoftUARTBreakCtl,"ax",%progbits
 2687              		.align	2
 2688              		.global	SoftUARTBreakCtl
 2689              		.thumb
 2690              		.thumb_func
 2692              	SoftUARTBreakCtl:
 2693              	.LFB21:
2189:C:/StellarisWare/utils\softuart.c **** 
2190:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2191:C:/StellarisWare/utils\softuart.c **** //
2192:C:/StellarisWare/utils\softuart.c **** //! Causes a BREAK to be sent.
2193:C:/StellarisWare/utils\softuart.c **** //!
2194:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2195:C:/StellarisWare/utils\softuart.c **** //! \param bBreakState controls the output level.
2196:C:/StellarisWare/utils\softuart.c **** //!
2197:C:/StellarisWare/utils\softuart.c **** //! Calling this function with \e bBreakState set to \b true asserts a break
2198:C:/StellarisWare/utils\softuart.c **** //! condition on the SoftUART.  Calling this function with \e bBreakState set
2199:C:/StellarisWare/utils\softuart.c **** //! to \b false removes the break condition.  For proper transmission of a
2200:C:/StellarisWare/utils\softuart.c **** //! break command, the break must be asserted for at least two complete frames.
2201:C:/StellarisWare/utils\softuart.c **** //!
2202:C:/StellarisWare/utils\softuart.c **** //! \return None.
2203:C:/StellarisWare/utils\softuart.c **** //
2204:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2205:C:/StellarisWare/utils\softuart.c **** void
2206:C:/StellarisWare/utils\softuart.c **** SoftUARTBreakCtl(tSoftUART *pUART, tBoolean bBreakState)
2207:C:/StellarisWare/utils\softuart.c **** {
 2694              		.loc 1 2207 0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 8
 2697              		@ frame_needed = 1, uses_anonymous_args = 0
 2698              		@ link register save eliminated.
 2699 0000 80B4     		push	{r7}
 2700              	.LCFI63:
 2701              		.cfi_def_cfa_offset 4
 2702              		.cfi_offset 7, -4
 2703 0002 83B0     		sub	sp, sp, #12
 2704              	.LCFI64:
 2705              		.cfi_def_cfa_offset 16
 2706 0004 00AF     		add	r7, sp, #0
 2707              	.LCFI65:
 2708              		.cfi_def_cfa_register 7
 2709 0006 7860     		str	r0, [r7, #4]
 2710 0008 0B46     		mov	r3, r1
 2711 000a FB70     		strb	r3, [r7, #3]
2208:C:/StellarisWare/utils\softuart.c ****     //
2209:C:/StellarisWare/utils\softuart.c ****     // Set the break condition as requested.
2210:C:/StellarisWare/utils\softuart.c ****     //
2211:C:/StellarisWare/utils\softuart.c ****     if(bBreakState)
 2712              		.loc 1 2211 0
 2713 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2714 000e 002B     		cmp	r3, #0
 2715 0010 09D0     		beq	.L154
2212:C:/StellarisWare/utils\softuart.c ****     {
2213:C:/StellarisWare/utils\softuart.c ****         pUART->ucFlags |= SOFTUART_FLAG_TXBREAK;
 2716              		.loc 1 2213 0
 2717 0012 7B68     		ldr	r3, [r7, #4]
 2718 0014 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2719 0018 43F00203 		orr	r3, r3, #2
 2720 001c DAB2     		uxtb	r2, r3
 2721 001e 7B68     		ldr	r3, [r7, #4]
 2722 0020 83F82A20 		strb	r2, [r3, #42]
 2723 0024 08E0     		b	.L153
 2724              	.L154:
2214:C:/StellarisWare/utils\softuart.c ****     }
2215:C:/StellarisWare/utils\softuart.c ****     else
2216:C:/StellarisWare/utils\softuart.c ****     {
2217:C:/StellarisWare/utils\softuart.c ****         pUART->ucFlags &= ~(SOFTUART_FLAG_TXBREAK);
 2725              		.loc 1 2217 0
 2726 0026 7B68     		ldr	r3, [r7, #4]
 2727 0028 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2728 002c 23F00203 		bic	r3, r3, #2
 2729 0030 DAB2     		uxtb	r2, r3
 2730 0032 7B68     		ldr	r3, [r7, #4]
 2731 0034 83F82A20 		strb	r2, [r3, #42]
 2732              	.L153:
2218:C:/StellarisWare/utils\softuart.c ****     }
2219:C:/StellarisWare/utils\softuart.c **** }
 2733              		.loc 1 2219 0
 2734 0038 07F10C07 		add	r7, r7, #12
 2735 003c BD46     		mov	sp, r7
 2736 003e 80BC     		pop	{r7}
 2737 0040 7047     		bx	lr
 2738              		.cfi_endproc
 2739              	.LFE21:
 2741 0042 00BF     		.section	.text.SoftUARTBusy,"ax",%progbits
 2742              		.align	2
 2743              		.global	SoftUARTBusy
 2744              		.thumb
 2745              		.thumb_func
 2747              	SoftUARTBusy:
 2748              	.LFB22:
2220:C:/StellarisWare/utils\softuart.c **** 
2221:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2222:C:/StellarisWare/utils\softuart.c **** //
2223:C:/StellarisWare/utils\softuart.c **** //! Determines whether the UART transmitter is busy or not.
2224:C:/StellarisWare/utils\softuart.c **** //!
2225:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2226:C:/StellarisWare/utils\softuart.c **** //!
2227:C:/StellarisWare/utils\softuart.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
2228:C:/StellarisWare/utils\softuart.c **** //! the transmitter hardware.  If \b false is returned, the transmit buffer is
2229:C:/StellarisWare/utils\softuart.c **** //! empty and all bits of the last transmitted character, including all stop
2230:C:/StellarisWare/utils\softuart.c **** //! bits, have left the hardware shift register.
2231:C:/StellarisWare/utils\softuart.c **** //!
2232:C:/StellarisWare/utils\softuart.c **** //! \return Returns \b true if the UART is transmitting or \b false if all
2233:C:/StellarisWare/utils\softuart.c **** //! transmissions are complete.
2234:C:/StellarisWare/utils\softuart.c **** //
2235:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2236:C:/StellarisWare/utils\softuart.c **** tBoolean
2237:C:/StellarisWare/utils\softuart.c **** SoftUARTBusy(tSoftUART *pUART)
2238:C:/StellarisWare/utils\softuart.c **** {
 2749              		.loc 1 2238 0
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 8
 2752              		@ frame_needed = 1, uses_anonymous_args = 0
 2753              		@ link register save eliminated.
 2754 0000 80B4     		push	{r7}
 2755              	.LCFI66:
 2756              		.cfi_def_cfa_offset 4
 2757              		.cfi_offset 7, -4
 2758 0002 83B0     		sub	sp, sp, #12
 2759              	.LCFI67:
 2760              		.cfi_def_cfa_offset 16
 2761 0004 00AF     		add	r7, sp, #0
 2762              	.LCFI68:
 2763              		.cfi_def_cfa_register 7
 2764 0006 7860     		str	r0, [r7, #4]
2239:C:/StellarisWare/utils\softuart.c ****     //
2240:C:/StellarisWare/utils\softuart.c ****     // Determine if the UART is busy.
2241:C:/StellarisWare/utils\softuart.c ****     //
2242:C:/StellarisWare/utils\softuart.c ****     return(((pUART->ucTxState == SOFTUART_TXSTATE_IDLE) &&
 2765              		.loc 1 2242 0
 2766 0008 7B68     		ldr	r3, [r7, #4]
 2767 000a 93F82B30 		ldrb	r3, [r3, #43]	@ zero_extendqisi2
 2768 000e 002B     		cmp	r3, #0
 2769 0010 0CD1     		bne	.L157
2243:C:/StellarisWare/utils\softuart.c ****             (((pUART->ucFlags & SOFTUART_FLAG_ENABLE) == 0) ||
 2770              		.loc 1 2243 0
 2771 0012 7B68     		ldr	r3, [r7, #4]
 2772 0014 93F82A30 		ldrb	r3, [r3, #42]	@ zero_extendqisi2
 2773 0018 03F00103 		and	r3, r3, #1
2244:C:/StellarisWare/utils\softuart.c ****              (pUART->usTxBufferRead == pUART->usTxBufferWrite))) ?
2245:C:/StellarisWare/utils\softuart.c ****            false : true);
 2774              		.loc 1 2245 0
 2775 001c 002B     		cmp	r3, #0
 2776 001e 08D0     		beq	.L158
2244:C:/StellarisWare/utils\softuart.c ****              (pUART->usTxBufferRead == pUART->usTxBufferWrite))) ?
 2777              		.loc 1 2244 0
 2778 0020 7B68     		ldr	r3, [r7, #4]
 2779 0022 DA8A     		ldrh	r2, [r3, #22]
 2780 0024 7B68     		ldr	r3, [r7, #4]
 2781 0026 1B8B     		ldrh	r3, [r3, #24]
2243:C:/StellarisWare/utils\softuart.c ****             (((pUART->ucFlags & SOFTUART_FLAG_ENABLE) == 0) ||
 2782              		.loc 1 2243 0
 2783 0028 9A42     		cmp	r2, r3
 2784 002a 02D0     		beq	.L158
 2785              	.L157:
2242:C:/StellarisWare/utils\softuart.c ****     return(((pUART->ucTxState == SOFTUART_TXSTATE_IDLE) &&
 2786              		.loc 1 2242 0 discriminator 1
 2787 002c 4FF00103 		mov	r3, #1
 2788 0030 01E0     		b	.L159
 2789              	.L158:
2242:C:/StellarisWare/utils\softuart.c ****     return(((pUART->ucTxState == SOFTUART_TXSTATE_IDLE) &&
 2790              		.loc 1 2242 0 is_stmt 0
 2791 0032 4FF00003 		mov	r3, #0
 2792              	.L159:
2242:C:/StellarisWare/utils\softuart.c ****     return(((pUART->ucTxState == SOFTUART_TXSTATE_IDLE) &&
 2793              		.loc 1 2242 0 discriminator 2
 2794 0036 DBB2     		uxtb	r3, r3
2246:C:/StellarisWare/utils\softuart.c **** }
 2795              		.loc 1 2246 0 is_stmt 1 discriminator 2
 2796 0038 1846     		mov	r0, r3
 2797 003a 07F10C07 		add	r7, r7, #12
 2798 003e BD46     		mov	sp, r7
 2799 0040 80BC     		pop	{r7}
 2800 0042 7047     		bx	lr
 2801              		.cfi_endproc
 2802              	.LFE22:
 2804              		.section	.text.SoftUARTIntEnable,"ax",%progbits
 2805              		.align	2
 2806              		.global	SoftUARTIntEnable
 2807              		.thumb
 2808              		.thumb_func
 2810              	SoftUARTIntEnable:
 2811              	.LFB23:
2247:C:/StellarisWare/utils\softuart.c **** 
2248:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2249:C:/StellarisWare/utils\softuart.c **** //
2250:C:/StellarisWare/utils\softuart.c **** //! Enables individual SoftUART ``interrupt'' sources.
2251:C:/StellarisWare/utils\softuart.c **** //!
2252:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2253:C:/StellarisWare/utils\softuart.c **** //! \param ulIntFlags is the bit mask of the ``interrupt'' sources to be
2254:C:/StellarisWare/utils\softuart.c **** //! enabled.
2255:C:/StellarisWare/utils\softuart.c **** //!
2256:C:/StellarisWare/utils\softuart.c **** //! Enables the indicated SoftUART ``interrupt'' sources.  Only the sources
2257:C:/StellarisWare/utils\softuart.c **** //! that are enabled can be reflected to the SoftUART callback.
2258:C:/StellarisWare/utils\softuart.c **** //!
2259:C:/StellarisWare/utils\softuart.c **** //! The \e ulIntFlags parameter is the logical OR of any of the following:
2260:C:/StellarisWare/utils\softuart.c **** //!
2261:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_OE - Overrun Error ``interrupt''
2262:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_BE - Break Error ``interrupt''
2263:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_PE - Parity Error ``interrupt''
2264:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_FE - Framing Error ``interrupt''
2265:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_RT - Receive Timeout ``interrupt''
2266:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_TX - Transmit ``interrupt''
2267:C:/StellarisWare/utils\softuart.c **** //! - \b SOFTUART_INT_RX - Receive ``interrupt''
2268:C:/StellarisWare/utils\softuart.c **** //!
2269:C:/StellarisWare/utils\softuart.c **** //! \return None.
2270:C:/StellarisWare/utils\softuart.c **** //
2271:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2272:C:/StellarisWare/utils\softuart.c **** void
2273:C:/StellarisWare/utils\softuart.c **** SoftUARTIntEnable(tSoftUART *pUART, unsigned long ulIntFlags)
2274:C:/StellarisWare/utils\softuart.c **** {
 2812              		.loc 1 2274 0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 8
 2815              		@ frame_needed = 1, uses_anonymous_args = 0
 2816              		@ link register save eliminated.
 2817 0000 80B4     		push	{r7}
 2818              	.LCFI69:
 2819              		.cfi_def_cfa_offset 4
 2820              		.cfi_offset 7, -4
 2821 0002 83B0     		sub	sp, sp, #12
 2822              	.LCFI70:
 2823              		.cfi_def_cfa_offset 16
 2824 0004 00AF     		add	r7, sp, #0
 2825              	.LCFI71:
 2826              		.cfi_def_cfa_register 7
 2827 0006 7860     		str	r0, [r7, #4]
 2828 0008 3960     		str	r1, [r7, #0]
2275:C:/StellarisWare/utils\softuart.c ****     //
2276:C:/StellarisWare/utils\softuart.c ****     // Enable the specified interrupts.
2277:C:/StellarisWare/utils\softuart.c ****     //
2278:C:/StellarisWare/utils\softuart.c ****     pUART->usIntMask |= ulIntFlags;
 2829              		.loc 1 2278 0
 2830 000a 7B68     		ldr	r3, [r7, #4]
 2831 000c DA8C     		ldrh	r2, [r3, #38]
 2832 000e 3B68     		ldr	r3, [r7, #0]
 2833 0010 9BB2     		uxth	r3, r3
 2834 0012 1343     		orrs	r3, r3, r2
 2835 0014 9AB2     		uxth	r2, r3
 2836 0016 7B68     		ldr	r3, [r7, #4]
 2837 0018 DA84     		strh	r2, [r3, #38]	@ movhi
2279:C:/StellarisWare/utils\softuart.c **** }
 2838              		.loc 1 2279 0
 2839 001a 07F10C07 		add	r7, r7, #12
 2840 001e BD46     		mov	sp, r7
 2841 0020 80BC     		pop	{r7}
 2842 0022 7047     		bx	lr
 2843              		.cfi_endproc
 2844              	.LFE23:
 2846              		.section	.text.SoftUARTIntDisable,"ax",%progbits
 2847              		.align	2
 2848              		.global	SoftUARTIntDisable
 2849              		.thumb
 2850              		.thumb_func
 2852              	SoftUARTIntDisable:
 2853              	.LFB24:
2280:C:/StellarisWare/utils\softuart.c **** 
2281:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2282:C:/StellarisWare/utils\softuart.c **** //
2283:C:/StellarisWare/utils\softuart.c **** //! Disables individual SoftUART ``interrupt'' sources.
2284:C:/StellarisWare/utils\softuart.c **** //!
2285:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2286:C:/StellarisWare/utils\softuart.c **** //! \param ulIntFlags is the bit mask of the ``interrupt'' sources to be
2287:C:/StellarisWare/utils\softuart.c **** //! disabled.
2288:C:/StellarisWare/utils\softuart.c **** //!
2289:C:/StellarisWare/utils\softuart.c **** //! Disables the indicated SoftUART ``interrupt'' sources.  Only the sources
2290:C:/StellarisWare/utils\softuart.c **** //! that are enabled can be reflected to the SoftUART callback.
2291:C:/StellarisWare/utils\softuart.c **** //!
2292:C:/StellarisWare/utils\softuart.c **** //! The \e ulIntFlags parameter has the same definition as the \e ulIntFlags
2293:C:/StellarisWare/utils\softuart.c **** //! parameter to SoftUARTIntEnable().
2294:C:/StellarisWare/utils\softuart.c **** //!
2295:C:/StellarisWare/utils\softuart.c **** //! \return None.
2296:C:/StellarisWare/utils\softuart.c **** //
2297:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2298:C:/StellarisWare/utils\softuart.c **** void
2299:C:/StellarisWare/utils\softuart.c **** SoftUARTIntDisable(tSoftUART *pUART, unsigned long ulIntFlags)
2300:C:/StellarisWare/utils\softuart.c **** {
 2854              		.loc 1 2300 0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 8
 2857              		@ frame_needed = 1, uses_anonymous_args = 0
 2858              		@ link register save eliminated.
 2859 0000 80B4     		push	{r7}
 2860              	.LCFI72:
 2861              		.cfi_def_cfa_offset 4
 2862              		.cfi_offset 7, -4
 2863 0002 83B0     		sub	sp, sp, #12
 2864              	.LCFI73:
 2865              		.cfi_def_cfa_offset 16
 2866 0004 00AF     		add	r7, sp, #0
 2867              	.LCFI74:
 2868              		.cfi_def_cfa_register 7
 2869 0006 7860     		str	r0, [r7, #4]
 2870 0008 3960     		str	r1, [r7, #0]
2301:C:/StellarisWare/utils\softuart.c ****     //
2302:C:/StellarisWare/utils\softuart.c ****     // Disable the specified interrupts.
2303:C:/StellarisWare/utils\softuart.c ****     //
2304:C:/StellarisWare/utils\softuart.c ****     pUART->usIntMask &= ~(ulIntFlags);
 2871              		.loc 1 2304 0
 2872 000a 7B68     		ldr	r3, [r7, #4]
 2873 000c DA8C     		ldrh	r2, [r3, #38]
 2874 000e 3B68     		ldr	r3, [r7, #0]
 2875 0010 9BB2     		uxth	r3, r3
 2876 0012 6FEA0303 		mvn	r3, r3
 2877 0016 9BB2     		uxth	r3, r3
 2878 0018 1340     		ands	r3, r3, r2
 2879 001a 9AB2     		uxth	r2, r3
 2880 001c 7B68     		ldr	r3, [r7, #4]
 2881 001e DA84     		strh	r2, [r3, #38]	@ movhi
2305:C:/StellarisWare/utils\softuart.c **** }
 2882              		.loc 1 2305 0
 2883 0020 07F10C07 		add	r7, r7, #12
 2884 0024 BD46     		mov	sp, r7
 2885 0026 80BC     		pop	{r7}
 2886 0028 7047     		bx	lr
 2887              		.cfi_endproc
 2888              	.LFE24:
 2890 002a 00BF     		.section	.text.SoftUARTIntStatus,"ax",%progbits
 2891              		.align	2
 2892              		.global	SoftUARTIntStatus
 2893              		.thumb
 2894              		.thumb_func
 2896              	SoftUARTIntStatus:
 2897              	.LFB25:
2306:C:/StellarisWare/utils\softuart.c **** 
2307:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2308:C:/StellarisWare/utils\softuart.c **** //
2309:C:/StellarisWare/utils\softuart.c **** //! Gets the current SoftUART ``interrupt'' status.
2310:C:/StellarisWare/utils\softuart.c **** //!
2311:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2312:C:/StellarisWare/utils\softuart.c **** //! \param bMasked is \b false if the raw ``interrupt'' status is required and
2313:C:/StellarisWare/utils\softuart.c **** //! \b true if the masked ``interrupt'' status is required.
2314:C:/StellarisWare/utils\softuart.c **** //!
2315:C:/StellarisWare/utils\softuart.c **** //! This returns the ``interrupt'' status for the SoftUART.  Either the raw
2316:C:/StellarisWare/utils\softuart.c **** //! ``interrupt'' status or the status of ``interrupts'' that are allowed to
2317:C:/StellarisWare/utils\softuart.c **** //! reflect to the SoftUART callback can be returned.
2318:C:/StellarisWare/utils\softuart.c **** //!
2319:C:/StellarisWare/utils\softuart.c **** //! \return Returns the current ``interrupt'' status, enumerated as a bit field
2320:C:/StellarisWare/utils\softuart.c **** //! of values described in SoftUARTIntEnable().
2321:C:/StellarisWare/utils\softuart.c **** //
2322:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2323:C:/StellarisWare/utils\softuart.c **** unsigned long
2324:C:/StellarisWare/utils\softuart.c **** SoftUARTIntStatus(tSoftUART *pUART, tBoolean bMasked)
2325:C:/StellarisWare/utils\softuart.c **** {
 2898              		.loc 1 2325 0
 2899              		.cfi_startproc
 2900              		@ args = 0, pretend = 0, frame = 8
 2901              		@ frame_needed = 1, uses_anonymous_args = 0
 2902              		@ link register save eliminated.
 2903 0000 80B4     		push	{r7}
 2904              	.LCFI75:
 2905              		.cfi_def_cfa_offset 4
 2906              		.cfi_offset 7, -4
 2907 0002 83B0     		sub	sp, sp, #12
 2908              	.LCFI76:
 2909              		.cfi_def_cfa_offset 16
 2910 0004 00AF     		add	r7, sp, #0
 2911              	.LCFI77:
 2912              		.cfi_def_cfa_register 7
 2913 0006 7860     		str	r0, [r7, #4]
 2914 0008 0B46     		mov	r3, r1
 2915 000a FB70     		strb	r3, [r7, #3]
2326:C:/StellarisWare/utils\softuart.c ****     //
2327:C:/StellarisWare/utils\softuart.c ****     // Return either the interrupt status or the raw interrupt status as
2328:C:/StellarisWare/utils\softuart.c ****     // requested.
2329:C:/StellarisWare/utils\softuart.c ****     //
2330:C:/StellarisWare/utils\softuart.c ****     if(bMasked)
 2916              		.loc 1 2330 0
 2917 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2918 000e 002B     		cmp	r3, #0
 2919 0010 06D0     		beq	.L163
2331:C:/StellarisWare/utils\softuart.c ****     {
2332:C:/StellarisWare/utils\softuart.c ****         return(pUART->usIntStatus & pUART->usIntMask);
 2920              		.loc 1 2332 0
 2921 0012 7B68     		ldr	r3, [r7, #4]
 2922 0014 9A8C     		ldrh	r2, [r3, #36]
 2923 0016 7B68     		ldr	r3, [r7, #4]
 2924 0018 DB8C     		ldrh	r3, [r3, #38]
 2925 001a 1340     		ands	r3, r3, r2
 2926 001c 9BB2     		uxth	r3, r3
 2927 001e 01E0     		b	.L164
 2928              	.L163:
2333:C:/StellarisWare/utils\softuart.c ****     }
2334:C:/StellarisWare/utils\softuart.c ****     else
2335:C:/StellarisWare/utils\softuart.c ****     {
2336:C:/StellarisWare/utils\softuart.c ****         return(pUART->usIntStatus);
 2929              		.loc 1 2336 0
 2930 0020 7B68     		ldr	r3, [r7, #4]
 2931 0022 9B8C     		ldrh	r3, [r3, #36]
 2932              	.L164:
2337:C:/StellarisWare/utils\softuart.c ****     }
2338:C:/StellarisWare/utils\softuart.c **** }
 2933              		.loc 1 2338 0
 2934 0024 1846     		mov	r0, r3
 2935 0026 07F10C07 		add	r7, r7, #12
 2936 002a BD46     		mov	sp, r7
 2937 002c 80BC     		pop	{r7}
 2938 002e 7047     		bx	lr
 2939              		.cfi_endproc
 2940              	.LFE25:
 2942              		.section	.text.SoftUARTIntClear,"ax",%progbits
 2943              		.align	2
 2944              		.global	SoftUARTIntClear
 2945              		.thumb
 2946              		.thumb_func
 2948              	SoftUARTIntClear:
 2949              	.LFB26:
2339:C:/StellarisWare/utils\softuart.c **** 
2340:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2341:C:/StellarisWare/utils\softuart.c **** //
2342:C:/StellarisWare/utils\softuart.c **** //! Clears SoftUART ``interrupt'' sources.
2343:C:/StellarisWare/utils\softuart.c **** //!
2344:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2345:C:/StellarisWare/utils\softuart.c **** //! \param ulIntFlags is a bit mask of the ``interrupt'' sources to be cleared.
2346:C:/StellarisWare/utils\softuart.c **** //!
2347:C:/StellarisWare/utils\softuart.c **** //! The specified SoftUART ``interrupt'' sources are cleared, so that they no
2348:C:/StellarisWare/utils\softuart.c **** //! longer assert.  This function must be called in the callback function to
2349:C:/StellarisWare/utils\softuart.c **** //! keep the ``interrupt'' from being recognized again immediately upon exit.
2350:C:/StellarisWare/utils\softuart.c **** //!
2351:C:/StellarisWare/utils\softuart.c **** //! The \e ulIntFlags parameter has the same definition as the \e ulIntFlags
2352:C:/StellarisWare/utils\softuart.c **** //! parameter to SoftUARTIntEnable().
2353:C:/StellarisWare/utils\softuart.c **** //!
2354:C:/StellarisWare/utils\softuart.c **** //! \return None.
2355:C:/StellarisWare/utils\softuart.c **** //
2356:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2357:C:/StellarisWare/utils\softuart.c **** void
2358:C:/StellarisWare/utils\softuart.c **** SoftUARTIntClear(tSoftUART *pUART, unsigned long ulIntFlags)
2359:C:/StellarisWare/utils\softuart.c **** {
 2950              		.loc 1 2359 0
 2951              		.cfi_startproc
 2952              		@ args = 0, pretend = 0, frame = 8
 2953              		@ frame_needed = 1, uses_anonymous_args = 0
 2954              		@ link register save eliminated.
 2955 0000 80B4     		push	{r7}
 2956              	.LCFI78:
 2957              		.cfi_def_cfa_offset 4
 2958              		.cfi_offset 7, -4
 2959 0002 83B0     		sub	sp, sp, #12
 2960              	.LCFI79:
 2961              		.cfi_def_cfa_offset 16
 2962 0004 00AF     		add	r7, sp, #0
 2963              	.LCFI80:
 2964              		.cfi_def_cfa_register 7
 2965 0006 7860     		str	r0, [r7, #4]
 2966 0008 3960     		str	r1, [r7, #0]
2360:C:/StellarisWare/utils\softuart.c ****     //
2361:C:/StellarisWare/utils\softuart.c ****     // Clear the requested interrupt sources.
2362:C:/StellarisWare/utils\softuart.c ****     //
2363:C:/StellarisWare/utils\softuart.c ****     pUART->usIntStatus &= ~(ulIntFlags);
 2967              		.loc 1 2363 0
 2968 000a 7B68     		ldr	r3, [r7, #4]
 2969 000c 9A8C     		ldrh	r2, [r3, #36]
 2970 000e 3B68     		ldr	r3, [r7, #0]
 2971 0010 9BB2     		uxth	r3, r3
 2972 0012 6FEA0303 		mvn	r3, r3
 2973 0016 9BB2     		uxth	r3, r3
 2974 0018 1340     		ands	r3, r3, r2
 2975 001a 9AB2     		uxth	r2, r3
 2976 001c 7B68     		ldr	r3, [r7, #4]
 2977 001e 9A84     		strh	r2, [r3, #36]	@ movhi
2364:C:/StellarisWare/utils\softuart.c **** }
 2978              		.loc 1 2364 0
 2979 0020 07F10C07 		add	r7, r7, #12
 2980 0024 BD46     		mov	sp, r7
 2981 0026 80BC     		pop	{r7}
 2982 0028 7047     		bx	lr
 2983              		.cfi_endproc
 2984              	.LFE26:
 2986 002a 00BF     		.section	.text.SoftUARTRxErrorGet,"ax",%progbits
 2987              		.align	2
 2988              		.global	SoftUARTRxErrorGet
 2989              		.thumb
 2990              		.thumb_func
 2992              	SoftUARTRxErrorGet:
 2993              	.LFB27:
2365:C:/StellarisWare/utils\softuart.c **** 
2366:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2367:C:/StellarisWare/utils\softuart.c **** //
2368:C:/StellarisWare/utils\softuart.c **** //! Gets current receiver errors.
2369:C:/StellarisWare/utils\softuart.c **** //!
2370:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2371:C:/StellarisWare/utils\softuart.c **** //!
2372:C:/StellarisWare/utils\softuart.c **** //! This function returns the current state of each of the 4 receiver error
2373:C:/StellarisWare/utils\softuart.c **** //! sources.  The returned errors are equivalent to the four error bits
2374:C:/StellarisWare/utils\softuart.c **** //! returned via the previous call to SoftUARTCharGet() or
2375:C:/StellarisWare/utils\softuart.c **** //! SoftUARTCharGetNonBlocking() with the exception that the overrun error is
2376:C:/StellarisWare/utils\softuart.c **** //! set immediately when the overrun occurs rather than when a character is
2377:C:/StellarisWare/utils\softuart.c **** //! next read.
2378:C:/StellarisWare/utils\softuart.c **** //!
2379:C:/StellarisWare/utils\softuart.c **** //! \return Returns a logical OR combination of the receiver error flags,
2380:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_RXERROR_FRAMING, \b SOFTUART_RXERROR_PARITY,
2381:C:/StellarisWare/utils\softuart.c **** //! \b SOFTUART_RXERROR_BREAK and \b SOFTUART_RXERROR_OVERRUN.
2382:C:/StellarisWare/utils\softuart.c **** //
2383:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2384:C:/StellarisWare/utils\softuart.c **** unsigned long
2385:C:/StellarisWare/utils\softuart.c **** SoftUARTRxErrorGet(tSoftUART *pUART)
2386:C:/StellarisWare/utils\softuart.c **** {
 2994              		.loc 1 2386 0
 2995              		.cfi_startproc
 2996              		@ args = 0, pretend = 0, frame = 8
 2997              		@ frame_needed = 1, uses_anonymous_args = 0
 2998              		@ link register save eliminated.
 2999 0000 80B4     		push	{r7}
 3000              	.LCFI81:
 3001              		.cfi_def_cfa_offset 4
 3002              		.cfi_offset 7, -4
 3003 0002 83B0     		sub	sp, sp, #12
 3004              	.LCFI82:
 3005              		.cfi_def_cfa_offset 16
 3006 0004 00AF     		add	r7, sp, #0
 3007              	.LCFI83:
 3008              		.cfi_def_cfa_register 7
 3009 0006 7860     		str	r0, [r7, #4]
2387:C:/StellarisWare/utils\softuart.c ****     //
2388:C:/StellarisWare/utils\softuart.c ****     // Return the current value of the receive status.
2389:C:/StellarisWare/utils\softuart.c ****     //
2390:C:/StellarisWare/utils\softuart.c ****     return(pUART->ucRxStatus);
 3010              		.loc 1 2390 0
 3011 0008 7B68     		ldr	r3, [r7, #4]
 3012 000a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
2391:C:/StellarisWare/utils\softuart.c **** }
 3013              		.loc 1 2391 0
 3014 000e 1846     		mov	r0, r3
 3015 0010 07F10C07 		add	r7, r7, #12
 3016 0014 BD46     		mov	sp, r7
 3017 0016 80BC     		pop	{r7}
 3018 0018 7047     		bx	lr
 3019              		.cfi_endproc
 3020              	.LFE27:
 3022 001a 00BF     		.section	.text.SoftUARTRxErrorClear,"ax",%progbits
 3023              		.align	2
 3024              		.global	SoftUARTRxErrorClear
 3025              		.thumb
 3026              		.thumb_func
 3028              	SoftUARTRxErrorClear:
 3029              	.LFB28:
2392:C:/StellarisWare/utils\softuart.c **** 
2393:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2394:C:/StellarisWare/utils\softuart.c **** //
2395:C:/StellarisWare/utils\softuart.c **** //! Clears all reported receiver errors.
2396:C:/StellarisWare/utils\softuart.c **** //!
2397:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2398:C:/StellarisWare/utils\softuart.c **** //!
2399:C:/StellarisWare/utils\softuart.c **** //! This function is used to clear all receiver error conditions reported via
2400:C:/StellarisWare/utils\softuart.c **** //! SoftUARTRxErrorGet().  If using the overrun, framing error, parity error or
2401:C:/StellarisWare/utils\softuart.c **** //! break interrupts, this function must be called after clearing the interrupt
2402:C:/StellarisWare/utils\softuart.c **** //! to ensure that later errors of the same type trigger another interrupt.
2403:C:/StellarisWare/utils\softuart.c **** //!
2404:C:/StellarisWare/utils\softuart.c **** //! \return None.
2405:C:/StellarisWare/utils\softuart.c **** //
2406:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2407:C:/StellarisWare/utils\softuart.c **** void
2408:C:/StellarisWare/utils\softuart.c **** SoftUARTRxErrorClear(tSoftUART *pUART)
2409:C:/StellarisWare/utils\softuart.c **** {
 3030              		.loc 1 2409 0
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 8
 3033              		@ frame_needed = 1, uses_anonymous_args = 0
 3034              		@ link register save eliminated.
 3035 0000 80B4     		push	{r7}
 3036              	.LCFI84:
 3037              		.cfi_def_cfa_offset 4
 3038              		.cfi_offset 7, -4
 3039 0002 83B0     		sub	sp, sp, #12
 3040              	.LCFI85:
 3041              		.cfi_def_cfa_offset 16
 3042 0004 00AF     		add	r7, sp, #0
 3043              	.LCFI86:
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
2410:C:/StellarisWare/utils\softuart.c ****     //
2411:C:/StellarisWare/utils\softuart.c ****     // Clear any receive error status.
2412:C:/StellarisWare/utils\softuart.c ****     //
2413:C:/StellarisWare/utils\softuart.c ****     pUART->ucRxStatus = 0;
 3046              		.loc 1 2413 0
 3047 0008 7B68     		ldr	r3, [r7, #4]
 3048 000a 4FF00002 		mov	r2, #0
 3049 000e 83F83220 		strb	r2, [r3, #50]
2414:C:/StellarisWare/utils\softuart.c **** }
 3050              		.loc 1 2414 0
 3051 0012 07F10C07 		add	r7, r7, #12
 3052 0016 BD46     		mov	sp, r7
 3053 0018 80BC     		pop	{r7}
 3054 001a 7047     		bx	lr
 3055              		.cfi_endproc
 3056              	.LFE28:
 3058              		.section	.text.SoftUARTCallbackSet,"ax",%progbits
 3059              		.align	2
 3060              		.global	SoftUARTCallbackSet
 3061              		.thumb
 3062              		.thumb_func
 3064              	SoftUARTCallbackSet:
 3065              	.LFB29:
2415:C:/StellarisWare/utils\softuart.c **** 
2416:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2417:C:/StellarisWare/utils\softuart.c **** //
2418:C:/StellarisWare/utils\softuart.c **** //! Sets the callback used by the SoftUART module.
2419:C:/StellarisWare/utils\softuart.c **** //!
2420:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2421:C:/StellarisWare/utils\softuart.c **** //! \param pfnCallback is a pointer to the callback function.
2422:C:/StellarisWare/utils\softuart.c **** //!
2423:C:/StellarisWare/utils\softuart.c **** //! This function sets the address of the callback function that is called when
2424:C:/StellarisWare/utils\softuart.c **** //! there is an ``interrupt'' produced by the SoftUART module.
2425:C:/StellarisWare/utils\softuart.c **** //!
2426:C:/StellarisWare/utils\softuart.c **** //! \return None.
2427:C:/StellarisWare/utils\softuart.c **** //
2428:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2429:C:/StellarisWare/utils\softuart.c **** void
2430:C:/StellarisWare/utils\softuart.c **** SoftUARTCallbackSet(tSoftUART *pUART, void (*pfnCallback)(void))
2431:C:/StellarisWare/utils\softuart.c **** {
 3066              		.loc 1 2431 0
 3067              		.cfi_startproc
 3068              		@ args = 0, pretend = 0, frame = 8
 3069              		@ frame_needed = 1, uses_anonymous_args = 0
 3070              		@ link register save eliminated.
 3071 0000 80B4     		push	{r7}
 3072              	.LCFI87:
 3073              		.cfi_def_cfa_offset 4
 3074              		.cfi_offset 7, -4
 3075 0002 83B0     		sub	sp, sp, #12
 3076              	.LCFI88:
 3077              		.cfi_def_cfa_offset 16
 3078 0004 00AF     		add	r7, sp, #0
 3079              	.LCFI89:
 3080              		.cfi_def_cfa_register 7
 3081 0006 7860     		str	r0, [r7, #4]
 3082 0008 3960     		str	r1, [r7, #0]
2432:C:/StellarisWare/utils\softuart.c ****     //
2433:C:/StellarisWare/utils\softuart.c ****     // Save the callback function address.
2434:C:/StellarisWare/utils\softuart.c ****     //
2435:C:/StellarisWare/utils\softuart.c ****     pUART->pfnIntCallback = pfnCallback;
 3083              		.loc 1 2435 0
 3084 000a 7B68     		ldr	r3, [r7, #4]
 3085 000c 3A68     		ldr	r2, [r7, #0]
 3086 000e 1A60     		str	r2, [r3, #0]
2436:C:/StellarisWare/utils\softuart.c **** }
 3087              		.loc 1 2436 0
 3088 0010 07F10C07 		add	r7, r7, #12
 3089 0014 BD46     		mov	sp, r7
 3090 0016 80BC     		pop	{r7}
 3091 0018 7047     		bx	lr
 3092              		.cfi_endproc
 3093              	.LFE29:
 3095 001a 00BF     		.section	.text.SoftUARTTxGPIOSet,"ax",%progbits
 3096              		.align	2
 3097              		.global	SoftUARTTxGPIOSet
 3098              		.thumb
 3099              		.thumb_func
 3101              	SoftUARTTxGPIOSet:
 3102              	.LFB30:
2437:C:/StellarisWare/utils\softuart.c **** 
2438:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2439:C:/StellarisWare/utils\softuart.c **** //
2440:C:/StellarisWare/utils\softuart.c **** //! Sets the GPIO pin to be used as the SoftUART Tx signal.
2441:C:/StellarisWare/utils\softuart.c **** //!
2442:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2443:C:/StellarisWare/utils\softuart.c **** //! \param ulBase is the base address of the GPIO module.
2444:C:/StellarisWare/utils\softuart.c **** //! \param ucPin is the bit-packed representation of the pin to use.
2445:C:/StellarisWare/utils\softuart.c **** //!
2446:C:/StellarisWare/utils\softuart.c **** //! This function sets the GPIO pin that is used when the SoftUART must assert
2447:C:/StellarisWare/utils\softuart.c **** //! the Tx signal.
2448:C:/StellarisWare/utils\softuart.c **** //!
2449:C:/StellarisWare/utils\softuart.c **** //! The pin is specified using a bit-packed byte, where bit 0 of the byte
2450:C:/StellarisWare/utils\softuart.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
2451:C:/StellarisWare/utils\softuart.c **** //!
2452:C:/StellarisWare/utils\softuart.c **** //! \return None.
2453:C:/StellarisWare/utils\softuart.c **** //
2454:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2455:C:/StellarisWare/utils\softuart.c **** void
2456:C:/StellarisWare/utils\softuart.c **** SoftUARTTxGPIOSet(tSoftUART *pUART, unsigned long ulBase, unsigned char ucPin)
2457:C:/StellarisWare/utils\softuart.c **** {
 3103              		.loc 1 2457 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 16
 3106              		@ frame_needed = 1, uses_anonymous_args = 0
 3107              		@ link register save eliminated.
 3108 0000 80B4     		push	{r7}
 3109              	.LCFI90:
 3110              		.cfi_def_cfa_offset 4
 3111              		.cfi_offset 7, -4
 3112 0002 85B0     		sub	sp, sp, #20
 3113              	.LCFI91:
 3114              		.cfi_def_cfa_offset 24
 3115 0004 00AF     		add	r7, sp, #0
 3116              	.LCFI92:
 3117              		.cfi_def_cfa_register 7
 3118 0006 F860     		str	r0, [r7, #12]
 3119 0008 B960     		str	r1, [r7, #8]
 3120 000a 1346     		mov	r3, r2
 3121 000c FB71     		strb	r3, [r7, #7]
2458:C:/StellarisWare/utils\softuart.c ****     //
2459:C:/StellarisWare/utils\softuart.c ****     // Save the base address and pin for the Tx signal.
2460:C:/StellarisWare/utils\softuart.c ****     //
2461:C:/StellarisWare/utils\softuart.c ****     if(ulBase == 0)
 3122              		.loc 1 2461 0
 3123 000e BB68     		ldr	r3, [r7, #8]
 3124 0010 002B     		cmp	r3, #0
 3125 0012 04D1     		bne	.L170
2462:C:/StellarisWare/utils\softuart.c ****     {
2463:C:/StellarisWare/utils\softuart.c ****         pUART->ulTxGPIO = 0;
 3126              		.loc 1 2463 0
 3127 0014 FB68     		ldr	r3, [r7, #12]
 3128 0016 4FF00002 		mov	r2, #0
 3129 001a 5A60     		str	r2, [r3, #4]
 3130 001c 07E0     		b	.L169
 3131              	.L170:
2464:C:/StellarisWare/utils\softuart.c ****     }
2465:C:/StellarisWare/utils\softuart.c ****     else
2466:C:/StellarisWare/utils\softuart.c ****     {
2467:C:/StellarisWare/utils\softuart.c ****         pUART->ulTxGPIO = ulBase + (ucPin << 2);
 3132              		.loc 1 2467 0
 3133 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3134 0020 4FEA8303 		lsl	r3, r3, #2
 3135 0024 1A46     		mov	r2, r3
 3136 0026 BB68     		ldr	r3, [r7, #8]
 3137 0028 D218     		adds	r2, r2, r3
 3138 002a FB68     		ldr	r3, [r7, #12]
 3139 002c 5A60     		str	r2, [r3, #4]
 3140              	.L169:
2468:C:/StellarisWare/utils\softuart.c ****     }
2469:C:/StellarisWare/utils\softuart.c **** }
 3141              		.loc 1 2469 0
 3142 002e 07F11407 		add	r7, r7, #20
 3143 0032 BD46     		mov	sp, r7
 3144 0034 80BC     		pop	{r7}
 3145 0036 7047     		bx	lr
 3146              		.cfi_endproc
 3147              	.LFE30:
 3149              		.section	.text.SoftUARTRxGPIOSet,"ax",%progbits
 3150              		.align	2
 3151              		.global	SoftUARTRxGPIOSet
 3152              		.thumb
 3153              		.thumb_func
 3155              	SoftUARTRxGPIOSet:
 3156              	.LFB31:
2470:C:/StellarisWare/utils\softuart.c **** 
2471:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2472:C:/StellarisWare/utils\softuart.c **** //
2473:C:/StellarisWare/utils\softuart.c **** //! Sets the GPIO pin to be used as the SoftUART Rx signal.
2474:C:/StellarisWare/utils\softuart.c **** //!
2475:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2476:C:/StellarisWare/utils\softuart.c **** //! \param ulBase is the base address of the GPIO module.
2477:C:/StellarisWare/utils\softuart.c **** //! \param ucPin is the bit-packed representation of the pin to use.
2478:C:/StellarisWare/utils\softuart.c **** //!
2479:C:/StellarisWare/utils\softuart.c **** //! This function sets the GPIO pin that is used when the SoftUART must sample
2480:C:/StellarisWare/utils\softuart.c **** //! the Rx signal.  If there is not a GPIO pin allocated for Rx, the SoftUART
2481:C:/StellarisWare/utils\softuart.c **** //! module will not read data from the slave device.
2482:C:/StellarisWare/utils\softuart.c **** //!
2483:C:/StellarisWare/utils\softuart.c **** //! The pin is specified using a bit-packed byte, where bit 0 of the byte
2484:C:/StellarisWare/utils\softuart.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
2485:C:/StellarisWare/utils\softuart.c **** //!
2486:C:/StellarisWare/utils\softuart.c **** //! \return None.
2487:C:/StellarisWare/utils\softuart.c **** //
2488:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2489:C:/StellarisWare/utils\softuart.c **** void
2490:C:/StellarisWare/utils\softuart.c **** SoftUARTRxGPIOSet(tSoftUART *pUART, unsigned long ulBase, unsigned char ucPin)
2491:C:/StellarisWare/utils\softuart.c **** {
 3157              		.loc 1 2491 0
 3158              		.cfi_startproc
 3159              		@ args = 0, pretend = 0, frame = 16
 3160              		@ frame_needed = 1, uses_anonymous_args = 0
 3161              		@ link register save eliminated.
 3162 0000 80B4     		push	{r7}
 3163              	.LCFI93:
 3164              		.cfi_def_cfa_offset 4
 3165              		.cfi_offset 7, -4
 3166 0002 85B0     		sub	sp, sp, #20
 3167              	.LCFI94:
 3168              		.cfi_def_cfa_offset 24
 3169 0004 00AF     		add	r7, sp, #0
 3170              	.LCFI95:
 3171              		.cfi_def_cfa_register 7
 3172 0006 F860     		str	r0, [r7, #12]
 3173 0008 B960     		str	r1, [r7, #8]
 3174 000a 1346     		mov	r3, r2
 3175 000c FB71     		strb	r3, [r7, #7]
2492:C:/StellarisWare/utils\softuart.c ****     //
2493:C:/StellarisWare/utils\softuart.c ****     // Save the base address and pin for the Rx signal.
2494:C:/StellarisWare/utils\softuart.c ****     //
2495:C:/StellarisWare/utils\softuart.c ****     if(ulBase == 0)
 3176              		.loc 1 2495 0
 3177 000e BB68     		ldr	r3, [r7, #8]
 3178 0010 002B     		cmp	r3, #0
 3179 0012 09D1     		bne	.L173
2496:C:/StellarisWare/utils\softuart.c ****     {
2497:C:/StellarisWare/utils\softuart.c ****         pUART->ulRxGPIOPort = 0;
 3180              		.loc 1 2497 0
 3181 0014 FB68     		ldr	r3, [r7, #12]
 3182 0016 4FF00002 		mov	r2, #0
 3183 001a 9A60     		str	r2, [r3, #8]
2498:C:/StellarisWare/utils\softuart.c ****         pUART->ucRxPin = 0;
 3184              		.loc 1 2498 0
 3185 001c FB68     		ldr	r3, [r7, #12]
 3186 001e 4FF00002 		mov	r2, #0
 3187 0022 83F82E20 		strb	r2, [r3, #46]
 3188 0026 06E0     		b	.L172
 3189              	.L173:
2499:C:/StellarisWare/utils\softuart.c ****     }
2500:C:/StellarisWare/utils\softuart.c ****     else
2501:C:/StellarisWare/utils\softuart.c ****     {
2502:C:/StellarisWare/utils\softuart.c ****         pUART->ulRxGPIOPort = ulBase;
 3190              		.loc 1 2502 0
 3191 0028 FB68     		ldr	r3, [r7, #12]
 3192 002a BA68     		ldr	r2, [r7, #8]
 3193 002c 9A60     		str	r2, [r3, #8]
2503:C:/StellarisWare/utils\softuart.c ****         pUART->ucRxPin = ucPin;
 3194              		.loc 1 2503 0
 3195 002e FB68     		ldr	r3, [r7, #12]
 3196 0030 FA79     		ldrb	r2, [r7, #7]
 3197 0032 83F82E20 		strb	r2, [r3, #46]
 3198              	.L172:
2504:C:/StellarisWare/utils\softuart.c ****     }
2505:C:/StellarisWare/utils\softuart.c **** }
 3199              		.loc 1 2505 0
 3200 0036 07F11407 		add	r7, r7, #20
 3201 003a BD46     		mov	sp, r7
 3202 003c 80BC     		pop	{r7}
 3203 003e 7047     		bx	lr
 3204              		.cfi_endproc
 3205              	.LFE31:
 3207              		.section	.text.SoftUARTTxBufferSet,"ax",%progbits
 3208              		.align	2
 3209              		.global	SoftUARTTxBufferSet
 3210              		.thumb
 3211              		.thumb_func
 3213              	SoftUARTTxBufferSet:
 3214              	.LFB32:
2506:C:/StellarisWare/utils\softuart.c **** 
2507:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2508:C:/StellarisWare/utils\softuart.c **** //
2509:C:/StellarisWare/utils\softuart.c **** //! Sets the transmit buffer for a SoftUART module.
2510:C:/StellarisWare/utils\softuart.c **** //!
2511:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2512:C:/StellarisWare/utils\softuart.c **** //! \param pucTxBuffer is the address of the transmit buffer.
2513:C:/StellarisWare/utils\softuart.c **** //! \param usLen is the size, in 8-bit bytes, of the transmit buffer.
2514:C:/StellarisWare/utils\softuart.c **** //!
2515:C:/StellarisWare/utils\softuart.c **** //! This function sets the address and size of the transmit buffer.  It also
2516:C:/StellarisWare/utils\softuart.c **** //! resets the read and write pointers, marking the transmit buffer as empty.
2517:C:/StellarisWare/utils\softuart.c **** //!
2518:C:/StellarisWare/utils\softuart.c **** //! \return None.
2519:C:/StellarisWare/utils\softuart.c **** //
2520:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2521:C:/StellarisWare/utils\softuart.c **** void
2522:C:/StellarisWare/utils\softuart.c **** SoftUARTTxBufferSet(tSoftUART *pUART, unsigned char *pucTxBuffer,
2523:C:/StellarisWare/utils\softuart.c ****                    unsigned short usLen)
2524:C:/StellarisWare/utils\softuart.c **** {
 3215              		.loc 1 2524 0
 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 16
 3218              		@ frame_needed = 1, uses_anonymous_args = 0
 3219 0000 80B5     		push	{r7, lr}
 3220              	.LCFI96:
 3221              		.cfi_def_cfa_offset 8
 3222              		.cfi_offset 14, -4
 3223              		.cfi_offset 7, -8
 3224 0002 84B0     		sub	sp, sp, #16
 3225              	.LCFI97:
 3226              		.cfi_def_cfa_offset 24
 3227 0004 00AF     		add	r7, sp, #0
 3228              	.LCFI98:
 3229              		.cfi_def_cfa_register 7
 3230 0006 F860     		str	r0, [r7, #12]
 3231 0008 B960     		str	r1, [r7, #8]
 3232 000a 1346     		mov	r3, r2
 3233 000c FB80     		strh	r3, [r7, #6]	@ movhi
2525:C:/StellarisWare/utils\softuart.c ****     //
2526:C:/StellarisWare/utils\softuart.c ****     // Save the transmit buffer address and length.
2527:C:/StellarisWare/utils\softuart.c ****     //
2528:C:/StellarisWare/utils\softuart.c ****     pUART->pucTxBuffer = pucTxBuffer;
 3234              		.loc 1 2528 0
 3235 000e FB68     		ldr	r3, [r7, #12]
 3236 0010 BA68     		ldr	r2, [r7, #8]
 3237 0012 DA60     		str	r2, [r3, #12]
2529:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferLen = usLen;
 3238              		.loc 1 2529 0
 3239 0014 FB68     		ldr	r3, [r7, #12]
 3240 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 3241 0018 9A82     		strh	r2, [r3, #20]	@ movhi
2530:C:/StellarisWare/utils\softuart.c **** 
2531:C:/StellarisWare/utils\softuart.c ****     //
2532:C:/StellarisWare/utils\softuart.c ****     // Reset the transmit buffer read and write pointers.
2533:C:/StellarisWare/utils\softuart.c ****     //
2534:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferRead = 0;
 3242              		.loc 1 2534 0
 3243 001a FB68     		ldr	r3, [r7, #12]
 3244 001c 4FF00002 		mov	r2, #0
 3245 0020 DA82     		strh	r2, [r3, #22]	@ movhi
2535:C:/StellarisWare/utils\softuart.c ****     pUART->usTxBufferWrite = 0;
 3246              		.loc 1 2535 0
 3247 0022 FB68     		ldr	r3, [r7, #12]
 3248 0024 4FF00002 		mov	r2, #0
 3249 0028 1A83     		strh	r2, [r3, #24]	@ movhi
2536:C:/StellarisWare/utils\softuart.c **** 
2537:C:/StellarisWare/utils\softuart.c ****     //
2538:C:/StellarisWare/utils\softuart.c ****     // Compute the new buffer "interrupt" level.
2539:C:/StellarisWare/utils\softuart.c ****     //
2540:C:/StellarisWare/utils\softuart.c ****     SoftUARTTxLevelSet(pUART);
 3250              		.loc 1 2540 0
 3251 002a F868     		ldr	r0, [r7, #12]
 3252 002c FFF7FEFF 		bl	SoftUARTTxLevelSet
2541:C:/StellarisWare/utils\softuart.c **** }
 3253              		.loc 1 2541 0
 3254 0030 07F11007 		add	r7, r7, #16
 3255 0034 BD46     		mov	sp, r7
 3256 0036 80BD     		pop	{r7, pc}
 3257              		.cfi_endproc
 3258              	.LFE32:
 3260              		.section	.text.SoftUARTRxBufferSet,"ax",%progbits
 3261              		.align	2
 3262              		.global	SoftUARTRxBufferSet
 3263              		.thumb
 3264              		.thumb_func
 3266              	SoftUARTRxBufferSet:
 3267              	.LFB33:
2542:C:/StellarisWare/utils\softuart.c **** 
2543:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2544:C:/StellarisWare/utils\softuart.c **** //
2545:C:/StellarisWare/utils\softuart.c **** //! Sets the receive buffer for a SoftUART module.
2546:C:/StellarisWare/utils\softuart.c **** //!
2547:C:/StellarisWare/utils\softuart.c **** //! \param pUART specifies the SoftUART data structure.
2548:C:/StellarisWare/utils\softuart.c **** //! \param pusRxBuffer is the address of the receive buffer.
2549:C:/StellarisWare/utils\softuart.c **** //! \param usLen is the size, in 16-bit half-words, of the receive buffer.
2550:C:/StellarisWare/utils\softuart.c **** //!
2551:C:/StellarisWare/utils\softuart.c **** //! This function sets the address and size of the receive buffer.  It also
2552:C:/StellarisWare/utils\softuart.c **** //! resets the read and write pointers, marking the receive buffer as empty.
2553:C:/StellarisWare/utils\softuart.c **** //!
2554:C:/StellarisWare/utils\softuart.c **** //! \return None.
2555:C:/StellarisWare/utils\softuart.c **** //
2556:C:/StellarisWare/utils\softuart.c **** //*****************************************************************************
2557:C:/StellarisWare/utils\softuart.c **** void
2558:C:/StellarisWare/utils\softuart.c **** SoftUARTRxBufferSet(tSoftUART *pUART, unsigned short *pusRxBuffer,
2559:C:/StellarisWare/utils\softuart.c ****                    unsigned short usLen)
2560:C:/StellarisWare/utils\softuart.c **** {
 3268              		.loc 1 2560 0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 16
 3271              		@ frame_needed = 1, uses_anonymous_args = 0
 3272 0000 80B5     		push	{r7, lr}
 3273              	.LCFI99:
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 14, -4
 3276              		.cfi_offset 7, -8
 3277 0002 84B0     		sub	sp, sp, #16
 3278              	.LCFI100:
 3279              		.cfi_def_cfa_offset 24
 3280 0004 00AF     		add	r7, sp, #0
 3281              	.LCFI101:
 3282              		.cfi_def_cfa_register 7
 3283 0006 F860     		str	r0, [r7, #12]
 3284 0008 B960     		str	r1, [r7, #8]
 3285 000a 1346     		mov	r3, r2
 3286 000c FB80     		strh	r3, [r7, #6]	@ movhi
2561:C:/StellarisWare/utils\softuart.c ****     //
2562:C:/StellarisWare/utils\softuart.c ****     // Save the receive buffer address and length.
2563:C:/StellarisWare/utils\softuart.c ****     //
2564:C:/StellarisWare/utils\softuart.c ****     pUART->pusRxBuffer = pusRxBuffer;
 3287              		.loc 1 2564 0
 3288 000e FB68     		ldr	r3, [r7, #12]
 3289 0010 BA68     		ldr	r2, [r7, #8]
 3290 0012 1A61     		str	r2, [r3, #16]
2565:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferLen = usLen;
 3291              		.loc 1 2565 0
 3292 0014 FB68     		ldr	r3, [r7, #12]
 3293 0016 FA88     		ldrh	r2, [r7, #6]	@ movhi
 3294 0018 9A83     		strh	r2, [r3, #28]	@ movhi
2566:C:/StellarisWare/utils\softuart.c **** 
2567:C:/StellarisWare/utils\softuart.c ****     //
2568:C:/StellarisWare/utils\softuart.c ****     // Reset the receive read and write pointers.
2569:C:/StellarisWare/utils\softuart.c ****     //
2570:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferRead = 0;
 3295              		.loc 1 2570 0
 3296 001a FB68     		ldr	r3, [r7, #12]
 3297 001c 4FF00002 		mov	r2, #0
 3298 0020 DA83     		strh	r2, [r3, #30]	@ movhi
2571:C:/StellarisWare/utils\softuart.c ****     pUART->usRxBufferWrite = 0;
 3299              		.loc 1 2571 0
 3300 0022 FB68     		ldr	r3, [r7, #12]
 3301 0024 4FF00002 		mov	r2, #0
 3302 0028 1A84     		strh	r2, [r3, #32]	@ movhi
2572:C:/StellarisWare/utils\softuart.c **** 
2573:C:/StellarisWare/utils\softuart.c ****     //
2574:C:/StellarisWare/utils\softuart.c ****     // Compute the new buffer "interrupt" level.
2575:C:/StellarisWare/utils\softuart.c ****     //
2576:C:/StellarisWare/utils\softuart.c ****     SoftUARTRxLevelSet(pUART);
 3303              		.loc 1 2576 0
 3304 002a F868     		ldr	r0, [r7, #12]
 3305 002c FFF7FEFF 		bl	SoftUARTRxLevelSet
2577:C:/StellarisWare/utils\softuart.c **** }
 3306              		.loc 1 2577 0
 3307 0030 07F11007 		add	r7, r7, #16
 3308 0034 BD46     		mov	sp, r7
 3309 0036 80BD     		pop	{r7, pc}
 3310              		.cfi_endproc
 3311              	.LFE33:
 3313              		.text
 3314              	.Letext0:
 3315              		.file 2 "C:\\StellarisWare/utils/softuart.h"
 3316              		.file 3 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 softuart.c
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:19     .data:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:22     .data:00000000 g_pulParityOdd
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:32     .text.SoftUARTInit:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:37     .text.SoftUARTInit:00000000 SoftUARTInit
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:76     .text.SoftUARTConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:81     .text.SoftUARTConfigSet:00000000 SoftUARTConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:222    .text.SoftUARTTxTimerTick:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:227    .text.SoftUARTTxTimerTick:00000000 SoftUARTTxTimerTick
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:260    .text.SoftUARTTxTimerTick:00000028 $d
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:276    .text.SoftUARTTxTimerTick:00000060 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:762    .text.SoftUARTRxWriteInt:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:766    .text.SoftUARTRxWriteInt:00000000 SoftUARTRxWriteInt
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:839    .text.SoftUARTRxTick:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:844    .text.SoftUARTRxTick:00000000 SoftUARTRxTick
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:900    .text.SoftUARTRxTick:00000054 $d
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:916    .text.SoftUARTRxTick:0000008c $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1613   .text.SoftUARTParityModeSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1618   .text.SoftUARTParityModeSet:00000000 SoftUARTParityModeSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1657   .text.SoftUARTParityModeGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1662   .text.SoftUARTParityModeGet:00000000 SoftUARTParityModeGet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1694   .text.SoftUARTTxLevelSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1698   .text.SoftUARTTxLevelSet:00000000 SoftUARTTxLevelSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1811   .text.SoftUARTRxLevelSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1815   .text.SoftUARTRxLevelSet:00000000 SoftUARTRxLevelSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1928   .text.SoftUARTFIFOLevelSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1933   .text.SoftUARTFIFOLevelSet:00000000 SoftUARTFIFOLevelSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1984   .text.SoftUARTFIFOLevelGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:1989   .text.SoftUARTFIFOLevelGet:00000000 SoftUARTFIFOLevelGet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2034   .text.SoftUARTConfigGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2039   .text.SoftUARTConfigGet:00000000 SoftUARTConfigGet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2073   .text.SoftUARTEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2078   .text.SoftUARTEnable:00000000 SoftUARTEnable
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2112   .text.SoftUARTDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2117   .text.SoftUARTDisable:00000000 SoftUARTDisable
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2747   .text.SoftUARTBusy:00000000 SoftUARTBusy
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2159   .text.SoftUARTCharsAvail:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2164   .text.SoftUARTCharsAvail:00000000 SoftUARTCharsAvail
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2202   .text.SoftUARTSpaceAvail:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2207   .text.SoftUARTSpaceAvail:00000000 SoftUARTSpaceAvail
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2259   .text.SoftUARTRxReadInt:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2263   .text.SoftUARTRxReadInt:00000000 SoftUARTRxReadInt
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2348   .text.SoftUARTCharGetNonBlocking:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2353   .text.SoftUARTCharGetNonBlocking:00000000 SoftUARTCharGetNonBlocking
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2443   .text.SoftUARTCharGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2448   .text.SoftUARTCharGet:00000000 SoftUARTCharGet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2540   .text.SoftUARTCharPutNonBlocking:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2545   .text.SoftUARTCharPutNonBlocking:00000000 SoftUARTCharPutNonBlocking
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2615   .text.SoftUARTCharPut:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2620   .text.SoftUARTCharPut:00000000 SoftUARTCharPut
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2687   .text.SoftUARTBreakCtl:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2692   .text.SoftUARTBreakCtl:00000000 SoftUARTBreakCtl
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2742   .text.SoftUARTBusy:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2805   .text.SoftUARTIntEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2810   .text.SoftUARTIntEnable:00000000 SoftUARTIntEnable
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2847   .text.SoftUARTIntDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2852   .text.SoftUARTIntDisable:00000000 SoftUARTIntDisable
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2891   .text.SoftUARTIntStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2896   .text.SoftUARTIntStatus:00000000 SoftUARTIntStatus
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2943   .text.SoftUARTIntClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2948   .text.SoftUARTIntClear:00000000 SoftUARTIntClear
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2987   .text.SoftUARTRxErrorGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:2992   .text.SoftUARTRxErrorGet:00000000 SoftUARTRxErrorGet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3023   .text.SoftUARTRxErrorClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3028   .text.SoftUARTRxErrorClear:00000000 SoftUARTRxErrorClear
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3059   .text.SoftUARTCallbackSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3064   .text.SoftUARTCallbackSet:00000000 SoftUARTCallbackSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3096   .text.SoftUARTTxGPIOSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3101   .text.SoftUARTTxGPIOSet:00000000 SoftUARTTxGPIOSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3150   .text.SoftUARTRxGPIOSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3155   .text.SoftUARTRxGPIOSet:00000000 SoftUARTRxGPIOSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3208   .text.SoftUARTTxBufferSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3213   .text.SoftUARTTxBufferSet:00000000 SoftUARTTxBufferSet
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3261   .text.SoftUARTRxBufferSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccHGbpVt.s:3266   .text.SoftUARTRxBufferSet:00000000 SoftUARTRxBufferSet
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
GPIOPinTypeGPIOOutput
GPIOPinTypeGPIOInput
GPIOIntTypeSet
GPIOPinIntClear
GPIOPinIntEnable
GPIOPinRead
GPIOPinIntDisable
