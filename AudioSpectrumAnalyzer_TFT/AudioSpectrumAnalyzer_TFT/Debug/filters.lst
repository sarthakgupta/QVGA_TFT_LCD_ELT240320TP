
filters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006870  00000800  00000800  00000800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000d64  20000000  00007070  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008c0  20000d64  00007dd4  00008d64  2**2
                  ALLOC
  3 .debug_info   000032af  00000000  00000000  00008d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000007f0  00000000  00000000  0000c013  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_loc    00002376  00000000  00000000  0000c803  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000750  00000000  00000000  0000eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_ranges 000006b8  00000000  00000000  0000f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000223b  00000000  00000000  0000f988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 00091ae6  00000000  00000000  00011bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001262  00000000  00000000  000a36a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000030  00000000  00000000  000a490b  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000027  00000000  00000000  000a493b  2**0
                  CONTENTS, READONLY
 13 .debug_frame  000013ec  00000000  00000000  000a4964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000800 <_text>:
     800:	20000ea0 	.word	0x20000ea0
     804:	00003725 	.word	0x00003725
     808:	00003791 	.word	0x00003791
     80c:	00003799 	.word	0x00003799
     810:	000037a1 	.word	0x000037a1
     814:	000037a1 	.word	0x000037a1
     818:	000037a1 	.word	0x000037a1
	...
     82c:	000037a1 	.word	0x000037a1
     830:	000037a1 	.word	0x000037a1
     834:	00000000 	.word	0x00000000
     838:	000037a1 	.word	0x000037a1
     83c:	000037a1 	.word	0x000037a1
     840:	000037a1 	.word	0x000037a1
     844:	000037a1 	.word	0x000037a1
     848:	000037a1 	.word	0x000037a1
     84c:	000037a1 	.word	0x000037a1
     850:	000037a1 	.word	0x000037a1
     854:	000037a1 	.word	0x000037a1
     858:	000037a1 	.word	0x000037a1
     85c:	000037a1 	.word	0x000037a1
     860:	000037a1 	.word	0x000037a1
     864:	000037a1 	.word	0x000037a1
     868:	000037a1 	.word	0x000037a1
     86c:	000037a1 	.word	0x000037a1
     870:	000037a1 	.word	0x000037a1
     874:	000037a1 	.word	0x000037a1
     878:	000037a1 	.word	0x000037a1
     87c:	000037a1 	.word	0x000037a1
     880:	000037a1 	.word	0x000037a1
     884:	000037a1 	.word	0x000037a1
     888:	000037a1 	.word	0x000037a1
     88c:	000037a1 	.word	0x000037a1
     890:	000037a1 	.word	0x000037a1
     894:	000037a1 	.word	0x000037a1
     898:	000037a1 	.word	0x000037a1
     89c:	000037a1 	.word	0x000037a1
     8a0:	000037a1 	.word	0x000037a1
     8a4:	000037a1 	.word	0x000037a1
     8a8:	000037a1 	.word	0x000037a1
     8ac:	000037a1 	.word	0x000037a1
     8b0:	000037a1 	.word	0x000037a1
     8b4:	000037a1 	.word	0x000037a1

000008b8 <isqrt>:
//! \return Returns the square root of the input value.
//
//*****************************************************************************
unsigned long
isqrt(unsigned long ulValue)
{
     8b8:	b480      	push	{r7}
     8ba:	b087      	sub	sp, #28
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
    unsigned long ulRem, ulRoot, ulIdx;

    //
    // Initialize the remainder and root to zero.
    //
    ulRem = 0;
     8c0:	f04f 0300 	mov.w	r3, #0
     8c4:	617b      	str	r3, [r7, #20]
    ulRoot = 0;
     8c6:	f04f 0300 	mov.w	r3, #0
     8ca:	613b      	str	r3, [r7, #16]

    //
    // Loop over the sixteen bits in the root.
    //
    for(ulIdx = 0; ulIdx < 16; ulIdx++)
     8cc:	f04f 0300 	mov.w	r3, #0
     8d0:	60fb      	str	r3, [r7, #12]
     8d2:	e028      	b.n	926 <isqrt+0x6e>
    {
        //
        // Shift the root up by a bit to make room for the new bit that is
        // about to be computed.
        //
        ulRoot <<= 1;
     8d4:	693b      	ldr	r3, [r7, #16]
     8d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     8da:	613b      	str	r3, [r7, #16]

        //
        // Get two more bits from the input into the remainder.
        //
        ulRem = ((ulRem << 2) + (ulValue >> 30));
     8dc:	697b      	ldr	r3, [r7, #20]
     8de:	ea4f 0283 	mov.w	r2, r3, lsl #2
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	ea4f 7393 	mov.w	r3, r3, lsr #30
     8e8:	18d3      	adds	r3, r2, r3
     8ea:	617b      	str	r3, [r7, #20]
        ulValue <<= 2;
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8f2:	607b      	str	r3, [r7, #4]

        //
        // Make the test root be 2n + 1.
        //
        ulRoot++;
     8f4:	693b      	ldr	r3, [r7, #16]
     8f6:	f103 0301 	add.w	r3, r3, #1
     8fa:	613b      	str	r3, [r7, #16]

        //
        // See if the root is greater than the remainder.
        //
        if(ulRoot <= ulRem)
     8fc:	693a      	ldr	r2, [r7, #16]
     8fe:	697b      	ldr	r3, [r7, #20]
     900:	429a      	cmp	r2, r3
     902:	d808      	bhi.n	916 <isqrt+0x5e>
        {
            //
            // Subtract the test root from the remainder.
            //
            ulRem -= ulRoot;
     904:	697a      	ldr	r2, [r7, #20]
     906:	693b      	ldr	r3, [r7, #16]
     908:	1ad3      	subs	r3, r2, r3
     90a:	617b      	str	r3, [r7, #20]

            //
            // Increment the root, setting the second LSB.
            //
            ulRoot++;
     90c:	693b      	ldr	r3, [r7, #16]
     90e:	f103 0301 	add.w	r3, r3, #1
     912:	613b      	str	r3, [r7, #16]
     914:	e003      	b.n	91e <isqrt+0x66>
        {
            //
            // The root is greater than the remainder, so the new bit of the
            // root is actually zero.
            //
            ulRoot--;
     916:	693b      	ldr	r3, [r7, #16]
     918:	f103 33ff 	add.w	r3, r3, #4294967295
     91c:	613b      	str	r3, [r7, #16]
    ulRoot = 0;

    //
    // Loop over the sixteen bits in the root.
    //
    for(ulIdx = 0; ulIdx < 16; ulIdx++)
     91e:	68fb      	ldr	r3, [r7, #12]
     920:	f103 0301 	add.w	r3, r3, #1
     924:	60fb      	str	r3, [r7, #12]
     926:	68fb      	ldr	r3, [r7, #12]
     928:	2b0f      	cmp	r3, #15
     92a:	d9d3      	bls.n	8d4 <isqrt+0x1c>
    }

    //
    // Return the computed root.
    //
    return(ulRoot >> 1);
     92c:	693b      	ldr	r3, [r7, #16]
     92e:	ea4f 0353 	mov.w	r3, r3, lsr #1
}
     932:	4618      	mov	r0, r3
     934:	f107 071c 	add.w	r7, r7, #28
     938:	46bd      	mov	sp, r7
     93a:	bc80      	pop	{r7}
     93c:	4770      	bx	lr
     93e:	bf00      	nop

00000940 <TSLCDPrintStr>:



//To print a user defined string
void TSLCDPrintStr(byte line,byte column,char *str,ts_mode_t mode)
{
     940:	b580      	push	{r7, lr}
     942:	b086      	sub	sp, #24
     944:	af00      	add	r7, sp, #0
     946:	603a      	str	r2, [r7, #0]
     948:	4602      	mov	r2, r0
     94a:	71fa      	strb	r2, [r7, #7]
     94c:	460a      	mov	r2, r1
     94e:	71ba      	strb	r2, [r7, #6]
     950:	717b      	strb	r3, [r7, #5]
	int i = 0;
     952:	f04f 0300 	mov.w	r3, #0
     956:	617b      	str	r3, [r7, #20]
	ts_pos_t posx,posy;
	posx = offsetx + column*FONT_WIDTH;
     958:	79bb      	ldrb	r3, [r7, #6]
     95a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
     95e:	f640 63bc 	movw	r3, #3772	; 0xebc
     962:	f2c2 0300 	movt	r3, #8192	; 0x2000
     966:	681b      	ldr	r3, [r3, #0]
     968:	18d3      	adds	r3, r2, r3
     96a:	613b      	str	r3, [r7, #16]
	posy = offsety + line*FONT_HEIGHT;
     96c:	79fb      	ldrb	r3, [r7, #7]
     96e:	ea4f 1203 	mov.w	r2, r3, lsl #4
     972:	f640 63a0 	movw	r3, #3744	; 0xea0
     976:	f2c2 0300 	movt	r3, #8192	; 0x2000
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	18d3      	adds	r3, r2, r3
     97e:	60fb      	str	r3, [r7, #12]

	while(str[i])
     980:	e011      	b.n	9a6 <TSLCDPrintStr+0x66>
	{
		TSLCDCharDisp(str[i],posx,posy,mode);
     982:	697b      	ldr	r3, [r7, #20]
     984:	683a      	ldr	r2, [r7, #0]
     986:	18d3      	adds	r3, r2, r3
     988:	781a      	ldrb	r2, [r3, #0]
     98a:	797b      	ldrb	r3, [r7, #5]
     98c:	4610      	mov	r0, r2
     98e:	6939      	ldr	r1, [r7, #16]
     990:	68fa      	ldr	r2, [r7, #12]
     992:	f000 f967 	bl	c64 <TSLCDCharDisp>
		posx += FONT_WIDTH;
     996:	693b      	ldr	r3, [r7, #16]
     998:	f103 0308 	add.w	r3, r3, #8
     99c:	613b      	str	r3, [r7, #16]
		i++;
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	f103 0301 	add.w	r3, r3, #1
     9a4:	617b      	str	r3, [r7, #20]
	int i = 0;
	ts_pos_t posx,posy;
	posx = offsetx + column*FONT_WIDTH;
	posy = offsety + line*FONT_HEIGHT;

	while(str[i])
     9a6:	697b      	ldr	r3, [r7, #20]
     9a8:	683a      	ldr	r2, [r7, #0]
     9aa:	18d3      	adds	r3, r2, r3
     9ac:	781b      	ldrb	r3, [r3, #0]
     9ae:	2b00      	cmp	r3, #0
     9b0:	d1e7      	bne.n	982 <TSLCDPrintStr+0x42>
	{
		TSLCDCharDisp(str[i],posx,posy,mode);
		posx += FONT_WIDTH;
		i++;
	}
}
     9b2:	f107 0718 	add.w	r7, r7, #24
     9b6:	46bd      	mov	sp, r7
     9b8:	bd80      	pop	{r7, pc}
     9ba:	bf00      	nop

000009bc <TSLCDFillRect>:
}

void TSLCDFillRect(ts_pos_t sx,ts_pos_t ex,ts_pos_t sy,ts_pos_t ey,word color,ts_mode_t

mode)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b088      	sub	sp, #32
     9c0:	af00      	add	r7, sp, #0
     9c2:	60f8      	str	r0, [r7, #12]
     9c4:	60b9      	str	r1, [r7, #8]
     9c6:	607a      	str	r2, [r7, #4]
     9c8:	603b      	str	r3, [r7, #0]
	word x,y;
	word i,j;
	if (sx < ts_margin_xl)
     9ca:	f640 5364 	movw	r3, #3428	; 0xd64
     9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9d2:	681b      	ldr	r3, [r3, #0]
     9d4:	68fa      	ldr	r2, [r7, #12]
     9d6:	429a      	cmp	r2, r3
     9d8:	da05      	bge.n	9e6 <TSLCDFillRect+0x2a>
		sx = ts_margin_xl;
     9da:	f640 5364 	movw	r3, #3428	; 0xd64
     9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	60fb      	str	r3, [r7, #12]
	if (ex > ts_margin_xr)
     9e6:	f240 0300 	movw	r3, #0
     9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	68ba      	ldr	r2, [r7, #8]
     9f2:	429a      	cmp	r2, r3
     9f4:	dd05      	ble.n	a02 <TSLCDFillRect+0x46>
		ex = ts_margin_xr;
     9f6:	f240 0300 	movw	r3, #0
     9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9fe:	681b      	ldr	r3, [r3, #0]
     a00:	60bb      	str	r3, [r7, #8]
	if (sy < ts_margin_yu)
     a02:	f640 5368 	movw	r3, #3432	; 0xd68
     a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	687a      	ldr	r2, [r7, #4]
     a0e:	429a      	cmp	r2, r3
     a10:	da05      	bge.n	a1e <TSLCDFillRect+0x62>
		sy = ts_margin_yu;
     a12:	f640 5368 	movw	r3, #3432	; 0xd68
     a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	607b      	str	r3, [r7, #4]
	if (ey > ts_margin_yl)			 
     a1e:	f240 0304 	movw	r3, #4
     a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	683a      	ldr	r2, [r7, #0]
     a2a:	429a      	cmp	r2, r3
     a2c:	dd05      	ble.n	a3a <TSLCDFillRect+0x7e>
		ey = ts_margin_yl;
     a2e:	f240 0304 	movw	r3, #4
     a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	603b      	str	r3, [r7, #0]

	TSLCDOutIns(TS_INS_START_ADX);
     a3a:	f04f 0052 	mov.w	r0, #82	; 0x52
     a3e:	f000 fabd 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sx);
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	4618      	mov	r0, r3
     a46:	f000 fa33 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_END_ADX);
     a4a:	f04f 0053 	mov.w	r0, #83	; 0x53
     a4e:	f000 fab5 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(ex);
     a52:	68bb      	ldr	r3, [r7, #8]
     a54:	4618      	mov	r0, r3
     a56:	f000 fa2b 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GRAM_ADX);
     a5a:	f04f 0021 	mov.w	r0, #33	; 0x21
     a5e:	f000 faad 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sx);
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	4618      	mov	r0, r3
     a66:	f000 fa23 	bl	eb0 <TSLCDOutDat>
	x = ex - sx + 1;
     a6a:	68ba      	ldr	r2, [r7, #8]
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	1ad3      	subs	r3, r2, r3
     a70:	f103 0301 	add.w	r3, r3, #1
     a74:	617b      	str	r3, [r7, #20]
	TSLCDOutDat(sy);
	TSLCDOutIns(TS_INS_GRAM_ADY);
	TSLCDOutDat(sy);//fix from bug of v1_00
	y = sy - ey + 1;
#else
	TSLCDOutIns(TS_INS_START_ADY);
     a76:	f04f 0050 	mov.w	r0, #80	; 0x50
     a7a:	f000 fa9f 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sy);
     a7e:	687b      	ldr	r3, [r7, #4]
     a80:	4618      	mov	r0, r3
     a82:	f000 fa15 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_END_ADY);
     a86:	f04f 0051 	mov.w	r0, #81	; 0x51
     a8a:	f000 fa97 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(ey);
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	4618      	mov	r0, r3
     a92:	f000 fa0d 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GRAM_ADY);
     a96:	f04f 0020 	mov.w	r0, #32
     a9a:	f000 fa8f 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sy);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	4618      	mov	r0, r3
     aa2:	f000 fa05 	bl	eb0 <TSLCDOutDat>
	y = ey - sy + 1;
     aa6:	683a      	ldr	r2, [r7, #0]
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	1ad3      	subs	r3, r2, r3
     aac:	f103 0301 	add.w	r3, r3, #1
     ab0:	613b      	str	r3, [r7, #16]
#endif

	TSLCDOutIns(TS_INS_RW_GRAM);
     ab2:	f04f 0022 	mov.w	r0, #34	; 0x22
     ab6:	f000 fa81 	bl	fbc <TSLCDOutIns>

	if ((mode == TS_MODE_NORMAL) || (mode == TS_MODE_FULL))
     aba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     abe:	2b00      	cmp	r3, #0
     ac0:	d003      	beq.n	aca <TSLCDFillRect+0x10e>
     ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     ac6:	2b02      	cmp	r3, #2
     ac8:	d11b      	bne.n	b02 <TSLCDFillRect+0x146>
	{
		for (j=0; j<y; j++)
     aca:	f04f 0300 	mov.w	r3, #0
     ace:	61bb      	str	r3, [r7, #24]
     ad0:	e012      	b.n	af8 <TSLCDFillRect+0x13c>
			for (i=0; i<x; i++)
     ad2:	f04f 0300 	mov.w	r3, #0
     ad6:	61fb      	str	r3, [r7, #28]
     ad8:	e006      	b.n	ae8 <TSLCDFillRect+0x12c>
			{
				TSLCDOutDat(color);
     ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     adc:	f000 f9e8 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_RW_GRAM);

	if ((mode == TS_MODE_NORMAL) || (mode == TS_MODE_FULL))
	{
		for (j=0; j<y; j++)
			for (i=0; i<x; i++)
     ae0:	69fb      	ldr	r3, [r7, #28]
     ae2:	f103 0301 	add.w	r3, r3, #1
     ae6:	61fb      	str	r3, [r7, #28]
     ae8:	69fa      	ldr	r2, [r7, #28]
     aea:	697b      	ldr	r3, [r7, #20]
     aec:	429a      	cmp	r2, r3
     aee:	d3f4      	bcc.n	ada <TSLCDFillRect+0x11e>

	TSLCDOutIns(TS_INS_RW_GRAM);

	if ((mode == TS_MODE_NORMAL) || (mode == TS_MODE_FULL))
	{
		for (j=0; j<y; j++)
     af0:	69bb      	ldr	r3, [r7, #24]
     af2:	f103 0301 	add.w	r3, r3, #1
     af6:	61bb      	str	r3, [r7, #24]
     af8:	69ba      	ldr	r2, [r7, #24]
     afa:	693b      	ldr	r3, [r7, #16]
     afc:	429a      	cmp	r2, r3
     afe:	d3e8      	bcc.n	ad2 <TSLCDFillRect+0x116>
	y = ey - sy + 1;
#endif

	TSLCDOutIns(TS_INS_RW_GRAM);

	if ((mode == TS_MODE_NORMAL) || (mode == TS_MODE_FULL))
     b00:	e027      	b.n	b52 <TSLCDFillRect+0x196>
			{
				TSLCDOutDat(color);
			}
	}
	else
	if (mode == TS_MODE_INVERSE)
     b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     b06:	2b01      	cmp	r3, #1
     b08:	d123      	bne.n	b52 <TSLCDFillRect+0x196>
	{
		for (j=0; j<y; j++)
     b0a:	f04f 0300 	mov.w	r3, #0
     b0e:	61bb      	str	r3, [r7, #24]
     b10:	e01b      	b.n	b4a <TSLCDFillRect+0x18e>
			for (i=0; i<x; i++)
     b12:	f04f 0300 	mov.w	r3, #0
     b16:	61fb      	str	r3, [r7, #28]
     b18:	e00f      	b.n	b3a <TSLCDFillRect+0x17e>
			{
				color = TSLCDInDat(); 		// ignore invalid data
     b1a:	f000 fad5 	bl	10c8 <TSLCDInDat>
     b1e:	62b8      	str	r0, [r7, #40]	; 0x28
				color = TSLCDInDat();
     b20:	f000 fad2 	bl	10c8 <TSLCDInDat>
     b24:	62b8      	str	r0, [r7, #40]	; 0x28
				TSLCDOutDat(~color);
     b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b28:	ea6f 0303 	mvn.w	r3, r3
     b2c:	4618      	mov	r0, r3
     b2e:	f000 f9bf 	bl	eb0 <TSLCDOutDat>
	}
	else
	if (mode == TS_MODE_INVERSE)
	{
		for (j=0; j<y; j++)
			for (i=0; i<x; i++)
     b32:	69fb      	ldr	r3, [r7, #28]
     b34:	f103 0301 	add.w	r3, r3, #1
     b38:	61fb      	str	r3, [r7, #28]
     b3a:	69fa      	ldr	r2, [r7, #28]
     b3c:	697b      	ldr	r3, [r7, #20]
     b3e:	429a      	cmp	r2, r3
     b40:	d3eb      	bcc.n	b1a <TSLCDFillRect+0x15e>
			}
	}
	else
	if (mode == TS_MODE_INVERSE)
	{
		for (j=0; j<y; j++)
     b42:	69bb      	ldr	r3, [r7, #24]
     b44:	f103 0301 	add.w	r3, r3, #1
     b48:	61bb      	str	r3, [r7, #24]
     b4a:	69ba      	ldr	r2, [r7, #24]
     b4c:	693b      	ldr	r3, [r7, #16]
     b4e:	429a      	cmp	r2, r3
     b50:	d3df      	bcc.n	b12 <TSLCDFillRect+0x156>
				color = TSLCDInDat(); 		// ignore invalid data
				color = TSLCDInDat();
				TSLCDOutDat(~color);
			}
	}
}
     b52:	f107 0720 	add.w	r7, r7, #32
     b56:	46bd      	mov	sp, r7
     b58:	bd80      	pop	{r7, pc}
     b5a:	bf00      	nop

00000b5c <TSLCDSetFontColor>:

void TSLCDSetFontColor(word color) //set text's color
{
     b5c:	b480      	push	{r7}
     b5e:	b083      	sub	sp, #12
     b60:	af00      	add	r7, sp, #0
     b62:	6078      	str	r0, [r7, #4]
	font_color = color;
     b64:	f640 63a4 	movw	r3, #3748	; 0xea4
     b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b6c:	687a      	ldr	r2, [r7, #4]
     b6e:	601a      	str	r2, [r3, #0]
}
     b70:	f107 070c 	add.w	r7, r7, #12
     b74:	46bd      	mov	sp, r7
     b76:	bc80      	pop	{r7}
     b78:	4770      	bx	lr
     b7a:	bf00      	nop

00000b7c <buf_read>:
	ts_margin_xr = TS_SIZE_X - 1;
	ts_margin_yu = 0;
	ts_margin_yl = TS_SIZE_Y - 1;
}
byte buf_read(byte column,byte row)
{
     b7c:	b480      	push	{r7}
     b7e:	b085      	sub	sp, #20
     b80:	af00      	add	r7, sp, #0
     b82:	4602      	mov	r2, r0
     b84:	460b      	mov	r3, r1
     b86:	71fa      	strb	r2, [r7, #7]
     b88:	71bb      	strb	r3, [r7, #6]
	byte read_pixel;
	
	if (row < 8)
     b8a:	79bb      	ldrb	r3, [r7, #6]
     b8c:	2b07      	cmp	r3, #7
     b8e:	d811      	bhi.n	bb4 <buf_read+0x38>
	{
		read_pixel = (char_buf[column][0] >> (7-row)) & 0x01;
     b90:	79fa      	ldrb	r2, [r7, #7]
     b92:	f640 63a8 	movw	r3, #3752	; 0xea8
     b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b9a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
     b9e:	461a      	mov	r2, r3
     ba0:	79bb      	ldrb	r3, [r7, #6]
     ba2:	f1c3 0307 	rsb	r3, r3, #7
     ba6:	fa42 f303 	asr.w	r3, r2, r3
     baa:	b2db      	uxtb	r3, r3
     bac:	f003 0301 	and.w	r3, r3, #1
     bb0:	73fb      	strb	r3, [r7, #15]
     bb2:	e016      	b.n	be2 <buf_read+0x66>
	}
	else
	{
		row = row - 8;
     bb4:	79bb      	ldrb	r3, [r7, #6]
     bb6:	f1a3 0308 	sub.w	r3, r3, #8
     bba:	71bb      	strb	r3, [r7, #6]
		read_pixel = (char_buf[column][1] >> (7-row)) & 0x01;
     bbc:	79fb      	ldrb	r3, [r7, #7]
     bbe:	f640 62a8 	movw	r2, #3752	; 0xea8
     bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     bc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bca:	18d3      	adds	r3, r2, r3
     bcc:	785b      	ldrb	r3, [r3, #1]
     bce:	461a      	mov	r2, r3
     bd0:	79bb      	ldrb	r3, [r7, #6]
     bd2:	f1c3 0307 	rsb	r3, r3, #7
     bd6:	fa42 f303 	asr.w	r3, r2, r3
     bda:	b2db      	uxtb	r3, r3
     bdc:	f003 0301 	and.w	r3, r3, #1
     be0:	73fb      	strb	r3, [r7, #15]
	}
	return (read_pixel);
     be2:	7bfb      	ldrb	r3, [r7, #15]
}
     be4:	4618      	mov	r0, r3
     be6:	f107 0714 	add.w	r7, r7, #20
     bea:	46bd      	mov	sp, r7
     bec:	bc80      	pop	{r7}
     bee:	4770      	bx	lr

00000bf0 <buf_store>:

void buf_store(byte charactor)
{
     bf0:	b480      	push	{r7}
     bf2:	b085      	sub	sp, #20
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	71fb      	strb	r3, [r7, #7]
	byte i,j;
	int char_p = charactor*FONT_SIZE;	// FONT_SIZE = 16
     bfa:	79fb      	ldrb	r3, [r7, #7]
     bfc:	ea4f 1303 	mov.w	r3, r3, lsl #4
     c00:	60bb      	str	r3, [r7, #8]

	for (i=0; i<FONT_BIT_WIDTH; i++)
     c02:	f04f 0300 	mov.w	r3, #0
     c06:	73fb      	strb	r3, [r7, #15]
     c08:	e024      	b.n	c54 <buf_store+0x64>
		for (j=0; j<FONT_BYTE_HIGHT; j++)
     c0a:	f04f 0300 	mov.w	r3, #0
     c0e:	73bb      	strb	r3, [r7, #14]
     c10:	e019      	b.n	c46 <buf_store+0x56>
		{
			char_buf[i][j] = font[char_p];
     c12:	7bf8      	ldrb	r0, [r7, #15]
     c14:	7bb9      	ldrb	r1, [r7, #14]
     c16:	f643 23a4 	movw	r3, #15012	; 0x3aa4
     c1a:	f2c0 0300 	movt	r3, #0
     c1e:	68ba      	ldr	r2, [r7, #8]
     c20:	189b      	adds	r3, r3, r2
     c22:	781a      	ldrb	r2, [r3, #0]
     c24:	f640 63a8 	movw	r3, #3752	; 0xea8
     c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c2c:	ea4f 0040 	mov.w	r0, r0, lsl #1
     c30:	1841      	adds	r1, r0, r1
     c32:	185b      	adds	r3, r3, r1
     c34:	701a      	strb	r2, [r3, #0]
			char_p++;
     c36:	68bb      	ldr	r3, [r7, #8]
     c38:	f103 0301 	add.w	r3, r3, #1
     c3c:	60bb      	str	r3, [r7, #8]
{
	byte i,j;
	int char_p = charactor*FONT_SIZE;	// FONT_SIZE = 16

	for (i=0; i<FONT_BIT_WIDTH; i++)
		for (j=0; j<FONT_BYTE_HIGHT; j++)
     c3e:	7bbb      	ldrb	r3, [r7, #14]
     c40:	f103 0301 	add.w	r3, r3, #1
     c44:	73bb      	strb	r3, [r7, #14]
     c46:	7bbb      	ldrb	r3, [r7, #14]
     c48:	2b01      	cmp	r3, #1
     c4a:	d9e2      	bls.n	c12 <buf_store+0x22>
void buf_store(byte charactor)
{
	byte i,j;
	int char_p = charactor*FONT_SIZE;	// FONT_SIZE = 16

	for (i=0; i<FONT_BIT_WIDTH; i++)
     c4c:	7bfb      	ldrb	r3, [r7, #15]
     c4e:	f103 0301 	add.w	r3, r3, #1
     c52:	73fb      	strb	r3, [r7, #15]
     c54:	7bfb      	ldrb	r3, [r7, #15]
     c56:	2b07      	cmp	r3, #7
     c58:	d9d7      	bls.n	c0a <buf_store+0x1a>
		for (j=0; j<FONT_BYTE_HIGHT; j++)
		{
			char_buf[i][j] = font[char_p];
			char_p++;
		}
}
     c5a:	f107 0714 	add.w	r7, r7, #20
     c5e:	46bd      	mov	sp, r7
     c60:	bc80      	pop	{r7}
     c62:	4770      	bx	lr

00000c64 <TSLCDCharDisp>:

void TSLCDCharDisp(char charactor,ts_pos_t sx,ts_pos_t sy,ts_mode_t mode) //low level function to print a character on LCD
{
     c64:	b580      	push	{r7, lr}
     c66:	b08a      	sub	sp, #40	; 0x28
     c68:	af00      	add	r7, sp, #0
     c6a:	60b9      	str	r1, [r7, #8]
     c6c:	607a      	str	r2, [r7, #4]
     c6e:	4602      	mov	r2, r0
     c70:	73fa      	strb	r2, [r7, #15]
     c72:	73bb      	strb	r3, [r7, #14]
	word x,y;
	byte i,j;
	ts_pos_t ex,ey;
	word c;

	ex = sx + FONT_WIDTH - 1;
     c74:	68bb      	ldr	r3, [r7, #8]
     c76:	f103 0307 	add.w	r3, r3, #7
     c7a:	623b      	str	r3, [r7, #32]
	ey = sy + FONT_HEIGHT - 1;
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	f103 030f 	add.w	r3, r3, #15
     c82:	61fb      	str	r3, [r7, #28]

	buf_store(charactor - 0x20);
     c84:	7bfb      	ldrb	r3, [r7, #15]
     c86:	f1a3 0320 	sub.w	r3, r3, #32
     c8a:	b2db      	uxtb	r3, r3
     c8c:	4618      	mov	r0, r3
     c8e:	f7ff ffaf 	bl	bf0 <buf_store>

	TSLCDOutIns(TS_INS_START_ADX);
     c92:	f04f 0052 	mov.w	r0, #82	; 0x52
     c96:	f000 f991 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sx);
     c9a:	68bb      	ldr	r3, [r7, #8]
     c9c:	4618      	mov	r0, r3
     c9e:	f000 f907 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_END_ADX);
     ca2:	f04f 0053 	mov.w	r0, #83	; 0x53
     ca6:	f000 f989 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(ex);
     caa:	6a3b      	ldr	r3, [r7, #32]
     cac:	4618      	mov	r0, r3
     cae:	f000 f8ff 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GRAM_ADX);
     cb2:	f04f 0021 	mov.w	r0, #33	; 0x21
     cb6:	f000 f981 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sx);
     cba:	68bb      	ldr	r3, [r7, #8]
     cbc:	4618      	mov	r0, r3
     cbe:	f000 f8f7 	bl	eb0 <TSLCDOutDat>
	x = ex - sx + 1;
     cc2:	6a3a      	ldr	r2, [r7, #32]
     cc4:	68bb      	ldr	r3, [r7, #8]
     cc6:	1ad3      	subs	r3, r2, r3
     cc8:	f103 0301 	add.w	r3, r3, #1
     ccc:	61bb      	str	r3, [r7, #24]

#ifndef TS_ORN_PORTRAIT
	sy = TS_SIZE_Y - 1 - sy; 	// mirror start y address
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
     cd4:	607b      	str	r3, [r7, #4]
	ey = TS_SIZE_Y - 1 - ey; 	// mirror end y address
     cd6:	69fb      	ldr	r3, [r7, #28]
     cd8:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
     cdc:	61fb      	str	r3, [r7, #28]
	TSLCDOutIns(TS_INS_START_ADY);
     cde:	f04f 0050 	mov.w	r0, #80	; 0x50
     ce2:	f000 f96b 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(ey);
     ce6:	69fb      	ldr	r3, [r7, #28]
     ce8:	4618      	mov	r0, r3
     cea:	f000 f8e1 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_END_ADY);
     cee:	f04f 0051 	mov.w	r0, #81	; 0x51
     cf2:	f000 f963 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sy);
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	4618      	mov	r0, r3
     cfa:	f000 f8d9 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GRAM_ADY);
     cfe:	f04f 0020 	mov.w	r0, #32
     d02:	f000 f95b 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(sy);//fix from bug of v1_00
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	4618      	mov	r0, r3
     d0a:	f000 f8d1 	bl	eb0 <TSLCDOutDat>
	y = sy - ey + 1;
     d0e:	687a      	ldr	r2, [r7, #4]
     d10:	69fb      	ldr	r3, [r7, #28]
     d12:	1ad3      	subs	r3, r2, r3
     d14:	f103 0301 	add.w	r3, r3, #1
     d18:	617b      	str	r3, [r7, #20]
	TSLCDOutIns(TS_INS_GRAM_ADY);
	TSLCDOutDat(sy);
	y = ey - sy + 1;
#endif

	TSLCDOutIns(TS_INS_RW_GRAM);
     d1a:	f04f 0022 	mov.w	r0, #34	; 0x22
     d1e:	f000 f94d 	bl	fbc <TSLCDOutIns>

	if (mode == TS_MODE_NORMAL)
     d22:	7bbb      	ldrb	r3, [r7, #14]
     d24:	2b00      	cmp	r3, #0
     d26:	d141      	bne.n	dac <TSLCDCharDisp+0x148>
	{
		for (j=0; j<y; j++)
     d28:	f04f 0300 	mov.w	r3, #0
     d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     d30:	e036      	b.n	da0 <TSLCDCharDisp+0x13c>
			for (i=0; i<x; i++)
     d32:	f04f 0300 	mov.w	r3, #0
     d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     d3a:	e026      	b.n	d8a <TSLCDCharDisp+0x126>
			{
				delay(100);
     d3c:	f04f 0064 	mov.w	r0, #100	; 0x64
     d40:	f000 fc44 	bl	15cc <delay>
				if (buf_read(i,j))
     d44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     d4c:	4610      	mov	r0, r2
     d4e:	4619      	mov	r1, r3
     d50:	f7ff ff14 	bl	b7c <buf_read>
     d54:	4603      	mov	r3, r0
     d56:	2b00      	cmp	r3, #0
     d58:	d008      	beq.n	d6c <TSLCDCharDisp+0x108>
				{
					TSLCDOutDat(font_color);
     d5a:	f640 63a4 	movw	r3, #3748	; 0xea4
     d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d62:	681b      	ldr	r3, [r3, #0]
     d64:	4618      	mov	r0, r3
     d66:	f000 f8a3 	bl	eb0 <TSLCDOutDat>
     d6a:	e008      	b.n	d7e <TSLCDCharDisp+0x11a>
				}
				else
				{
					c = TSLCDInDat(); 		// ignore invalid data
     d6c:	f000 f9ac 	bl	10c8 <TSLCDInDat>
     d70:	6138      	str	r0, [r7, #16]
					c = TSLCDInDat();
     d72:	f000 f9a9 	bl	10c8 <TSLCDInDat>
     d76:	6138      	str	r0, [r7, #16]
					TSLCDOutDat(c);
     d78:	6938      	ldr	r0, [r7, #16]
     d7a:	f000 f899 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_RW_GRAM);

	if (mode == TS_MODE_NORMAL)
	{
		for (j=0; j<y; j++)
			for (i=0; i<x; i++)
     d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     d82:	f103 0301 	add.w	r3, r3, #1
     d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     d8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     d8e:	69bb      	ldr	r3, [r7, #24]
     d90:	429a      	cmp	r2, r3
     d92:	d3d3      	bcc.n	d3c <TSLCDCharDisp+0xd8>

	TSLCDOutIns(TS_INS_RW_GRAM);

	if (mode == TS_MODE_NORMAL)
	{
		for (j=0; j<y; j++)
     d94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     d98:	f103 0301 	add.w	r3, r3, #1
     d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     da0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
     da4:	697b      	ldr	r3, [r7, #20]
     da6:	429a      	cmp	r2, r3
     da8:	d3c3      	bcc.n	d32 <TSLCDCharDisp+0xce>
     daa:	e07d      	b.n	ea8 <TSLCDCharDisp+0x244>
					TSLCDOutDat(c);
				}
			}
	}
	else
	if (mode == TS_MODE_INVERSE)
     dac:	7bbb      	ldrb	r3, [r7, #14]
     dae:	2b01      	cmp	r3, #1
     db0:	d13b      	bne.n	e2a <TSLCDCharDisp+0x1c6>
	{
		for (j=0; j<y; j++)
     db2:	f04f 0300 	mov.w	r3, #0
     db6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     dba:	e030      	b.n	e1e <TSLCDCharDisp+0x1ba>
			for (i=0; i<x; i++)
     dbc:	f04f 0300 	mov.w	r3, #0
     dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     dc4:	e020      	b.n	e08 <TSLCDCharDisp+0x1a4>
			{
				c = TSLCDInDat(); 			// ignore invalid data
     dc6:	f000 f97f 	bl	10c8 <TSLCDInDat>
     dca:	6138      	str	r0, [r7, #16]
				c = TSLCDInDat();
     dcc:	f000 f97c 	bl	10c8 <TSLCDInDat>
     dd0:	6138      	str	r0, [r7, #16]
				if (buf_read(i,j))
     dd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     dda:	4610      	mov	r0, r2
     ddc:	4619      	mov	r1, r3
     dde:	f7ff fecd 	bl	b7c <buf_read>
     de2:	4603      	mov	r3, r0
     de4:	2b00      	cmp	r3, #0
     de6:	d006      	beq.n	df6 <TSLCDCharDisp+0x192>
				{
					TSLCDOutDat(~c);
     de8:	693b      	ldr	r3, [r7, #16]
     dea:	ea6f 0303 	mvn.w	r3, r3
     dee:	4618      	mov	r0, r3
     df0:	f000 f85e 	bl	eb0 <TSLCDOutDat>
     df4:	e002      	b.n	dfc <TSLCDCharDisp+0x198>
				}
				else
				{
					TSLCDOutDat(c);
     df6:	6938      	ldr	r0, [r7, #16]
     df8:	f000 f85a 	bl	eb0 <TSLCDOutDat>
	}
	else
	if (mode == TS_MODE_INVERSE)
	{
		for (j=0; j<y; j++)
			for (i=0; i<x; i++)
     dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     e00:	f103 0301 	add.w	r3, r3, #1
     e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     e08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     e0c:	69bb      	ldr	r3, [r7, #24]
     e0e:	429a      	cmp	r2, r3
     e10:	d3d9      	bcc.n	dc6 <TSLCDCharDisp+0x162>
			}
	}
	else
	if (mode == TS_MODE_INVERSE)
	{
		for (j=0; j<y; j++)
     e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     e16:	f103 0301 	add.w	r3, r3, #1
     e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     e1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
     e22:	697b      	ldr	r3, [r7, #20]
     e24:	429a      	cmp	r2, r3
     e26:	d3c9      	bcc.n	dbc <TSLCDCharDisp+0x158>
     e28:	e03e      	b.n	ea8 <TSLCDCharDisp+0x244>
					TSLCDOutDat(c);
				}
			}
	}
	else
	if (mode == TS_MODE_FULL)
     e2a:	7bbb      	ldrb	r3, [r7, #14]
     e2c:	2b02      	cmp	r3, #2
     e2e:	d13b      	bne.n	ea8 <TSLCDCharDisp+0x244>
	{
		for (j=0; j<y; j++)
     e30:	f04f 0300 	mov.w	r3, #0
     e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     e38:	e031      	b.n	e9e <TSLCDCharDisp+0x23a>
			for (i=0; i<x; i++)
     e3a:	f04f 0300 	mov.w	r3, #0
     e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     e42:	e021      	b.n	e88 <TSLCDCharDisp+0x224>
			{
				if (buf_read(i,j))
     e44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     e48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     e4c:	4610      	mov	r0, r2
     e4e:	4619      	mov	r1, r3
     e50:	f7ff fe94 	bl	b7c <buf_read>
     e54:	4603      	mov	r3, r0
     e56:	2b00      	cmp	r3, #0
     e58:	d008      	beq.n	e6c <TSLCDCharDisp+0x208>
				{
					TSLCDOutDat(font_color);
     e5a:	f640 63a4 	movw	r3, #3748	; 0xea4
     e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	4618      	mov	r0, r3
     e66:	f000 f823 	bl	eb0 <TSLCDOutDat>
     e6a:	e007      	b.n	e7c <TSLCDCharDisp+0x218>
				}
				else
				{
					TSLCDOutDat(back_color);
     e6c:	f640 63b8 	movw	r3, #3768	; 0xeb8
     e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	4618      	mov	r0, r3
     e78:	f000 f81a 	bl	eb0 <TSLCDOutDat>
	}
	else
	if (mode == TS_MODE_FULL)
	{
		for (j=0; j<y; j++)
			for (i=0; i<x; i++)
     e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
     e80:	f103 0301 	add.w	r3, r3, #1
     e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     e88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
     e8c:	69bb      	ldr	r3, [r7, #24]
     e8e:	429a      	cmp	r2, r3
     e90:	d3d8      	bcc.n	e44 <TSLCDCharDisp+0x1e0>
			}
	}
	else
	if (mode == TS_MODE_FULL)
	{
		for (j=0; j<y; j++)
     e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
     e96:	f103 0301 	add.w	r3, r3, #1
     e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
     e9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
     ea2:	697b      	ldr	r3, [r7, #20]
     ea4:	429a      	cmp	r2, r3
     ea6:	d3c8      	bcc.n	e3a <TSLCDCharDisp+0x1d6>
				{
					TSLCDOutDat(back_color);
				}
			}
	}
}
     ea8:	f107 0728 	add.w	r7, r7, #40	; 0x28
     eac:	46bd      	mov	sp, r7
     eae:	bd80      	pop	{r7, pc}

00000eb0 <TSLCDOutDat>:

void TSLCDOutDat(word dat)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]

	setBitRS;		//Set bit RS for data;
     eb8:	f244 33fc 	movw	r3, #17404	; 0x43fc
     ebc:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ec0:	f244 32fc 	movw	r2, #17404	; 0x43fc
     ec4:	f2c4 0200 	movt	r2, #16384	; 0x4000
     ec8:	6812      	ldr	r2, [r2, #0]
     eca:	f042 0220 	orr.w	r2, r2, #32
     ece:	601a      	str	r2, [r3, #0]
	setBitRD;		//Read Disable
     ed0:	f244 33fc 	movw	r3, #17404	; 0x43fc
     ed4:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ed8:	f244 32fc 	movw	r2, #17404	; 0x43fc
     edc:	f2c4 0200 	movt	r2, #16384	; 0x4000
     ee0:	6812      	ldr	r2, [r2, #0]
     ee2:	f042 0204 	orr.w	r2, r2, #4
     ee6:	601a      	str	r2, [r3, #0]
	clrBitWR;		//Write Enable
     ee8:	f244 33fc 	movw	r3, #17404	; 0x43fc
     eec:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ef0:	f244 32fc 	movw	r2, #17404	; 0x43fc
     ef4:	f2c4 0200 	movt	r2, #16384	; 0x4000
     ef8:	6812      	ldr	r2, [r2, #0]
     efa:	f022 0210 	bic.w	r2, r2, #16
     efe:	601a      	str	r2, [r3, #0]
	
	
	LCD_T_Data = 0xFFFF;	//Set TRIS Data to output
     f00:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
     f04:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f0c:	601a      	str	r2, [r3, #0]

	LCD_W_Data = dat>>8;	//write data high byte
     f0e:	f245 33fc 	movw	r3, #21500	; 0x53fc
     f12:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f16:	687a      	ldr	r2, [r7, #4]
     f18:	ea4f 2212 	mov.w	r2, r2, lsr #8
     f1c:	601a      	str	r2, [r3, #0]
	clrBitCS;
     f1e:	f244 33fc 	movw	r3, #17404	; 0x43fc
     f22:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f26:	f244 32fc 	movw	r2, #17404	; 0x43fc
     f2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
     f2e:	6812      	ldr	r2, [r2, #0]
     f30:	f022 0208 	bic.w	r2, r2, #8
     f34:	601a      	str	r2, [r3, #0]
	setBitCS;
     f36:	f244 33fc 	movw	r3, #17404	; 0x43fc
     f3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f3e:	f244 32fc 	movw	r2, #17404	; 0x43fc
     f42:	f2c4 0200 	movt	r2, #16384	; 0x4000
     f46:	6812      	ldr	r2, [r2, #0]
     f48:	f042 0208 	orr.w	r2, r2, #8
     f4c:	601a      	str	r2, [r3, #0]

	
	LCD_W_Data = dat;		//write data low byte
     f4e:	f245 33fc 	movw	r3, #21500	; 0x53fc
     f52:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	601a      	str	r2, [r3, #0]
	clrBitCS;
     f5a:	f244 33fc 	movw	r3, #17404	; 0x43fc
     f5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f62:	f244 32fc 	movw	r2, #17404	; 0x43fc
     f66:	f2c4 0200 	movt	r2, #16384	; 0x4000
     f6a:	6812      	ldr	r2, [r2, #0]
     f6c:	f022 0208 	bic.w	r2, r2, #8
     f70:	601a      	str	r2, [r3, #0]
	setBitCS;
     f72:	f244 33fc 	movw	r3, #17404	; 0x43fc
     f76:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f7a:	f244 32fc 	movw	r2, #17404	; 0x43fc
     f7e:	f2c4 0200 	movt	r2, #16384	; 0x4000
     f82:	6812      	ldr	r2, [r2, #0]
     f84:	f042 0208 	orr.w	r2, r2, #8
     f88:	601a      	str	r2, [r3, #0]

	setBitWR;
     f8a:	f244 33fc 	movw	r3, #17404	; 0x43fc
     f8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
     f92:	f244 32fc 	movw	r2, #17404	; 0x43fc
     f96:	f2c4 0200 	movt	r2, #16384	; 0x4000
     f9a:	6812      	ldr	r2, [r2, #0]
     f9c:	f042 0210 	orr.w	r2, r2, #16
     fa0:	601a      	str	r2, [r3, #0]

	LCD_T_Data = 0x0000;	//Set TRIS Data to input
     fa2:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
     fa6:	f2c4 0300 	movt	r3, #16384	; 0x4000
     faa:	f04f 0200 	mov.w	r2, #0
     fae:	601a      	str	r2, [r3, #0]
}
     fb0:	f107 070c 	add.w	r7, r7, #12
     fb4:	46bd      	mov	sp, r7
     fb6:	bc80      	pop	{r7}
     fb8:	4770      	bx	lr
     fba:	bf00      	nop

00000fbc <TSLCDOutIns>:

	LCD_T_Data = 0x0000;		//Set TRIS Data to input
}

void TSLCDOutIns(word ins)
{
     fbc:	b480      	push	{r7}
     fbe:	b083      	sub	sp, #12
     fc0:	af00      	add	r7, sp, #0
     fc2:	6078      	str	r0, [r7, #4]
	
	clrBitRS;				//clear bit RS instruction
     fc4:	f244 33fc 	movw	r3, #17404	; 0x43fc
     fc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     fcc:	f244 32fc 	movw	r2, #17404	; 0x43fc
     fd0:	f2c4 0200 	movt	r2, #16384	; 0x4000
     fd4:	6812      	ldr	r2, [r2, #0]
     fd6:	f022 0220 	bic.w	r2, r2, #32
     fda:	601a      	str	r2, [r3, #0]
	setBitRD;				//Read Disable
     fdc:	f244 33fc 	movw	r3, #17404	; 0x43fc
     fe0:	f2c4 0300 	movt	r3, #16384	; 0x4000
     fe4:	f244 32fc 	movw	r2, #17404	; 0x43fc
     fe8:	f2c4 0200 	movt	r2, #16384	; 0x4000
     fec:	6812      	ldr	r2, [r2, #0]
     fee:	f042 0204 	orr.w	r2, r2, #4
     ff2:	601a      	str	r2, [r3, #0]
	clrBitWR;				//write enable
     ff4:	f244 33fc 	movw	r3, #17404	; 0x43fc
     ff8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ffc:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1000:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1004:	6812      	ldr	r2, [r2, #0]
    1006:	f022 0210 	bic.w	r2, r2, #16
    100a:	601a      	str	r2, [r3, #0]

	LCD_T_Data = 0xFFFF;	//TRIS Data output
    100c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
    1010:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1014:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1018:	601a      	str	r2, [r3, #0]
	
	LCD_W_Data = ins >> 8;	//write high byte
    101a:	f245 33fc 	movw	r3, #21500	; 0x53fc
    101e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1022:	687a      	ldr	r2, [r7, #4]
    1024:	ea4f 2212 	mov.w	r2, r2, lsr #8
    1028:	601a      	str	r2, [r3, #0]
	clrBitCS;
    102a:	f244 33fc 	movw	r3, #17404	; 0x43fc
    102e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1032:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1036:	f2c4 0200 	movt	r2, #16384	; 0x4000
    103a:	6812      	ldr	r2, [r2, #0]
    103c:	f022 0208 	bic.w	r2, r2, #8
    1040:	601a      	str	r2, [r3, #0]
	setBitCS;
    1042:	f244 33fc 	movw	r3, #17404	; 0x43fc
    1046:	f2c4 0300 	movt	r3, #16384	; 0x4000
    104a:	f244 32fc 	movw	r2, #17404	; 0x43fc
    104e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1052:	6812      	ldr	r2, [r2, #0]
    1054:	f042 0208 	orr.w	r2, r2, #8
    1058:	601a      	str	r2, [r3, #0]

	LCD_W_Data = ins;		//write low byte
    105a:	f245 33fc 	movw	r3, #21500	; 0x53fc
    105e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1062:	687a      	ldr	r2, [r7, #4]
    1064:	601a      	str	r2, [r3, #0]
	clrBitCS;
    1066:	f244 33fc 	movw	r3, #17404	; 0x43fc
    106a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    106e:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1072:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1076:	6812      	ldr	r2, [r2, #0]
    1078:	f022 0208 	bic.w	r2, r2, #8
    107c:	601a      	str	r2, [r3, #0]
	setBitCS;
    107e:	f244 33fc 	movw	r3, #17404	; 0x43fc
    1082:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1086:	f244 32fc 	movw	r2, #17404	; 0x43fc
    108a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    108e:	6812      	ldr	r2, [r2, #0]
    1090:	f042 0208 	orr.w	r2, r2, #8
    1094:	601a      	str	r2, [r3, #0]

	setBitWR;				//write disble
    1096:	f244 33fc 	movw	r3, #17404	; 0x43fc
    109a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    109e:	f244 32fc 	movw	r2, #17404	; 0x43fc
    10a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    10a6:	6812      	ldr	r2, [r2, #0]
    10a8:	f042 0210 	orr.w	r2, r2, #16
    10ac:	601a      	str	r2, [r3, #0]

	LCD_T_Data = 0x0000;	//Set TRIS Data to input
    10ae:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
    10b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    10b6:	f04f 0200 	mov.w	r2, #0
    10ba:	601a      	str	r2, [r3, #0]
	
}
    10bc:	f107 070c 	add.w	r7, r7, #12
    10c0:	46bd      	mov	sp, r7
    10c2:	bc80      	pop	{r7}
    10c4:	4770      	bx	lr
    10c6:	bf00      	nop

000010c8 <TSLCDInDat>:

word TSLCDInDat()
{
    10c8:	b480      	push	{r7}
    10ca:	b083      	sub	sp, #12
    10cc:	af00      	add	r7, sp, #0
	word dat = 0;
    10ce:	f04f 0300 	mov.w	r3, #0
    10d2:	607b      	str	r3, [r7, #4]
	LCD_T_Data = 0x0000;	//set TRIS Data to input
    10d4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
    10d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    10dc:	f04f 0200 	mov.w	r2, #0
    10e0:	601a      	str	r2, [r3, #0]
	setBitRS;				//set bit RS read data
    10e2:	f244 33fc 	movw	r3, #17404	; 0x43fc
    10e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    10ea:	f244 32fc 	movw	r2, #17404	; 0x43fc
    10ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
    10f2:	6812      	ldr	r2, [r2, #0]
    10f4:	f042 0220 	orr.w	r2, r2, #32
    10f8:	601a      	str	r2, [r3, #0]
	setBitWR;				//write diasble
    10fa:	f244 33fc 	movw	r3, #17404	; 0x43fc
    10fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1102:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1106:	f2c4 0200 	movt	r2, #16384	; 0x4000
    110a:	6812      	ldr	r2, [r2, #0]
    110c:	f042 0210 	orr.w	r2, r2, #16
    1110:	601a      	str	r2, [r3, #0]
	clrBitRD;				//read enable
    1112:	f244 33fc 	movw	r3, #17404	; 0x43fc
    1116:	f2c4 0300 	movt	r3, #16384	; 0x4000
    111a:	f244 32fc 	movw	r2, #17404	; 0x43fc
    111e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1122:	6812      	ldr	r2, [r2, #0]
    1124:	f022 0204 	bic.w	r2, r2, #4
    1128:	601a      	str	r2, [r3, #0]
	
	clrBitCS;clrBitCS;
    112a:	f244 33fc 	movw	r3, #17404	; 0x43fc
    112e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1132:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1136:	f2c4 0200 	movt	r2, #16384	; 0x4000
    113a:	6812      	ldr	r2, [r2, #0]
    113c:	f022 0208 	bic.w	r2, r2, #8
    1140:	601a      	str	r2, [r3, #0]
    1142:	f244 33fc 	movw	r3, #17404	; 0x43fc
    1146:	f2c4 0300 	movt	r3, #16384	; 0x4000
    114a:	f244 32fc 	movw	r2, #17404	; 0x43fc
    114e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1152:	6812      	ldr	r2, [r2, #0]
    1154:	f022 0208 	bic.w	r2, r2, #8
    1158:	601a      	str	r2, [r3, #0]
	dat = LCD_R_Data;		//read high byte
    115a:	f245 33fc 	movw	r3, #21500	; 0x53fc
    115e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	607b      	str	r3, [r7, #4]
	setBitCS;			
    1166:	f244 33fc 	movw	r3, #17404	; 0x43fc
    116a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    116e:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1172:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1176:	6812      	ldr	r2, [r2, #0]
    1178:	f042 0208 	orr.w	r2, r2, #8
    117c:	601a      	str	r2, [r3, #0]

	dat = dat<<8;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1184:	607b      	str	r3, [r7, #4]

	clrBitCS;clrBitCS;
    1186:	f244 33fc 	movw	r3, #17404	; 0x43fc
    118a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    118e:	f244 32fc 	movw	r2, #17404	; 0x43fc
    1192:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1196:	6812      	ldr	r2, [r2, #0]
    1198:	f022 0208 	bic.w	r2, r2, #8
    119c:	601a      	str	r2, [r3, #0]
    119e:	f244 33fc 	movw	r3, #17404	; 0x43fc
    11a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    11a6:	f244 32fc 	movw	r2, #17404	; 0x43fc
    11aa:	f2c4 0200 	movt	r2, #16384	; 0x4000
    11ae:	6812      	ldr	r2, [r2, #0]
    11b0:	f022 0208 	bic.w	r2, r2, #8
    11b4:	601a      	str	r2, [r3, #0]
	dat = dat | LCD_R_Data;	//read low byte
    11b6:	f245 33fc 	movw	r3, #21500	; 0x53fc
    11ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	687a      	ldr	r2, [r7, #4]
    11c2:	4313      	orrs	r3, r2
    11c4:	607b      	str	r3, [r7, #4]
	setBitCS;
    11c6:	f244 33fc 	movw	r3, #17404	; 0x43fc
    11ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
    11ce:	f244 32fc 	movw	r2, #17404	; 0x43fc
    11d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    11d6:	6812      	ldr	r2, [r2, #0]
    11d8:	f042 0208 	orr.w	r2, r2, #8
    11dc:	601a      	str	r2, [r3, #0]

	setBitRD;
    11de:	f244 33fc 	movw	r3, #17404	; 0x43fc
    11e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    11e6:	f244 32fc 	movw	r2, #17404	; 0x43fc
    11ea:	f2c4 0200 	movt	r2, #16384	; 0x4000
    11ee:	6812      	ldr	r2, [r2, #0]
    11f0:	f042 0204 	orr.w	r2, r2, #4
    11f4:	601a      	str	r2, [r3, #0]

	return dat;
    11f6:	687b      	ldr	r3, [r7, #4]
}
    11f8:	4618      	mov	r0, r3
    11fa:	f107 070c 	add.w	r7, r7, #12
    11fe:	46bd      	mov	sp, r7
    1200:	bc80      	pop	{r7}
    1202:	4770      	bx	lr

00001204 <TSLCDRst>:
}
//--------------------------------------------------------------------
//	Reset LCD
//--------------------------------------------------------------------
void TSLCDRst()
{
    1204:	b580      	push	{r7, lr}
    1206:	af00      	add	r7, sp, #0
	clrBitRST;
    1208:	f247 33fc 	movw	r3, #29692	; 0x73fc
    120c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1210:	f247 32fc 	movw	r2, #29692	; 0x73fc
    1214:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1218:	6812      	ldr	r2, [r2, #0]
    121a:	f022 0201 	bic.w	r2, r2, #1
    121e:	601a      	str	r2, [r3, #0]
	delay(5000);
    1220:	f241 3088 	movw	r0, #5000	; 0x1388
    1224:	f000 f9d2 	bl	15cc <delay>
	setBitRST;	
    1228:	f247 33fc 	movw	r3, #29692	; 0x73fc
    122c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1230:	f247 32fc 	movw	r2, #29692	; 0x73fc
    1234:	f2c4 0200 	movt	r2, #16384	; 0x4000
    1238:	6812      	ldr	r2, [r2, #0]
    123a:	f042 0201 	orr.w	r2, r2, #1
    123e:	601a      	str	r2, [r3, #0]
}
    1240:	bd80      	pop	{r7, pc}
    1242:	bf00      	nop

00001244 <TSLCDInit>:
//--------------------------------------------------------------------
//	Initial LCD
//--------------------------------------------------------------------
void TSLCDInit()
{
    1244:	b580      	push	{r7, lr}
    1246:	af00      	add	r7, sp, #0
	delay(1000);
    1248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    124c:	f000 f9be 	bl	15cc <delay>
	TSLCDOutIns(0x00E5);
    1250:	f04f 00e5 	mov.w	r0, #229	; 0xe5
    1254:	f7ff feb2 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x8000); 					//set the internal vcore voltage
    1258:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    125c:	f7ff fe28 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_START_OSC);
    1260:	f04f 0000 	mov.w	r0, #0
    1264:	f7ff feaa 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0001); 					//start oscillator 	
    1268:	f04f 0001 	mov.w	r0, #1
    126c:	f7ff fe20 	bl	eb0 <TSLCDOutDat>
	delay(5000);
    1270:	f241 3088 	movw	r0, #5000	; 0x1388
    1274:	f000 f9aa 	bl	15cc <delay>

	TSLCDOutIns(TS_INS_DRIV_OUT_CTRL);
    1278:	f04f 0001 	mov.w	r0, #1
    127c:	f7ff fe9e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					//set SS, SM
    1280:	f04f 0000 	mov.w	r0, #0
    1284:	f7ff fe14 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_DRIV_WAV_CTRL);
    1288:	f04f 0002 	mov.w	r0, #2
    128c:	f7ff fe96 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0700); 					//set 1 line inversion
    1290:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    1294:	f7ff fe0c 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_ENTRY_MOD);
    1298:	f04f 0003 	mov.w	r0, #3
    129c:	f7ff fe8e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(TS_VAL_ENTRY_MOD);			//set GRAM write direction, BGR=0
    12a0:	f04f 0028 	mov.w	r0, #40	; 0x28
    12a4:	f7ff fe04 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_RESIZE_CTRL);
    12a8:	f04f 0004 	mov.w	r0, #4
    12ac:	f7ff fe86 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					//no resizing
    12b0:	f04f 0000 	mov.w	r0, #0
    12b4:	f7ff fdfc 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_DISP_CTRL2);
    12b8:	f04f 0008 	mov.w	r0, #8
    12bc:	f7ff fe7e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0202); 					//front & back porch periods = 2
    12c0:	f240 2002 	movw	r0, #514	; 0x202
    12c4:	f7ff fdf4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_DISP_CTRL3);
    12c8:	f04f 0009 	mov.w	r0, #9
    12cc:	f7ff fe76 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					
    12d0:	f04f 0000 	mov.w	r0, #0
    12d4:	f7ff fdec 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_DISP_CTRL4);
    12d8:	f04f 000a 	mov.w	r0, #10
    12dc:	f7ff fe6e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					
    12e0:	f04f 0000 	mov.w	r0, #0
    12e4:	f7ff fde4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_RGB_DISP_IF_CTRL1);
    12e8:	f04f 000c 	mov.w	r0, #12
    12ec:	f7ff fe66 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					//select system interface
    12f0:	f04f 0000 	mov.w	r0, #0
    12f4:	f7ff fddc 	bl	eb0 <TSLCDOutDat>


	TSLCDOutIns(TS_INS_FRM_MARKER_POS);
    12f8:	f04f 000d 	mov.w	r0, #13
    12fc:	f7ff fe5e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					
    1300:	f04f 0000 	mov.w	r0, #0
    1304:	f7ff fdd4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_RGB_DISP_IF_CTRL2);
    1308:	f04f 000f 	mov.w	r0, #15
    130c:	f7ff fe56 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);					
    1310:	f04f 0000 	mov.w	r0, #0
    1314:	f7ff fdcc 	bl	eb0 <TSLCDOutDat>
	
	TSLCDOutIns(TS_INS_POW_CTRL1);
    1318:	f04f 0010 	mov.w	r0, #16
    131c:	f7ff fe4e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1320:	f04f 0000 	mov.w	r0, #0
    1324:	f7ff fdc4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_POW_CTRL2);
    1328:	f04f 0011 	mov.w	r0, #17
    132c:	f7ff fe46 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					
    1330:	f04f 0000 	mov.w	r0, #0
    1334:	f7ff fdbc 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_POW_CTRL3);
    1338:	f04f 0012 	mov.w	r0, #18
    133c:	f7ff fe3e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1340:	f04f 0000 	mov.w	r0, #0
    1344:	f7ff fdb4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_POW_CTRL4);
    1348:	f04f 0013 	mov.w	r0, #19
    134c:	f7ff fe36 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000); 					
    1350:	f04f 0000 	mov.w	r0, #0
    1354:	f7ff fdac 	bl	eb0 <TSLCDOutDat>
	delay(20000);
    1358:	f644 6020 	movw	r0, #20000	; 0x4e20
    135c:	f000 f936 	bl	15cc <delay>

	TSLCDOutIns(TS_INS_POW_CTRL1);
    1360:	f04f 0010 	mov.w	r0, #16
    1364:	f7ff fe2a 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x17B0);
    1368:	f241 70b0 	movw	r0, #6064	; 0x17b0
    136c:	f7ff fda0 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_POW_CTRL2);
    1370:	f04f 0011 	mov.w	r0, #17
    1374:	f7ff fe22 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0137); 					
    1378:	f240 1037 	movw	r0, #311	; 0x137
    137c:	f7ff fd98 	bl	eb0 <TSLCDOutDat>
	delay(5000);
    1380:	f241 3088 	movw	r0, #5000	; 0x1388
    1384:	f000 f922 	bl	15cc <delay>

	TSLCDOutIns(TS_INS_POW_CTRL3);
    1388:	f04f 0012 	mov.w	r0, #18
    138c:	f7ff fe16 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x013C);
    1390:	f44f 709e 	mov.w	r0, #316	; 0x13c
    1394:	f7ff fd8c 	bl	eb0 <TSLCDOutDat>
	delay(5000);
    1398:	f241 3088 	movw	r0, #5000	; 0x1388
    139c:	f000 f916 	bl	15cc <delay>

	TSLCDOutIns(TS_INS_POW_CTRL4);
    13a0:	f04f 0013 	mov.w	r0, #19
    13a4:	f7ff fe0a 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x1400);
    13a8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
    13ac:	f7ff fd80 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_POW_CTRL7);
    13b0:	f04f 0029 	mov.w	r0, #41	; 0x29
    13b4:	f7ff fe02 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0007);
    13b8:	f04f 0007 	mov.w	r0, #7
    13bc:	f7ff fd78 	bl	eb0 <TSLCDOutDat>
	delay(50000);
    13c0:	f24c 3050 	movw	r0, #50000	; 0xc350
    13c4:	f000 f902 	bl	15cc <delay>

	TSLCDOutIns(TS_INS_GRAM_HOR_AD);
    13c8:	f04f 0020 	mov.w	r0, #32
    13cc:	f7ff fdf6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    13d0:	f04f 0000 	mov.w	r0, #0
    13d4:	f7ff fd6c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GRAM_VER_AD);
    13d8:	f04f 0021 	mov.w	r0, #33	; 0x21
    13dc:	f7ff fdee 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    13e0:	f04f 0000 	mov.w	r0, #0
    13e4:	f7ff fd64 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_GAMMA_CTRL1);
    13e8:	f04f 0030 	mov.w	r0, #48	; 0x30
    13ec:	f7ff fde6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0007);
    13f0:	f04f 0007 	mov.w	r0, #7
    13f4:	f7ff fd5c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL2);
    13f8:	f04f 0031 	mov.w	r0, #49	; 0x31
    13fc:	f7ff fdde 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0504);
    1400:	f240 5004 	movw	r0, #1284	; 0x504
    1404:	f7ff fd54 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL3);
    1408:	f04f 0032 	mov.w	r0, #50	; 0x32
    140c:	f7ff fdd6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0703);
    1410:	f240 7003 	movw	r0, #1795	; 0x703
    1414:	f7ff fd4c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL4);
    1418:	f04f 0035 	mov.w	r0, #53	; 0x35
    141c:	f7ff fdce 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0002);
    1420:	f04f 0002 	mov.w	r0, #2
    1424:	f7ff fd44 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL5);
    1428:	f04f 0036 	mov.w	r0, #54	; 0x36
    142c:	f7ff fdc6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0707);
    1430:	f240 7007 	movw	r0, #1799	; 0x707
    1434:	f7ff fd3c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL6);
    1438:	f04f 0037 	mov.w	r0, #55	; 0x37
    143c:	f7ff fdbe 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0406);
    1440:	f240 4006 	movw	r0, #1030	; 0x406
    1444:	f7ff fd34 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL7);
    1448:	f04f 0038 	mov.w	r0, #56	; 0x38
    144c:	f7ff fdb6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0006);
    1450:	f04f 0006 	mov.w	r0, #6
    1454:	f7ff fd2c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL8);
    1458:	f04f 0039 	mov.w	r0, #57	; 0x39
    145c:	f7ff fdae 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0404);
    1460:	f240 4004 	movw	r0, #1028	; 0x404
    1464:	f7ff fd24 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL9);
    1468:	f04f 003c 	mov.w	r0, #60	; 0x3c
    146c:	f7ff fda6 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0700);
    1470:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    1474:	f7ff fd1c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GAMMA_CTRL10);
    1478:	f04f 003d 	mov.w	r0, #61	; 0x3d
    147c:	f7ff fd9e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0A08);
    1480:	f640 2008 	movw	r0, #2568	; 0xa08
    1484:	f7ff fd14 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_HOR_START_AD);
    1488:	f04f 0050 	mov.w	r0, #80	; 0x50
    148c:	f7ff fd96 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1490:	f04f 0000 	mov.w	r0, #0
    1494:	f7ff fd0c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_HOR_END_AD);
    1498:	f04f 0051 	mov.w	r0, #81	; 0x51
    149c:	f7ff fd8e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x00EF);
    14a0:	f04f 00ef 	mov.w	r0, #239	; 0xef
    14a4:	f7ff fd04 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_VER_START_AD);
    14a8:	f04f 0052 	mov.w	r0, #82	; 0x52
    14ac:	f7ff fd86 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    14b0:	f04f 0000 	mov.w	r0, #0
    14b4:	f7ff fcfc 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_VER_END_AD);
    14b8:	f04f 0053 	mov.w	r0, #83	; 0x53
    14bc:	f7ff fd7e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x013F);
    14c0:	f240 103f 	movw	r0, #319	; 0x13f
    14c4:	f7ff fcf4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GATE_SCAN_CTRL1);
    14c8:	f04f 0060 	mov.w	r0, #96	; 0x60
    14cc:	f7ff fd76 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x2700);
    14d0:	f44f 501c 	mov.w	r0, #9984	; 0x2700
    14d4:	f7ff fcec 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GATE_SCAN_CTRL2);
    14d8:	f04f 0061 	mov.w	r0, #97	; 0x61
    14dc:	f7ff fd6e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0001);
    14e0:	f04f 0001 	mov.w	r0, #1
    14e4:	f7ff fce4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_GATE_SCAN_CTRL3);
    14e8:	f04f 006a 	mov.w	r0, #106	; 0x6a
    14ec:	f7ff fd66 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    14f0:	f04f 0000 	mov.w	r0, #0
    14f4:	f7ff fcdc 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_PART_IMG1_DISP_POS);
    14f8:	f04f 0080 	mov.w	r0, #128	; 0x80
    14fc:	f7ff fd5e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1500:	f04f 0000 	mov.w	r0, #0
    1504:	f7ff fcd4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PART_IMG1_START_AD);
    1508:	f04f 0081 	mov.w	r0, #129	; 0x81
    150c:	f7ff fd56 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1510:	f04f 0000 	mov.w	r0, #0
    1514:	f7ff fccc 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PART_IMG1_END_AD);
    1518:	f04f 0082 	mov.w	r0, #130	; 0x82
    151c:	f7ff fd4e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1520:	f04f 0000 	mov.w	r0, #0
    1524:	f7ff fcc4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PART_IMG2_DISP_POS);
    1528:	f04f 0083 	mov.w	r0, #131	; 0x83
    152c:	f7ff fd46 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1530:	f04f 0000 	mov.w	r0, #0
    1534:	f7ff fcbc 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PART_IMG2_START_AD);
    1538:	f04f 0084 	mov.w	r0, #132	; 0x84
    153c:	f7ff fd3e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1540:	f04f 0000 	mov.w	r0, #0
    1544:	f7ff fcb4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PART_IMG2_END_AD);
    1548:	f04f 0085 	mov.w	r0, #133	; 0x85
    154c:	f7ff fd36 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1550:	f04f 0000 	mov.w	r0, #0
    1554:	f7ff fcac 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_PANEL_IF_CTRL1);
    1558:	f04f 0090 	mov.w	r0, #144	; 0x90
    155c:	f7ff fd2e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0010);
    1560:	f04f 0010 	mov.w	r0, #16
    1564:	f7ff fca4 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PANEL_IF_CTRL2);
    1568:	f04f 0092 	mov.w	r0, #146	; 0x92
    156c:	f7ff fd26 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    1570:	f04f 0000 	mov.w	r0, #0
    1574:	f7ff fc9c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PANEL_IF_CTRL3);
    1578:	f04f 0093 	mov.w	r0, #147	; 0x93
    157c:	f7ff fd1e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0003);
    1580:	f04f 0003 	mov.w	r0, #3
    1584:	f7ff fc94 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PANEL_IF_CTRL4);
    1588:	f04f 0095 	mov.w	r0, #149	; 0x95
    158c:	f7ff fd16 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0110);
    1590:	f44f 7088 	mov.w	r0, #272	; 0x110
    1594:	f7ff fc8c 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PANEL_IF_CTRL5);
    1598:	f04f 0097 	mov.w	r0, #151	; 0x97
    159c:	f7ff fd0e 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    15a0:	f04f 0000 	mov.w	r0, #0
    15a4:	f7ff fc84 	bl	eb0 <TSLCDOutDat>
	TSLCDOutIns(TS_INS_PANEL_IF_CTRL6);
    15a8:	f04f 0098 	mov.w	r0, #152	; 0x98
    15ac:	f7ff fd06 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0000);
    15b0:	f04f 0000 	mov.w	r0, #0
    15b4:	f7ff fc7c 	bl	eb0 <TSLCDOutDat>

	TSLCDOutIns(TS_INS_DISP_CTRL1);
    15b8:	f04f 0007 	mov.w	r0, #7
    15bc:	f7ff fcfe 	bl	fbc <TSLCDOutIns>
	TSLCDOutDat(0x0173);
    15c0:	f240 1073 	movw	r0, #371	; 0x173
    15c4:	f7ff fc74 	bl	eb0 <TSLCDOutDat>
}
    15c8:	bd80      	pop	{r7, pc}
    15ca:	bf00      	nop

000015cc <delay>:

//---------------------------------------------------
//	Function Delay
//---------------------------------------------------
void delay(unsigned long int count1)
{
    15cc:	b480      	push	{r7}
    15ce:	b083      	sub	sp, #12
    15d0:	af00      	add	r7, sp, #0
    15d2:	6078      	str	r0, [r7, #4]
  while(count1 > 0) {count1--;}					// Loop Decrease Counter	
    15d4:	e003      	b.n	15de <delay+0x12>
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	f103 33ff 	add.w	r3, r3, #4294967295
    15dc:	607b      	str	r3, [r7, #4]
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d1f8      	bne.n	15d6 <delay+0xa>
}
    15e4:	f107 070c 	add.w	r7, r7, #12
    15e8:	46bd      	mov	sp, r7
    15ea:	bc80      	pop	{r7}
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop

000015f0 <ADCIntStatus>:
//
//*****************************************************************************
unsigned long
ADCIntStatus(unsigned long ulBase, unsigned long ulSequenceNum,
             tBoolean bMasked)
{
    15f0:	b480      	push	{r7}
    15f2:	b087      	sub	sp, #28
    15f4:	af00      	add	r7, sp, #0
    15f6:	60f8      	str	r0, [r7, #12]
    15f8:	60b9      	str	r1, [r7, #8]
    15fa:	4613      	mov	r3, r2
    15fc:	71fb      	strb	r3, [r7, #7]

    //
    // Return either the interrupt status or the raw interrupt status as
    // requested.
    //
    if(bMasked)
    15fe:	79fb      	ldrb	r3, [r7, #7]
    1600:	2b00      	cmp	r3, #0
    1602:	d00b      	beq.n	161c <ADCIntStatus+0x2c>
    {
        ulTemp = HWREG(ulBase + ADC_O_ISC) & (0x10001 << ulSequenceNum);
    1604:	68fb      	ldr	r3, [r7, #12]
    1606:	f103 030c 	add.w	r3, r3, #12
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	68bb      	ldr	r3, [r7, #8]
    160e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    1612:	fa01 f303 	lsl.w	r3, r1, r3
    1616:	4013      	ands	r3, r2
    1618:	617b      	str	r3, [r7, #20]
    161a:	e01f      	b.n	165c <ADCIntStatus+0x6c>
    }
    else
    {
        ulTemp = HWREG(ulBase + ADC_O_RIS) & (0x10000 | (1 << ulSequenceNum));
    161c:	68fb      	ldr	r3, [r7, #12]
    161e:	f103 0304 	add.w	r3, r3, #4
    1622:	681a      	ldr	r2, [r3, #0]
    1624:	68bb      	ldr	r3, [r7, #8]
    1626:	f04f 0101 	mov.w	r1, #1
    162a:	fa01 f303 	lsl.w	r3, r1, r3
    162e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1632:	4013      	ands	r3, r2
    1634:	617b      	str	r3, [r7, #20]

        //
        // If the digital comparator status bit is set, reflect it to the
        // appropriate sequence bit.
        //
        if(ulTemp & 0x10000)
    1636:	697b      	ldr	r3, [r7, #20]
    1638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    163c:	2b00      	cmp	r3, #0
    163e:	d00d      	beq.n	165c <ADCIntStatus+0x6c>
        {
            ulTemp |= 0xF0000;
    1640:	697b      	ldr	r3, [r7, #20]
    1642:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    1646:	617b      	str	r3, [r7, #20]
            ulTemp &= ~(0x10000 << ulSequenceNum);
    1648:	68bb      	ldr	r3, [r7, #8]
    164a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    164e:	fa02 f303 	lsl.w	r3, r2, r3
    1652:	ea6f 0303 	mvn.w	r3, r3
    1656:	697a      	ldr	r2, [r7, #20]
    1658:	4013      	ands	r3, r2
    165a:	617b      	str	r3, [r7, #20]
    }

    //
    // Return the interrupt status
    //
    return(ulTemp);
    165c:	697b      	ldr	r3, [r7, #20]
}
    165e:	4618      	mov	r0, r3
    1660:	f107 071c 	add.w	r7, r7, #28
    1664:	46bd      	mov	sp, r7
    1666:	bc80      	pop	{r7}
    1668:	4770      	bx	lr
    166a:	bf00      	nop

0000166c <ADCIntClear>:
//! \return None.
//
//*****************************************************************************
void
ADCIntClear(unsigned long ulBase, unsigned long ulSequenceNum)
{
    166c:	b480      	push	{r7}
    166e:	b083      	sub	sp, #12
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]
    ASSERT(ulSequenceNum < 4);

    //
    // Clear the interrupt.
    //
    HWREG(ulBase + ADC_O_ISC) = 1 << ulSequenceNum;
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	f103 030c 	add.w	r3, r3, #12
    167c:	683a      	ldr	r2, [r7, #0]
    167e:	f04f 0101 	mov.w	r1, #1
    1682:	fa01 f202 	lsl.w	r2, r1, r2
    1686:	601a      	str	r2, [r3, #0]
}
    1688:	f107 070c 	add.w	r7, r7, #12
    168c:	46bd      	mov	sp, r7
    168e:	bc80      	pop	{r7}
    1690:	4770      	bx	lr
    1692:	bf00      	nop

00001694 <ADCSequenceEnable>:
//! \return None.
//
//*****************************************************************************
void
ADCSequenceEnable(unsigned long ulBase, unsigned long ulSequenceNum)
{
    1694:	b480      	push	{r7}
    1696:	b083      	sub	sp, #12
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
    169c:	6039      	str	r1, [r7, #0]
    ASSERT(ulSequenceNum < 4);

    //
    // Enable the specified sequence.
    //
    HWREG(ulBase + ADC_O_ACTSS) |= 1 << ulSequenceNum;
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	687a      	ldr	r2, [r7, #4]
    16a2:	6811      	ldr	r1, [r2, #0]
    16a4:	683a      	ldr	r2, [r7, #0]
    16a6:	f04f 0001 	mov.w	r0, #1
    16aa:	fa00 f202 	lsl.w	r2, r0, r2
    16ae:	430a      	orrs	r2, r1
    16b0:	601a      	str	r2, [r3, #0]
}
    16b2:	f107 070c 	add.w	r7, r7, #12
    16b6:	46bd      	mov	sp, r7
    16b8:	bc80      	pop	{r7}
    16ba:	4770      	bx	lr

000016bc <ADCSequenceConfigure>:
//
//*****************************************************************************
void
ADCSequenceConfigure(unsigned long ulBase, unsigned long ulSequenceNum,
                     unsigned long ulTrigger, unsigned long ulPriority)
{
    16bc:	b480      	push	{r7}
    16be:	b085      	sub	sp, #20
    16c0:	af00      	add	r7, sp, #0
    16c2:	60f8      	str	r0, [r7, #12]
    16c4:	60b9      	str	r1, [r7, #8]
    16c6:	607a      	str	r2, [r7, #4]
    16c8:	603b      	str	r3, [r7, #0]
    ASSERT(ulPriority < 4);

    //
    // Compute the shift for the bits that control this sample sequence.
    //
    ulSequenceNum *= 4;
    16ca:	68bb      	ldr	r3, [r7, #8]
    16cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    16d0:	60bb      	str	r3, [r7, #8]

    //
    // Set the trigger event for this sample sequence.
    //
    HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
    16d2:	68fb      	ldr	r3, [r7, #12]
    16d4:	f103 0314 	add.w	r3, r3, #20
    16d8:	68fa      	ldr	r2, [r7, #12]
    16da:	f102 0214 	add.w	r2, r2, #20
    16de:	6811      	ldr	r1, [r2, #0]
                                   ~(0xf << ulSequenceNum)) |
    16e0:	68ba      	ldr	r2, [r7, #8]
    16e2:	f04f 000f 	mov.w	r0, #15
    16e6:	fa00 f202 	lsl.w	r2, r0, r2
    16ea:	ea6f 0202 	mvn.w	r2, r2
    ulSequenceNum *= 4;

    //
    // Set the trigger event for this sample sequence.
    //
    HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
    16ee:	4011      	ands	r1, r2
                                   ~(0xf << ulSequenceNum)) |
                                  ((ulTrigger & 0xf) << ulSequenceNum));
    16f0:	687a      	ldr	r2, [r7, #4]
    16f2:	f002 000f 	and.w	r0, r2, #15
    16f6:	68ba      	ldr	r2, [r7, #8]
    16f8:	fa00 f202 	lsl.w	r2, r0, r2

    //
    // Set the trigger event for this sample sequence.
    //
    HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
                                   ~(0xf << ulSequenceNum)) |
    16fc:	430a      	orrs	r2, r1
    ulSequenceNum *= 4;

    //
    // Set the trigger event for this sample sequence.
    //
    HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
    16fe:	601a      	str	r2, [r3, #0]
                                  ((ulTrigger & 0xf) << ulSequenceNum));

    //
    // Set the priority for this sample sequence.
    //
    HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
    1700:	68fb      	ldr	r3, [r7, #12]
    1702:	f103 0320 	add.w	r3, r3, #32
    1706:	68fa      	ldr	r2, [r7, #12]
    1708:	f102 0220 	add.w	r2, r2, #32
    170c:	6811      	ldr	r1, [r2, #0]
                                    ~(0xf << ulSequenceNum)) |
    170e:	68ba      	ldr	r2, [r7, #8]
    1710:	f04f 000f 	mov.w	r0, #15
    1714:	fa00 f202 	lsl.w	r2, r0, r2
    1718:	ea6f 0202 	mvn.w	r2, r2
                                  ((ulTrigger & 0xf) << ulSequenceNum));

    //
    // Set the priority for this sample sequence.
    //
    HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
    171c:	4011      	ands	r1, r2
                                    ~(0xf << ulSequenceNum)) |
                                   ((ulPriority & 0x3) << ulSequenceNum));
    171e:	683a      	ldr	r2, [r7, #0]
    1720:	f002 0003 	and.w	r0, r2, #3
    1724:	68ba      	ldr	r2, [r7, #8]
    1726:	fa00 f202 	lsl.w	r2, r0, r2

    //
    // Set the priority for this sample sequence.
    //
    HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
                                    ~(0xf << ulSequenceNum)) |
    172a:	430a      	orrs	r2, r1
                                  ((ulTrigger & 0xf) << ulSequenceNum));

    //
    // Set the priority for this sample sequence.
    //
    HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
    172c:	601a      	str	r2, [r3, #0]
                                    ~(0xf << ulSequenceNum)) |
                                   ((ulPriority & 0x3) << ulSequenceNum));
}
    172e:	f107 0714 	add.w	r7, r7, #20
    1732:	46bd      	mov	sp, r7
    1734:	bc80      	pop	{r7}
    1736:	4770      	bx	lr

00001738 <ADCSequenceStepConfigure>:
//
//*****************************************************************************
void
ADCSequenceStepConfigure(unsigned long ulBase, unsigned long ulSequenceNum,
                         unsigned long ulStep, unsigned long ulConfig)
{
    1738:	b480      	push	{r7}
    173a:	b087      	sub	sp, #28
    173c:	af00      	add	r7, sp, #0
    173e:	60f8      	str	r0, [r7, #12]
    1740:	60b9      	str	r1, [r7, #8]
    1742:	607a      	str	r2, [r7, #4]
    1744:	603b      	str	r3, [r7, #0]
           ((ulSequenceNum == 3) && (ulStep < 1)));

    //
    // Get the offset of the sequence to be configured.
    //
    ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
    1746:	68bb      	ldr	r3, [r7, #8]
    1748:	f103 0302 	add.w	r3, r3, #2
    174c:	ea4f 1343 	mov.w	r3, r3, lsl #5
    1750:	68fa      	ldr	r2, [r7, #12]
    1752:	18d3      	adds	r3, r2, r3
    1754:	60fb      	str	r3, [r7, #12]

    //
    // Compute the shift for the bits that control this step.
    //
    ulStep *= 4;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	ea4f 0383 	mov.w	r3, r3, lsl #2
    175c:	607b      	str	r3, [r7, #4]

    //
    // Set the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
    175e:	68fb      	ldr	r3, [r7, #12]
    1760:	68fa      	ldr	r2, [r7, #12]
    1762:	6811      	ldr	r1, [r2, #0]
                                  ~(0x0000000f << ulStep)) |
    1764:	687a      	ldr	r2, [r7, #4]
    1766:	f04f 000f 	mov.w	r0, #15
    176a:	fa00 f202 	lsl.w	r2, r0, r2
    176e:	ea6f 0202 	mvn.w	r2, r2
    ulStep *= 4;

    //
    // Set the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
    1772:	4011      	ands	r1, r2
                                  ~(0x0000000f << ulStep)) |
                                 ((ulConfig & 0x0f) << ulStep));
    1774:	683a      	ldr	r2, [r7, #0]
    1776:	f002 000f 	and.w	r0, r2, #15
    177a:	687a      	ldr	r2, [r7, #4]
    177c:	fa00 f202 	lsl.w	r2, r0, r2

    //
    // Set the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
                                  ~(0x0000000f << ulStep)) |
    1780:	430a      	orrs	r2, r1
    ulStep *= 4;

    //
    // Set the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
    1782:	601a      	str	r2, [r3, #0]
                                 ((ulConfig & 0x0f) << ulStep));

    //
    // Set the upper bits of the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	f103 0318 	add.w	r3, r3, #24
    178a:	68fa      	ldr	r2, [r7, #12]
    178c:	f102 0218 	add.w	r2, r2, #24
    1790:	6811      	ldr	r1, [r2, #0]
                                  ~(0x0000000f << ulStep)) |
    1792:	687a      	ldr	r2, [r7, #4]
    1794:	f04f 000f 	mov.w	r0, #15
    1798:	fa00 f202 	lsl.w	r2, r0, r2
    179c:	ea6f 0202 	mvn.w	r2, r2
                                 ((ulConfig & 0x0f) << ulStep));

    //
    // Set the upper bits of the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
    17a0:	4011      	ands	r1, r2
                                  ~(0x0000000f << ulStep)) |
                                  (((ulConfig & 0xf00) >> 8) << ulStep));
    17a2:	683a      	ldr	r2, [r7, #0]
    17a4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    17a8:	ea4f 2012 	mov.w	r0, r2, lsr #8
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	fa00 f202 	lsl.w	r2, r0, r2

    //
    // Set the upper bits of the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
                                  ~(0x0000000f << ulStep)) |
    17b2:	430a      	orrs	r2, r1
                                 ((ulConfig & 0x0f) << ulStep));

    //
    // Set the upper bits of the analog mux value for this step.
    //
    HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
    17b4:	601a      	str	r2, [r3, #0]
                                  (((ulConfig & 0xf00) >> 8) << ulStep));

    //
    // Set the control value for this step.
    //
    HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	f103 0304 	add.w	r3, r3, #4
    17bc:	68fa      	ldr	r2, [r7, #12]
    17be:	f102 0204 	add.w	r2, r2, #4
    17c2:	6811      	ldr	r1, [r2, #0]
                                  ~(0x0000000f << ulStep)) |
    17c4:	687a      	ldr	r2, [r7, #4]
    17c6:	f04f 000f 	mov.w	r0, #15
    17ca:	fa00 f202 	lsl.w	r2, r0, r2
    17ce:	ea6f 0202 	mvn.w	r2, r2
                                  (((ulConfig & 0xf00) >> 8) << ulStep));

    //
    // Set the control value for this step.
    //
    HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
    17d2:	4011      	ands	r1, r2
                                  ~(0x0000000f << ulStep)) |
                                 (((ulConfig & 0xf0) >> 4) << ulStep));
    17d4:	683a      	ldr	r2, [r7, #0]
    17d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    17da:	ea4f 1012 	mov.w	r0, r2, lsr #4
    17de:	687a      	ldr	r2, [r7, #4]
    17e0:	fa00 f202 	lsl.w	r2, r0, r2

    //
    // Set the control value for this step.
    //
    HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
                                  ~(0x0000000f << ulStep)) |
    17e4:	430a      	orrs	r2, r1
                                  (((ulConfig & 0xf00) >> 8) << ulStep));

    //
    // Set the control value for this step.
    //
    HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
    17e6:	601a      	str	r2, [r3, #0]
                                 (((ulConfig & 0xf0) >> 4) << ulStep));

    //
    // Enable digital comparator if specified in the ulConfig bit-fields.
    //
    if(ulConfig & 0x000F0000)
    17e8:	683b      	ldr	r3, [r7, #0]
    17ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    17ee:	2b00      	cmp	r3, #0
    17f0:	d031      	beq.n	1856 <ADCSequenceStepConfigure+0x11e>
    {
        //
        // Program the comparator for the specified step.
        //
        ulTemp = HWREG(ulBase + ADC_SSDC);
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	f103 0314 	add.w	r3, r3, #20
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	617b      	str	r3, [r7, #20]
        ulTemp &= ~(0xF << ulStep);
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	f04f 020f 	mov.w	r2, #15
    1802:	fa02 f303 	lsl.w	r3, r2, r3
    1806:	ea6f 0303 	mvn.w	r3, r3
    180a:	697a      	ldr	r2, [r7, #20]
    180c:	4013      	ands	r3, r2
    180e:	617b      	str	r3, [r7, #20]
        ulTemp |= (((ulConfig & 0x00070000) >> 16) << ulStep);
    1810:	683b      	ldr	r3, [r7, #0]
    1812:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    1816:	ea4f 4213 	mov.w	r2, r3, lsr #16
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	fa02 f303 	lsl.w	r3, r2, r3
    1820:	697a      	ldr	r2, [r7, #20]
    1822:	4313      	orrs	r3, r2
    1824:	617b      	str	r3, [r7, #20]
        HWREG(ulBase + ADC_SSDC) = ulTemp;
    1826:	68fb      	ldr	r3, [r7, #12]
    1828:	f103 0314 	add.w	r3, r3, #20
    182c:	697a      	ldr	r2, [r7, #20]
    182e:	601a      	str	r2, [r3, #0]

        //
        // Enable the comparator.
        //
        ulTemp = HWREG(ulBase + ADC_SSOP);
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	f103 0310 	add.w	r3, r3, #16
    1836:	681b      	ldr	r3, [r3, #0]
    1838:	617b      	str	r3, [r7, #20]
        ulTemp |= (1 << ulStep);
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	f04f 0201 	mov.w	r2, #1
    1840:	fa02 f303 	lsl.w	r3, r2, r3
    1844:	697a      	ldr	r2, [r7, #20]
    1846:	4313      	orrs	r3, r2
    1848:	617b      	str	r3, [r7, #20]
        HWREG(ulBase + ADC_SSOP) = ulTemp;
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	f103 0310 	add.w	r3, r3, #16
    1850:	697a      	ldr	r2, [r7, #20]
    1852:	601a      	str	r2, [r3, #0]
    1854:	e013      	b.n	187e <ADCSequenceStepConfigure+0x146>
    //
    // Disable digital comparator if not specified.
    //
    else
    {
        ulTemp = HWREG(ulBase + ADC_SSOP);
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	f103 0310 	add.w	r3, r3, #16
    185c:	681b      	ldr	r3, [r3, #0]
    185e:	617b      	str	r3, [r7, #20]
        ulTemp &= ~(1 << ulStep);
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	f04f 0201 	mov.w	r2, #1
    1866:	fa02 f303 	lsl.w	r3, r2, r3
    186a:	ea6f 0303 	mvn.w	r3, r3
    186e:	697a      	ldr	r2, [r7, #20]
    1870:	4013      	ands	r3, r2
    1872:	617b      	str	r3, [r7, #20]
        HWREG(ulBase + ADC_SSOP) = ulTemp;
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	f103 0310 	add.w	r3, r3, #16
    187a:	697a      	ldr	r2, [r7, #20]
    187c:	601a      	str	r2, [r3, #0]
    }
}
    187e:	f107 071c 	add.w	r7, r7, #28
    1882:	46bd      	mov	sp, r7
    1884:	bc80      	pop	{r7}
    1886:	4770      	bx	lr

00001888 <ADCSequenceDataGet>:
//
//*****************************************************************************
long
ADCSequenceDataGet(unsigned long ulBase, unsigned long ulSequenceNum,
                   unsigned long *pulBuffer)
{
    1888:	b480      	push	{r7}
    188a:	b087      	sub	sp, #28
    188c:	af00      	add	r7, sp, #0
    188e:	60f8      	str	r0, [r7, #12]
    1890:	60b9      	str	r1, [r7, #8]
    1892:	607a      	str	r2, [r7, #4]
    ASSERT(ulSequenceNum < 4);

    //
    // Get the offset of the sequence to be read.
    //
    ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
    1894:	68bb      	ldr	r3, [r7, #8]
    1896:	f103 0302 	add.w	r3, r3, #2
    189a:	ea4f 1343 	mov.w	r3, r3, lsl #5
    189e:	68fa      	ldr	r2, [r7, #12]
    18a0:	18d3      	adds	r3, r2, r3
    18a2:	60fb      	str	r3, [r7, #12]

    //
    // Read samples from the FIFO until it is empty.
    //
    ulCount = 0;
    18a4:	f04f 0300 	mov.w	r3, #0
    18a8:	617b      	str	r3, [r7, #20]
    while(!(HWREG(ulBase + ADC_SSFSTAT) & ADC_SSFSTAT0_EMPTY) && (ulCount < 8))
    18aa:	e00d      	b.n	18c8 <ADCSequenceDataGet+0x40>
    {
        //
        // Read the FIFO and copy it to the destination.
        //
        *pulBuffer++ = HWREG(ulBase + ADC_SSFIFO);
    18ac:	68fb      	ldr	r3, [r7, #12]
    18ae:	f103 0308 	add.w	r3, r3, #8
    18b2:	681a      	ldr	r2, [r3, #0]
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	601a      	str	r2, [r3, #0]
    18b8:	687b      	ldr	r3, [r7, #4]
    18ba:	f103 0304 	add.w	r3, r3, #4
    18be:	607b      	str	r3, [r7, #4]

        //
        // Increment the count of samples read.
        //
        ulCount++;
    18c0:	697b      	ldr	r3, [r7, #20]
    18c2:	f103 0301 	add.w	r3, r3, #1
    18c6:	617b      	str	r3, [r7, #20]

    //
    // Read samples from the FIFO until it is empty.
    //
    ulCount = 0;
    while(!(HWREG(ulBase + ADC_SSFSTAT) & ADC_SSFSTAT0_EMPTY) && (ulCount < 8))
    18c8:	68fb      	ldr	r3, [r7, #12]
    18ca:	f103 030c 	add.w	r3, r3, #12
    18ce:	681b      	ldr	r3, [r3, #0]
    18d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    18d4:	2b00      	cmp	r3, #0
    18d6:	d102      	bne.n	18de <ADCSequenceDataGet+0x56>
    18d8:	697b      	ldr	r3, [r7, #20]
    18da:	2b07      	cmp	r3, #7
    18dc:	d9e6      	bls.n	18ac <ADCSequenceDataGet+0x24>
    }

    //
    // Return the number of samples read.
    //
    return(ulCount);
    18de:	697b      	ldr	r3, [r7, #20]
}
    18e0:	4618      	mov	r0, r3
    18e2:	f107 071c 	add.w	r7, r7, #28
    18e6:	46bd      	mov	sp, r7
    18e8:	bc80      	pop	{r7}
    18ea:	4770      	bx	lr

000018ec <ADCProcessorTrigger>:
//! \return None.
//
//*****************************************************************************
void
ADCProcessorTrigger(unsigned long ulBase, unsigned long ulSequenceNum)
{
    18ec:	b490      	push	{r4, r7}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
    18f4:	6039      	str	r1, [r7, #0]
    ASSERT((ulSequenceNum & 0xf) < 4);

    //
    // Generate a processor trigger for this sample sequence.
    //
    HWREG(ulBase + ADC_O_PSSI) |= ((ulSequenceNum & 0xffff0000) |
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
    18fc:	461a      	mov	r2, r3
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	f103 0328 	add.w	r3, r3, #40	; 0x28
    1904:	6819      	ldr	r1, [r3, #0]
    1906:	683b      	ldr	r3, [r7, #0]
    1908:	ea4f 4313 	mov.w	r3, r3, lsr #16
    190c:	ea4f 4303 	mov.w	r3, r3, lsl #16
                                   (1 << (ulSequenceNum & 0xf)));
    1910:	6838      	ldr	r0, [r7, #0]
    1912:	f000 000f 	and.w	r0, r0, #15
    1916:	f04f 0401 	mov.w	r4, #1
    191a:	fa04 f000 	lsl.w	r0, r4, r0
    ASSERT((ulSequenceNum & 0xf) < 4);

    //
    // Generate a processor trigger for this sample sequence.
    //
    HWREG(ulBase + ADC_O_PSSI) |= ((ulSequenceNum & 0xffff0000) |
    191e:	4303      	orrs	r3, r0
    1920:	430b      	orrs	r3, r1
    1922:	6013      	str	r3, [r2, #0]
                                   (1 << (ulSequenceNum & 0xf)));
}
    1924:	f107 0708 	add.w	r7, r7, #8
    1928:	46bd      	mov	sp, r7
    192a:	bc90      	pop	{r4, r7}
    192c:	4770      	bx	lr
    192e:	bf00      	nop

00001930 <CPUcpsie>:
    unsigned long ulRet;

    //
    // Read PRIMASK and enable interrupts.
    //
    __asm("    mrs     r0, PRIMASK\n"
    1930:	f3ef 8010 	mrs	r0, PRIMASK
    1934:	b662      	cpsie	i
    1936:	4770      	bx	lr
    // The return is handled in the inline assembly, but the compiler will
    // still complain if there is not an explicit return here (despite the fact
    // that this does not result in any code being produced because of the
    // naked attribute).
    //
    return(ulRet);
    1938:	4623      	mov	r3, r4
}
    193a:	4618      	mov	r0, r3

0000193c <GPIODirModeSet>:
//
//*****************************************************************************
void
GPIODirModeSet(unsigned long ulPort, unsigned char ucPins,
               unsigned long ulPinIO)
{
    193c:	b480      	push	{r7}
    193e:	b085      	sub	sp, #20
    1940:	af00      	add	r7, sp, #0
    1942:	60f8      	str	r0, [r7, #12]
    1944:	460b      	mov	r3, r1
    1946:	607a      	str	r2, [r7, #4]
    1948:	72fb      	strb	r3, [r7, #11]
           (ulPinIO == GPIO_DIR_MODE_HW));

    //
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
    194a:	68fb      	ldr	r3, [r7, #12]
    194c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1950:	461a      	mov	r2, r3
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	f003 0301 	and.w	r3, r3, #1
    1958:	b2db      	uxtb	r3, r3
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
    195a:	2b00      	cmp	r3, #0
    195c:	d006      	beq.n	196c <GPIODirModeSet+0x30>
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1964:	6819      	ldr	r1, [r3, #0]
    1966:	7afb      	ldrb	r3, [r7, #11]
    1968:	430b      	orrs	r3, r1
    196a:	e007      	b.n	197c <GPIODirModeSet+0x40>
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1972:	6819      	ldr	r1, [r3, #0]
    1974:	7afb      	ldrb	r3, [r7, #11]
    1976:	ea6f 0303 	mvn.w	r3, r3

    //
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
    197a:	400b      	ands	r3, r1
           (ulPinIO == GPIO_DIR_MODE_HW));

    //
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
    197c:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_AFSEL) = ((ulPinIO & 2) ?
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1984:	461a      	mov	r2, r3
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	f003 0302 	and.w	r3, r3, #2
                                    (HWREG(ulPort + GPIO_O_AFSEL) | ucPins) :
    198c:	2b00      	cmp	r3, #0
    198e:	d006      	beq.n	199e <GPIODirModeSet+0x62>
    1990:	68fb      	ldr	r3, [r7, #12]
    1992:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1996:	6819      	ldr	r1, [r3, #0]
    1998:	7afb      	ldrb	r3, [r7, #11]
    199a:	430b      	orrs	r3, r1
    199c:	e007      	b.n	19ae <GPIODirModeSet+0x72>
                                    (HWREG(ulPort + GPIO_O_AFSEL) &
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    19a4:	6819      	ldr	r1, [r3, #0]
                                     ~(ucPins)));
    19a6:	7afb      	ldrb	r3, [r7, #11]
    19a8:	ea6f 0303 	mvn.w	r3, r3
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_AFSEL) = ((ulPinIO & 2) ?
                                    (HWREG(ulPort + GPIO_O_AFSEL) | ucPins) :
    19ac:	400b      	ands	r3, r1
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_AFSEL) = ((ulPinIO & 2) ?
    19ae:	6013      	str	r3, [r2, #0]
                                    (HWREG(ulPort + GPIO_O_AFSEL) | ucPins) :
                                    (HWREG(ulPort + GPIO_O_AFSEL) &
                                     ~(ucPins)));
}
    19b0:	f107 0714 	add.w	r7, r7, #20
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	bf00      	nop

000019bc <GPIOPadConfigSet>:
//
//*****************************************************************************
void
GPIOPadConfigSet(unsigned long ulPort, unsigned char ucPins,
                 unsigned long ulStrength, unsigned long ulPinType)
{
    19bc:	b480      	push	{r7}
    19be:	b085      	sub	sp, #20
    19c0:	af00      	add	r7, sp, #0
    19c2:	60f8      	str	r0, [r7, #12]
    19c4:	607a      	str	r2, [r7, #4]
    19c6:	603b      	str	r3, [r7, #0]
    19c8:	460b      	mov	r3, r1
    19ca:	72fb      	strb	r3, [r7, #11]
           (ulPinType == GPIO_PIN_TYPE_ANALOG));

    //
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    19d2:	461a      	mov	r2, r3
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	f003 0301 	and.w	r3, r3, #1
    19da:	b2db      	uxtb	r3, r3
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
    19dc:	2b00      	cmp	r3, #0
    19de:	d006      	beq.n	19ee <GPIOPadConfigSet+0x32>
    19e0:	68fb      	ldr	r3, [r7, #12]
    19e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    19e6:	6819      	ldr	r1, [r3, #0]
    19e8:	7afb      	ldrb	r3, [r7, #11]
    19ea:	430b      	orrs	r3, r1
    19ec:	e007      	b.n	19fe <GPIOPadConfigSet+0x42>
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    19ee:	68fb      	ldr	r3, [r7, #12]
    19f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    19f4:	6819      	ldr	r1, [r3, #0]
    19f6:	7afb      	ldrb	r3, [r7, #11]
    19f8:	ea6f 0303 	mvn.w	r3, r3

    //
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
    19fc:	400b      	ands	r3, r1
           (ulPinType == GPIO_PIN_TYPE_ANALOG));

    //
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
    19fe:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1a06:	f103 0304 	add.w	r3, r3, #4
    1a0a:	461a      	mov	r2, r3
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	f003 0302 	and.w	r3, r3, #2
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
    1a12:	2b00      	cmp	r3, #0
    1a14:	d008      	beq.n	1a28 <GPIOPadConfigSet+0x6c>
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1a1c:	f103 0304 	add.w	r3, r3, #4
    1a20:	6819      	ldr	r1, [r3, #0]
    1a22:	7afb      	ldrb	r3, [r7, #11]
    1a24:	430b      	orrs	r3, r1
    1a26:	e009      	b.n	1a3c <GPIOPadConfigSet+0x80>
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1a2e:	f103 0304 	add.w	r3, r3, #4
    1a32:	6819      	ldr	r1, [r3, #0]
    1a34:	7afb      	ldrb	r3, [r7, #11]
    1a36:	ea6f 0303 	mvn.w	r3, r3
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
    1a3a:	400b      	ands	r3, r1
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
    1a3c:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1a44:	461a      	mov	r2, r3
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	f003 0304 	and.w	r3, r3, #4
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d006      	beq.n	1a5e <GPIOPadConfigSet+0xa2>
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1a56:	6819      	ldr	r1, [r3, #0]
    1a58:	7afb      	ldrb	r3, [r7, #11]
    1a5a:	430b      	orrs	r3, r1
    1a5c:	e007      	b.n	1a6e <GPIOPadConfigSet+0xb2>
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
    1a64:	6819      	ldr	r1, [r3, #0]
    1a66:	7afb      	ldrb	r3, [r7, #11]
    1a68:	ea6f 0303 	mvn.w	r3, r3
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
    1a6c:	400b      	ands	r3, r1
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
    1a6e:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_SLR) = ((ulStrength & 8) ?
    1a70:	68fb      	ldr	r3, [r7, #12]
    1a72:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
    1a76:	461a      	mov	r2, r3
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	f003 0308 	and.w	r3, r3, #8
                                  (HWREG(ulPort + GPIO_O_SLR) | ucPins) :
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d006      	beq.n	1a90 <GPIOPadConfigSet+0xd4>
    1a82:	68fb      	ldr	r3, [r7, #12]
    1a84:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
    1a88:	6819      	ldr	r1, [r3, #0]
    1a8a:	7afb      	ldrb	r3, [r7, #11]
    1a8c:	430b      	orrs	r3, r1
    1a8e:	e007      	b.n	1aa0 <GPIOPadConfigSet+0xe4>
                                  (HWREG(ulPort + GPIO_O_SLR) & ~(ucPins)));
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
    1a96:	6819      	ldr	r1, [r3, #0]
    1a98:	7afb      	ldrb	r3, [r7, #11]
    1a9a:	ea6f 0303 	mvn.w	r3, r3
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_SLR) = ((ulStrength & 8) ?
                                  (HWREG(ulPort + GPIO_O_SLR) | ucPins) :
    1a9e:	400b      	ands	r3, r1
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_SLR) = ((ulStrength & 8) ?
    1aa0:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_SLR) & ~(ucPins)));

    //
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
    1aa2:	68fb      	ldr	r3, [r7, #12]
    1aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1aa8:	f103 030c 	add.w	r3, r3, #12
    1aac:	461a      	mov	r2, r3
    1aae:	683b      	ldr	r3, [r7, #0]
    1ab0:	f003 0301 	and.w	r3, r3, #1
    1ab4:	b2db      	uxtb	r3, r3
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d008      	beq.n	1acc <GPIOPadConfigSet+0x110>
    1aba:	68fb      	ldr	r3, [r7, #12]
    1abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1ac0:	f103 030c 	add.w	r3, r3, #12
    1ac4:	6819      	ldr	r1, [r3, #0]
    1ac6:	7afb      	ldrb	r3, [r7, #11]
    1ac8:	430b      	orrs	r3, r1
    1aca:	e009      	b.n	1ae0 <GPIOPadConfigSet+0x124>
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    1acc:	68fb      	ldr	r3, [r7, #12]
    1ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    1ad2:	f103 030c 	add.w	r3, r3, #12
    1ad6:	6819      	ldr	r1, [r3, #0]
    1ad8:	7afb      	ldrb	r3, [r7, #11]
    1ada:	ea6f 0303 	mvn.w	r3, r3

    //
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
    1ade:	400b      	ands	r3, r1
                                  (HWREG(ulPort + GPIO_O_SLR) & ~(ucPins)));

    //
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
    1ae0:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
    1ae2:	68fb      	ldr	r3, [r7, #12]
    1ae4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1ae8:	461a      	mov	r2, r3
    1aea:	683b      	ldr	r3, [r7, #0]
    1aec:	f003 0302 	and.w	r3, r3, #2
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
    1af0:	2b00      	cmp	r3, #0
    1af2:	d006      	beq.n	1b02 <GPIOPadConfigSet+0x146>
    1af4:	68fb      	ldr	r3, [r7, #12]
    1af6:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1afa:	6819      	ldr	r1, [r3, #0]
    1afc:	7afb      	ldrb	r3, [r7, #11]
    1afe:	430b      	orrs	r3, r1
    1b00:	e007      	b.n	1b12 <GPIOPadConfigSet+0x156>
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    1b02:	68fb      	ldr	r3, [r7, #12]
    1b04:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b08:	6819      	ldr	r1, [r3, #0]
    1b0a:	7afb      	ldrb	r3, [r7, #11]
    1b0c:	ea6f 0303 	mvn.w	r3, r3
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
    1b10:	400b      	ands	r3, r1
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
    1b12:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
    1b14:	68fb      	ldr	r3, [r7, #12]
    1b16:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b1a:	f103 0304 	add.w	r3, r3, #4
    1b1e:	461a      	mov	r2, r3
    1b20:	683b      	ldr	r3, [r7, #0]
    1b22:	f003 0304 	and.w	r3, r3, #4
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
    1b26:	2b00      	cmp	r3, #0
    1b28:	d008      	beq.n	1b3c <GPIOPadConfigSet+0x180>
    1b2a:	68fb      	ldr	r3, [r7, #12]
    1b2c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b30:	f103 0304 	add.w	r3, r3, #4
    1b34:	6819      	ldr	r1, [r3, #0]
    1b36:	7afb      	ldrb	r3, [r7, #11]
    1b38:	430b      	orrs	r3, r1
    1b3a:	e009      	b.n	1b50 <GPIOPadConfigSet+0x194>
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b42:	f103 0304 	add.w	r3, r3, #4
    1b46:	6819      	ldr	r1, [r3, #0]
    1b48:	7afb      	ldrb	r3, [r7, #11]
    1b4a:	ea6f 0303 	mvn.w	r3, r3
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
    1b4e:	400b      	ands	r3, r1
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
    1b50:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DEN) = ((ulPinType & 8) ?
    1b52:	68fb      	ldr	r3, [r7, #12]
    1b54:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b58:	f103 030c 	add.w	r3, r3, #12
    1b5c:	461a      	mov	r2, r3
    1b5e:	683b      	ldr	r3, [r7, #0]
    1b60:	f003 0308 	and.w	r3, r3, #8
                                  (HWREG(ulPort + GPIO_O_DEN) | ucPins) :
    1b64:	2b00      	cmp	r3, #0
    1b66:	d008      	beq.n	1b7a <GPIOPadConfigSet+0x1be>
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b6e:	f103 030c 	add.w	r3, r3, #12
    1b72:	6819      	ldr	r1, [r3, #0]
    1b74:	7afb      	ldrb	r3, [r7, #11]
    1b76:	430b      	orrs	r3, r1
    1b78:	e009      	b.n	1b8e <GPIOPadConfigSet+0x1d2>
                                  (HWREG(ulPort + GPIO_O_DEN) & ~(ucPins)));
    1b7a:	68fb      	ldr	r3, [r7, #12]
    1b7c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1b80:	f103 030c 	add.w	r3, r3, #12
    1b84:	6819      	ldr	r1, [r3, #0]
    1b86:	7afb      	ldrb	r3, [r7, #11]
    1b88:	ea6f 0303 	mvn.w	r3, r3
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DEN) = ((ulPinType & 8) ?
                                  (HWREG(ulPort + GPIO_O_DEN) | ucPins) :
    1b8c:	400b      	ands	r3, r1
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DEN) = ((ulPinType & 8) ?
    1b8e:	6013      	str	r3, [r2, #0]
    //
    // Set the analog mode select register.  This register only appears in
    // DustDevil-class (and later) devices, but is a harmless write on
    // Sandstorm- and Fury-class devices.
    //
    HWREG(ulPort + GPIO_O_AMSEL) =
    1b90:	68fb      	ldr	r3, [r7, #12]
    1b92:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1b96:	461a      	mov	r2, r3
        ((ulPinType == GPIO_PIN_TYPE_ANALOG) ?
         (HWREG(ulPort + GPIO_O_AMSEL) | ucPins) :
    1b98:	683b      	ldr	r3, [r7, #0]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d106      	bne.n	1bac <GPIOPadConfigSet+0x1f0>
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1ba4:	6819      	ldr	r1, [r3, #0]
    1ba6:	7afb      	ldrb	r3, [r7, #11]
    1ba8:	430b      	orrs	r3, r1
    1baa:	e007      	b.n	1bbc <GPIOPadConfigSet+0x200>
         (HWREG(ulPort + GPIO_O_AMSEL) & ~(ucPins)));
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1bb2:	6819      	ldr	r1, [r3, #0]
    1bb4:	7afb      	ldrb	r3, [r7, #11]
    1bb6:	ea6f 0303 	mvn.w	r3, r3
    // DustDevil-class (and later) devices, but is a harmless write on
    // Sandstorm- and Fury-class devices.
    //
    HWREG(ulPort + GPIO_O_AMSEL) =
        ((ulPinType == GPIO_PIN_TYPE_ANALOG) ?
         (HWREG(ulPort + GPIO_O_AMSEL) | ucPins) :
    1bba:	400b      	ands	r3, r1
    //
    // Set the analog mode select register.  This register only appears in
    // DustDevil-class (and later) devices, but is a harmless write on
    // Sandstorm- and Fury-class devices.
    //
    HWREG(ulPort + GPIO_O_AMSEL) =
    1bbc:	6013      	str	r3, [r2, #0]
        ((ulPinType == GPIO_PIN_TYPE_ANALOG) ?
         (HWREG(ulPort + GPIO_O_AMSEL) | ucPins) :
         (HWREG(ulPort + GPIO_O_AMSEL) & ~(ucPins)));
}
    1bbe:	f107 0714 	add.w	r7, r7, #20
    1bc2:	46bd      	mov	sp, r7
    1bc4:	bc80      	pop	{r7}
    1bc6:	4770      	bx	lr

00001bc8 <GPIOPinRead>:
//! is returned as a 0.  Bits 31:8 should be ignored.
//
//*****************************************************************************
long
GPIOPinRead(unsigned long ulPort, unsigned char ucPins)
{
    1bc8:	b480      	push	{r7}
    1bca:	b083      	sub	sp, #12
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
    1bd0:	460b      	mov	r3, r1
    1bd2:	70fb      	strb	r3, [r7, #3]
    ASSERT(GPIOBaseValid(ulPort));

    //
    // Return the pin value(s).
    //
    return(HWREG(ulPort + (GPIO_O_DATA + (ucPins << 2))));
    1bd4:	78fb      	ldrb	r3, [r7, #3]
    1bd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1bda:	461a      	mov	r2, r3
    1bdc:	687b      	ldr	r3, [r7, #4]
    1bde:	18d3      	adds	r3, r2, r3
    1be0:	681b      	ldr	r3, [r3, #0]
}
    1be2:	4618      	mov	r0, r3
    1be4:	f107 070c 	add.w	r7, r7, #12
    1be8:	46bd      	mov	sp, r7
    1bea:	bc80      	pop	{r7}
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop

00001bf0 <GPIOPinTypeGPIOInput>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinTypeGPIOInput(unsigned long ulPort, unsigned char ucPins)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b082      	sub	sp, #8
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
    1bf8:	460b      	mov	r3, r1
    1bfa:	70fb      	strb	r3, [r7, #3]
    ASSERT(GPIOBaseValid(ulPort));

    //
    // Make the pin(s) be inputs.
    //
    GPIODirModeSet(ulPort, ucPins, GPIO_DIR_MODE_IN);
    1bfc:	78fb      	ldrb	r3, [r7, #3]
    1bfe:	6878      	ldr	r0, [r7, #4]
    1c00:	4619      	mov	r1, r3
    1c02:	f04f 0200 	mov.w	r2, #0
    1c06:	f7ff fe99 	bl	193c <GPIODirModeSet>

    //
    // Set the pad(s) for standard push-pull operation.
    //
    GPIOPadConfigSet(ulPort, ucPins, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
    1c0a:	78fb      	ldrb	r3, [r7, #3]
    1c0c:	6878      	ldr	r0, [r7, #4]
    1c0e:	4619      	mov	r1, r3
    1c10:	f04f 0201 	mov.w	r2, #1
    1c14:	f04f 0308 	mov.w	r3, #8
    1c18:	f7ff fed0 	bl	19bc <GPIOPadConfigSet>
}
    1c1c:	f107 0708 	add.w	r7, r7, #8
    1c20:	46bd      	mov	sp, r7
    1c22:	bd80      	pop	{r7, pc}

00001c24 <GPIOPinTypeGPIOOutput>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinTypeGPIOOutput(unsigned long ulPort, unsigned char ucPins)
{
    1c24:	b580      	push	{r7, lr}
    1c26:	b082      	sub	sp, #8
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	460b      	mov	r3, r1
    1c2e:	70fb      	strb	r3, [r7, #3]
    ASSERT(GPIOBaseValid(ulPort));

    //
    // Set the pad(s) for standard push-pull operation.
    //
    GPIOPadConfigSet(ulPort, ucPins, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
    1c30:	78fb      	ldrb	r3, [r7, #3]
    1c32:	6878      	ldr	r0, [r7, #4]
    1c34:	4619      	mov	r1, r3
    1c36:	f04f 0201 	mov.w	r2, #1
    1c3a:	f04f 0308 	mov.w	r3, #8
    1c3e:	f7ff febd 	bl	19bc <GPIOPadConfigSet>

    //
    // Make the pin(s) be outputs.
    //
    GPIODirModeSet(ulPort, ucPins, GPIO_DIR_MODE_OUT);
    1c42:	78fb      	ldrb	r3, [r7, #3]
    1c44:	6878      	ldr	r0, [r7, #4]
    1c46:	4619      	mov	r1, r3
    1c48:	f04f 0201 	mov.w	r2, #1
    1c4c:	f7ff fe76 	bl	193c <GPIODirModeSet>
}
    1c50:	f107 0708 	add.w	r7, r7, #8
    1c54:	46bd      	mov	sp, r7
    1c56:	bd80      	pop	{r7, pc}

00001c58 <IntMasterEnable>:
//! called or \b false if they were initially enabled.
//
//*****************************************************************************
tBoolean
IntMasterEnable(void)
{
    1c58:	b580      	push	{r7, lr}
    1c5a:	af00      	add	r7, sp, #0
    //
    // Enable processor interrupts.
    //
    return(CPUcpsie());
    1c5c:	f7ff fe68 	bl	1930 <CPUcpsie>
    1c60:	4603      	mov	r3, r0
    1c62:	b2db      	uxtb	r3, r3
}
    1c64:	4618      	mov	r0, r3
    1c66:	bd80      	pop	{r7, pc}

00001c68 <SysCtlPeripheralEnable>:
//! \return None.
//
//*****************************************************************************
void
SysCtlPeripheralEnable(unsigned long ulPeripheral)
{
    1c68:	b480      	push	{r7}
    1c6a:	b083      	sub	sp, #12
    1c6c:	af00      	add	r7, sp, #0
    1c6e:	6078      	str	r0, [r7, #4]

    //
    // See if the peripheral index is 15, indicating a peripheral that is
    // accessed via the SYSCTL_RCGCperiph registers.
    //
    if((ulPeripheral & 0xf0000000) == 0xf0000000)
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    1c76:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
    1c7a:	d127      	bne.n	1ccc <SysCtlPeripheralEnable+0x64>
    {
        //
        // Enable this peripheral.
        //
        HWREGBITW(SYSCTL_RCGCBASE + ((ulPeripheral & 0xff00) >> 8),
    1c7c:	687b      	ldr	r3, [r7, #4]
    1c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1c82:	ea4f 2213 	mov.w	r2, r3, lsr #8
    1c86:	f44f 4366 	mov.w	r3, #58880	; 0xe600
    1c8a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1c8e:	18d3      	adds	r3, r2, r3
    1c90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1c9a:	ea4f 2113 	mov.w	r1, r3, lsr #8
    1c9e:	f44f 4366 	mov.w	r3, #58880	; 0xe600
    1ca2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ca6:	18cb      	adds	r3, r1, r3
    1ca8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    1cb0:	ea4f 1343 	mov.w	r3, r3, lsl #5
    1cb4:	431a      	orrs	r2, r3
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	b2db      	uxtb	r3, r3
    1cba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1cbe:	4313      	orrs	r3, r2
    1cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
                  ulPeripheral & 0xff) = 1;
    1cc4:	f04f 0201 	mov.w	r2, #1
    1cc8:	601a      	str	r2, [r3, #0]
    1cca:	e021      	b.n	1d10 <SysCtlPeripheralEnable+0xa8>
    else
    {
        //
        // Enable this peripheral.
        //
        HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	ea4f 7213 	mov.w	r2, r3, lsr #28
    1cd2:	f244 53c0 	movw	r3, #17856	; 0x45c0
    1cd6:	f2c0 0300 	movt	r3, #0
    1cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    1cde:	461a      	mov	r2, r3
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	ea4f 7113 	mov.w	r1, r3, lsr #28
    1ce6:	f244 53c0 	movw	r3, #17856	; 0x45c0
    1cea:	f2c0 0300 	movt	r3, #0
    1cee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1cf2:	6819      	ldr	r1, [r3, #0]
            SYSCTL_PERIPH_MASK(ulPeripheral);
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1cfa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1cfe:	6878      	ldr	r0, [r7, #4]
    1d00:	f400 10f8 	and.w	r0, r0, #2031616	; 0x1f0000
    1d04:	ea4f 4010 	mov.w	r0, r0, lsr #16
    1d08:	fa03 f300 	lsl.w	r3, r3, r0
    else
    {
        //
        // Enable this peripheral.
        //
        HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    1d0c:	430b      	orrs	r3, r1
    1d0e:	6013      	str	r3, [r2, #0]
            SYSCTL_PERIPH_MASK(ulPeripheral);
    }
}
    1d10:	f107 070c 	add.w	r7, r7, #12
    1d14:	46bd      	mov	sp, r7
    1d16:	bc80      	pop	{r7}
    1d18:	4770      	bx	lr
    1d1a:	bf00      	nop

00001d1c <SysCtlDelay>:
#endif
#if defined(codered) || defined(gcc) || defined(sourcerygxx)
void __attribute__((naked))
SysCtlDelay(unsigned long ulCount)
{
    __asm("    subs    r0, #1\n"
    1d1c:	3801      	subs	r0, #1
    1d1e:	f47f affd 	bne.w	1d1c <SysCtlDelay>
    1d22:	4770      	bx	lr

00001d24 <SysCtlClockSet>:
//! \return None.
//
//*****************************************************************************
void
SysCtlClockSet(unsigned long ulConfig)
{
    1d24:	b580      	push	{r7, lr}
    1d26:	b086      	sub	sp, #24
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]

    //
    // See if this is a Sandstorm-class device and clocking features from newer
    // devices were requested.
    //
    if(CLASS_IS_SANDSTORM && (ulConfig & SYSCTL_RCC2_USERCC2))
    1d2c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    1d30:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d34:	681b      	ldr	r3, [r3, #0]
    1d36:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d00c      	beq.n	1d58 <SysCtlClockSet+0x34>
    1d3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    1d42:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d46:	681a      	ldr	r2, [r3, #0]
    1d48:	f04f 0300 	mov.w	r3, #0
    1d4c:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    1d50:	4013      	ands	r3, r2
    1d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    1d56:	d103      	bne.n	1d60 <SysCtlClockSet+0x3c>
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	f2c0 8133 	blt.w	1fc6 <SysCtlClockSet+0x2a2>
    //
    // Get the current value of the RCC and RCC2 registers.  If using a
    // Sandstorm-class device, the RCC2 register reads back as zero and the
    // writes to it from within this function are ignored.
    //
    ulRCC = HWREG(SYSCTL_RCC);
    1d60:	f24e 0360 	movw	r3, #57440	; 0xe060
    1d64:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	613b      	str	r3, [r7, #16]
    ulRCC2 = HWREG(SYSCTL_RCC2);
    1d6c:	f24e 0370 	movw	r3, #57456	; 0xe070
    1d70:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d74:	681b      	ldr	r3, [r3, #0]
    1d76:	60fb      	str	r3, [r7, #12]

    //
    // Bypass the PLL and system clock dividers for now.
    //
    ulRCC |= SYSCTL_RCC_BYPASS;
    1d78:	693b      	ldr	r3, [r7, #16]
    1d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1d7e:	613b      	str	r3, [r7, #16]
    ulRCC &= ~(SYSCTL_RCC_USESYSDIV);
    1d80:	693b      	ldr	r3, [r7, #16]
    1d82:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1d86:	613b      	str	r3, [r7, #16]
    ulRCC2 |= SYSCTL_RCC2_BYPASS2;
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1d8e:	60fb      	str	r3, [r7, #12]

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    1d90:	f24e 0360 	movw	r3, #57440	; 0xe060
    1d94:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1d98:	693a      	ldr	r2, [r7, #16]
    1d9a:	601a      	str	r2, [r3, #0]
    HWREG(SYSCTL_RCC2) = ulRCC2;
    1d9c:	f24e 0370 	movw	r3, #57456	; 0xe070
    1da0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1da4:	68fa      	ldr	r2, [r7, #12]
    1da6:	601a      	str	r2, [r3, #0]

    //
    // See if either oscillator needs to be enabled.
    //
    if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
    1da8:	693b      	ldr	r3, [r7, #16]
    1daa:	f003 0302 	and.w	r3, r3, #2
    1dae:	2b00      	cmp	r3, #0
    1db0:	d004      	beq.n	1dbc <SysCtlClockSet+0x98>
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	f003 0302 	and.w	r3, r3, #2
    1db8:	2b00      	cmp	r3, #0
    1dba:	d00a      	beq.n	1dd2 <SysCtlClockSet+0xae>
       ((ulRCC & SYSCTL_RCC_MOSCDIS) && !(ulConfig & SYSCTL_RCC_MOSCDIS)))
    1dbc:	693b      	ldr	r3, [r7, #16]
    1dbe:	f003 0301 	and.w	r3, r3, #1
    1dc2:	b2db      	uxtb	r3, r3
    HWREG(SYSCTL_RCC2) = ulRCC2;

    //
    // See if either oscillator needs to be enabled.
    //
    if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d02e      	beq.n	1e26 <SysCtlClockSet+0x102>
       ((ulRCC & SYSCTL_RCC_MOSCDIS) && !(ulConfig & SYSCTL_RCC_MOSCDIS)))
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	f003 0301 	and.w	r3, r3, #1
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d129      	bne.n	1e26 <SysCtlClockSet+0x102>
        //
        // Make sure that the required oscillators are enabled.  For now, the
        // previously enabled oscillators must be enabled along with the newly
        // requested oscillators.
        //
        ulRCC &= (~(SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS) |
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	f063 0303 	orn	r3, r3, #3
    1dd8:	693a      	ldr	r2, [r7, #16]
    1dda:	4013      	ands	r3, r2
    1ddc:	613b      	str	r3, [r7, #16]
                  (ulConfig & (SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS)));

        //
        // Write the new RCC value.
        //
        HWREG(SYSCTL_RCC) = ulRCC;
    1dde:	f24e 0360 	movw	r3, #57440	; 0xe060
    1de2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1de6:	693a      	ldr	r2, [r7, #16]
    1de8:	601a      	str	r2, [r3, #0]
        //
        // Wait for a bit, giving the oscillator time to stabilize.  The number
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	2b00      	cmp	r3, #0
    1dee:	da09      	bge.n	1e04 <SysCtlClockSet+0xe0>
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
    1df0:	68fb      	ldr	r3, [r7, #12]
    1df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
        //
        // Wait for a bit, giving the oscillator time to stabilize.  The number
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    1df6:	2b30      	cmp	r3, #48	; 0x30
    1df8:	d00c      	beq.n	1e14 <SysCtlClockSet+0xf0>
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
        // Wait for a bit, giving the oscillator time to stabilize.  The number
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
    1e00:	2b70      	cmp	r3, #112	; 0x70
    1e02:	d007      	beq.n	1e14 <SysCtlClockSet+0xf0>
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
           (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    1e04:	68fb      	ldr	r3, [r7, #12]
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
    1e06:	2b00      	cmp	r3, #0
    1e08:	db09      	blt.n	1e1e <SysCtlClockSet+0xfa>
           (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            ((ulRCC & SYSCTL_RCC_OSCSRC_M) == SYSCTL_RCC_OSCSRC_30)))
    1e0a:	693b      	ldr	r3, [r7, #16]
    1e0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
           (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    1e10:	2b30      	cmp	r3, #48	; 0x30
    1e12:	d104      	bne.n	1e1e <SysCtlClockSet+0xfa>
            ((ulRCC & SYSCTL_RCC_OSCSRC_M) == SYSCTL_RCC_OSCSRC_30)))
        {
            //
            // Delay for 4096 iterations.
            //
            SysCtlDelay(4096);
    1e14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    1e18:	f7ff ff80 	bl	1d1c <SysCtlDelay>
    1e1c:	e003      	b.n	1e26 <SysCtlClockSet+0x102>
        else
        {
            //
            // Delay for 524,288 iterations.
            //
            SysCtlDelay(524288);
    1e1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1e22:	f7ff ff7b 	bl	1d1c <SysCtlDelay>
    //
    // Set the new crystal value and oscillator source.  Because the OSCSRC2
    // field in RCC2 overlaps the XTAL field in RCC, the OSCSRC field has a
    // special encoding within ulConfig to avoid the overlap.
    //
    ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    1e26:	693b      	ldr	r3, [r7, #16]
    1e28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
    1e2c:	613b      	str	r3, [r7, #16]
    ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
    1e34:	693a      	ldr	r2, [r7, #16]
    1e36:	4313      	orrs	r3, r2
    1e38:	613b      	str	r3, [r7, #16]
    ulRCC2 &= ~(SYSCTL_RCC2_USERCC2 | SYSCTL_RCC2_OSCSRC2_M);
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    1e44:	60fb      	str	r3, [r7, #12]
    ulRCC2 |= ulConfig & (SYSCTL_RCC2_USERCC2 | SYSCTL_RCC_OSCSRC_M);
    1e46:	687a      	ldr	r2, [r7, #4]
    1e48:	f04f 0330 	mov.w	r3, #48	; 0x30
    1e4c:	f2c8 0300 	movt	r3, #32768	; 0x8000
    1e50:	4013      	ands	r3, r2
    1e52:	68fa      	ldr	r2, [r7, #12]
    1e54:	4313      	orrs	r3, r2
    1e56:	60fb      	str	r3, [r7, #12]
    ulRCC2 |= (ulConfig & 0x00000008) << 3;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	f003 0308 	and.w	r3, r3, #8
    1e5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1e62:	68fa      	ldr	r2, [r7, #12]
    1e64:	4313      	orrs	r3, r2
    1e66:	60fb      	str	r3, [r7, #12]

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    1e68:	f24e 0360 	movw	r3, #57440	; 0xe060
    1e6c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1e70:	693a      	ldr	r2, [r7, #16]
    1e72:	601a      	str	r2, [r3, #0]
    HWREG(SYSCTL_RCC2) = ulRCC2;
    1e74:	f24e 0370 	movw	r3, #57456	; 0xe070
    1e78:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1e7c:	68fa      	ldr	r2, [r7, #12]
    1e7e:	601a      	str	r2, [r3, #0]

    //
    // Wait for a bit so that new crystal value and oscillator source can take
    // effect.
    //
    SysCtlDelay(16);
    1e80:	f04f 0010 	mov.w	r0, #16
    1e84:	f7ff ff4a 	bl	1d1c <SysCtlDelay>

    //
    // Set the PLL configuration.
    //
    ulRCC &= ~(SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    1e88:	693b      	ldr	r3, [r7, #16]
    1e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    1e8e:	613b      	str	r3, [r7, #16]
    ulRCC |= ulConfig & (SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    1e96:	693a      	ldr	r2, [r7, #16]
    1e98:	4313      	orrs	r3, r2
    1e9a:	613b      	str	r3, [r7, #16]
    ulRCC2 &= ~(SYSCTL_RCC2_PWRDN2);
    1e9c:	68fb      	ldr	r3, [r7, #12]
    1e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1ea2:	60fb      	str	r3, [r7, #12]
    ulRCC2 |= ulConfig & SYSCTL_RCC2_PWRDN2;
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    1eaa:	68fa      	ldr	r2, [r7, #12]
    1eac:	4313      	orrs	r3, r2
    1eae:	60fb      	str	r3, [r7, #12]

    //
    // Clear the PLL lock interrupt.
    //
    HWREG(SYSCTL_MISC) = SYSCTL_INT_PLL_LOCK;
    1eb0:	f24e 0358 	movw	r3, #57432	; 0xe058
    1eb4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1eb8:	f04f 0240 	mov.w	r2, #64	; 0x40
    1ebc:	601a      	str	r2, [r3, #0]

    //
    // Write the new RCC value.
    //
    if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    1ebe:	68fb      	ldr	r3, [r7, #12]
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	da0c      	bge.n	1ede <SysCtlClockSet+0x1ba>
    {
        HWREG(SYSCTL_RCC2) = ulRCC2;
    1ec4:	f24e 0370 	movw	r3, #57456	; 0xe070
    1ec8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ecc:	68fa      	ldr	r2, [r7, #12]
    1ece:	601a      	str	r2, [r3, #0]
        HWREG(SYSCTL_RCC) = ulRCC;
    1ed0:	f24e 0360 	movw	r3, #57440	; 0xe060
    1ed4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ed8:	693a      	ldr	r2, [r7, #16]
    1eda:	601a      	str	r2, [r3, #0]
    1edc:	e00b      	b.n	1ef6 <SysCtlClockSet+0x1d2>
    }
    else
    {
        HWREG(SYSCTL_RCC) = ulRCC;
    1ede:	f24e 0360 	movw	r3, #57440	; 0xe060
    1ee2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ee6:	693a      	ldr	r2, [r7, #16]
    1ee8:	601a      	str	r2, [r3, #0]
        HWREG(SYSCTL_RCC2) = ulRCC2;
    1eea:	f24e 0370 	movw	r3, #57456	; 0xe070
    1eee:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1ef2:	68fa      	ldr	r2, [r7, #12]
    1ef4:	601a      	str	r2, [r3, #0]

    //
    // Set the requested system divider and disable the appropriate
    // oscillators.  This value is not written immediately.
    //
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    1ef6:	693b      	ldr	r3, [r7, #16]
    1ef8:	f023 63f8 	bic.w	r3, r3, #130023424	; 0x7c00000
    1efc:	f023 0303 	bic.w	r3, r3, #3
    1f00:	613b      	str	r3, [r7, #16]
               SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    1f02:	687a      	ldr	r2, [r7, #4]
    1f04:	f04f 0303 	mov.w	r3, #3
    1f08:	f2c0 73c0 	movt	r3, #1984	; 0x7c0
    1f0c:	4013      	ands	r3, r2
    1f0e:	693a      	ldr	r2, [r7, #16]
    1f10:	4313      	orrs	r3, r2
    1f12:	613b      	str	r3, [r7, #16]
                         SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	f023 53fc 	bic.w	r3, r3, #528482304	; 0x1f800000
    1f1a:	60fb      	str	r3, [r7, #12]
    ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
    1f1c:	687b      	ldr	r3, [r7, #4]
    1f1e:	f003 53fc 	and.w	r3, r3, #528482304	; 0x1f800000
    1f22:	68fa      	ldr	r2, [r7, #12]
    1f24:	4313      	orrs	r3, r2
    1f26:	60fb      	str	r3, [r7, #12]
    if(ulConfig & SYSCTL_RCC2_DIV400)
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d011      	beq.n	1f56 <SysCtlClockSet+0x232>
    {
        ulRCC |= SYSCTL_RCC_USESYSDIV;
    1f32:	693b      	ldr	r3, [r7, #16]
    1f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1f38:	613b      	str	r3, [r7, #16]
        ulRCC2 &= ~(SYSCTL_RCC_USESYSDIV);
    1f3a:	68fb      	ldr	r3, [r7, #12]
    1f3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    1f40:	60fb      	str	r3, [r7, #12]
        ulRCC2 |= ulConfig & (SYSCTL_RCC2_DIV400 | SYSCTL_RCC2_SYSDIV2LSB);
    1f42:	687a      	ldr	r2, [r7, #4]
    1f44:	f04f 0300 	mov.w	r3, #0
    1f48:	f2c4 0340 	movt	r3, #16448	; 0x4040
    1f4c:	4013      	ands	r3, r2
    1f4e:	68fa      	ldr	r2, [r7, #12]
    1f50:	4313      	orrs	r3, r2
    1f52:	60fb      	str	r3, [r7, #12]
    1f54:	e003      	b.n	1f5e <SysCtlClockSet+0x23a>
    }
    else
    {
        ulRCC2 &= ~(SYSCTL_RCC2_DIV400);
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    1f5c:	60fb      	str	r3, [r7, #12]
    }

    //
    // See if the PLL output is being used to clock the system.
    //
    if(!(ulConfig & SYSCTL_RCC_BYPASS))
    1f5e:	687b      	ldr	r3, [r7, #4]
    1f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    1f64:	2b00      	cmp	r3, #0
    1f66:	d11d      	bne.n	1fa4 <SysCtlClockSet+0x280>
    {
        //
        // Wait until the PLL has locked.
        //
        for(ulDelay = 32768; ulDelay > 0; ulDelay--)
    1f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1f6c:	617b      	str	r3, [r7, #20]
    1f6e:	e00c      	b.n	1f8a <SysCtlClockSet+0x266>
        {
            if(HWREG(SYSCTL_RIS) & SYSCTL_INT_PLL_LOCK)
    1f70:	f24e 0350 	movw	r3, #57424	; 0xe050
    1f74:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d107      	bne.n	1f92 <SysCtlClockSet+0x26e>
    if(!(ulConfig & SYSCTL_RCC_BYPASS))
    {
        //
        // Wait until the PLL has locked.
        //
        for(ulDelay = 32768; ulDelay > 0; ulDelay--)
    1f82:	697b      	ldr	r3, [r7, #20]
    1f84:	f103 33ff 	add.w	r3, r3, #4294967295
    1f88:	617b      	str	r3, [r7, #20]
    1f8a:	697b      	ldr	r3, [r7, #20]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d1ef      	bne.n	1f70 <SysCtlClockSet+0x24c>
    1f90:	e000      	b.n	1f94 <SysCtlClockSet+0x270>
        {
            if(HWREG(SYSCTL_RIS) & SYSCTL_INT_PLL_LOCK)
            {
                break;
    1f92:	bf00      	nop
        }

        //
        // Enable use of the PLL.
        //
        ulRCC &= ~(SYSCTL_RCC_BYPASS);
    1f94:	693b      	ldr	r3, [r7, #16]
    1f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1f9a:	613b      	str	r3, [r7, #16]
        ulRCC2 &= ~(SYSCTL_RCC2_BYPASS2);
    1f9c:	68fb      	ldr	r3, [r7, #12]
    1f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1fa2:	60fb      	str	r3, [r7, #12]
    }

    //
    // Write the final RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    1fa4:	f24e 0360 	movw	r3, #57440	; 0xe060
    1fa8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1fac:	693a      	ldr	r2, [r7, #16]
    1fae:	601a      	str	r2, [r3, #0]
    HWREG(SYSCTL_RCC2) = ulRCC2;
    1fb0:	f24e 0370 	movw	r3, #57456	; 0xe070
    1fb4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1fb8:	68fa      	ldr	r2, [r7, #12]
    1fba:	601a      	str	r2, [r3, #0]

    //
    // Delay for a little bit so that the system divider takes effect.
    //
    SysCtlDelay(16);
    1fbc:	f04f 0010 	mov.w	r0, #16
    1fc0:	f7ff feac 	bl	1d1c <SysCtlDelay>
    1fc4:	e000      	b.n	1fc8 <SysCtlClockSet+0x2a4>
    {
        //
        // Return without changing the clocking because the requested
        // configuration can not be achieved.
        //
        return;
    1fc6:	bf00      	nop

    //
    // Delay for a little bit so that the system divider takes effect.
    //
    SysCtlDelay(16);
}
    1fc8:	f107 0718 	add.w	r7, r7, #24
    1fcc:	46bd      	mov	sp, r7
    1fce:	bd80      	pop	{r7, pc}

00001fd0 <SysCtlClockGet>:
//! \return The processor clock rate.
//
//*****************************************************************************
unsigned long
SysCtlClockGet(void)
{
    1fd0:	b480      	push	{r7}
    1fd2:	b087      	sub	sp, #28
    1fd4:	af00      	add	r7, sp, #0
    //
    // Read RCC and RCC2.  For Sandstorm-class devices (which do not have
    // RCC2), the RCC2 read returns 0, indicating that RCC2 is
    // disabled (because the SYSCTL_RCC2_USERCC2 bit is clear).
    //
    ulRCC = HWREG(SYSCTL_RCC);
    1fd6:	f24e 0360 	movw	r3, #57440	; 0xe060
    1fda:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	617b      	str	r3, [r7, #20]
    ulRCC2 = HWREG(SYSCTL_RCC2);
    1fe2:	f24e 0370 	movw	r3, #57456	; 0xe070
    1fe6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    1fea:	681b      	ldr	r3, [r3, #0]
    1fec:	60fb      	str	r3, [r7, #12]

    //
    // Get the base clock rate.
    //
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
    1fee:	68fb      	ldr	r3, [r7, #12]
           (ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) :
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	da03      	bge.n	1ffc <SysCtlClockGet+0x2c>
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
    1ffa:	e002      	b.n	2002 <SysCtlClockGet+0x32>
    1ffc:	697b      	ldr	r3, [r7, #20]
    1ffe:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ulRCC2 = HWREG(SYSCTL_RCC2);

    //
    // Get the base clock rate.
    //
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
    2002:	2b20      	cmp	r3, #32
    2004:	d07c      	beq.n	2100 <SysCtlClockGet+0x130>
    2006:	2b20      	cmp	r3, #32
    2008:	d804      	bhi.n	2014 <SysCtlClockGet+0x44>
    200a:	2b00      	cmp	r3, #0
    200c:	d00c      	beq.n	2028 <SysCtlClockGet+0x58>
    200e:	2b10      	cmp	r3, #16
    2010:	d017      	beq.n	2042 <SysCtlClockGet+0x72>
    2012:	e0e0      	b.n	21d6 <SysCtlClockGet+0x206>
    2014:	2b60      	cmp	r3, #96	; 0x60
    2016:	f000 80d6 	beq.w	21c6 <SysCtlClockGet+0x1f6>
    201a:	2b70      	cmp	r3, #112	; 0x70
    201c:	f000 80d7 	beq.w	21ce <SysCtlClockGet+0x1fe>
    2020:	2b30      	cmp	r3, #48	; 0x30
    2022:	f000 80cc 	beq.w	21be <SysCtlClockGet+0x1ee>
    2026:	e0d6      	b.n	21d6 <SysCtlClockGet+0x206>
        // The main oscillator is the clock source.  Determine its rate from
        // the crystal setting field.
        //
        case SYSCTL_RCC_OSCSRC_MAIN:
        {
            ulClk = g_pulXtals[(ulRCC & SYSCTL_RCC_XTAL_M) >>
    2028:	697b      	ldr	r3, [r7, #20]
    202a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    202e:	ea4f 1293 	mov.w	r2, r3, lsr #6
    2032:	f244 53e4 	movw	r3, #17892	; 0x45e4
    2036:	f2c0 0300 	movt	r3, #0
    203a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    203e:	613b      	str	r3, [r7, #16]
                               SYSCTL_RCC_XTAL_S];
            break;
    2040:	e0cc      	b.n	21dc <SysCtlClockGet+0x20c>
        case SYSCTL_RCC_OSCSRC_INT:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    2042:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2046:	f2c4 030f 	movt	r3, #16399	; 0x400f
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    2050:	2b00      	cmp	r3, #0
    2052:	d00c      	beq.n	206e <SysCtlClockGet+0x9e>
    2054:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2058:	f2c4 030f 	movt	r3, #16399	; 0x400f
    205c:	681a      	ldr	r2, [r3, #0]
    205e:	f04f 0300 	mov.w	r3, #0
    2062:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    2066:	4013      	ands	r3, r2
    2068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    206c:	d105      	bne.n	207a <SysCtlClockGet+0xaa>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
    206e:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
    2072:	f2c0 03e4 	movt	r3, #228	; 0xe4
    2076:	613b      	str	r3, [r7, #16]
    2078:	e041      	b.n	20fe <SysCtlClockGet+0x12e>
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    207a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    207e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2082:	681a      	ldr	r2, [r3, #0]
    2084:	f04f 0300 	mov.w	r3, #0
    2088:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    208c:	4013      	ands	r3, r2
    208e:	f04f 0200 	mov.w	r2, #0
    2092:	f2c1 0201 	movt	r2, #4097	; 0x1001
    2096:	4293      	cmp	r3, r2
    2098:	d10a      	bne.n	20b0 <SysCtlClockGet+0xe0>
    209a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    209e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    20a2:	681b      	ldr	r3, [r3, #0]
    20a4:	ea4f 4303 	mov.w	r3, r3, lsl #16
    20a8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20ac:	2b02      	cmp	r3, #2
    20ae:	d01a      	beq.n	20e6 <SysCtlClockGet+0x116>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    20b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    20b4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    20b8:	681a      	ldr	r2, [r3, #0]
    20ba:	f04f 0300 	mov.w	r3, #0
    20be:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    20c2:	4013      	ands	r3, r2
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    20c4:	f04f 0200 	mov.w	r2, #0
    20c8:	f2c1 0203 	movt	r2, #4099	; 0x1003
    20cc:	4293      	cmp	r3, r2
    20ce:	d110      	bne.n	20f2 <SysCtlClockGet+0x122>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    20d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    20d4:	f2c4 030f 	movt	r3, #16399	; 0x400f
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	ea4f 4303 	mov.w	r3, r3, lsl #16
    20de:	ea4f 4313 	mov.w	r3, r3, lsr #16
    20e2:	2b00      	cmp	r3, #0
    20e4:	d105      	bne.n	20f2 <SysCtlClockGet+0x122>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000;
    20e6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
    20ea:	f2c0 03b7 	movt	r3, #183	; 0xb7
    20ee:	613b      	str	r3, [r7, #16]
    20f0:	e005      	b.n	20fe <SysCtlClockGet+0x12e>
            else
            {
                //
                // The internal oscillator on all other devices is 16 MHz.
                //
                ulClk = 16000000;
    20f2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    20f6:	f2c0 03f4 	movt	r3, #244	; 0xf4
    20fa:	613b      	str	r3, [r7, #16]
            }
            break;
    20fc:	e06e      	b.n	21dc <SysCtlClockGet+0x20c>
    20fe:	e06d      	b.n	21dc <SysCtlClockGet+0x20c>
        case SYSCTL_RCC_OSCSRC_INT4:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    2100:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2104:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    210e:	2b00      	cmp	r3, #0
    2110:	d00c      	beq.n	212c <SysCtlClockGet+0x15c>
    2112:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2116:	f2c4 030f 	movt	r3, #16399	; 0x400f
    211a:	681a      	ldr	r2, [r3, #0]
    211c:	f04f 0300 	mov.w	r3, #0
    2120:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    2124:	4013      	ands	r3, r2
    2126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    212a:	d105      	bne.n	2138 <SysCtlClockGet+0x168>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
    212c:	f643 0370 	movw	r3, #14448	; 0x3870
    2130:	f2c0 0339 	movt	r3, #57	; 0x39
    2134:	613b      	str	r3, [r7, #16]
    2136:	e041      	b.n	21bc <SysCtlClockGet+0x1ec>
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    2138:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    213c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2140:	681a      	ldr	r2, [r3, #0]
    2142:	f04f 0300 	mov.w	r3, #0
    2146:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    214a:	4013      	ands	r3, r2
    214c:	f04f 0200 	mov.w	r2, #0
    2150:	f2c1 0201 	movt	r2, #4097	; 0x1001
    2154:	4293      	cmp	r3, r2
    2156:	d10a      	bne.n	216e <SysCtlClockGet+0x19e>
    2158:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    215c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2166:	ea4f 4313 	mov.w	r3, r3, lsr #16
    216a:	2b02      	cmp	r3, #2
    216c:	d01a      	beq.n	21a4 <SysCtlClockGet+0x1d4>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    216e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2172:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2176:	681a      	ldr	r2, [r3, #0]
    2178:	f04f 0300 	mov.w	r3, #0
    217c:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    2180:	4013      	ands	r3, r2
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    2182:	f04f 0200 	mov.w	r2, #0
    2186:	f2c1 0203 	movt	r2, #4099	; 0x1003
    218a:	4293      	cmp	r3, r2
    218c:	d110      	bne.n	21b0 <SysCtlClockGet+0x1e0>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    218e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2192:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	ea4f 4303 	mov.w	r3, r3, lsl #16
    219c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    21a0:	2b00      	cmp	r3, #0
    21a2:	d105      	bne.n	21b0 <SysCtlClockGet+0x1e0>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000 / 4;
    21a4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    21a8:	f2c0 032d 	movt	r3, #45	; 0x2d
    21ac:	613b      	str	r3, [r7, #16]
    21ae:	e005      	b.n	21bc <SysCtlClockGet+0x1ec>
            else
            {
                //
                // The internal oscillator on a Tempest-class device is 16 MHz.
                //
                ulClk = 16000000 / 4;
    21b0:	f44f 6310 	mov.w	r3, #2304	; 0x900
    21b4:	f2c0 033d 	movt	r3, #61	; 0x3d
    21b8:	613b      	str	r3, [r7, #16]
            }
            break;
    21ba:	e00f      	b.n	21dc <SysCtlClockGet+0x20c>
    21bc:	e00e      	b.n	21dc <SysCtlClockGet+0x20c>
        case SYSCTL_RCC_OSCSRC_30:
        {
            //
            // The internal 30-KHz oscillator has an accuracy of +/- 30%.
            //
            ulClk = 30000;
    21be:	f247 5330 	movw	r3, #30000	; 0x7530
    21c2:	613b      	str	r3, [r7, #16]
            break;
    21c4:	e00a      	b.n	21dc <SysCtlClockGet+0x20c>
        //
        // The 4.194304-MHz clock from the hibernate module is the clock source.
        //
        case SYSCTL_RCC2_OSCSRC2_419:
        {
            ulClk = 4194304;
    21c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    21ca:	613b      	str	r3, [r7, #16]
            break;
    21cc:	e006      	b.n	21dc <SysCtlClockGet+0x20c>
        //
        // The 32.768-KHz clock from the hibernate module is the source clock.
        //
        case SYSCTL_RCC2_OSCSRC2_32:
        {
            ulClk = 32768;
    21ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    21d2:	613b      	str	r3, [r7, #16]
            break;
    21d4:	e002      	b.n	21dc <SysCtlClockGet+0x20c>
        // An unknown setting, so return a zero clock (that is, an unknown
        // clock rate).
        //
        default:
        {
            return(0);
    21d6:	f04f 0300 	mov.w	r3, #0
    21da:	e0f5      	b.n	23c8 <SysCtlClockGet+0x3f8>
    }

    //
    // See if the PLL is being used.
    //
    if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
    21dc:	68fb      	ldr	r3, [r7, #12]
    21de:	2b00      	cmp	r3, #0
    21e0:	da04      	bge.n	21ec <SysCtlClockGet+0x21c>
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    21e8:	2b00      	cmp	r3, #0
    21ea:	d009      	beq.n	2200 <SysCtlClockGet+0x230>
       (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
    21ec:	68fb      	ldr	r3, [r7, #12]
    }

    //
    // See if the PLL is being used.
    //
    if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
    21ee:	2b00      	cmp	r3, #0
    21f0:	f2c0 80a7 	blt.w	2342 <SysCtlClockGet+0x372>
       (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
    21f4:	697b      	ldr	r3, [r7, #20]
    21f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    21fa:	2b00      	cmp	r3, #0
    21fc:	f040 80a1 	bne.w	2342 <SysCtlClockGet+0x372>
    {
        //
        // See if this is a Blizzard-class device.
        //
        if(CLASS_IS_BLIZZARD)
    2200:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    2204:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2208:	681a      	ldr	r2, [r3, #0]
    220a:	f04f 0300 	mov.w	r3, #0
    220e:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    2212:	4013      	ands	r3, r2
    2214:	f04f 0200 	mov.w	r2, #0
    2218:	f2c1 0205 	movt	r2, #4101	; 0x1005
    221c:	4293      	cmp	r3, r2
    221e:	d137      	bne.n	2290 <SysCtlClockGet+0x2c0>
        {
            //
            // Read the two PLL frequency registers.  The formula for a
            // Blizzard-class device is "(xtal * m) / ((q + 1) * (n + 1))".
            //
            ulPLL = HWREG(SYSCTL_PLLFREQ0);
    2220:	f24e 1360 	movw	r3, #57696	; 0xe160
    2224:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2228:	681b      	ldr	r3, [r3, #0]
    222a:	60bb      	str	r3, [r7, #8]
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);
    222c:	f24e 1364 	movw	r3, #57700	; 0xe164
    2230:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	607b      	str	r3, [r7, #4]

            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    223e:	ea4f 2313 	mov.w	r3, r3, lsr #8
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
                      (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
                        SYSCTL_PLLFREQ1_N_S) + 1) * 2);
    2242:	f103 0301 	add.w	r3, r3, #1
            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
                      (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
    2246:	687a      	ldr	r2, [r7, #4]
    2248:	f002 021f 	and.w	r2, r2, #31
                        SYSCTL_PLLFREQ1_N_S) + 1) * 2);
    224c:	f102 0201 	add.w	r2, r2, #1
    2250:	fb02 f303 	mul.w	r3, r2, r3
    2254:	ea4f 0343 	mov.w	r3, r3, lsl #1
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);

            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
    2258:	693a      	ldr	r2, [r7, #16]
    225a:	fbb2 f3f3 	udiv	r3, r2, r3
    225e:	613b      	str	r3, [r7, #16]

            //
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
    2260:	68bb      	ldr	r3, [r7, #8]
    2262:	ea4f 5383 	mov.w	r3, r3, lsl #22
    2266:	ea4f 5393 	mov.w	r3, r3, lsr #22
    226a:	693a      	ldr	r2, [r7, #16]
    226c:	fb02 f203 	mul.w	r2, r2, r3
                               SYSCTL_PLLFREQ0_MINT_S)) +
                     ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MFRAC_M) >>
    2270:	68b9      	ldr	r1, [r7, #8]
    2272:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
    2276:	f2c0 030f 	movt	r3, #15
    227a:	400b      	ands	r3, r1
    227c:	ea4f 2393 	mov.w	r3, r3, lsr #10
    2280:	6939      	ldr	r1, [r7, #16]
    2282:	fb01 f303 	mul.w	r3, r1, r3
                                SYSCTL_PLLFREQ0_MFRAC_S)) >> 10));
    2286:	ea4f 2393 	mov.w	r3, r3, lsr #10

            //
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
    228a:	18d3      	adds	r3, r2, r3
    228c:	613b      	str	r3, [r7, #16]
    228e:	e054      	b.n	233a <SysCtlClockGet+0x36a>
        else
        {
            //
            // Get the PLL configuration.
            //
            ulPLL = HWREG(SYSCTL_PLLCFG);
    2290:	f24e 0364 	movw	r3, #57444	; 0xe064
    2294:	f2c4 030f 	movt	r3, #16399	; 0x400f
    2298:	681b      	ldr	r3, [r3, #0]
    229a:	60bb      	str	r3, [r7, #8]

            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    229c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    22a0:	f2c4 030f 	movt	r3, #16399	; 0x400f
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    22aa:	2b00      	cmp	r3, #0
    22ac:	d00c      	beq.n	22c8 <SysCtlClockGet+0x2f8>
    22ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
    22b2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    22b6:	681a      	ldr	r2, [r3, #0]
    22b8:	f04f 0300 	mov.w	r3, #0
    22bc:	f2c7 03ff 	movt	r3, #28927	; 0x70ff
    22c0:	4013      	ands	r3, r2
    22c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    22c6:	d113      	bne.n	22f0 <SysCtlClockGet+0x320>
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
    22c8:	68ba      	ldr	r2, [r7, #8]
    22ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
    22ce:	4013      	ands	r3, r2
    22d0:	ea4f 1353 	mov.w	r3, r3, lsr #5
                                    SYSCTL_PLLCFG_F_S) + 2)) /
    22d4:	f103 0302 	add.w	r3, r3, #2
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
    22d8:	693a      	ldr	r2, [r7, #16]
    22da:	fb02 f203 	mul.w	r2, r2, r3
                                    SYSCTL_PLLCFG_F_S) + 2)) /
                         (((ulPLL & SYSCTL_PLLCFG_R_M) >>
    22de:	68bb      	ldr	r3, [r7, #8]
    22e0:	f003 031f 	and.w	r3, r3, #31
                           SYSCTL_PLLCFG_R_S) + 2));
    22e4:	f103 0302 	add.w	r3, r3, #2
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
    22e8:	fbb2 f3f3 	udiv	r3, r2, r3
    22ec:	613b      	str	r3, [r7, #16]
    22ee:	e012      	b.n	2316 <SysCtlClockGet+0x346>
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Fury-class device is
                // "(xtal * f) / ((r + 1) * 2)".
                //
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
    22f0:	68ba      	ldr	r2, [r7, #8]
    22f2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
    22f6:	4013      	ands	r3, r2
    22f8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    22fc:	693a      	ldr	r2, [r7, #16]
    22fe:	fb02 f203 	mul.w	r2, r2, r3
                                   SYSCTL_PLLCFG_F_S)) /
                         ((((ulPLL & SYSCTL_PLLCFG_R_M) >>
    2302:	68bb      	ldr	r3, [r7, #8]
    2304:	f003 031f 	and.w	r3, r3, #31
                            SYSCTL_PLLCFG_R_S) + 1) * 2));
    2308:	f103 0301 	add.w	r3, r3, #1
    230c:	ea4f 0343 	mov.w	r3, r3, lsl #1
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Fury-class device is
                // "(xtal * f) / ((r + 1) * 2)".
                //
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
    2310:	fbb2 f3f3 	udiv	r3, r2, r3
    2314:	613b      	str	r3, [r7, #16]
            }

            //
            // See if the optional output divide by 2 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_2)
    2316:	68bb      	ldr	r3, [r7, #8]
    2318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    231c:	2b00      	cmp	r3, #0
    231e:	d003      	beq.n	2328 <SysCtlClockGet+0x358>
            {
                ulClk /= 2;
    2320:	693b      	ldr	r3, [r7, #16]
    2322:	ea4f 0353 	mov.w	r3, r3, lsr #1
    2326:	613b      	str	r3, [r7, #16]
            }

            //
            // See if the optional output divide by 4 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_4)
    2328:	68bb      	ldr	r3, [r7, #8]
    232a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    232e:	2b00      	cmp	r3, #0
    2330:	d003      	beq.n	233a <SysCtlClockGet+0x36a>
            {
                ulClk /= 4;
    2332:	693b      	ldr	r3, [r7, #16]
    2334:	ea4f 0393 	mov.w	r3, r3, lsr #2
    2338:	613b      	str	r3, [r7, #16]

        //
        // Force the system divider to be enabled.  It is always used when
        // using the PLL, but in some cases it does not read as being enabled.
        //
        ulRCC |= SYSCTL_RCC_USESYSDIV;
    233a:	697b      	ldr	r3, [r7, #20]
    233c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2340:	617b      	str	r3, [r7, #20]
    }

    //
    // See if the system divider is being used.
    //
    if(ulRCC & SYSCTL_RCC_USESYSDIV)
    2342:	697b      	ldr	r3, [r7, #20]
    2344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    2348:	2b00      	cmp	r3, #0
    234a:	d03c      	beq.n	23c6 <SysCtlClockGet+0x3f6>
    {
        //
        // Adjust the clock rate by the system clock divider.
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	2b00      	cmp	r3, #0
    2350:	da2e      	bge.n	23b0 <SysCtlClockGet+0x3e0>
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
    2352:	68fb      	ldr	r3, [r7, #12]
    2354:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    2358:	2b00      	cmp	r3, #0
    235a:	d01d      	beq.n	2398 <SysCtlClockGet+0x3c8>
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    235c:	68fb      	ldr	r3, [r7, #12]
        //
        // Adjust the clock rate by the system clock divider.
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
    235e:	2b00      	cmp	r3, #0
    2360:	da04      	bge.n	236c <SysCtlClockGet+0x39c>
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
        // Adjust the clock rate by the system clock divider.
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    2368:	2b00      	cmp	r3, #0
    236a:	d007      	beq.n	237c <SysCtlClockGet+0x3ac>
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    236c:	68fb      	ldr	r3, [r7, #12]
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
    236e:	2b00      	cmp	r3, #0
    2370:	db12      	blt.n	2398 <SysCtlClockGet+0x3c8>
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC & SYSCTL_RCC_BYPASS))))
    2372:	697b      	ldr	r3, [r7, #20]
    2374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    2378:	2b00      	cmp	r3, #0
    237a:	d10d      	bne.n	2398 <SysCtlClockGet+0x3c8>
                 !(ulRCC & SYSCTL_RCC_BYPASS))))

            {
                ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
    237c:	693b      	ldr	r3, [r7, #16]
    237e:	ea4f 0243 	mov.w	r2, r3, lsl #1
    2382:	68fb      	ldr	r3, [r7, #12]
    2384:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
    2388:	ea4f 5393 	mov.w	r3, r3, lsr #22
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
    238c:	f103 0301 	add.w	r3, r3, #1
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC & SYSCTL_RCC_BYPASS))))

            {
                ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
    2390:	fbb2 f3f3 	udiv	r3, r2, r3
    2394:	613b      	str	r3, [r7, #16]
    2396:	e016      	b.n	23c6 <SysCtlClockGet+0x3f6>
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
            }
            else
            {
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
    2398:	68fb      	ldr	r3, [r7, #12]
    239a:	f003 53fc 	and.w	r3, r3, #528482304	; 0x1f800000
    239e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
                           SYSCTL_RCC2_SYSDIV2_S) + 1);
    23a2:	f103 0301 	add.w	r3, r3, #1
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
            }
            else
            {
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
    23a6:	693a      	ldr	r2, [r7, #16]
    23a8:	fbb2 f3f3 	udiv	r3, r2, r3
    23ac:	613b      	str	r3, [r7, #16]
    23ae:	e00a      	b.n	23c6 <SysCtlClockGet+0x3f6>
                           SYSCTL_RCC2_SYSDIV2_S) + 1);
            }
        }
        else
        {
            ulClk /= (((ulRCC & SYSCTL_RCC_SYSDIV_M) >> SYSCTL_RCC_SYSDIV_S) +
    23b0:	697b      	ldr	r3, [r7, #20]
    23b2:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
    23b6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    23ba:	f103 0301 	add.w	r3, r3, #1
    23be:	693a      	ldr	r2, [r7, #16]
    23c0:	fbb2 f3f3 	udiv	r3, r2, r3
    23c4:	613b      	str	r3, [r7, #16]
    }

    //
    // Return the computed clock rate.
    //
    return(ulClk);
    23c6:	693b      	ldr	r3, [r7, #16]
}
    23c8:	4618      	mov	r0, r3
    23ca:	f107 071c 	add.w	r7, r7, #28
    23ce:	46bd      	mov	sp, r7
    23d0:	bc80      	pop	{r7}
    23d2:	4770      	bx	lr

000023d4 <main>:

long num1,y=0,num2,num3,num4,num5,num6,num7,num8,j=0,sum1=0,sum2=0,sum3=0,sum4=0,sum5=0,sum6=0,sum7=0,sum8=0;


int main(void)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b084      	sub	sp, #16
    23d8:	af02      	add	r7, sp, #8

        unsigned long temp[1];
        /*Set the clocking to directly run from the crystal at 50MHz*/
        SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_8MHZ);
    23da:	f44f 7060 	mov.w	r0, #896	; 0x380
    23de:	f2c0 10c0 	movt	r0, #448	; 0x1c0
    23e2:	f7ff fc9f 	bl	1d24 <SysCtlClockSet>

        //Enabling Clock of ADC
        SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    23e6:	f04f 0001 	mov.w	r0, #1
    23ea:	f2c0 0010 	movt	r0, #16
    23ee:	f7ff fc3b 	bl	1c68 <SysCtlPeripheralEnable>

        /* Set the clock for the GPIO Port A,B,C,D,E */
		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    23f2:	f04f 0001 	mov.w	r0, #1
    23f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    23fa:	f7ff fc35 	bl	1c68 <SysCtlPeripheralEnable>
		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    23fe:	f04f 0002 	mov.w	r0, #2
    2402:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2406:	f7ff fc2f 	bl	1c68 <SysCtlPeripheralEnable>
		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
    240a:	f04f 0004 	mov.w	r0, #4
    240e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2412:	f7ff fc29 	bl	1c68 <SysCtlPeripheralEnable>
		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    2416:	f04f 0008 	mov.w	r0, #8
    241a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    241e:	f7ff fc23 	bl	1c68 <SysCtlPeripheralEnable>
		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    2422:	f04f 0010 	mov.w	r0, #16
    2426:	f2c2 0000 	movt	r0, #8192	; 0x2000
    242a:	f7ff fc1d 	bl	1c68 <SysCtlPeripheralEnable>

        //Setting the direction of Port pins
		GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
    242e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2432:	f04f 013c 	mov.w	r1, #60	; 0x3c
    2436:	f7ff fbf5 	bl	1c24 <GPIOPinTypeGPIOOutput>
		GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
    243a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    243e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2442:	f04f 01ff 	mov.w	r1, #255	; 0xff
    2446:	f7ff fbed 	bl	1c24 <GPIOPinTypeGPIOOutput>
		GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_4);
    244a:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
    244e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2452:	f04f 0110 	mov.w	r1, #16
    2456:	f7ff fbe5 	bl	1c24 <GPIOPinTypeGPIOOutput>
		GPIOPinTypeGPIOOutput(GPIO_PORTD_BASE, GPIO_PIN_0);
    245a:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
    245e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    2462:	f04f 0101 	mov.w	r1, #1
    2466:	f7ff fbdd 	bl	1c24 <GPIOPinTypeGPIOOutput>

		//Switch S3 as input
		GPIOPinTypeGPIOInput(GPIO_PORTE_BASE, GPIO_PIN_0);
    246a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    246e:	f2c4 0002 	movt	r0, #16386	; 0x4002
    2472:	f04f 0101 	mov.w	r1, #1
    2476:	f7ff fbbb 	bl	1bf0 <GPIOPinTypeGPIOInput>


		/*Configure GPIO pad with internal pull-up enabled*/
		GPIOPadConfigSet(GPIO_PORTE_BASE, GPIO_PIN_0, GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
    247a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    247e:	f2c4 0002 	movt	r0, #16386	; 0x4002
    2482:	f04f 0101 	mov.w	r1, #1
    2486:	f04f 0201 	mov.w	r2, #1
    248a:	f04f 030a 	mov.w	r3, #10
    248e:	f7ff fa95 	bl	19bc <GPIOPadConfigSet>

        IntMasterEnable();
    2492:	f7ff fbe1 	bl	1c58 <IntMasterEnable>


        /*Configure ADC Peripheral*/
        ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    2496:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    249a:	f2c4 0003 	movt	r0, #16387	; 0x4003
    249e:	f04f 0103 	mov.w	r1, #3
    24a2:	f04f 0200 	mov.w	r2, #0
    24a6:	f04f 0300 	mov.w	r3, #0
    24aa:	f7ff f907 	bl	16bc <ADCSequenceConfigure>
        /*Configure ADC Sequence*/
        ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH3 | ADC_CTL_IE | ADC_CTL_END);
    24ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    24b2:	f2c4 0003 	movt	r0, #16387	; 0x4003
    24b6:	f04f 0103 	mov.w	r1, #3
    24ba:	f04f 0200 	mov.w	r2, #0
    24be:	f04f 0363 	mov.w	r3, #99	; 0x63
    24c2:	f7ff f939 	bl	1738 <ADCSequenceStepConfigure>
        /*Enable ADC sequence*/
        ADCSequenceEnable(ADC0_BASE, 3);
    24c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    24ca:	f2c4 0003 	movt	r0, #16387	; 0x4003
    24ce:	f04f 0103 	mov.w	r1, #3
    24d2:	f7ff f8df 	bl	1694 <ADCSequenceEnable>
        /*Clear ADC Interrupt*/
        ADCIntClear(ADC0_BASE, 3);
    24d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    24da:	f2c4 0003 	movt	r0, #16387	; 0x4003
    24de:	f04f 0103 	mov.w	r1, #3
    24e2:	f7ff f8c3 	bl	166c <ADCIntClear>

	        TSLCDRst();
    24e6:	f7fe fe8d 	bl	1204 <TSLCDRst>
		    TSLCDInit();
    24ea:	f7fe feab 	bl	1244 <TSLCDInit>
		    setBitBL;
    24ee:	f246 33fc 	movw	r3, #25596	; 0x63fc
    24f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    24f6:	f246 32fc 	movw	r2, #25596	; 0x63fc
    24fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
    24fe:	6812      	ldr	r2, [r2, #0]
    2500:	f042 0210 	orr.w	r2, r2, #16
    2504:	601a      	str	r2, [r3, #0]
		    TSLCDFillRect(0,TS_SIZE_X-1,0,TS_SIZE_Y-1,TS_COL_BLUE,TS_MODE_NORMAL);
    2506:	f44f 4378 	mov.w	r3, #63488	; 0xf800
    250a:	9300      	str	r3, [sp, #0]
    250c:	f04f 0300 	mov.w	r3, #0
    2510:	9301      	str	r3, [sp, #4]
    2512:	f04f 0000 	mov.w	r0, #0
    2516:	f240 113f 	movw	r1, #319	; 0x13f
    251a:	f04f 0200 	mov.w	r2, #0
    251e:	f04f 03ef 	mov.w	r3, #239	; 0xef
    2522:	f7fe fa4b 	bl	9bc <TSLCDFillRect>
		    TSLCDSetFontColor(TS_COL_WHITE);
    2526:	f64f 70ff 	movw	r0, #65535	; 0xffff
    252a:	f7fe fb17 	bl	b5c <TSLCDSetFontColor>
		    TSLCDPrintStr(1,0,"        AUDIO SPECTRUM ANALYZER  ",TS_MODE_NORMAL);
    252e:	f04f 0001 	mov.w	r0, #1
    2532:	f04f 0100 	mov.w	r1, #0
    2536:	f646 7278 	movw	r2, #28536	; 0x6f78
    253a:	f2c0 0200 	movt	r2, #0
    253e:	f04f 0300 	mov.w	r3, #0
    2542:	f7fe f9fd 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(2,0,"           DEVELOPED AT CEDT  ",TS_MODE_NORMAL);
    2546:	f04f 0002 	mov.w	r0, #2
    254a:	f04f 0100 	mov.w	r1, #0
    254e:	f646 729c 	movw	r2, #28572	; 0x6f9c
    2552:	f2c0 0200 	movt	r2, #0
    2556:	f04f 0300 	mov.w	r3, #0
    255a:	f7fe f9f1 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(5,2,"A.  0-300Hz",TS_MODE_NORMAL);
    255e:	f04f 0005 	mov.w	r0, #5
    2562:	f04f 0102 	mov.w	r1, #2
    2566:	f646 72bc 	movw	r2, #28604	; 0x6fbc
    256a:	f2c0 0200 	movt	r2, #0
    256e:	f04f 0300 	mov.w	r3, #0
    2572:	f7fe f9e5 	bl	940 <TSLCDPrintStr>
  		    TSLCDPrintStr(6,2,"B.  300-700Hz",TS_MODE_NORMAL);
    2576:	f04f 0006 	mov.w	r0, #6
    257a:	f04f 0102 	mov.w	r1, #2
    257e:	f646 72c8 	movw	r2, #28616	; 0x6fc8
    2582:	f2c0 0200 	movt	r2, #0
    2586:	f04f 0300 	mov.w	r3, #0
    258a:	f7fe f9d9 	bl	940 <TSLCDPrintStr>
  		    TSLCDPrintStr(7,2,"C.  700-1400Hz",TS_MODE_NORMAL);
    258e:	f04f 0007 	mov.w	r0, #7
    2592:	f04f 0102 	mov.w	r1, #2
    2596:	f646 72d8 	movw	r2, #28632	; 0x6fd8
    259a:	f2c0 0200 	movt	r2, #0
    259e:	f04f 0300 	mov.w	r3, #0
    25a2:	f7fe f9cd 	bl	940 <TSLCDPrintStr>
   		    TSLCDPrintStr(8,2,"D.  1400-2100Hz",TS_MODE_NORMAL);
    25a6:	f04f 0008 	mov.w	r0, #8
    25aa:	f04f 0102 	mov.w	r1, #2
    25ae:	f646 72e8 	movw	r2, #28648	; 0x6fe8
    25b2:	f2c0 0200 	movt	r2, #0
    25b6:	f04f 0300 	mov.w	r3, #0
    25ba:	f7fe f9c1 	bl	940 <TSLCDPrintStr>
   		    TSLCDPrintStr(9,2,"E.  2100-3500Hz",TS_MODE_NORMAL);
    25be:	f04f 0009 	mov.w	r0, #9
    25c2:	f04f 0102 	mov.w	r1, #2
    25c6:	f646 72f8 	movw	r2, #28664	; 0x6ff8
    25ca:	f2c0 0200 	movt	r2, #0
    25ce:	f04f 0300 	mov.w	r3, #0
    25d2:	f7fe f9b5 	bl	940 <TSLCDPrintStr>
   		    TSLCDPrintStr(10,2,"F.  3500-4900Hz",TS_MODE_NORMAL);
    25d6:	f04f 000a 	mov.w	r0, #10
    25da:	f04f 0102 	mov.w	r1, #2
    25de:	f247 0208 	movw	r2, #28680	; 0x7008
    25e2:	f2c0 0200 	movt	r2, #0
    25e6:	f04f 0300 	mov.w	r3, #0
    25ea:	f7fe f9a9 	bl	940 <TSLCDPrintStr>
   		    TSLCDPrintStr(11,2,"G.  4900-6300Hz",TS_MODE_NORMAL);
    25ee:	f04f 000b 	mov.w	r0, #11
    25f2:	f04f 0102 	mov.w	r1, #2
    25f6:	f247 0218 	movw	r2, #28696	; 0x7018
    25fa:	f2c0 0200 	movt	r2, #0
    25fe:	f04f 0300 	mov.w	r3, #0
    2602:	f7fe f99d 	bl	940 <TSLCDPrintStr>
   		    TSLCDPrintStr(12,2,"H.  6300-9800Hz",TS_MODE_NORMAL);
    2606:	f04f 000c 	mov.w	r0, #12
    260a:	f04f 0102 	mov.w	r1, #2
    260e:	f247 0228 	movw	r2, #28712	; 0x7028
    2612:	f2c0 0200 	movt	r2, #0
    2616:	f04f 0300 	mov.w	r3, #0
    261a:	f7fe f991 	bl	940 <TSLCDPrintStr>

   		    while(g_count!=0)
    261e:	e054      	b.n	26ca <main+0x2f6>
		    {
		    	TSLCDFillRect(0,TS_SIZE_X-1,0,16,TS_COL_BLUE,TS_MODE_NORMAL);
    2620:	f44f 4378 	mov.w	r3, #63488	; 0xf800
    2624:	9300      	str	r3, [sp, #0]
    2626:	f04f 0300 	mov.w	r3, #0
    262a:	9301      	str	r3, [sp, #4]
    262c:	f04f 0000 	mov.w	r0, #0
    2630:	f240 113f 	movw	r1, #319	; 0x13f
    2634:	f04f 0200 	mov.w	r2, #0
    2638:	f04f 0310 	mov.w	r3, #16
    263c:	f7fe f9be 	bl	9bc <TSLCDFillRect>
		    	SysCtlDelay(SysCtlClockGet()/50);
    2640:	f7ff fcc6 	bl	1fd0 <SysCtlClockGet>
    2644:	4602      	mov	r2, r0
    2646:	f248 531f 	movw	r3, #34079	; 0x851f
    264a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    264e:	fba3 1302 	umull	r1, r3, r3, r2
    2652:	ea4f 1313 	mov.w	r3, r3, lsr #4
    2656:	4618      	mov	r0, r3
    2658:	f7ff fb60 	bl	1d1c <SysCtlDelay>
		    	TSLCDPrintStr(14,8,"Press S2 to continue..",TS_MODE_NORMAL);
    265c:	f04f 000e 	mov.w	r0, #14
    2660:	f04f 0108 	mov.w	r1, #8
    2664:	f247 0238 	movw	r2, #28728	; 0x7038
    2668:	f2c0 0200 	movt	r2, #0
    266c:	f04f 0300 	mov.w	r3, #0
    2670:	f7fe f966 	bl	940 <TSLCDPrintStr>
		    	SysCtlDelay(SysCtlClockGet()/50);
    2674:	f7ff fcac 	bl	1fd0 <SysCtlClockGet>
    2678:	4602      	mov	r2, r0
    267a:	f248 531f 	movw	r3, #34079	; 0x851f
    267e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    2682:	fba3 1302 	umull	r1, r3, r3, r2
    2686:	ea4f 1313 	mov.w	r3, r3, lsr #4
    268a:	4618      	mov	r0, r3
    268c:	f7ff fb46 	bl	1d1c <SysCtlDelay>
		    	s1 = GPIOPinRead(GPIO_PORTE_BASE, GPIO_PIN_0);
    2690:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    2694:	f2c4 0002 	movt	r0, #16386	; 0x4002
    2698:	f04f 0101 	mov.w	r1, #1
    269c:	f7ff fa94 	bl	1bc8 <GPIOPinRead>
    26a0:	4603      	mov	r3, r0
    26a2:	461a      	mov	r2, r3
    26a4:	f241 53b0 	movw	r3, #5552	; 0x15b0
    26a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ac:	601a      	str	r2, [r3, #0]

		    	if(s1==0)
    26ae:	f241 53b0 	movw	r3, #5552	; 0x15b0
    26b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d106      	bne.n	26ca <main+0x2f6>
		    	{
		    	//Make High
		    	g_count=0;
    26bc:	f640 5360 	movw	r3, #3424	; 0xd60
    26c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c4:	f04f 0200 	mov.w	r2, #0
    26c8:	601a      	str	r2, [r3, #0]
   		    TSLCDPrintStr(9,2,"E.  2100-3500Hz",TS_MODE_NORMAL);
   		    TSLCDPrintStr(10,2,"F.  3500-4900Hz",TS_MODE_NORMAL);
   		    TSLCDPrintStr(11,2,"G.  4900-6300Hz",TS_MODE_NORMAL);
   		    TSLCDPrintStr(12,2,"H.  6300-9800Hz",TS_MODE_NORMAL);

   		    while(g_count!=0)
    26ca:	f640 5360 	movw	r3, #3424	; 0xd60
    26ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d1a3      	bne.n	2620 <main+0x24c>
		    	//Make High
		    	g_count=0;
		    	}
		    }

		    TSLCDFillRect(0,TS_SIZE_Y-1,0,160,TS_COL_BLUE,TS_MODE_NORMAL);
    26d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
    26dc:	9300      	str	r3, [sp, #0]
    26de:	f04f 0300 	mov.w	r3, #0
    26e2:	9301      	str	r3, [sp, #4]
    26e4:	f04f 0000 	mov.w	r0, #0
    26e8:	f04f 01ef 	mov.w	r1, #239	; 0xef
    26ec:	f04f 0200 	mov.w	r2, #0
    26f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    26f4:	f7fe f962 	bl	9bc <TSLCDFillRect>
		    TSLCDPrintStr(13,6,"A",TS_MODE_NORMAL);
    26f8:	f04f 000d 	mov.w	r0, #13
    26fc:	f04f 0106 	mov.w	r1, #6
    2700:	f247 0250 	movw	r2, #28752	; 0x7050
    2704:	f2c0 0200 	movt	r2, #0
    2708:	f04f 0300 	mov.w	r3, #0
    270c:	f7fe f918 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,10,"B",TS_MODE_NORMAL);
    2710:	f04f 000d 	mov.w	r0, #13
    2714:	f04f 010a 	mov.w	r1, #10
    2718:	f247 0254 	movw	r2, #28756	; 0x7054
    271c:	f2c0 0200 	movt	r2, #0
    2720:	f04f 0300 	mov.w	r3, #0
    2724:	f7fe f90c 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,14,"C",TS_MODE_NORMAL);
    2728:	f04f 000d 	mov.w	r0, #13
    272c:	f04f 010e 	mov.w	r1, #14
    2730:	f247 0258 	movw	r2, #28760	; 0x7058
    2734:	f2c0 0200 	movt	r2, #0
    2738:	f04f 0300 	mov.w	r3, #0
    273c:	f7fe f900 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,18,"D",TS_MODE_NORMAL);
    2740:	f04f 000d 	mov.w	r0, #13
    2744:	f04f 0112 	mov.w	r1, #18
    2748:	f247 025c 	movw	r2, #28764	; 0x705c
    274c:	f2c0 0200 	movt	r2, #0
    2750:	f04f 0300 	mov.w	r3, #0
    2754:	f7fe f8f4 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,22,"E",TS_MODE_NORMAL);
    2758:	f04f 000d 	mov.w	r0, #13
    275c:	f04f 0116 	mov.w	r1, #22
    2760:	f247 0260 	movw	r2, #28768	; 0x7060
    2764:	f2c0 0200 	movt	r2, #0
    2768:	f04f 0300 	mov.w	r3, #0
    276c:	f7fe f8e8 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,26,"F",TS_MODE_NORMAL);
    2770:	f04f 000d 	mov.w	r0, #13
    2774:	f04f 011a 	mov.w	r1, #26
    2778:	f247 0264 	movw	r2, #28772	; 0x7064
    277c:	f2c0 0200 	movt	r2, #0
    2780:	f04f 0300 	mov.w	r3, #0
    2784:	f7fe f8dc 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,30,"G",TS_MODE_NORMAL);
    2788:	f04f 000d 	mov.w	r0, #13
    278c:	f04f 011e 	mov.w	r1, #30
    2790:	f247 0268 	movw	r2, #28776	; 0x7068
    2794:	f2c0 0200 	movt	r2, #0
    2798:	f04f 0300 	mov.w	r3, #0
    279c:	f7fe f8d0 	bl	940 <TSLCDPrintStr>
		    TSLCDPrintStr(13,34,"H",TS_MODE_NORMAL);
    27a0:	f04f 000d 	mov.w	r0, #13
    27a4:	f04f 0122 	mov.w	r1, #34	; 0x22
    27a8:	f247 026c 	movw	r2, #28780	; 0x706c
    27ac:	f2c0 0200 	movt	r2, #0
    27b0:	f04f 0300 	mov.w	r3, #0
    27b4:	f7fe f8c4 	bl	940 <TSLCDPrintStr>


while(1)
{

	for(i=0;i<10248;i++)
    27b8:	f241 53bc 	movw	r3, #5564	; 0x15bc
    27bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c0:	f04f 0200 	mov.w	r2, #0
    27c4:	601a      	str	r2, [r3, #0]
    27c6:	e061      	b.n	288c <main+0x4b8>
			  {
	             if(i%24 == 0)
    27c8:	f241 53bc 	movw	r3, #5564	; 0x15bc
    27cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d0:	6819      	ldr	r1, [r3, #0]
    27d2:	f64a 23ab 	movw	r3, #43691	; 0xaaab
    27d6:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
    27da:	fba3 2301 	umull	r2, r3, r3, r1
    27de:	ea4f 1213 	mov.w	r2, r3, lsr #4
    27e2:	4613      	mov	r3, r2
    27e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    27e8:	189b      	adds	r3, r3, r2
    27ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    27ee:	1aca      	subs	r2, r1, r3
    27f0:	2a00      	cmp	r2, #0
    27f2:	d13f      	bne.n	2874 <main+0x4a0>
	             {
	            	ADCProcessorTrigger(ADC0_BASE, 3);
    27f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    27f8:	f2c4 0003 	movt	r0, #16387	; 0x4003
    27fc:	f04f 0103 	mov.w	r1, #3
    2800:	f7ff f874 	bl	18ec <ADCProcessorTrigger>
					while(!ADCIntStatus(ADC0_BASE, 3, false))
    2804:	bf00      	nop
    2806:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    280a:	f2c4 0003 	movt	r0, #16387	; 0x4003
    280e:	f04f 0103 	mov.w	r1, #3
    2812:	f04f 0200 	mov.w	r2, #0
    2816:	f7fe feeb 	bl	15f0 <ADCIntStatus>
    281a:	4603      	mov	r3, r0
    281c:	2b00      	cmp	r3, #0
    281e:	d0f2      	beq.n	2806 <main+0x432>
					{
					}
		      ADCIntClear(ADC0_BASE, 3);
    2820:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2824:	f2c4 0003 	movt	r0, #16387	; 0x4003
    2828:	f04f 0103 	mov.w	r1, #3
    282c:	f7fe ff1e 	bl	166c <ADCIntClear>
		      ADCSequenceDataGet(ADC0_BASE, 3, temp);
    2830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2834:	f2c4 0003 	movt	r0, #16387	; 0x4003
    2838:	f04f 0103 	mov.w	r1, #3
    283c:	f107 0304 	add.w	r3, r7, #4
    2840:	461a      	mov	r2, r3
    2842:	f7ff f821 	bl	1888 <ADCSequenceDataGet>
	          x[i/24]=temp[0]/2;
    2846:	f241 53bc 	movw	r3, #5564	; 0x15bc
    284a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    284e:	681a      	ldr	r2, [r3, #0]
    2850:	f64a 23ab 	movw	r3, #43691	; 0xaaab
    2854:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
    2858:	fba3 1302 	umull	r1, r3, r3, r2
    285c:	ea4f 1213 	mov.w	r2, r3, lsr #4
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	ea4f 0353 	mov.w	r3, r3, lsr #1
    2866:	4619      	mov	r1, r3
    2868:	f640 63c4 	movw	r3, #3780	; 0xec4
    286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


while(1)
{

	for(i=0;i<10248;i++)
    2874:	f241 53bc 	movw	r3, #5564	; 0x15bc
    2878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	f103 0201 	add.w	r2, r3, #1
    2882:	f241 53bc 	movw	r3, #5564	; 0x15bc
    2886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    288a:	601a      	str	r2, [r3, #0]
    288c:	f241 53bc 	movw	r3, #5564	; 0x15bc
    2890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	f642 0307 	movw	r3, #10247	; 0x2807
    289a:	429a      	cmp	r2, r3
    289c:	d994      	bls.n	27c8 <main+0x3f4>
		      ADCSequenceDataGet(ADC0_BASE, 3, temp);
	          x[i/24]=temp[0]/2;
	             }
			   }

			num1=0;
    289e:	f241 53f4 	movw	r3, #5620	; 0x15f4
    28a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a6:	f04f 0200 	mov.w	r2, #0
    28aa:	601a      	str	r2, [r3, #0]
			num2=0;
    28ac:	f241 53c0 	movw	r3, #5568	; 0x15c0
    28b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28b4:	f04f 0200 	mov.w	r2, #0
    28b8:	601a      	str	r2, [r3, #0]
			num3=0;
    28ba:	f241 5380 	movw	r3, #5504	; 0x1580
    28be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28c2:	f04f 0200 	mov.w	r2, #0
    28c6:	601a      	str	r2, [r3, #0]
			num4=0;
    28c8:	f241 5384 	movw	r3, #5508	; 0x1584
    28cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d0:	f04f 0200 	mov.w	r2, #0
    28d4:	601a      	str	r2, [r3, #0]
			num5=0;
    28d6:	f241 6300 	movw	r3, #5632	; 0x1600
    28da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28de:	f04f 0200 	mov.w	r2, #0
    28e2:	601a      	str	r2, [r3, #0]
			num6=0;
    28e4:	f241 5388 	movw	r3, #5512	; 0x1588
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	f04f 0200 	mov.w	r2, #0
    28f0:	601a      	str	r2, [r3, #0]
			num7=0;
    28f2:	f241 6304 	movw	r3, #5636	; 0x1604
    28f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28fa:	f04f 0200 	mov.w	r2, #0
    28fe:	601a      	str	r2, [r3, #0]
			num8=0;
    2900:	f241 53b4 	movw	r3, #5556	; 0x15b4
    2904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2908:	f04f 0200 	mov.w	r2, #0
    290c:	601a      	str	r2, [r3, #0]

			n1 = _IQ17(0);
    290e:	f241 53d0 	movw	r3, #5584	; 0x15d0
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	f04f 0200 	mov.w	r2, #0
    291a:	601a      	str	r2, [r3, #0]
			n2 = _IQ17(0);
    291c:	f241 5390 	movw	r3, #5520	; 0x1590
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	f04f 0200 	mov.w	r2, #0
    2928:	601a      	str	r2, [r3, #0]
			n3 = _IQ17(0);
    292a:	f241 6310 	movw	r3, #5648	; 0x1610
    292e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2932:	f04f 0200 	mov.w	r2, #0
    2936:	601a      	str	r2, [r3, #0]
			n4 = _IQ17(0);
    2938:	f241 53d4 	movw	r3, #5588	; 0x15d4
    293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2940:	f04f 0200 	mov.w	r2, #0
    2944:	601a      	str	r2, [r3, #0]
		    n5 = _IQ17(0);
    2946:	f241 6308 	movw	r3, #5640	; 0x1608
    294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294e:	f04f 0200 	mov.w	r2, #0
    2952:	601a      	str	r2, [r3, #0]
			n6 = _IQ17(0);
    2954:	f241 5398 	movw	r3, #5528	; 0x1598
    2958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    295c:	f04f 0200 	mov.w	r2, #0
    2960:	601a      	str	r2, [r3, #0]
			n7 = _IQ17(0);
    2962:	f241 5374 	movw	r3, #5492	; 0x1574
    2966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    296a:	f04f 0200 	mov.w	r2, #0
    296e:	601a      	str	r2, [r3, #0]
			n8 = _IQ17(0);
    2970:	f241 53fc 	movw	r3, #5628	; 0x15fc
    2974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2978:	f04f 0200 	mov.w	r2, #0
    297c:	601a      	str	r2, [r3, #0]

		for(k=0;k<427;k++)
    297e:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2986:	f04f 0200 	mov.w	r2, #0
    298a:	601a      	str	r2, [r3, #0]
    298c:	e1bf      	b.n	2d0e <main+0x93a>
				{
		    //b=b1[k];
				 l1= _IQ17(b1[k]);
    298e:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2996:	681a      	ldr	r2, [r3, #0]
    2998:	f244 7370 	movw	r3, #18288	; 0x4770
    299c:	f2c0 0300 	movt	r3, #0
    29a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    29a4:	4618      	mov	r0, r3
    29a6:	f8df 18f4 	ldr.w	r1, [pc, #2292]	; 329c <main+0xec8>
    29aa:	f000 ff05 	bl	37b8 <__aeabi_fmul>
    29ae:	4603      	mov	r3, r0
    29b0:	4618      	mov	r0, r3
    29b2:	f001 f851 	bl	3a58 <__aeabi_f2iz>
    29b6:	4602      	mov	r2, r0
    29b8:	f241 53f0 	movw	r3, #5616	; 0x15f0
    29bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29c0:	601a      	str	r2, [r3, #0]
				 l2= _IQ17(b2[k]);
    29c2:	f241 53a0 	movw	r3, #5536	; 0x15a0
    29c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29ca:	681a      	ldr	r2, [r3, #0]
    29cc:	f644 631c 	movw	r3, #19996	; 0x4e1c
    29d0:	f2c0 0300 	movt	r3, #0
    29d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    29d8:	4618      	mov	r0, r3
    29da:	f8df 18c0 	ldr.w	r1, [pc, #2240]	; 329c <main+0xec8>
    29de:	f000 feeb 	bl	37b8 <__aeabi_fmul>
    29e2:	4603      	mov	r3, r0
    29e4:	4618      	mov	r0, r3
    29e6:	f001 f837 	bl	3a58 <__aeabi_f2iz>
    29ea:	4602      	mov	r2, r0
    29ec:	f241 53ac 	movw	r3, #5548	; 0x15ac
    29f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29f4:	601a      	str	r2, [r3, #0]
				 l3= _IQ17(b3[k]);
    29f6:	f241 53a0 	movw	r3, #5536	; 0x15a0
    29fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29fe:	681a      	ldr	r2, [r3, #0]
    2a00:	f245 43c8 	movw	r3, #21704	; 0x54c8
    2a04:	f2c0 0300 	movt	r3, #0
    2a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a0c:	4618      	mov	r0, r3
    2a0e:	f8df 188c 	ldr.w	r1, [pc, #2188]	; 329c <main+0xec8>
    2a12:	f000 fed1 	bl	37b8 <__aeabi_fmul>
    2a16:	4603      	mov	r3, r0
    2a18:	4618      	mov	r0, r3
    2a1a:	f001 f81d 	bl	3a58 <__aeabi_f2iz>
    2a1e:	4602      	mov	r2, r0
    2a20:	f241 53ec 	movw	r3, #5612	; 0x15ec
    2a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a28:	601a      	str	r2, [r3, #0]
				 l4= _IQ17(b4[k]);
    2a2a:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a32:	681a      	ldr	r2, [r3, #0]
    2a34:	f645 3374 	movw	r3, #23412	; 0x5b74
    2a38:	f2c0 0300 	movt	r3, #0
    2a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a40:	4618      	mov	r0, r3
    2a42:	f8df 1858 	ldr.w	r1, [pc, #2136]	; 329c <main+0xec8>
    2a46:	f000 feb7 	bl	37b8 <__aeabi_fmul>
    2a4a:	4603      	mov	r3, r0
    2a4c:	4618      	mov	r0, r3
    2a4e:	f001 f803 	bl	3a58 <__aeabi_f2iz>
    2a52:	4602      	mov	r2, r0
    2a54:	f640 63c0 	movw	r3, #3776	; 0xec0
    2a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a5c:	601a      	str	r2, [r3, #0]
				 l5= _IQ17(b5[k]);
    2a5e:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a66:	681a      	ldr	r2, [r3, #0]
    2a68:	f246 2320 	movw	r3, #25120	; 0x6220
    2a6c:	f2c0 0300 	movt	r3, #0
    2a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a74:	4618      	mov	r0, r3
    2a76:	f8df 1824 	ldr.w	r1, [pc, #2084]	; 329c <main+0xec8>
    2a7a:	f000 fe9d 	bl	37b8 <__aeabi_fmul>
    2a7e:	4603      	mov	r3, r0
    2a80:	4618      	mov	r0, r3
    2a82:	f000 ffe9 	bl	3a58 <__aeabi_f2iz>
    2a86:	4602      	mov	r2, r0
    2a88:	f241 6318 	movw	r3, #5656	; 0x1618
    2a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a90:	601a      	str	r2, [r3, #0]
				 l6= _IQ17(b6[k]);
    2a92:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a9a:	681a      	ldr	r2, [r3, #0]
    2a9c:	f240 0308 	movw	r3, #8
    2aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2aa8:	4618      	mov	r0, r3
    2aaa:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 329c <main+0xec8>
    2aae:	f000 fe83 	bl	37b8 <__aeabi_fmul>
    2ab2:	4603      	mov	r3, r0
    2ab4:	4618      	mov	r0, r3
    2ab6:	f000 ffcf 	bl	3a58 <__aeabi_f2iz>
    2aba:	4602      	mov	r2, r0
    2abc:	f241 53e0 	movw	r3, #5600	; 0x15e0
    2ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ac4:	601a      	str	r2, [r3, #0]
				 l7= _IQ17(b7[k]);
    2ac6:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ace:	681a      	ldr	r2, [r3, #0]
    2ad0:	f240 63b4 	movw	r3, #1716	; 0x6b4
    2ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2adc:	4618      	mov	r0, r3
    2ade:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 329c <main+0xec8>
    2ae2:	f000 fe69 	bl	37b8 <__aeabi_fmul>
    2ae6:	4603      	mov	r3, r0
    2ae8:	4618      	mov	r0, r3
    2aea:	f000 ffb5 	bl	3a58 <__aeabi_f2iz>
    2aee:	4602      	mov	r2, r0
    2af0:	f241 538c 	movw	r3, #5516	; 0x158c
    2af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2af8:	601a      	str	r2, [r3, #0]
				 l8= _IQ17(b8[k]);
    2afa:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b02:	681a      	ldr	r2, [r3, #0]
    2b04:	f646 03cc 	movw	r3, #26828	; 0x68cc
    2b08:	f2c0 0300 	movt	r3, #0
    2b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2b10:	4618      	mov	r0, r3
    2b12:	f8df 1788 	ldr.w	r1, [pc, #1928]	; 329c <main+0xec8>
    2b16:	f000 fe4f 	bl	37b8 <__aeabi_fmul>
    2b1a:	4603      	mov	r3, r0
    2b1c:	4618      	mov	r0, r3
    2b1e:	f000 ff9b 	bl	3a58 <__aeabi_f2iz>
    2b22:	4602      	mov	r2, r0
    2b24:	f241 53d8 	movw	r3, #5592	; 0x15d8
    2b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b2c:	601a      	str	r2, [r3, #0]
				  m= _IQ17(x[426-k]);
    2b2e:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	f5c3 72d5 	rsb	r2, r3, #426	; 0x1aa
    2b3c:	f640 63c4 	movw	r3, #3780	; 0xec4
    2b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2b48:	ea4f 4243 	mov.w	r2, r3, lsl #17
    2b4c:	f241 6314 	movw	r3, #5652	; 0x1614
    2b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b54:	601a      	str	r2, [r3, #0]
				 n1= n1 + _IQ17mpy(l1,m);
    2b56:	f241 53f0 	movw	r3, #5616	; 0x15f0
    2b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b5e:	681a      	ldr	r2, [r3, #0]
    2b60:	f241 6314 	movw	r3, #5652	; 0x1614
    2b64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	4610      	mov	r0, r2
    2b6c:	4619      	mov	r1, r3
    2b6e:	f000 fe1b 	bl	37a8 <_IQ17mpy>
    2b72:	4602      	mov	r2, r0
    2b74:	f241 53d0 	movw	r3, #5584	; 0x15d0
    2b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	18d2      	adds	r2, r2, r3
    2b80:	f241 53d0 	movw	r3, #5584	; 0x15d0
    2b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b88:	601a      	str	r2, [r3, #0]
				 n2= n2 + _IQ17mpy(l2,m);
    2b8a:	f241 53ac 	movw	r3, #5548	; 0x15ac
    2b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b92:	681a      	ldr	r2, [r3, #0]
    2b94:	f241 6314 	movw	r3, #5652	; 0x1614
    2b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b9c:	681b      	ldr	r3, [r3, #0]
    2b9e:	4610      	mov	r0, r2
    2ba0:	4619      	mov	r1, r3
    2ba2:	f000 fe01 	bl	37a8 <_IQ17mpy>
    2ba6:	4602      	mov	r2, r0
    2ba8:	f241 5390 	movw	r3, #5520	; 0x1590
    2bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bb0:	681b      	ldr	r3, [r3, #0]
    2bb2:	18d2      	adds	r2, r2, r3
    2bb4:	f241 5390 	movw	r3, #5520	; 0x1590
    2bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bbc:	601a      	str	r2, [r3, #0]
				 n3= n3 + _IQ17mpy(l3,m);
    2bbe:	f241 53ec 	movw	r3, #5612	; 0x15ec
    2bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bc6:	681a      	ldr	r2, [r3, #0]
    2bc8:	f241 6314 	movw	r3, #5652	; 0x1614
    2bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bd0:	681b      	ldr	r3, [r3, #0]
    2bd2:	4610      	mov	r0, r2
    2bd4:	4619      	mov	r1, r3
    2bd6:	f000 fde7 	bl	37a8 <_IQ17mpy>
    2bda:	4602      	mov	r2, r0
    2bdc:	f241 6310 	movw	r3, #5648	; 0x1610
    2be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	18d2      	adds	r2, r2, r3
    2be8:	f241 6310 	movw	r3, #5648	; 0x1610
    2bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf0:	601a      	str	r2, [r3, #0]
				 n4= n4 + _IQ17mpy(l4,m);
    2bf2:	f640 63c0 	movw	r3, #3776	; 0xec0
    2bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bfa:	681a      	ldr	r2, [r3, #0]
    2bfc:	f241 6314 	movw	r3, #5652	; 0x1614
    2c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c04:	681b      	ldr	r3, [r3, #0]
    2c06:	4610      	mov	r0, r2
    2c08:	4619      	mov	r1, r3
    2c0a:	f000 fdcd 	bl	37a8 <_IQ17mpy>
    2c0e:	4602      	mov	r2, r0
    2c10:	f241 53d4 	movw	r3, #5588	; 0x15d4
    2c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	18d2      	adds	r2, r2, r3
    2c1c:	f241 53d4 	movw	r3, #5588	; 0x15d4
    2c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c24:	601a      	str	r2, [r3, #0]
				 n5= n5 + _IQ17mpy(l5,m);
    2c26:	f241 6318 	movw	r3, #5656	; 0x1618
    2c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c2e:	681a      	ldr	r2, [r3, #0]
    2c30:	f241 6314 	movw	r3, #5652	; 0x1614
    2c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	4610      	mov	r0, r2
    2c3c:	4619      	mov	r1, r3
    2c3e:	f000 fdb3 	bl	37a8 <_IQ17mpy>
    2c42:	4602      	mov	r2, r0
    2c44:	f241 6308 	movw	r3, #5640	; 0x1608
    2c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c4c:	681b      	ldr	r3, [r3, #0]
    2c4e:	18d2      	adds	r2, r2, r3
    2c50:	f241 6308 	movw	r3, #5640	; 0x1608
    2c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c58:	601a      	str	r2, [r3, #0]
				 n6= n6 + _IQ17mpy(l6,m);
    2c5a:	f241 53e0 	movw	r3, #5600	; 0x15e0
    2c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c62:	681a      	ldr	r2, [r3, #0]
    2c64:	f241 6314 	movw	r3, #5652	; 0x1614
    2c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c6c:	681b      	ldr	r3, [r3, #0]
    2c6e:	4610      	mov	r0, r2
    2c70:	4619      	mov	r1, r3
    2c72:	f000 fd99 	bl	37a8 <_IQ17mpy>
    2c76:	4602      	mov	r2, r0
    2c78:	f241 5398 	movw	r3, #5528	; 0x1598
    2c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c80:	681b      	ldr	r3, [r3, #0]
    2c82:	18d2      	adds	r2, r2, r3
    2c84:	f241 5398 	movw	r3, #5528	; 0x1598
    2c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c8c:	601a      	str	r2, [r3, #0]
				 n7= n7 + _IQ17mpy(l7,m);
    2c8e:	f241 538c 	movw	r3, #5516	; 0x158c
    2c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	f241 6314 	movw	r3, #5652	; 0x1614
    2c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ca0:	681b      	ldr	r3, [r3, #0]
    2ca2:	4610      	mov	r0, r2
    2ca4:	4619      	mov	r1, r3
    2ca6:	f000 fd7f 	bl	37a8 <_IQ17mpy>
    2caa:	4602      	mov	r2, r0
    2cac:	f241 5374 	movw	r3, #5492	; 0x1574
    2cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cb4:	681b      	ldr	r3, [r3, #0]
    2cb6:	18d2      	adds	r2, r2, r3
    2cb8:	f241 5374 	movw	r3, #5492	; 0x1574
    2cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cc0:	601a      	str	r2, [r3, #0]
				 n8= n8 + _IQ17mpy(l8,m);
    2cc2:	f241 53d8 	movw	r3, #5592	; 0x15d8
    2cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cca:	681a      	ldr	r2, [r3, #0]
    2ccc:	f241 6314 	movw	r3, #5652	; 0x1614
    2cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	4610      	mov	r0, r2
    2cd8:	4619      	mov	r1, r3
    2cda:	f000 fd65 	bl	37a8 <_IQ17mpy>
    2cde:	4602      	mov	r2, r0
    2ce0:	f241 53fc 	movw	r3, #5628	; 0x15fc
    2ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	18d2      	adds	r2, r2, r3
    2cec:	f241 53fc 	movw	r3, #5628	; 0x15fc
    2cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cf4:	601a      	str	r2, [r3, #0]
		    n5 = _IQ17(0);
			n6 = _IQ17(0);
			n7 = _IQ17(0);
			n8 = _IQ17(0);

		for(k=0;k<427;k++)
    2cf6:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	f103 0201 	add.w	r2, r3, #1
    2d04:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d0c:	601a      	str	r2, [r3, #0]
    2d0e:	f241 53a0 	movw	r3, #5536	; 0x15a0
    2d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    2d1c:	f67f ae37 	bls.w	298e <main+0x5ba>
				 n7= n7 + _IQ17mpy(l7,m);
				 n8= n8 + _IQ17mpy(l8,m);

			    }

			 num1=_IQ17int(n1);
    2d20:	f241 53d0 	movw	r3, #5584	; 0x15d0
    2d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d28:	681b      	ldr	r3, [r3, #0]
    2d2a:	ea4f 4263 	mov.w	r2, r3, asr #17
    2d2e:	f241 53f4 	movw	r3, #5620	; 0x15f4
    2d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d36:	601a      	str	r2, [r3, #0]
			 num2=_IQ17int(n2);
    2d38:	f241 5390 	movw	r3, #5520	; 0x1590
    2d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	ea4f 4263 	mov.w	r2, r3, asr #17
    2d46:	f241 53c0 	movw	r3, #5568	; 0x15c0
    2d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d4e:	601a      	str	r2, [r3, #0]
			 num3=_IQ17int(n3);
    2d50:	f241 6310 	movw	r3, #5648	; 0x1610
    2d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d58:	681b      	ldr	r3, [r3, #0]
    2d5a:	ea4f 4263 	mov.w	r2, r3, asr #17
    2d5e:	f241 5380 	movw	r3, #5504	; 0x1580
    2d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d66:	601a      	str	r2, [r3, #0]
			 num4=_IQ17int(n4);
    2d68:	f241 53d4 	movw	r3, #5588	; 0x15d4
    2d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d70:	681b      	ldr	r3, [r3, #0]
    2d72:	ea4f 4263 	mov.w	r2, r3, asr #17
    2d76:	f241 5384 	movw	r3, #5508	; 0x1584
    2d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d7e:	601a      	str	r2, [r3, #0]
			 num5=_IQ17int(n5);
    2d80:	f241 6308 	movw	r3, #5640	; 0x1608
    2d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d88:	681b      	ldr	r3, [r3, #0]
    2d8a:	ea4f 4263 	mov.w	r2, r3, asr #17
    2d8e:	f241 6300 	movw	r3, #5632	; 0x1600
    2d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d96:	601a      	str	r2, [r3, #0]
			 num6=_IQ17int(n6);
    2d98:	f241 5398 	movw	r3, #5528	; 0x1598
    2d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	ea4f 4263 	mov.w	r2, r3, asr #17
    2da6:	f241 5388 	movw	r3, #5512	; 0x1588
    2daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dae:	601a      	str	r2, [r3, #0]
			 num7=_IQ17int(n7);
    2db0:	f241 5374 	movw	r3, #5492	; 0x1574
    2db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2db8:	681b      	ldr	r3, [r3, #0]
    2dba:	ea4f 4263 	mov.w	r2, r3, asr #17
    2dbe:	f241 6304 	movw	r3, #5636	; 0x1604
    2dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dc6:	601a      	str	r2, [r3, #0]
			 num8=_IQ17int(n8);
    2dc8:	f241 53fc 	movw	r3, #5628	; 0x15fc
    2dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dd0:	681b      	ldr	r3, [r3, #0]
    2dd2:	ea4f 4263 	mov.w	r2, r3, asr #17
    2dd6:	f241 53b4 	movw	r3, #5556	; 0x15b4
    2dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dde:	601a      	str	r2, [r3, #0]

			 sum1+=num1*num1;
    2de0:	f241 53f4 	movw	r3, #5620	; 0x15f4
    2de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2de8:	681a      	ldr	r2, [r3, #0]
    2dea:	f241 53f4 	movw	r3, #5620	; 0x15f4
    2dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	fb03 f202 	mul.w	r2, r3, r2
    2df8:	f640 5380 	movw	r3, #3456	; 0xd80
    2dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	18d2      	adds	r2, r2, r3
    2e04:	f640 5380 	movw	r3, #3456	; 0xd80
    2e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e0c:	601a      	str	r2, [r3, #0]
			 sum2+=num2*num2;
    2e0e:	f241 53c0 	movw	r3, #5568	; 0x15c0
    2e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e16:	681a      	ldr	r2, [r3, #0]
    2e18:	f241 53c0 	movw	r3, #5568	; 0x15c0
    2e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e20:	681b      	ldr	r3, [r3, #0]
    2e22:	fb03 f202 	mul.w	r2, r3, r2
    2e26:	f640 5384 	movw	r3, #3460	; 0xd84
    2e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	18d2      	adds	r2, r2, r3
    2e32:	f640 5384 	movw	r3, #3460	; 0xd84
    2e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e3a:	601a      	str	r2, [r3, #0]
			 sum3+=num3*num3;
    2e3c:	f241 5380 	movw	r3, #5504	; 0x1580
    2e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e44:	681a      	ldr	r2, [r3, #0]
    2e46:	f241 5380 	movw	r3, #5504	; 0x1580
    2e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	fb03 f202 	mul.w	r2, r3, r2
    2e54:	f640 5388 	movw	r3, #3464	; 0xd88
    2e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e5c:	681b      	ldr	r3, [r3, #0]
    2e5e:	18d2      	adds	r2, r2, r3
    2e60:	f640 5388 	movw	r3, #3464	; 0xd88
    2e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e68:	601a      	str	r2, [r3, #0]
			 sum4+=num4*num4;
    2e6a:	f241 5384 	movw	r3, #5508	; 0x1584
    2e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e72:	681a      	ldr	r2, [r3, #0]
    2e74:	f241 5384 	movw	r3, #5508	; 0x1584
    2e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e7c:	681b      	ldr	r3, [r3, #0]
    2e7e:	fb03 f202 	mul.w	r2, r3, r2
    2e82:	f640 538c 	movw	r3, #3468	; 0xd8c
    2e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e8a:	681b      	ldr	r3, [r3, #0]
    2e8c:	18d2      	adds	r2, r2, r3
    2e8e:	f640 538c 	movw	r3, #3468	; 0xd8c
    2e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e96:	601a      	str	r2, [r3, #0]
			 sum5+=num5*num5;
    2e98:	f241 6300 	movw	r3, #5632	; 0x1600
    2e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ea0:	681a      	ldr	r2, [r3, #0]
    2ea2:	f241 6300 	movw	r3, #5632	; 0x1600
    2ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eaa:	681b      	ldr	r3, [r3, #0]
    2eac:	fb03 f202 	mul.w	r2, r3, r2
    2eb0:	f640 5390 	movw	r3, #3472	; 0xd90
    2eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	18d2      	adds	r2, r2, r3
    2ebc:	f640 5390 	movw	r3, #3472	; 0xd90
    2ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ec4:	601a      	str	r2, [r3, #0]
			 sum6+=num6*num6;
    2ec6:	f241 5388 	movw	r3, #5512	; 0x1588
    2eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ece:	681a      	ldr	r2, [r3, #0]
    2ed0:	f241 5388 	movw	r3, #5512	; 0x1588
    2ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	fb03 f202 	mul.w	r2, r3, r2
    2ede:	f640 5394 	movw	r3, #3476	; 0xd94
    2ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	18d2      	adds	r2, r2, r3
    2eea:	f640 5394 	movw	r3, #3476	; 0xd94
    2eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ef2:	601a      	str	r2, [r3, #0]
			 sum7+=num7*num7;
    2ef4:	f241 6304 	movw	r3, #5636	; 0x1604
    2ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2efc:	681a      	ldr	r2, [r3, #0]
    2efe:	f241 6304 	movw	r3, #5636	; 0x1604
    2f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f06:	681b      	ldr	r3, [r3, #0]
    2f08:	fb03 f202 	mul.w	r2, r3, r2
    2f0c:	f640 5398 	movw	r3, #3480	; 0xd98
    2f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f14:	681b      	ldr	r3, [r3, #0]
    2f16:	18d2      	adds	r2, r2, r3
    2f18:	f640 5398 	movw	r3, #3480	; 0xd98
    2f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f20:	601a      	str	r2, [r3, #0]
			 sum8+=num8*num8;
    2f22:	f241 53b4 	movw	r3, #5556	; 0x15b4
    2f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f2a:	681a      	ldr	r2, [r3, #0]
    2f2c:	f241 53b4 	movw	r3, #5556	; 0x15b4
    2f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	fb03 f202 	mul.w	r2, r3, r2
    2f3a:	f640 539c 	movw	r3, #3484	; 0xd9c
    2f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	18d2      	adds	r2, r2, r3
    2f46:	f640 539c 	movw	r3, #3484	; 0xd9c
    2f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f4e:	601a      	str	r2, [r3, #0]

			 j++;
    2f50:	f640 537c 	movw	r3, #3452	; 0xd7c
    2f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	f103 0201 	add.w	r2, r3, #1
    2f5e:	f640 537c 	movw	r3, #3452	; 0xd7c
    2f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f66:	601a      	str	r2, [r3, #0]

			 if(j==2)
    2f68:	f640 537c 	movw	r3, #3452	; 0xd7c
    2f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f70:	681b      	ldr	r3, [r3, #0]
    2f72:	2b02      	cmp	r3, #2
    2f74:	f040 81a2 	bne.w	32bc <main+0xee8>
			 {
				 sum1=sum1/4;
    2f78:	f640 5380 	movw	r3, #3456	; 0xd80
    2f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	f103 0203 	add.w	r2, r3, #3
    2f86:	2b00      	cmp	r3, #0
    2f88:	bfb8      	it	lt
    2f8a:	4613      	movlt	r3, r2
    2f8c:	ea4f 03a3 	mov.w	r3, r3, asr #2
    2f90:	461a      	mov	r2, r3
    2f92:	f640 5380 	movw	r3, #3456	; 0xd80
    2f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f9a:	601a      	str	r2, [r3, #0]
				 sum2=sum2/4;
    2f9c:	f640 5384 	movw	r3, #3460	; 0xd84
    2fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	f103 0203 	add.w	r2, r3, #3
    2faa:	2b00      	cmp	r3, #0
    2fac:	bfb8      	it	lt
    2fae:	4613      	movlt	r3, r2
    2fb0:	ea4f 03a3 	mov.w	r3, r3, asr #2
    2fb4:	461a      	mov	r2, r3
    2fb6:	f640 5384 	movw	r3, #3460	; 0xd84
    2fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fbe:	601a      	str	r2, [r3, #0]
				 sum3=sum3/4;
    2fc0:	f640 5388 	movw	r3, #3464	; 0xd88
    2fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fc8:	681b      	ldr	r3, [r3, #0]
    2fca:	f103 0203 	add.w	r2, r3, #3
    2fce:	2b00      	cmp	r3, #0
    2fd0:	bfb8      	it	lt
    2fd2:	4613      	movlt	r3, r2
    2fd4:	ea4f 03a3 	mov.w	r3, r3, asr #2
    2fd8:	461a      	mov	r2, r3
    2fda:	f640 5388 	movw	r3, #3464	; 0xd88
    2fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fe2:	601a      	str	r2, [r3, #0]
				 sum4=sum4/4;
    2fe4:	f640 538c 	movw	r3, #3468	; 0xd8c
    2fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fec:	681b      	ldr	r3, [r3, #0]
    2fee:	f103 0203 	add.w	r2, r3, #3
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	bfb8      	it	lt
    2ff6:	4613      	movlt	r3, r2
    2ff8:	ea4f 03a3 	mov.w	r3, r3, asr #2
    2ffc:	461a      	mov	r2, r3
    2ffe:	f640 538c 	movw	r3, #3468	; 0xd8c
    3002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3006:	601a      	str	r2, [r3, #0]
				 sum5=sum5/4;
    3008:	f640 5390 	movw	r3, #3472	; 0xd90
    300c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3010:	681b      	ldr	r3, [r3, #0]
    3012:	f103 0203 	add.w	r2, r3, #3
    3016:	2b00      	cmp	r3, #0
    3018:	bfb8      	it	lt
    301a:	4613      	movlt	r3, r2
    301c:	ea4f 03a3 	mov.w	r3, r3, asr #2
    3020:	461a      	mov	r2, r3
    3022:	f640 5390 	movw	r3, #3472	; 0xd90
    3026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    302a:	601a      	str	r2, [r3, #0]
				 sum6=sum6/4;
    302c:	f640 5394 	movw	r3, #3476	; 0xd94
    3030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	f103 0203 	add.w	r2, r3, #3
    303a:	2b00      	cmp	r3, #0
    303c:	bfb8      	it	lt
    303e:	4613      	movlt	r3, r2
    3040:	ea4f 03a3 	mov.w	r3, r3, asr #2
    3044:	461a      	mov	r2, r3
    3046:	f640 5394 	movw	r3, #3476	; 0xd94
    304a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304e:	601a      	str	r2, [r3, #0]
				 sum7=sum7/4;
    3050:	f640 5398 	movw	r3, #3480	; 0xd98
    3054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3058:	681b      	ldr	r3, [r3, #0]
    305a:	f103 0203 	add.w	r2, r3, #3
    305e:	2b00      	cmp	r3, #0
    3060:	bfb8      	it	lt
    3062:	4613      	movlt	r3, r2
    3064:	ea4f 03a3 	mov.w	r3, r3, asr #2
    3068:	461a      	mov	r2, r3
    306a:	f640 5398 	movw	r3, #3480	; 0xd98
    306e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3072:	601a      	str	r2, [r3, #0]
				 sum8=sum8/4;
    3074:	f640 539c 	movw	r3, #3484	; 0xd9c
    3078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307c:	681b      	ldr	r3, [r3, #0]
    307e:	f103 0203 	add.w	r2, r3, #3
    3082:	2b00      	cmp	r3, #0
    3084:	bfb8      	it	lt
    3086:	4613      	movlt	r3, r2
    3088:	ea4f 03a3 	mov.w	r3, r3, asr #2
    308c:	461a      	mov	r2, r3
    308e:	f640 539c 	movw	r3, #3484	; 0xd9c
    3092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3096:	601a      	str	r2, [r3, #0]

				 r1=isqrt(sum1);
    3098:	f640 5380 	movw	r3, #3456	; 0xd80
    309c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	4618      	mov	r0, r3
    30a4:	f7fd fc08 	bl	8b8 <isqrt>
    30a8:	4603      	mov	r3, r0
    30aa:	461a      	mov	r2, r3
    30ac:	f241 6320 	movw	r3, #5664	; 0x1620
    30b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30b4:	601a      	str	r2, [r3, #0]
			     r2=isqrt(sum2);
    30b6:	f640 5384 	movw	r3, #3460	; 0xd84
    30ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30be:	681b      	ldr	r3, [r3, #0]
    30c0:	4618      	mov	r0, r3
    30c2:	f7fd fbf9 	bl	8b8 <isqrt>
    30c6:	4603      	mov	r3, r0
    30c8:	461a      	mov	r2, r3
    30ca:	f241 53f8 	movw	r3, #5624	; 0x15f8
    30ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d2:	601a      	str	r2, [r3, #0]
			     r3=isqrt(sum3);
    30d4:	f640 5388 	movw	r3, #3464	; 0xd88
    30d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	4618      	mov	r0, r3
    30e0:	f7fd fbea 	bl	8b8 <isqrt>
    30e4:	4603      	mov	r3, r0
    30e6:	461a      	mov	r2, r3
    30e8:	f241 537c 	movw	r3, #5500	; 0x157c
    30ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30f0:	601a      	str	r2, [r3, #0]
			     r4=isqrt(sum4);
    30f2:	f640 538c 	movw	r3, #3468	; 0xd8c
    30f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	4618      	mov	r0, r3
    30fe:	f7fd fbdb 	bl	8b8 <isqrt>
    3102:	4603      	mov	r3, r0
    3104:	461a      	mov	r2, r3
    3106:	f241 53a4 	movw	r3, #5540	; 0x15a4
    310a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    310e:	601a      	str	r2, [r3, #0]
			     r5=isqrt(sum5);
    3110:	f640 5390 	movw	r3, #3472	; 0xd90
    3114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3118:	681b      	ldr	r3, [r3, #0]
    311a:	4618      	mov	r0, r3
    311c:	f7fd fbcc 	bl	8b8 <isqrt>
    3120:	4603      	mov	r3, r0
    3122:	461a      	mov	r2, r3
    3124:	f241 631c 	movw	r3, #5660	; 0x161c
    3128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    312c:	601a      	str	r2, [r3, #0]
			     r6=isqrt(sum6);
    312e:	f640 5394 	movw	r3, #3476	; 0xd94
    3132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	4618      	mov	r0, r3
    313a:	f7fd fbbd 	bl	8b8 <isqrt>
    313e:	4603      	mov	r3, r0
    3140:	461a      	mov	r2, r3
    3142:	f241 539c 	movw	r3, #5532	; 0x159c
    3146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    314a:	601a      	str	r2, [r3, #0]
			     r8=isqrt(sum8);
    314c:	f640 539c 	movw	r3, #3484	; 0xd9c
    3150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	4618      	mov	r0, r3
    3158:	f7fd fbae 	bl	8b8 <isqrt>
    315c:	4603      	mov	r3, r0
    315e:	461a      	mov	r2, r3
    3160:	f241 53cc 	movw	r3, #5580	; 0x15cc
    3164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3168:	601a      	str	r2, [r3, #0]
			     r7=isqrt(sum7);
    316a:	f640 5398 	movw	r3, #3480	; 0xd98
    316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	4618      	mov	r0, r3
    3176:	f7fd fb9f 	bl	8b8 <isqrt>
    317a:	4603      	mov	r3, r0
    317c:	461a      	mov	r2, r3
    317e:	f241 53e4 	movw	r3, #5604	; 0x15e4
    3182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3186:	601a      	str	r2, [r3, #0]

			     sum1=sum2=sum3=sum4=sum5=sum6=sum7=sum8=0;
    3188:	f640 539c 	movw	r3, #3484	; 0xd9c
    318c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3190:	f04f 0200 	mov.w	r2, #0
    3194:	601a      	str	r2, [r3, #0]
    3196:	f640 539c 	movw	r3, #3484	; 0xd9c
    319a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    319e:	681a      	ldr	r2, [r3, #0]
    31a0:	f640 5398 	movw	r3, #3480	; 0xd98
    31a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31a8:	601a      	str	r2, [r3, #0]
    31aa:	f640 5398 	movw	r3, #3480	; 0xd98
    31ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31b2:	681a      	ldr	r2, [r3, #0]
    31b4:	f640 5394 	movw	r3, #3476	; 0xd94
    31b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31bc:	601a      	str	r2, [r3, #0]
    31be:	f640 5394 	movw	r3, #3476	; 0xd94
    31c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31c6:	681a      	ldr	r2, [r3, #0]
    31c8:	f640 5390 	movw	r3, #3472	; 0xd90
    31cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31d0:	601a      	str	r2, [r3, #0]
    31d2:	f640 5390 	movw	r3, #3472	; 0xd90
    31d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31da:	681a      	ldr	r2, [r3, #0]
    31dc:	f640 538c 	movw	r3, #3468	; 0xd8c
    31e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e4:	601a      	str	r2, [r3, #0]
    31e6:	f640 538c 	movw	r3, #3468	; 0xd8c
    31ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ee:	681a      	ldr	r2, [r3, #0]
    31f0:	f640 5388 	movw	r3, #3464	; 0xd88
    31f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31f8:	601a      	str	r2, [r3, #0]
    31fa:	f640 5388 	movw	r3, #3464	; 0xd88
    31fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3202:	681a      	ldr	r2, [r3, #0]
    3204:	f640 5384 	movw	r3, #3460	; 0xd84
    3208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    320c:	601a      	str	r2, [r3, #0]
    320e:	f640 5384 	movw	r3, #3460	; 0xd84
    3212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3216:	681a      	ldr	r2, [r3, #0]
    3218:	f640 5380 	movw	r3, #3456	; 0xd80
    321c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3220:	601a      	str	r2, [r3, #0]
			     j=0;
    3222:	f640 537c 	movw	r3, #3452	; 0xd7c
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	f04f 0200 	mov.w	r2, #0
    322e:	601a      	str	r2, [r3, #0]

			     //Calibrating the filters
				 if(r1>27)
    3230:	f241 6320 	movw	r3, #5664	; 0x1620
    3234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3238:	681b      	ldr	r3, [r3, #0]
    323a:	2b1b      	cmp	r3, #27
    323c:	d90c      	bls.n	3258 <main+0xe84>
				    r1=(r1-20);
    323e:	f241 6320 	movw	r3, #5664	; 0x1620
    3242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3246:	681b      	ldr	r3, [r3, #0]
    3248:	f1a3 0214 	sub.w	r2, r3, #20
    324c:	f241 6320 	movw	r3, #5664	; 0x1620
    3250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3254:	601a      	str	r2, [r3, #0]
    3256:	e00d      	b.n	3274 <main+0xea0>
     			 else if(r1<=27)
    3258:	f241 6320 	movw	r3, #5664	; 0x1620
    325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3260:	681b      	ldr	r3, [r3, #0]
    3262:	2b1b      	cmp	r3, #27
    3264:	d806      	bhi.n	3274 <main+0xea0>
				    r1=0;
    3266:	f241 6320 	movw	r3, #5664	; 0x1620
    326a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    326e:	f04f 0200 	mov.w	r2, #0
    3272:	601a      	str	r2, [r3, #0]

				 if(r8>2)
    3274:	f241 53cc 	movw	r3, #5580	; 0x15cc
    3278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    327c:	681b      	ldr	r3, [r3, #0]
    327e:	2b02      	cmp	r3, #2
    3280:	d90e      	bls.n	32a0 <main+0xecc>
				    r8=r8-1;
    3282:	f241 53cc 	movw	r3, #5580	; 0x15cc
    3286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	f103 32ff 	add.w	r2, r3, #4294967295
    3290:	f241 53cc 	movw	r3, #5580	; 0x15cc
    3294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3298:	601a      	str	r2, [r3, #0]
    329a:	e00f      	b.n	32bc <main+0xee8>
    329c:	48000000 	.word	0x48000000
	  			 else if(r8<=2)
    32a0:	f241 53cc 	movw	r3, #5580	; 0x15cc
    32a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	2b02      	cmp	r3, #2
    32ac:	d806      	bhi.n	32bc <main+0xee8>
				    r8=0;
    32ae:	f241 53cc 	movw	r3, #5580	; 0x15cc
    32b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32b6:	f04f 0200 	mov.w	r2, #0
    32ba:	601a      	str	r2, [r3, #0]

			 }

               //Mapping filter outcomes with the length of bars
			    r01=(r1*5)/2 + 40;
    32bc:	f241 6320 	movw	r3, #5664	; 0x1620
    32c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c4:	681a      	ldr	r2, [r3, #0]
    32c6:	4613      	mov	r3, r2
    32c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32cc:	189b      	adds	r3, r3, r2
    32ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
    32d2:	f103 0328 	add.w	r3, r3, #40	; 0x28
    32d6:	461a      	mov	r2, r3
    32d8:	f241 53c8 	movw	r3, #5576	; 0x15c8
    32dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32e0:	601a      	str	r2, [r3, #0]
		        r02=(r2*5) + 40;
    32e2:	f241 53f8 	movw	r3, #5624	; 0x15f8
    32e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ea:	681a      	ldr	r2, [r3, #0]
    32ec:	4613      	mov	r3, r2
    32ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32f2:	189b      	adds	r3, r3, r2
    32f4:	f103 0328 	add.w	r3, r3, #40	; 0x28
    32f8:	461a      	mov	r2, r3
    32fa:	f241 53dc 	movw	r3, #5596	; 0x15dc
    32fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3302:	601a      	str	r2, [r3, #0]
		        r03=(r3*5) + 40;
    3304:	f241 537c 	movw	r3, #5500	; 0x157c
    3308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330c:	681a      	ldr	r2, [r3, #0]
    330e:	4613      	mov	r3, r2
    3310:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3314:	189b      	adds	r3, r3, r2
    3316:	f103 0328 	add.w	r3, r3, #40	; 0x28
    331a:	461a      	mov	r2, r3
    331c:	f241 53b8 	movw	r3, #5560	; 0x15b8
    3320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3324:	601a      	str	r2, [r3, #0]
		        r04=(r4*5) + 40;
    3326:	f241 53a4 	movw	r3, #5540	; 0x15a4
    332a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    332e:	681a      	ldr	r2, [r3, #0]
    3330:	4613      	mov	r3, r2
    3332:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3336:	189b      	adds	r3, r3, r2
    3338:	f103 0328 	add.w	r3, r3, #40	; 0x28
    333c:	461a      	mov	r2, r3
    333e:	f241 53a8 	movw	r3, #5544	; 0x15a8
    3342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3346:	601a      	str	r2, [r3, #0]
		        r05=(r5*5) + 40;
    3348:	f241 631c 	movw	r3, #5660	; 0x161c
    334c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	4613      	mov	r3, r2
    3354:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3358:	189b      	adds	r3, r3, r2
    335a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    335e:	461a      	mov	r2, r3
    3360:	f241 5370 	movw	r3, #5488	; 0x1570
    3364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3368:	601a      	str	r2, [r3, #0]
		        r06=(r6*5) + 40;
    336a:	f241 539c 	movw	r3, #5532	; 0x159c
    336e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3372:	681a      	ldr	r2, [r3, #0]
    3374:	4613      	mov	r3, r2
    3376:	ea4f 0383 	mov.w	r3, r3, lsl #2
    337a:	189b      	adds	r3, r3, r2
    337c:	f103 0328 	add.w	r3, r3, #40	; 0x28
    3380:	461a      	mov	r2, r3
    3382:	f241 53e8 	movw	r3, #5608	; 0x15e8
    3386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    338a:	601a      	str	r2, [r3, #0]
		        r07=(r7*5) + 40;
    338c:	f241 53e4 	movw	r3, #5604	; 0x15e4
    3390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3394:	681a      	ldr	r2, [r3, #0]
    3396:	4613      	mov	r3, r2
    3398:	ea4f 0383 	mov.w	r3, r3, lsl #2
    339c:	189b      	adds	r3, r3, r2
    339e:	f103 0328 	add.w	r3, r3, #40	; 0x28
    33a2:	461a      	mov	r2, r3
    33a4:	f241 5394 	movw	r3, #5524	; 0x1594
    33a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ac:	601a      	str	r2, [r3, #0]
		        r08=(r8*5) + 40;
    33ae:	f241 53cc 	movw	r3, #5580	; 0x15cc
    33b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33b6:	681a      	ldr	r2, [r3, #0]
    33b8:	4613      	mov	r3, r2
    33ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    33be:	189b      	adds	r3, r3, r2
    33c0:	f103 0328 	add.w	r3, r3, #40	; 0x28
    33c4:	461a      	mov	r2, r3
    33c6:	f241 53c4 	movw	r3, #5572	; 0x15c4
    33ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33ce:	601a      	str	r2, [r3, #0]


		        if(r01>=160)
    33d0:	f241 53c8 	movw	r3, #5576	; 0x15c8
    33d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33d8:	681b      	ldr	r3, [r3, #0]
    33da:	2b9f      	cmp	r3, #159	; 0x9f
    33dc:	dd06      	ble.n	33ec <main+0x1018>
		        	r01=159;
    33de:	f241 53c8 	movw	r3, #5576	; 0x15c8
    33e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e6:	f04f 029f 	mov.w	r2, #159	; 0x9f
    33ea:	601a      	str	r2, [r3, #0]
		        if(r02>=160)
    33ec:	f241 53dc 	movw	r3, #5596	; 0x15dc
    33f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f4:	681b      	ldr	r3, [r3, #0]
    33f6:	2b9f      	cmp	r3, #159	; 0x9f
    33f8:	dd06      	ble.n	3408 <main+0x1034>
		        	r02=159;
    33fa:	f241 53dc 	movw	r3, #5596	; 0x15dc
    33fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3402:	f04f 029f 	mov.w	r2, #159	; 0x9f
    3406:	601a      	str	r2, [r3, #0]
		        if(r03>=160)
    3408:	f241 53b8 	movw	r3, #5560	; 0x15b8
    340c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3410:	681b      	ldr	r3, [r3, #0]
    3412:	2b9f      	cmp	r3, #159	; 0x9f
    3414:	dd06      	ble.n	3424 <main+0x1050>
		          	r03=159;
    3416:	f241 53b8 	movw	r3, #5560	; 0x15b8
    341a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341e:	f04f 029f 	mov.w	r2, #159	; 0x9f
    3422:	601a      	str	r2, [r3, #0]
		        if(r04>=160)
    3424:	f241 53a8 	movw	r3, #5544	; 0x15a8
    3428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342c:	681b      	ldr	r3, [r3, #0]
    342e:	2b9f      	cmp	r3, #159	; 0x9f
    3430:	dd06      	ble.n	3440 <main+0x106c>
		            r04=159;
    3432:	f241 53a8 	movw	r3, #5544	; 0x15a8
    3436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    343a:	f04f 029f 	mov.w	r2, #159	; 0x9f
    343e:	601a      	str	r2, [r3, #0]
		        if(r05>=160)
    3440:	f241 5370 	movw	r3, #5488	; 0x1570
    3444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	2b9f      	cmp	r3, #159	; 0x9f
    344c:	dd06      	ble.n	345c <main+0x1088>
		            r05=159;
    344e:	f241 5370 	movw	r3, #5488	; 0x1570
    3452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3456:	f04f 029f 	mov.w	r2, #159	; 0x9f
    345a:	601a      	str	r2, [r3, #0]
		        if(r06>=160)
    345c:	f241 53e8 	movw	r3, #5608	; 0x15e8
    3460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	2b9f      	cmp	r3, #159	; 0x9f
    3468:	dd06      	ble.n	3478 <main+0x10a4>
		            r06=159;
    346a:	f241 53e8 	movw	r3, #5608	; 0x15e8
    346e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3472:	f04f 029f 	mov.w	r2, #159	; 0x9f
    3476:	601a      	str	r2, [r3, #0]
		        if(r07>=160)
    3478:	f241 5394 	movw	r3, #5524	; 0x1594
    347c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3480:	681b      	ldr	r3, [r3, #0]
    3482:	2b9f      	cmp	r3, #159	; 0x9f
    3484:	dd06      	ble.n	3494 <main+0x10c0>
		            r07=159;
    3486:	f241 5394 	movw	r3, #5524	; 0x1594
    348a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    348e:	f04f 029f 	mov.w	r2, #159	; 0x9f
    3492:	601a      	str	r2, [r3, #0]
		        if(r08>=160)
    3494:	f241 53c4 	movw	r3, #5572	; 0x15c4
    3498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    349c:	681b      	ldr	r3, [r3, #0]
    349e:	2b9f      	cmp	r3, #159	; 0x9f
    34a0:	dd06      	ble.n	34b0 <main+0x10dc>
		            r08=159;
    34a2:	f241 53c4 	movw	r3, #5572	; 0x15c4
    34a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34aa:	f04f 029f 	mov.w	r2, #159	; 0x9f
    34ae:	601a      	str	r2, [r3, #0]

		        TSLCDFillRect(48,49,40,r01,TS_COL_WHITE,TS_MODE_NORMAL);
    34b0:	f241 53c8 	movw	r3, #5576	; 0x15c8
    34b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    34be:	9200      	str	r2, [sp, #0]
    34c0:	f04f 0200 	mov.w	r2, #0
    34c4:	9201      	str	r2, [sp, #4]
    34c6:	f04f 0030 	mov.w	r0, #48	; 0x30
    34ca:	f04f 0131 	mov.w	r1, #49	; 0x31
    34ce:	f04f 0228 	mov.w	r2, #40	; 0x28
    34d2:	f7fd fa73 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(48,49,r01,160,TS_COL_BLUE,TS_MODE_NORMAL);
    34d6:	f241 53c8 	movw	r3, #5576	; 0x15c8
    34da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    34e4:	9200      	str	r2, [sp, #0]
    34e6:	f04f 0200 	mov.w	r2, #0
    34ea:	9201      	str	r2, [sp, #4]
    34ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    34f0:	f04f 0131 	mov.w	r1, #49	; 0x31
    34f4:	461a      	mov	r2, r3
    34f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    34fa:	f7fd fa5f 	bl	9bc <TSLCDFillRect>
         		TSLCDFillRect(80,81,40,r02,TS_COL_WHITE,TS_MODE_NORMAL);
    34fe:	f241 53dc 	movw	r3, #5596	; 0x15dc
    3502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	f64f 72ff 	movw	r2, #65535	; 0xffff
    350c:	9200      	str	r2, [sp, #0]
    350e:	f04f 0200 	mov.w	r2, #0
    3512:	9201      	str	r2, [sp, #4]
    3514:	f04f 0050 	mov.w	r0, #80	; 0x50
    3518:	f04f 0151 	mov.w	r1, #81	; 0x51
    351c:	f04f 0228 	mov.w	r2, #40	; 0x28
    3520:	f7fd fa4c 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(80,81,r02,160,TS_COL_BLUE,TS_MODE_NORMAL);
    3524:	f241 53dc 	movw	r3, #5596	; 0x15dc
    3528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    3532:	9200      	str	r2, [sp, #0]
    3534:	f04f 0200 	mov.w	r2, #0
    3538:	9201      	str	r2, [sp, #4]
    353a:	f04f 0050 	mov.w	r0, #80	; 0x50
    353e:	f04f 0151 	mov.w	r1, #81	; 0x51
    3542:	461a      	mov	r2, r3
    3544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3548:	f7fd fa38 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(112,113,40,r03,TS_COL_WHITE,TS_MODE_NORMAL);
    354c:	f241 53b8 	movw	r3, #5560	; 0x15b8
    3550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3554:	681b      	ldr	r3, [r3, #0]
    3556:	f64f 72ff 	movw	r2, #65535	; 0xffff
    355a:	9200      	str	r2, [sp, #0]
    355c:	f04f 0200 	mov.w	r2, #0
    3560:	9201      	str	r2, [sp, #4]
    3562:	f04f 0070 	mov.w	r0, #112	; 0x70
    3566:	f04f 0171 	mov.w	r1, #113	; 0x71
    356a:	f04f 0228 	mov.w	r2, #40	; 0x28
    356e:	f7fd fa25 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(112,113,r03,160,TS_COL_BLUE,TS_MODE_NORMAL);
    3572:	f241 53b8 	movw	r3, #5560	; 0x15b8
    3576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    3580:	9200      	str	r2, [sp, #0]
    3582:	f04f 0200 	mov.w	r2, #0
    3586:	9201      	str	r2, [sp, #4]
    3588:	f04f 0070 	mov.w	r0, #112	; 0x70
    358c:	f04f 0171 	mov.w	r1, #113	; 0x71
    3590:	461a      	mov	r2, r3
    3592:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3596:	f7fd fa11 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(144,145,40,r04,TS_COL_WHITE,TS_MODE_NORMAL);
    359a:	f241 53a8 	movw	r3, #5544	; 0x15a8
    359e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a2:	681b      	ldr	r3, [r3, #0]
    35a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    35a8:	9200      	str	r2, [sp, #0]
    35aa:	f04f 0200 	mov.w	r2, #0
    35ae:	9201      	str	r2, [sp, #4]
    35b0:	f04f 0090 	mov.w	r0, #144	; 0x90
    35b4:	f04f 0191 	mov.w	r1, #145	; 0x91
    35b8:	f04f 0228 	mov.w	r2, #40	; 0x28
    35bc:	f7fd f9fe 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(144,145,r04,160,TS_COL_BLUE,TS_MODE_NORMAL);
    35c0:	f241 53a8 	movw	r3, #5544	; 0x15a8
    35c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    35ce:	9200      	str	r2, [sp, #0]
    35d0:	f04f 0200 	mov.w	r2, #0
    35d4:	9201      	str	r2, [sp, #4]
    35d6:	f04f 0090 	mov.w	r0, #144	; 0x90
    35da:	f04f 0191 	mov.w	r1, #145	; 0x91
    35de:	461a      	mov	r2, r3
    35e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    35e4:	f7fd f9ea 	bl	9bc <TSLCDFillRect>
         		TSLCDFillRect(176,177,40,r05,TS_COL_WHITE,TS_MODE_NORMAL);
    35e8:	f241 5370 	movw	r3, #5488	; 0x1570
    35ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f0:	681b      	ldr	r3, [r3, #0]
    35f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    35f6:	9200      	str	r2, [sp, #0]
    35f8:	f04f 0200 	mov.w	r2, #0
    35fc:	9201      	str	r2, [sp, #4]
    35fe:	f04f 00b0 	mov.w	r0, #176	; 0xb0
    3602:	f04f 01b1 	mov.w	r1, #177	; 0xb1
    3606:	f04f 0228 	mov.w	r2, #40	; 0x28
    360a:	f7fd f9d7 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(176,177,r05,160,TS_COL_BLUE,TS_MODE_NORMAL);
    360e:	f241 5370 	movw	r3, #5488	; 0x1570
    3612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    361c:	9200      	str	r2, [sp, #0]
    361e:	f04f 0200 	mov.w	r2, #0
    3622:	9201      	str	r2, [sp, #4]
    3624:	f04f 00b0 	mov.w	r0, #176	; 0xb0
    3628:	f04f 01b1 	mov.w	r1, #177	; 0xb1
    362c:	461a      	mov	r2, r3
    362e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3632:	f7fd f9c3 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(208,209,40,r06,TS_COL_WHITE,TS_MODE_NORMAL);
    3636:	f241 53e8 	movw	r3, #5608	; 0x15e8
    363a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3644:	9200      	str	r2, [sp, #0]
    3646:	f04f 0200 	mov.w	r2, #0
    364a:	9201      	str	r2, [sp, #4]
    364c:	f04f 00d0 	mov.w	r0, #208	; 0xd0
    3650:	f04f 01d1 	mov.w	r1, #209	; 0xd1
    3654:	f04f 0228 	mov.w	r2, #40	; 0x28
    3658:	f7fd f9b0 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(208,209,r06,160,TS_COL_BLUE,TS_MODE_NORMAL);
    365c:	f241 53e8 	movw	r3, #5608	; 0x15e8
    3660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3664:	681b      	ldr	r3, [r3, #0]
    3666:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    366a:	9200      	str	r2, [sp, #0]
    366c:	f04f 0200 	mov.w	r2, #0
    3670:	9201      	str	r2, [sp, #4]
    3672:	f04f 00d0 	mov.w	r0, #208	; 0xd0
    3676:	f04f 01d1 	mov.w	r1, #209	; 0xd1
    367a:	461a      	mov	r2, r3
    367c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3680:	f7fd f99c 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(240,241,40,r07,TS_COL_WHITE,TS_MODE_NORMAL);
    3684:	f241 5394 	movw	r3, #5524	; 0x1594
    3688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    368c:	681b      	ldr	r3, [r3, #0]
    368e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3692:	9200      	str	r2, [sp, #0]
    3694:	f04f 0200 	mov.w	r2, #0
    3698:	9201      	str	r2, [sp, #4]
    369a:	f04f 00f0 	mov.w	r0, #240	; 0xf0
    369e:	f04f 01f1 	mov.w	r1, #241	; 0xf1
    36a2:	f04f 0228 	mov.w	r2, #40	; 0x28
    36a6:	f7fd f989 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(240,241,r07,160,TS_COL_BLUE,TS_MODE_NORMAL);
    36aa:	f241 5394 	movw	r3, #5524	; 0x1594
    36ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36b2:	681b      	ldr	r3, [r3, #0]
    36b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    36b8:	9200      	str	r2, [sp, #0]
    36ba:	f04f 0200 	mov.w	r2, #0
    36be:	9201      	str	r2, [sp, #4]
    36c0:	f04f 00f0 	mov.w	r0, #240	; 0xf0
    36c4:	f04f 01f1 	mov.w	r1, #241	; 0xf1
    36c8:	461a      	mov	r2, r3
    36ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    36ce:	f7fd f975 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(272,273,40,r08,TS_COL_WHITE,TS_MODE_NORMAL);
    36d2:	f241 53c4 	movw	r3, #5572	; 0x15c4
    36d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36da:	681b      	ldr	r3, [r3, #0]
    36dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36e0:	9200      	str	r2, [sp, #0]
    36e2:	f04f 0200 	mov.w	r2, #0
    36e6:	9201      	str	r2, [sp, #4]
    36e8:	f44f 7088 	mov.w	r0, #272	; 0x110
    36ec:	f240 1111 	movw	r1, #273	; 0x111
    36f0:	f04f 0228 	mov.w	r2, #40	; 0x28
    36f4:	f7fd f962 	bl	9bc <TSLCDFillRect>
                TSLCDFillRect(272,273,r08,160,TS_COL_BLUE,TS_MODE_NORMAL);
    36f8:	f241 53c4 	movw	r3, #5572	; 0x15c4
    36fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    3706:	9200      	str	r2, [sp, #0]
    3708:	f04f 0200 	mov.w	r2, #0
    370c:	9201      	str	r2, [sp, #4]
    370e:	f44f 7088 	mov.w	r0, #272	; 0x110
    3712:	f240 1111 	movw	r1, #273	; 0x111
    3716:	461a      	mov	r2, r3
    3718:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    371c:	f7fd f94e 	bl	9bc <TSLCDFillRect>

}
    3720:	f7ff b84a 	b.w	27b8 <main+0x3e4>

00003724 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
    3724:	b580      	push	{r7, lr}
    3726:	b082      	sub	sp, #8
    3728:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    372a:	f247 0370 	movw	r3, #28784	; 0x7070
    372e:	f2c0 0300 	movt	r3, #0
    3732:	607b      	str	r3, [r7, #4]
    for(pulDest = &_data; pulDest < &_edata; )
    3734:	f240 0300 	movw	r3, #0
    3738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    373c:	603b      	str	r3, [r7, #0]
    373e:	e00b      	b.n	3758 <ResetISR+0x34>
    {
        *pulDest++ = *pulSrc++;
    3740:	687b      	ldr	r3, [r7, #4]
    3742:	681a      	ldr	r2, [r3, #0]
    3744:	683b      	ldr	r3, [r7, #0]
    3746:	601a      	str	r2, [r3, #0]
    3748:	683b      	ldr	r3, [r7, #0]
    374a:	f103 0304 	add.w	r3, r3, #4
    374e:	603b      	str	r3, [r7, #0]
    3750:	687b      	ldr	r3, [r7, #4]
    3752:	f103 0304 	add.w	r3, r3, #4
    3756:	607b      	str	r3, [r7, #4]

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_etext;
    for(pulDest = &_data; pulDest < &_edata; )
    3758:	683a      	ldr	r2, [r7, #0]
    375a:	f640 5364 	movw	r3, #3428	; 0xd64
    375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3762:	429a      	cmp	r2, r3
    3764:	d3ec      	bcc.n	3740 <ResetISR+0x1c>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
    3766:	4808      	ldr	r0, [pc, #32]	; (3788 <zero_loop+0x1a>)
    3768:	4908      	ldr	r1, [pc, #32]	; (378c <zero_loop+0x1e>)
    376a:	f04f 0200 	mov.w	r2, #0

0000376e <zero_loop>:
    376e:	4288      	cmp	r0, r1
    3770:	bfb8      	it	lt
    3772:	f840 2b04 	strlt.w	r2, [r0], #4
    3776:	f6ff affa 	blt.w	376e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    377a:	f7fe fe2b 	bl	23d4 <main>
}
    377e:	f107 0708 	add.w	r7, r7, #8
    3782:	46bd      	mov	sp, r7
    3784:	bd80      	pop	{r7, pc}
    3786:	0000      	.short	0x0000
    3788:	20000d64 	.word	0x20000d64
    378c:	20001624 	.word	0x20001624

00003790 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
    3790:	b480      	push	{r7}
    3792:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
    3794:	e7fe      	b.n	3794 <NmiSR+0x4>
    3796:	bf00      	nop

00003798 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
    3798:	b480      	push	{r7}
    379a:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
    379c:	e7fe      	b.n	379c <FaultISR+0x4>
    379e:	bf00      	nop

000037a0 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
    37a0:	b480      	push	{r7}
    37a2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    37a4:	e7fe      	b.n	37a4 <IntDefaultHandler+0x4>
    37a6:	bf00      	nop

000037a8 <_IQ17mpy>:
    37a8:	fb80 0101 	smull	r0, r1, r0, r1
    37ac:	ea4f 4050 	mov.w	r0, r0, lsr #17
    37b0:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    37b4:	4770      	bx	lr
    37b6:	bf00      	nop

000037b8 <__aeabi_fmul>:
    37b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    37bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    37c0:	bf1e      	ittt	ne
    37c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    37c6:	ea92 0f0c 	teqne	r2, ip
    37ca:	ea93 0f0c 	teqne	r3, ip
    37ce:	d06f      	beq.n	38b0 <__aeabi_fmul+0xf8>
    37d0:	441a      	add	r2, r3
    37d2:	ea80 0c01 	eor.w	ip, r0, r1
    37d6:	0240      	lsls	r0, r0, #9
    37d8:	bf18      	it	ne
    37da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    37de:	d01e      	beq.n	381e <__aeabi_fmul+0x66>
    37e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    37e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    37e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    37ec:	fba0 3101 	umull	r3, r1, r0, r1
    37f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    37f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    37f8:	bf3e      	ittt	cc
    37fa:	0049      	lslcc	r1, r1, #1
    37fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    3800:	005b      	lslcc	r3, r3, #1
    3802:	ea40 0001 	orr.w	r0, r0, r1
    3806:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    380a:	2afd      	cmp	r2, #253	; 0xfd
    380c:	d81d      	bhi.n	384a <__aeabi_fmul+0x92>
    380e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3812:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    3816:	bf08      	it	eq
    3818:	f020 0001 	biceq.w	r0, r0, #1
    381c:	4770      	bx	lr
    381e:	f090 0f00 	teq	r0, #0
    3822:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    3826:	bf08      	it	eq
    3828:	0249      	lsleq	r1, r1, #9
    382a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    382e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    3832:	3a7f      	subs	r2, #127	; 0x7f
    3834:	bfc2      	ittt	gt
    3836:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    383a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    383e:	4770      	bxgt	lr
    3840:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    3844:	f04f 0300 	mov.w	r3, #0
    3848:	3a01      	subs	r2, #1
    384a:	dc5d      	bgt.n	3908 <__aeabi_fmul+0x150>
    384c:	f112 0f19 	cmn.w	r2, #25
    3850:	bfdc      	itt	le
    3852:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    3856:	4770      	bxle	lr
    3858:	f1c2 0200 	rsb	r2, r2, #0
    385c:	0041      	lsls	r1, r0, #1
    385e:	fa21 f102 	lsr.w	r1, r1, r2
    3862:	f1c2 0220 	rsb	r2, r2, #32
    3866:	fa00 fc02 	lsl.w	ip, r0, r2
    386a:	ea5f 0031 	movs.w	r0, r1, rrx
    386e:	f140 0000 	adc.w	r0, r0, #0
    3872:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    3876:	bf08      	it	eq
    3878:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    387c:	4770      	bx	lr
    387e:	f092 0f00 	teq	r2, #0
    3882:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    3886:	bf02      	ittt	eq
    3888:	0040      	lsleq	r0, r0, #1
    388a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    388e:	3a01      	subeq	r2, #1
    3890:	d0f9      	beq.n	3886 <__aeabi_fmul+0xce>
    3892:	ea40 000c 	orr.w	r0, r0, ip
    3896:	f093 0f00 	teq	r3, #0
    389a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    389e:	bf02      	ittt	eq
    38a0:	0049      	lsleq	r1, r1, #1
    38a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    38a6:	3b01      	subeq	r3, #1
    38a8:	d0f9      	beq.n	389e <__aeabi_fmul+0xe6>
    38aa:	ea41 010c 	orr.w	r1, r1, ip
    38ae:	e78f      	b.n	37d0 <__aeabi_fmul+0x18>
    38b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    38b4:	ea92 0f0c 	teq	r2, ip
    38b8:	bf18      	it	ne
    38ba:	ea93 0f0c 	teqne	r3, ip
    38be:	d00a      	beq.n	38d6 <__aeabi_fmul+0x11e>
    38c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    38c4:	bf18      	it	ne
    38c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    38ca:	d1d8      	bne.n	387e <__aeabi_fmul+0xc6>
    38cc:	ea80 0001 	eor.w	r0, r0, r1
    38d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    38d4:	4770      	bx	lr
    38d6:	f090 0f00 	teq	r0, #0
    38da:	bf17      	itett	ne
    38dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    38e0:	4608      	moveq	r0, r1
    38e2:	f091 0f00 	teqne	r1, #0
    38e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    38ea:	d014      	beq.n	3916 <__aeabi_fmul+0x15e>
    38ec:	ea92 0f0c 	teq	r2, ip
    38f0:	d101      	bne.n	38f6 <__aeabi_fmul+0x13e>
    38f2:	0242      	lsls	r2, r0, #9
    38f4:	d10f      	bne.n	3916 <__aeabi_fmul+0x15e>
    38f6:	ea93 0f0c 	teq	r3, ip
    38fa:	d103      	bne.n	3904 <__aeabi_fmul+0x14c>
    38fc:	024b      	lsls	r3, r1, #9
    38fe:	bf18      	it	ne
    3900:	4608      	movne	r0, r1
    3902:	d108      	bne.n	3916 <__aeabi_fmul+0x15e>
    3904:	ea80 0001 	eor.w	r0, r0, r1
    3908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    390c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    3910:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    3914:	4770      	bx	lr
    3916:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    391a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    391e:	4770      	bx	lr

00003920 <__aeabi_fdiv>:
    3920:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3924:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    3928:	bf1e      	ittt	ne
    392a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    392e:	ea92 0f0c 	teqne	r2, ip
    3932:	ea93 0f0c 	teqne	r3, ip
    3936:	d069      	beq.n	3a0c <__aeabi_fdiv+0xec>
    3938:	eba2 0203 	sub.w	r2, r2, r3
    393c:	ea80 0c01 	eor.w	ip, r0, r1
    3940:	0249      	lsls	r1, r1, #9
    3942:	ea4f 2040 	mov.w	r0, r0, lsl #9
    3946:	d037      	beq.n	39b8 <__aeabi_fdiv+0x98>
    3948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    394c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    3950:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    3954:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    3958:	428b      	cmp	r3, r1
    395a:	bf38      	it	cc
    395c:	005b      	lslcc	r3, r3, #1
    395e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    3962:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    3966:	428b      	cmp	r3, r1
    3968:	bf24      	itt	cs
    396a:	1a5b      	subcs	r3, r3, r1
    396c:	ea40 000c 	orrcs.w	r0, r0, ip
    3970:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    3974:	bf24      	itt	cs
    3976:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    397a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    397e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    3982:	bf24      	itt	cs
    3984:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    3988:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    398c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    3990:	bf24      	itt	cs
    3992:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    3996:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    399a:	011b      	lsls	r3, r3, #4
    399c:	bf18      	it	ne
    399e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    39a2:	d1e0      	bne.n	3966 <__aeabi_fdiv+0x46>
    39a4:	2afd      	cmp	r2, #253	; 0xfd
    39a6:	f63f af50 	bhi.w	384a <__aeabi_fmul+0x92>
    39aa:	428b      	cmp	r3, r1
    39ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    39b0:	bf08      	it	eq
    39b2:	f020 0001 	biceq.w	r0, r0, #1
    39b6:	4770      	bx	lr
    39b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    39bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    39c0:	327f      	adds	r2, #127	; 0x7f
    39c2:	bfc2      	ittt	gt
    39c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    39c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    39cc:	4770      	bxgt	lr
    39ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    39d2:	f04f 0300 	mov.w	r3, #0
    39d6:	3a01      	subs	r2, #1
    39d8:	e737      	b.n	384a <__aeabi_fmul+0x92>
    39da:	f092 0f00 	teq	r2, #0
    39de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    39e2:	bf02      	ittt	eq
    39e4:	0040      	lsleq	r0, r0, #1
    39e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    39ea:	3a01      	subeq	r2, #1
    39ec:	d0f9      	beq.n	39e2 <__aeabi_fdiv+0xc2>
    39ee:	ea40 000c 	orr.w	r0, r0, ip
    39f2:	f093 0f00 	teq	r3, #0
    39f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    39fa:	bf02      	ittt	eq
    39fc:	0049      	lsleq	r1, r1, #1
    39fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    3a02:	3b01      	subeq	r3, #1
    3a04:	d0f9      	beq.n	39fa <__aeabi_fdiv+0xda>
    3a06:	ea41 010c 	orr.w	r1, r1, ip
    3a0a:	e795      	b.n	3938 <__aeabi_fdiv+0x18>
    3a0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    3a10:	ea92 0f0c 	teq	r2, ip
    3a14:	d108      	bne.n	3a28 <__aeabi_fdiv+0x108>
    3a16:	0242      	lsls	r2, r0, #9
    3a18:	f47f af7d 	bne.w	3916 <__aeabi_fmul+0x15e>
    3a1c:	ea93 0f0c 	teq	r3, ip
    3a20:	f47f af70 	bne.w	3904 <__aeabi_fmul+0x14c>
    3a24:	4608      	mov	r0, r1
    3a26:	e776      	b.n	3916 <__aeabi_fmul+0x15e>
    3a28:	ea93 0f0c 	teq	r3, ip
    3a2c:	d104      	bne.n	3a38 <__aeabi_fdiv+0x118>
    3a2e:	024b      	lsls	r3, r1, #9
    3a30:	f43f af4c 	beq.w	38cc <__aeabi_fmul+0x114>
    3a34:	4608      	mov	r0, r1
    3a36:	e76e      	b.n	3916 <__aeabi_fmul+0x15e>
    3a38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    3a3c:	bf18      	it	ne
    3a3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    3a42:	d1ca      	bne.n	39da <__aeabi_fdiv+0xba>
    3a44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    3a48:	f47f af5c 	bne.w	3904 <__aeabi_fmul+0x14c>
    3a4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    3a50:	f47f af3c 	bne.w	38cc <__aeabi_fmul+0x114>
    3a54:	e75f      	b.n	3916 <__aeabi_fmul+0x15e>
    3a56:	bf00      	nop

00003a58 <__aeabi_f2iz>:
    3a58:	ea4f 0240 	mov.w	r2, r0, lsl #1
    3a5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    3a60:	d30f      	bcc.n	3a82 <__aeabi_f2iz+0x2a>
    3a62:	f04f 039e 	mov.w	r3, #158	; 0x9e
    3a66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    3a6a:	d90d      	bls.n	3a88 <__aeabi_f2iz+0x30>
    3a6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    3a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3a74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    3a78:	fa23 f002 	lsr.w	r0, r3, r2
    3a7c:	bf18      	it	ne
    3a7e:	4240      	negne	r0, r0
    3a80:	4770      	bx	lr
    3a82:	f04f 0000 	mov.w	r0, #0
    3a86:	4770      	bx	lr
    3a88:	f112 0f61 	cmn.w	r2, #97	; 0x61
    3a8c:	d101      	bne.n	3a92 <__aeabi_f2iz+0x3a>
    3a8e:	0242      	lsls	r2, r0, #9
    3a90:	d105      	bne.n	3a9e <__aeabi_f2iz+0x46>
    3a92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    3a96:	bf08      	it	eq
    3a98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    3a9c:	4770      	bx	lr
    3a9e:	f04f 0000 	mov.w	r0, #0
    3aa2:	4770      	bx	lr

00003aa4 <font>:
	...
    3ab8:	0000 d007 0000 0000 0000 0000 0000 0000     ................
    3ac8:	0007 0000 0007 0000 0000 0000 0000 2801     ...............(
    3ad8:	f003 2805 f003 2005 0000 0000 0000 0000     ...(... ........
    3ae8:	2001 b802 a006 4002 0000 0000 0000 0000     . .....@........
    3af8:	0000 8002 a005 d002 a000 0000 0000 6000     ...............`
    3b08:	9001 5002 7002 1000 0000 0000 0000 0000     ...P.p..........
    3b18:	0000 0007 0000 0000 0000 0000 0000 0000     ................
    3b28:	e001 1806 0000 0000 0000 0000 0000 0000     ................
    3b38:	0000 0000 1806 e001 0000 0000 0000 0000     ................
    3b48:	0002 8002 0007 8002 0002 0000 0000 8000     ................
    3b58:	8000 f007 8000 8000 0000 0000 0000 0000     ................
    3b68:	0c00 1800 1000 0000 0000 0000 0000 8000     ................
    3b78:	8000 8000 8000 8000 0000 0000 0000 0000     ................
    3b88:	0000 1000 1000 0000 0000 0000 0000 0000     ................
    3b98:	0800 3000 c000 0003 0004 0000 0000 0000     ...0............
    3ba8:	e003 1004 1004 1004 e003 0000 0000 0000     ................
    3bb8:	1000 1004 f007 1000 1000 0000 0000 0000     ................
    3bc8:	3002 5004 9004 1005 1002 0000 0000 0000     .0.P............
    3bd8:	2002 1004 9004 9004 6003 0000 0000 c000     . .......`......
    3be8:	4001 5002 f007 5000 0000 0000 0000 0000     .@.P...P........
    3bf8:	2000 9007 9004 9004 6004 0000 0000 e001     . .......`......
    3c08:	9002 9004 9004 6004 0000 0000 0000 0000     .......`........
    3c18:	0006 0004 3004 c004 0007 0000 0000 6003     .....0.........`
    3c28:	9004 9004 9004 6003 0000 0000 0000 1003     .......`........
    3c38:	9004 9004 a004 c003 0000 0000 0000 0000     ................
    3c48:	1001 1001 0000 0000 0000 0000 0000 0000     ................
    3c58:	1800 3001 2001 0000 0000 0000 0000 0000     ...0. ..........
    3c68:	8000 8000 4001 4001 2002 0000 0000 0000     .....@.@. ......
    3c78:	4001 4001 4001 4001 4001 0000 0000 2002     .@.@.@.@.@..... 
    3c88:	4001 4001 8000 8000 0000 0000 0000 0000     .@.@............
    3c98:	0002 1004 d004 0003 0000 0000 0000 0000     ................
    3ca8:	f003 0804 c804 2805 e803 0000 1000 3000     .......(.......0
    3cb8:	d005 4006 d001 3000 1000 0000 0000 1004     ...@...0........
    3cc8:	f007 9004 9004 9004 6003 0000 0000 e003     .........`......
    3cd8:	1004 1004 1004 2006 0000 0000 0000 1004     ....... ........
    3ce8:	f007 1004 1004 2002 c001 0000 0000 0000     ....... ........
    3cf8:	1004 f007 9004 d005 3006 0000 0000 1004     .........0......
    3d08:	f007 9004 c005 0006 0000 0000 0000 e003     ................
    3d18:	1004 1004 5004 6006 4000 0000 1004 f007     .....P.`.@......
    3d28:	9004 8000 9004 f007 1004 0000 0000 1004     ................
    3d38:	1004 f007 1004 1004 0000 0000 0000 6000     ...............`
    3d48:	1004 1004 e007 0004 0000 0000 1004 f007     ................
    3d58:	9004 8000 4005 3006 1004 0000 0000 1004     .....@.0........
    3d68:	f007 1004 1000 7000 0000 0000 0000 1004     .......p........
    3d78:	f007 1007 8000 1007 f007 1004 0000 1004     ................
    3d88:	f007 1007 c000 3004 f007 0004 0000 e003     .......0........
    3d98:	1004 1004 1004 e003 0000 0000 0000 0000     ................
    3da8:	1004 f007 5004 4004 8003 0000 0000 0000     .....P.@........
    3db8:	e003 1004 1804 1804 e803 0000 0000 1004     ................
    3dc8:	f007 5004 4004 a003 1000 0000 0000 0000     ...P.@..........
    3dd8:	3003 9004 9004 9002 6006 0000 0000 0000     .0.......`......
    3de8:	0006 1004 f007 1004 0006 0000 0000 0004     ................
    3df8:	e007 1004 1000 1004 e007 0004 0004 8007     ................
    3e08:	7004 1000 e004 0007 0004 0000 0004 e007     .p..............
    3e18:	1004 e001 1004 e007 0004 0000 0000 1004     ................
    3e28:	3006 4001 8000 4001 3006 1004 0004 0006     .0.@...@.0......
    3e38:	1005 f000 1005 0006 0004 0000 0000 3006     ...............0
    3e48:	5004 9004 1005 3006 0000 0000 0000 0000     .P.....0........
    3e58:	0000 f807 0804 0000 0000 0000 0000 0000     ................
    3e68:	0004 0003 e000 1800 0000 0000 0000 0000     ................
    3e78:	0000 0804 f807 0000 0000 0000 0000 0000     ................
    3e88:	0001 0002 0004 0002 0001 0000 0000 0400     ................
    3e98:	0400 0400 0400 0400 0400 0400 0000 0000     ................
    3ea8:	0000 0003 8000 0000 0000 0000 0000 b000     ................
    3eb8:	5001 5001 5001 f000 1000 0000 0000 1004     .P.P.P..........
    3ec8:	f007 9000 1001 1001 e000 0000 0000 e000     ................
    3ed8:	1001 1001 1001 9001 0000 0000 0000 e000     ................
    3ee8:	1001 1001 9004 f007 1000 0000 0000 0000     ................
    3ef8:	e000 5001 5001 5001 d000 0000 0000 0000     ...P.P.P........
    3f08:	1001 f003 1005 1005 0000 0000 0000 e000     ................
    3f18:	1401 1401 9400 f801 0001 0000 0000 1004     ................
    3f28:	f007 9000 0001 1001 f000 1000 0000 1001     ................
    3f38:	1001 f005 1000 1000 0000 0000 0000 0401     ................
    3f48:	0401 0405 f801 0000 0000 0000 0000 1004     ................
    3f58:	f007 4000 5001 b001 1001 0000 0000 0000     ...@.P..........
    3f68:	1000 1004 f007 1000 1000 0000 1001 f001     ................
    3f78:	1001 f000 1001 f000 1000 0000 0000 1001     ................
    3f88:	f001 9000 0001 1001 f000 1000 0000 0000     ................
    3f98:	e000 1001 1001 1001 e000 0000 0000 0000     ................
    3fa8:	0401 fc01 9400 1001 1001 e000 0000 e000     ................
    3fb8:	1001 1001 9400 fc01 0401 0000 0000 0000     ................
    3fc8:	1001 f001 9000 1001 0001 0000 0000 9000     ................
    3fd8:	5001 5001 5001 2001 0000 0000 0000 0001     .P.P.P. ........
    3fe8:	e003 1001 1001 1001 2000 0000 0000 0001     ......... ......
    3ff8:	e001 1000 1000 2001 f001 1000 0000 0001     ....... ........
    4008:	c001 3001 1000 6001 8001 0001 0000 0001     ...0...`........
    4018:	e001 1001 6000 1001 e001 0001 0000 0000     .....`..........
    4028:	1001 b001 4000 b001 1001 0000 0000 0001     .....@..........
    4038:	8401 6401 1c00 6001 8001 0001 0000 0000     ...d...`........
    4048:	9001 3001 5001 9001 3001 0000 0000 0000     ...0.P...0......
    4058:	8000 f007 0808 0000 0000 0000 0000 0000     ................
    4068:	0000 f807 0000 0000 0000 0000 0000 0000     ................
    4078:	0000 0808 f007 8000 0000 0000 0000 4000     ...............@
    4088:	8000 c000 4000 8000 0000 0000 0000 0000     .....@..........
	...
    40a4:	0000 e000 1001 1001 1001 e000 0000 0000     ................
    40b4:	0000 e000 1001 7001 1001 e000 0000 0000     .......p........
    40c4:	f007 1000 d001 1001 d000 1001 e001 0000     ................
    40d4:	e000 1001 3001 0001 f000 0001 f000 0000     .....0..........
    40e4:	6000 9000 9000 1001 7001 5001 1006 0000     .`.......p.P....
    40f4:	e000 9000 1007 1006 d002 e002 1004 0000     ................
    4104:	0000 0000 0004 6003 7001 1001 e000 0000     .......`.p......
    4114:	e000 1001 3001 8000 1001 f005 3002 c001     .....0.......0..
    4124:	e000 1001 2001 2001 9000 b000 b000 0007     ..... . ........
    4134:	6000 9003 9002 b002 b002 0006 0000 0000     .`..............
    4144:	0000 0003 f005 0005 0004 f003 0000 0000     ................
    4154:	0000 8003 8005 0004 f007 1000 f007 0000     ................
    4164:	0000 8003 f004 8005 0002 0004 f003 0000     ................
    4174:	0000 8003 7004 c004 0004 f003 0000 0000     .....p..........
    4184:	0000 8003 f004 8005 0002 0004 f003 0000     ................
    4194:	8003 8002 b005 f003 2000 2000 f003 0000     ......... . ....
    41a4:	0000 0000 c000 6000 3006 f007 0000 0000     .......`.0......
    41b4:	0000 0000 c004 f004 1004 f003 0000 0000     ................
    41c4:	0000 8001 f005 2004 2004 f003 3000 0000     ....... . ...0..
    41d4:	0000 0007 0005 f007 1002 e003 0004 0000     ................
    41e4:	0000 8003 8005 0002 f007 1002 f005 0000     ................
    41f4:	3003 f005 0005 3004 f003 2000 f007 0000     .0.....0... ....
    4204:	0003 f005 3005 0004 e603 1600 1200 e607     .....0..........
    4214:	0000 0000 3003 f605 0e05 0c04 fe03 0000     .....0..........
    4224:	0000 0000 3003 f605 0e05 0a04 fe03 0000     .....0..........
    4234:	0000 0000 0200 6306 7506 1706 f705 0000     .......c.u......
    4244:	8007 8003 0004 f007 0003 0004 f003 0000     ................
    4254:	c003 3006 c006 0003 3004 f003 2000 f007     ...0.....0... ..
    4264:	0003 f005 3005 0004 f003 2000 f007 3000     .....0..... ...0
    4274:	0000 8003 7006 4005 8005 0004 f003 0000     .....p.@........
    4284:	0000 8003 7004 2006 c003 0004 f003 0000     .....p. ........
    4294:	0000 0000 0003 f005 3005 0004 f003 0000     .........0......
    42a4:	0000 0006 f007 8001 0006 0004 f007 0000     ................
    42b4:	0000 0000 0000 1007 f005 9002 f006 0000     ................
    42c4:	0000 0000 0006 f007 2000 7000 f007 0000     ......... .p....
    42d4:	0000 0000 1006 f007 1000 1000 f007 0000     ................
    42e4:	0000 0000 0006 f007 1000 1000 f07f 0000     ................
    42f4:	0000 0000 f007 4006 8000 4000 f007 0000     .......@...@....
    4304:	0000 0000 f007 4006 8000 4000 f03f 0000     .......@...@?...
    4314:	0000 0006 f007 c001 0007 c000 f007 0000     ................
    4324:	0000 0006 f007 c001 0007 c000 f03f 0000     ............?...
    4334:	0000 0000 3003 f005 0005 0004 f003 0000     .....0..........
    4344:	0000 0000 3006 f007 2000 1000 f007 0000     .....0... ......
    4354:	0000 0000 f007 9006 1000 1000 f007 0000     ................
    4364:	0000 0000 0000 0002 0005 3005 f005 0000     ...........0....
    4374:	0000 0000 0004 f005 3005 0005 f003 0000     .........0......
    4384:	0000 0000 0002 0004 0004 3004 f003 0000     ...........0....
    4394:	0000 0000 0003 f005 8005 0005 f007 0000     ................
    43a4:	0000 0000 1006 f007 d000 5000 f007 0000     ...........P....
    43b4:	0000 0004 f005 3005 0005 f003 0006 0000     .......0........
    43c4:	0000 0000 0006 f007 8000 0007 f007 0000     ................
    43d4:	0000 0006 f003 6000 8003 e004 f007 0004     .......`........
    43e4:	0000 0000 f004 d004 1004 e003 0000 0000     ................
    43f4:	0000 0000 e005 9005 1004 e007 0000 0000     ................
    4404:	0000 3003 3003 1001 1001 2002 0000 0000     ...0.0..... ....
    4414:	0000 0000 0004 0004 0004 f003 0000 0000     ................
    4424:	0000 0030 0050 0050 0050 0030 0000 0000     ..0.P.P.P.0.....
    4434:	0000 0000 0030 0050 0050 0050 00f0 0000     ....0.P.P.P.....
	...
    444c:	0000 0600 0700 0000 0000 0000 0000 0600     ................
    445c:	0700 0100 0700 0000 0000 0020 0050 f02f     .......... .P./.
    446c:	3060 0000 0000 0000 0000 0000 0000 f007     `0..............
    447c:	3000 0000 0000 0000 0000 0000 f007 3000     .0.............0
    448c:	0000 f007 3000 0000 0000 0000 0000 0000     .....0..........
    449c:	0000 0030 0030 0000 0000 0000 0000 f003     ..0.0...........
    44ac:	3005 0004 fe03 0000 0000 0000 8003 8000     .0..............
    44bc:	8003 0004 f007 0000 0000 0000 0000 0000     ................
    44cc:	0000 0000 8003 0000 0000 0000 0000 0000     ................
    44dc:	8006 8007 0001 0006 0000 0000 0000 8003     ................
    44ec:	0002 8003 8000 0003 0000 0000 0000 0000     ................
    44fc:	0003 8002 8002 8006 0000 0000 0000 0001     ................
    450c:	8003 0001 0000 0000 0000 0000 0000 0000     ................
    451c:	c000 4003 0004 0000 0000 0000 0000 0000     ...@............
	...

000045a4 <g_pulDCRegs>:
    45a4:	e010 400f e014 400f e01c 400f e010 400f     ...@...@...@...@

000045b4 <g_pulSRCRRegs>:
    45b4:	e040 400f e044 400f e048 400f               @..@D..@H..@

000045c0 <g_pulRCGCRegs>:
    45c0:	e100 400f e104 400f e108 400f               ...@...@...@

000045cc <g_pulSCGCRegs>:
    45cc:	e110 400f e114 400f e118 400f               ...@...@...@

000045d8 <g_pulDCGCRegs>:
    45d8:	e120 400f e124 400f e128 400f                ..@$..@(..@

000045e4 <g_pulXtals>:
    45e4:	4240 000f 2000 001c 8480 001e 8000 0025     @B... ........%.
    45f4:	9e99 0036 4000 0038 0900 003d 8000 003e     ..6..@8...=...>.
    4604:	0000 004b 4b40 004c 2000 004e 8d80 005b     ..K.@KL.. N...[.
    4614:	c000 005d 8000 0070 1200 007a 0000 007d     ..]...p...z...}.
    4624:	9680 0098 1b00 00b7 8000 00bb e8c0 00ce     ................
    4634:	7a64 00da 2400 00f4 0000 00fa a880 0112     dz...$..........
    4644:	2d00 0131 3600 016e 7840 017d               .-1..6n.@x}.

00004650 <g_ppulPeripheralMap>:
    4650:	0001 0010 3800 f000 0002 0010 3801 f000     .....8.......8..
    4660:	0100 0010 3400 f000 0200 0010 3401 f000     .....4.......4..
    4670:	0400 0010 3402 f000 0100 1010 3c00 f000     .....4.......<..
    4680:	0200 1010 3c00 f000 0400 1010 3c00 f000     .....<.......<..
    4690:	0001 2000 0800 f000 0002 2000 0801 f000     ... ....... ....
    46a0:	0004 2000 0802 f000 0008 2000 0803 f000     ... ....... ....
    46b0:	0010 2000 0804 f000 0020 2000 0805 f000     ... .... .. ....
    46c0:	0040 2000 0806 f000 0080 2000 0807 f000     @.. ....... ....
    46d0:	0100 2000 0808 f000 0040 0000 1400 f000     ... ....@.......
    46e0:	1000 1000 2000 f000 4000 1000 2001 f000     ..... ...@... ..
    46f0:	0010 0010 4000 f000 0100 1000 4400 f000     .....@.......D..
    4700:	0200 1000 4401 f000 0010 1000 1c00 f000     .....D..........
    4710:	0020 1000 1c01 f000 0001 1010 0400 f000      ...............
    4720:	0002 1010 0401 f000 0004 1010 0402 f000     ................
    4730:	0008 1010 0403 f000 0001 1000 1800 f000     ................
    4740:	0002 1000 1801 f000 0004 1000 1802 f000     ................
    4750:	2000 2000 0c00 f000 0001 2010 2800 f000     . . ....... .(..
    4760:	0008 0000 0000 f000 1000 0010 0001 f000     ................

00004770 <b1>:
    4770:	37bd 3706 37bd 3606 539c 3649 539c 3649     .7.7.7.6.SI6.SI6
    4780:	539c 3649 37bd 3686 37bd 3686 37bd 3686     .SI6.7.6.7.6.7.6
    4790:	c5ac 36a7 c5ac 36a7 c5ac 36a7 539c 36c9     ...6...6...6.S.6
    47a0:	539c 36c9 539c 36c9 539c 36c9 539c 36c9     .S.6.S.6.S.6.S.6
    47b0:	539c 36c9 539c 36c9 c5ac 36a7 c5ac 36a7     .S.6.S.6...6...6
    47c0:	37bd 3686 539c 3649 37bd 3606 0000 0000     .7.6.SI6.7.6....
    47d0:	37bd b606 37bd b686 e18b b6ea c5ac b727     .7...7........'.
    47e0:	1a93 b75a 9b39 b78e 2928 b7b0 1a93 b7da     ..Z.9...()......
    47f0:	37bd b806 6230 b81f f020 b840 7e0f b862     .7..0b.. .@..~b.
    4800:	05ff b882 feb5 b896 1049 b8ae 21de b8c5     ........I....!..
    4810:	6530 b8e0 c161 b8fd 9b39 b90e 6ea0 b920     0e..a...9....n .
    4820:	4e77 b933 3abd b947 3fe2 b95d 5176 b974     wN3..:G..?].vQt.
    4830:	bdf5 b986 5f9e b994 0db7 b9a3 c83f b9b2     ....._......?...
    4840:	08ff b9c3 dc66 b9d4 bc3c b9e7 a882 b9fb     ....f...<.......
    4850:	509c ba08 964a ba13 6230 ba1f f76a ba2b     .P..J...0b..j.+.
    4860:	12dc ba39 f7a1 ba46 629e ba55 96ee ba64     ..9...F..bU...d.
    4870:	d7ae ba74 adc5 ba82 75ea ba8b a2ba ba94     ..t......u......
    4880:	3433 ba9e 2a56 baa8 8523 bab2 449a babd     34..V*..#....D..
    4890:	68ba bac8 f184 bad3 def8 badf 3116 baec     .h...........1..
    48a0:	096c baf9 126f bb03 d27c bb09 d5a6 bb10     l...o...|.......
    48b0:	fa5d bb17 5169 bb1f dacb bb26 85ba bb2e     ]...iQ....&.....
    48c0:	62fe bb36 7297 bb3e a3be bb46 f673 bb4e     .b6..r>...F.s.N.
    48d0:	7b7c bb57 114d bb60 d973 bb68 b25f bb71     |{W.M.`.s.h._.q.
    48e0:	9c13 bb7a d3aa bb81 61ae bb86 f816 bb8a     ..z......a......
    48f0:	8e7e bb8f 35ad bb94 d478 bb98 7343 bb9d     ~....5..x...Cs..
    4900:	120e bba2 b0d9 bba6 4741 bbab cce2 bbaf     ........AG......
    4910:	5283 bbb4 bef9 bbb8 230c bbbd 6df4 bbc1     .R.......#...m..
    4920:	a815 bbc5 c0a9 bbc9 c875 bbcd a650 bbd1     ........u...P...
    4930:	6b01 bbd5 0e24 bbd9 8755 bbdc d695 bbdf     .k..$...U.......
    4940:	f380 bbe2 e679 bbe5 a71e bbe8 2d0a bbeb     ....y........-..
    4950:	80a1 bbed 911d bbef 66e0 bbf1 01eb bbf3     .........f......
    4960:	5176 bbf4 5de6 bbf5 1ed6 bbf6 9caa bbf6     vQ...]..........
    4970:	c69b bbf6 9caa bbf6 2739 bbf6 5de6 bbf5     ........9'...]..
    4980:	384c bbf4 becf bbf2 e90c bbf0 b702 bbee     L8..............
    4990:	28b3 bbec 3e1d bbe9 eedd bbe5 4357 bbe2     .(...>......WC..
    49a0:	3b8a bbde c6b0 bbd9 f590 bbd4 bfc6 bbcf     .;..............
    49b0:	2553 bbca 2635 bbc4 cad1 bbbd 0ac4 bbb7     S%..5&..........
    49c0:	e60c bbaf 650e bba8 87ca bba0 45dd bb98     .....e.......E..
    49d0:	a7a8 bb8f ad2e bb86 bda1 bb7a 685a bb67     ..........z.Zhg.
    49e0:	7c13 bb53 d741 bb3e 9b6f bb29 d966 bb13     .|S.A.>.o.).f...
    49f0:	df2f bafa ff22 bacc 12a5 ba9e 768e ba5c     /..."........v\.
    4a00:	e41d b9f5 be62 b8bc aa3b 399a 9192 3a33     ....b...;..9..3:
    4a10:	8ec9 3a8d fc8f 3ac1 ceff 3af6 030c 3b16     ...:...:...:...;
    4a20:	d0ee 3b30 c05d 3b4b d15b 3b66 f12c 3b80     ..0;].K;[.f;,..;
    4a30:	79ab 3b8e f9c6 3b9b 717e 3ba9 e0d2 3bb6     .y.;...;~q.;...;
    4a40:	2e99 3bc4 6b98 3bd1 7ea6 3bde 7026 3beb     ...;.k.;.~.;&p.;
    4a50:	37b5 3bf8 6677 3c02 93b8 3c08 a39c 3c0e     .7.;wf.<...<...<
    4a60:	91f3 3c14 5ebb 3c1a 0193 3c20 7eaa 3c25     ...<.^.<.. <.~%<
    4a70:	d1d0 3c2a f2a1 3c2f e54f 3c34 a5a9 3c39     ..*<../<O.4<..9<
    4a80:	33ad 3c3e 8b2a 3c42 a7f0 3c46 89fc 3c4a     .3><*.B<..F<..J<
    4a90:	2d1f 3c4e 9589 3c51 bf0a 3c54 a56e 3c57     .-N<..Q<..T<n.W<
    4aa0:	4ce8 3c5a ad15 3c5c c5f4 3c5e 9bb7 3c60     .LZ<..\<..^<..`<
    4ab0:	2e5e 3c62 7586 3c63 7560 3c64 29bb 3c65     ^.b<.uc<`ud<.)e<
    4ac0:	96c8 3c65 bc88 3c65 96c8 3c65 29bb 3c65     ..e<..e<..e<.)e<
    4ad0:	7560 3c64 7586 3c63 2e5e 3c62 9bb7 3c60     `ud<.uc<^.b<..`<
    4ae0:	c5f4 3c5e ad15 3c5c 4ce8 3c5a a56e 3c57     ..^<..\<.LZ<n.W<
    4af0:	bf0a 3c54 9589 3c51 2d1f 3c4e 89fc 3c4a     ..T<..Q<.-N<..J<
    4b00:	a7f0 3c46 8b2a 3c42 33ad 3c3e a5a9 3c39     ..F<*.B<.3><..9<
    4b10:	e54f 3c34 f2a1 3c2f d1d0 3c2a 7eaa 3c25     O.4<../<..*<.~%<
    4b20:	0193 3c20 5ebb 3c1a 91f3 3c14 a39c 3c0e     .. <.^.<...<...<
    4b30:	93b8 3c08 6677 3c02 37b5 3bf8 7026 3beb     ...<wf.<.7.;&p.;
    4b40:	7ea6 3bde 6b98 3bd1 2e99 3bc4 e0d2 3bb6     .~.;.k.;...;...;
    4b50:	717e 3ba9 f9c6 3b9b 79ab 3b8e f12c 3b80     ~q.;...;.y.;,..;
    4b60:	d15b 3b66 c05d 3b4b d0ee 3b30 030c 3b16     [.f;].K;..0;...;
    4b70:	ceff 3af6 fc8f 3ac1 8ec9 3a8d 9192 3a33     ...:...:...:..3:
    4b80:	aa3b 399a be62 b8bc e41d b9f5 768e ba5c     ;..9b........v\.
    4b90:	12a5 ba9e ff22 bacc df2f bafa d966 bb13     ....".../...f...
    4ba0:	9b6f bb29 d741 bb3e 7c13 bb53 685a bb67     o.).A.>..|S.Zhg.
    4bb0:	bda1 bb7a ad2e bb86 a7a8 bb8f 45dd bb98     ..z..........E..
    4bc0:	87ca bba0 650e bba8 e60c bbaf 0ac4 bbb7     .....e..........
    4bd0:	cad1 bbbd 2635 bbc4 2553 bbca bfc6 bbcf     ....5&..S%......
    4be0:	f590 bbd4 c6b0 bbd9 3b8a bbde 4357 bbe2     .........;..WC..
    4bf0:	eedd bbe5 3e1d bbe9 28b3 bbec b702 bbee     .....>...(......
    4c00:	e90c bbf0 becf bbf2 384c bbf4 5de6 bbf5     ........L8...]..
    4c10:	2739 bbf6 9caa bbf6 c69b bbf6 9caa bbf6     9'..............
    4c20:	1ed6 bbf6 5de6 bbf5 5176 bbf4 01eb bbf3     .....]..vQ......
    4c30:	66e0 bbf1 911d bbef 80a1 bbed 2d0a bbeb     .f...........-..
    4c40:	a71e bbe8 e679 bbe5 f380 bbe2 d695 bbdf     ....y...........
    4c50:	8755 bbdc 0e24 bbd9 6b01 bbd5 a650 bbd1     U...$....k..P...
    4c60:	c875 bbcd c0a9 bbc9 a815 bbc5 6df4 bbc1     u............m..
    4c70:	230c bbbd bef9 bbb8 5283 bbb4 cce2 bbaf     .#.......R......
    4c80:	4741 bbab b0d9 bba6 120e bba2 7343 bb9d     AG..........Cs..
    4c90:	d478 bb98 35ad bb94 8e7e bb8f f816 bb8a     x....5..~.......
    4ca0:	61ae bb86 d3aa bb81 9c13 bb7a b25f bb71     .a........z._.q.
    4cb0:	d973 bb68 114d bb60 7b7c bb57 f673 bb4e     s.h.M.`.|{W.s.N.
    4cc0:	a3be bb46 7297 bb3e 62fe bb36 85ba bb2e     ..F..r>..b6.....
    4cd0:	dacb bb26 5169 bb1f fa5d bb17 d5a6 bb10     ..&.iQ..].......
    4ce0:	d27c bb09 126f bb03 096c baf9 3116 baec     |...o...l....1..
    4cf0:	def8 badf f184 bad3 68ba bac8 449a babd     .........h...D..
    4d00:	8523 bab2 2a56 baa8 3433 ba9e a2ba ba94     #...V*..34......
    4d10:	75ea ba8b adc5 ba82 d7ae ba74 96ee ba64     .u........t...d.
    4d20:	629e ba55 f7a1 ba46 12dc ba39 f76a ba2b     .bU...F...9.j.+.
    4d30:	6230 ba1f 964a ba13 509c ba08 a882 b9fb     0b..J....P......
    4d40:	bc3c b9e7 dc66 b9d4 08ff b9c3 c83f b9b2     <...f.......?...
    4d50:	0db7 b9a3 5f9e b994 bdf5 b986 5176 b974     ....._......vQt.
    4d60:	3fe2 b95d 3abd b947 4e77 b933 6ea0 b920     .?]..:G.wN3..n .
    4d70:	9b39 b90e c161 b8fd 6530 b8e0 21de b8c5     9...a...0e...!..
    4d80:	1049 b8ae feb5 b896 05ff b882 7e0f b862     I............~b.
    4d90:	f020 b840 6230 b81f 37bd b806 1a93 b7da      .@.0b...7......
    4da0:	2928 b7b0 9b39 b78e 1a93 b75a c5ac b727     ()..9.....Z...'.
    4db0:	e18b b6ea 37bd b686 37bd b606 0000 0000     .....7...7......
    4dc0:	37bd 3606 539c 3649 37bd 3686 c5ac 36a7     .7.6.SI6.7.6...6
    4dd0:	c5ac 36a7 539c 36c9 539c 36c9 539c 36c9     ...6.S.6.S.6.S.6
    4de0:	539c 36c9 539c 36c9 539c 36c9 539c 36c9     .S.6.S.6.S.6.S.6
    4df0:	c5ac 36a7 c5ac 36a7 c5ac 36a7 37bd 3686     ...6...6...6.7.6
    4e00:	37bd 3686 37bd 3686 539c 3649 539c 3649     .7.6.7.6.SI6.SI6
    4e10:	539c 3649 37bd 3606 37bd 3706               .SI6.7.6.7.7

00004e1c <b2>:
    4e1c:	c5ac 3727 539c 36c9 37bd 3706 c5ac 3727     ..'7.S.6.7.7..'7
    4e2c:	1a93 375a 37bd 3786 6230 379f 8ca4 37b8     ..Z7.7.70b.7...7
    4e3c:	1a93 37da a882 37fb 9b39 380e 93ee 3823     ...7...79..8..#8
    4e4c:	8ca4 3838 8559 384d 7e0f 3862 76c5 3877     ..88Y.M8.~b8.vw8
    4e5c:	37bd 3886 b418 3890 1794 3899 93ee 38a3     .7.8...8...8...8
    4e6c:	de8b 38a9 4207 38b2 73c5 38b6 a583 38ba     ...8.B.8.s.8...8
    4e7c:	be62 38bc be62 38bc a583 38ba 73c5 38b6     b..8b..8...8.s.8
    4e8c:	1049 38ae 93ee 38a3 feb5 3896 37bd 3886     I..8...8...8.7.8
    4e9c:	afcd 3866 8ca4 3838 05ff 3802 9b39 378e     ..f8..88...89..7
    4eac:	37bd 3606 e18b b76a 37bd b806 b717 b851     .7.6..j..7....Q.
    4ebc:	ccf7 b892 be62 b8bc afcd b8e6 509c b908     ....b........P..
    4ecc:	4952 b91d 3598 b931 156e b944 dc66 b954     RI...51.n.D.f.T.
    4edc:	96ee b964 2c28 b971 a882 b97b 7fc7 b981     ..d.(,q...{.....
    4eec:	126f b983 126f b983 7358 b980 76c5 b977     o...o...Xs...vw.
    4efc:	c8ac b968 dc66 b954 b1f2 b93b 4952 b91d     ..h.f.T...;.RI..
    4f0c:	4507 b8f3 6230 b89f 05ff b802 6230 379f     .E..0b......0b.7
    4f1c:	1794 3899 5d0b 3909 6c7a 394b ca64 3987     ...8.].9zlK9d..9
    4f2c:	7132 39ab 9e38 39cf 5176 39f4 825a 3a0c     2q.98..9vQ.9Z..:
    4f3c:	55c1 3a1e a2f0 3a2f 26cc 3a40 1801 3a4f     .U.:../:.&@:..O:
    4f4c:	b9aa 3a5c 4274 3a68 b25f 3a71 8334 3a78     ..\:tBh:_.q:4.x:
    4f5c:	71d6 3a7c f80e 3a7c 58f7 3a7a cb3e 3a73     .q|:..|:.Xz:>.s:
    4f6c:	0bc8 3a69 5daf 3a5a f7a1 3a46 5fd4 3a2f     ..i:.]Z:..F:._/:
    4f7c:	532e 3a13 1d26 39e5 2403 399a 8ec9 390d     .S.:&..9.$.9...9
    4f8c:	c5ac b827 3897 b972 96ee b9e4 2e17 ba2b     ..'..8r.......+.
    4f9c:	3605 ba67 ccf7 ba92 c83f bab2 8cda bad3     .6g.....?.......
    4fac:	7304 baf4 ac97 bb0a dc90 bb1a 9718 bb2a     .s............*.
    4fbc:	9913 bb39 d1bb bb47 dc66 bb54 9785 bb60     ..9...G.f.T...`.
    4fcc:	bffd bb6a 2379 bb73 8fa3 bb79 d228 bb7d     ..j.y#s...y.(.}.
    4fdc:	b8b2 bb7f 10ed bb7f b949 bb7b 903a bb75     ........I.{.:.u.
    4fec:	7432 bb6c 5469 bb60 30e0 bb51 0996 bb3f     2tl.iT`..0Q...?.
    4ffc:	bcfd bb29 7d6b bb11 95c0 baec af60 bab0     ..).k}......`...
    500c:	15a5 ba5f accd b9a5 a516 3984 15a5 3a5f     .._........9.._:
    501c:	333c 3ac1 bd5e 3b0a cbff 3b35 719f 3b61     <3.:^..;..5;.qa;
    502c:	9c67 3b86 5e70 3b9c bbcf 3bb1 8230 3bc6     g..;p^.;...;0..;
    503c:	76d9 3bda 56b0 3bed e6fb 3bfe 7681 3c07     .v.;.V.;...;.v.<
    504c:	9707 3c0e bbe4 3c14 c7bd 3c19 a9ca 3c1d     ...<...<...<...<
    505c:	407d 3c20 8373 3c21 5981 3c21 ba45 3c1f     }@ <s.!<.Y!<E..<
    506c:	9928 3c1c edc8 3c17 bc56 3c11 fc6e 3c09     (..<...<V..<n..<
    507c:	b674 3c00 edfa 3beb 8cda 3bd3 6b16 3bb8     t..<...;...;.k.;
    508c:	bb02 3b9a 5de6 3b75 f27c 3b30 73fb 3ad1     ...;.]u;|.0;.s.:
    509c:	d51b 39e9 4c1b ba43 e8c9 bb00 3d4f bb52     ...9.LC.....O=R.
    50ac:	146a bb92 f966 bbba 608d bbe3 76cd bc05     j...f....`...v..
    50bc:	9df1 bc18 f35e bc2a 4d23 bc3c 74b8 bc4c     ....^.*.#M<..tL.
    50cc:	445f bc5b 89c2 bc68 1f21 bc74 e2ef bc7d     _D[...h.!.t...}.
    50dc:	d9cf bc82 bc02 bc85 8748 bc87 3772 bc88     ........H...r7..
    50ec:	c201 bc87 22c4 bc86 59bc bc83 d203 bc7e     ....."...Y....~.
    50fc:	a559 bc74 3e42 bc68 ad86 bc59 1080 bc49     Y.t.B>h...Y...I.
    510c:	805a bc36 2707 bc22 2a45 bc0c 680e bbe9     Z.6..'".E*...h..
    511c:	f5a5 bbb7 61fa bb84 44fa bb1e 21de ba45     .....a...D...!E.
    512c:	1aca 3a75 4b4d 3b2c 759f 3b8d 0d0b 3bc4     ..u:MK,;.u.;...;
    513c:	7679 3bf9 91a7 3c16 5771 3c2f d1e1 3c46     yv.;...<qW/<..F<
    514c:	c20d 3c5c f9d3 3c70 a587 3c81 c3ce 3c89     ..\<..p<...<...<
    515c:	c2c6 3c90 93c0 3c96 2a28 3c9b 774f 3c9e     ...<...<(*.<Ow.<
    516c:	7703 3ca0 20e2 3ca1 7703 3ca0 774f 3c9e     .w.<. .<.w.<Ow.<
    517c:	2a28 3c9b 93c0 3c96 c2c6 3c90 c3ce 3c89     (*.<...<...<...<
    518c:	a587 3c81 f9d3 3c70 c20d 3c5c d1e1 3c46     ...<..p<..\<..F<
    519c:	5771 3c2f 91a7 3c16 7679 3bf9 0d0b 3bc4     qW/<...<yv.;...;
    51ac:	759f 3b8d 4b4d 3b2c 1aca 3a75 21de ba45     .u.;MK,;..u:.!E.
    51bc:	44fa bb1e 61fa bb84 f5a5 bbb7 680e bbe9     .D...a.......h..
    51cc:	2a45 bc0c 2707 bc22 805a bc36 1080 bc49     E*...'".Z.6...I.
    51dc:	ad86 bc59 3e42 bc68 a559 bc74 d203 bc7e     ..Y.B>h.Y.t...~.
    51ec:	59bc bc83 22c4 bc86 c201 bc87 3772 bc88     .Y..."......r7..
    51fc:	8748 bc87 bc02 bc85 d9cf bc82 e2ef bc7d     H.............}.
    520c:	1f21 bc74 89c2 bc68 445f bc5b 74b8 bc4c     !.t...h._D[..tL.
    521c:	4d23 bc3c f35e bc2a 9df1 bc18 76cd bc05     #M<.^.*......v..
    522c:	608d bbe3 f966 bbba 146a bb92 3d4f bb52     .`..f...j...O=R.
    523c:	e8c9 bb00 4c1b ba43 d51b 39e9 73fb 3ad1     .....LC....9.s.:
    524c:	f27c 3b30 5de6 3b75 bb02 3b9a 6b16 3bb8     |.0;.]u;...;.k.;
    525c:	8cda 3bd3 edfa 3beb b674 3c00 fc6e 3c09     ...;...;t..<n..<
    526c:	bc56 3c11 edc8 3c17 9928 3c1c ba45 3c1f     V..<...<(..<E..<
    527c:	5981 3c21 8373 3c21 407d 3c20 a9ca 3c1d     .Y!<s.!<}@ <...<
    528c:	c7bd 3c19 bbe4 3c14 9707 3c0e 7681 3c07     ...<...<...<.v.<
    529c:	e6fb 3bfe 56b0 3bed 76d9 3bda 8230 3bc6     ...;.V.;.v.;0..;
    52ac:	bbcf 3bb1 5e70 3b9c 9c67 3b86 719f 3b61     ...;p^.;g..;.qa;
    52bc:	cbff 3b35 bd5e 3b0a 333c 3ac1 15a5 3a5f     ..5;^..;<3.:.._:
    52cc:	a516 3984 accd b9a5 15a5 ba5f af60 bab0     ...9......_.`...
    52dc:	95c0 baec 7d6b bb11 bcfd bb29 0996 bb3f     ....k}....)...?.
    52ec:	30e0 bb51 5469 bb60 7432 bb6c 903a bb75     .0Q.iT`.2tl.:.u.
    52fc:	b949 bb7b 10ed bb7f b8b2 bb7f d228 bb7d     I.{.........(.}.
    530c:	8fa3 bb79 2379 bb73 bffd bb6a 9785 bb60     ..y.y#s...j...`.
    531c:	dc66 bb54 d1bb bb47 9913 bb39 9718 bb2a     f.T...G...9...*.
    532c:	dc90 bb1a ac97 bb0a 7304 baf4 8cda bad3     .........s......
    533c:	c83f bab2 ccf7 ba92 3605 ba67 2e17 ba2b     ?........6g...+.
    534c:	96ee b9e4 3897 b972 c5ac b827 8ec9 390d     .....8r...'....9
    535c:	2403 399a 1d26 39e5 532e 3a13 5fd4 3a2f     .$.9&..9.S.:._/:
    536c:	f7a1 3a46 5daf 3a5a 0bc8 3a69 cb3e 3a73     ..F:.]Z:..i:>.s:
    537c:	58f7 3a7a f80e 3a7c 71d6 3a7c 8334 3a78     .Xz:..|:.q|:4.x:
    538c:	b25f 3a71 4274 3a68 b9aa 3a5c 1801 3a4f     _.q:tBh:..\:..O:
    539c:	26cc 3a40 a2f0 3a2f 55c1 3a1e 825a 3a0c     .&@:../:.U.:Z..:
    53ac:	5176 39f4 9e38 39cf 7132 39ab ca64 3987     vQ.98..92q.9d..9
    53bc:	6c7a 394b 5d0b 3909 1794 3899 6230 379f     zlK9.].9...80b.7
    53cc:	05ff b802 6230 b89f 4507 b8f3 4952 b91d     ....0b...E..RI..
    53dc:	b1f2 b93b dc66 b954 c8ac b968 76c5 b977     ..;.f.T...h..vw.
    53ec:	7358 b980 126f b983 126f b983 7fc7 b981     Xs..o...o.......
    53fc:	a882 b97b 2c28 b971 96ee b964 dc66 b954     ..{.(,q...d.f.T.
    540c:	156e b944 3598 b931 4952 b91d 509c b908     n.D..51.RI...P..
    541c:	afcd b8e6 be62 b8bc ccf7 b892 b717 b851     ....b.........Q.
    542c:	37bd b806 e18b b76a 37bd 3606 9b39 378e     .7....j..7.69..7
    543c:	05ff 3802 8ca4 3838 afcd 3866 37bd 3886     ...8..88..f8.7.8
    544c:	feb5 3896 93ee 38a3 1049 38ae 73c5 38b6     ...8...8I..8.s.8
    545c:	a583 38ba be62 38bc be62 38bc a583 38ba     ...8b..8b..8...8
    546c:	73c5 38b6 4207 38b2 de8b 38a9 93ee 38a3     .s.8.B.8...8...8
    547c:	1794 3899 b418 3890 37bd 3886 76c5 3877     ...8...8.7.8.vw8
    548c:	7e0f 3862 8559 384d 8ca4 3838 93ee 3823     .~b8Y.M8..88..#8
    549c:	9b39 380e a882 37fb 1a93 37da 8ca4 37b8     9..8...7...7...7
    54ac:	6230 379f 37bd 3786 1a93 375a c5ac 3727     0b.7.7.7..Z7..'7
    54bc:	37bd 3706 539c 36c9 c5ac 3727               .7.7.S.6..'7

000054c8 <b3>:
    54c8:	37bd 3706 539c 3649 37bd 3606 37bd b586     .7.7.SI6.7.6.7..
    54d8:	539c b6c9 e18b b76a 1a93 b7da f76a b82b     .S....j.....j.+.
    54e8:	da40 b87f 5ae6 b8b4 2c28 b8f1 3073 b91b     @....Z..(,..s0..
    54f8:	fc8f b941 e18b b96a e343 b989 cf89 b99d     ..A...j.C.......
    5508:	1cb9 b9af be62 b9bc 9ba6 b9c4 a815 b9c5     ....b...........
    5518:	cad1 b9bd f76a b9ab 2171 b98f 8559 b94d     ....j...q!..Y.M.
    5528:	3abd b8c7 7e0f 37e2 2928 3930 64c3 39aa     .:...~.7()09.d.9
    5538:	3cac 3a01 1049 3a2e 1a93 3a5a 7fc7 3a81     .<.:I..:..Z:...:
    5548:	31a1 3a93 1666 3aa1 de8b 3aa9 9f30 3aac     .1.:f..:...:0..:
    5558:	6d72 3aa8 e4a8 3a9c a027 3a89 c619 3a5d     rm.:...:'..:..]:
    5568:	e0e7 3a19 532e 3993 37bd b886 8a7e b9e3     ...:.S.9.7..~...
    5578:	a5b9 ba55 3ce2 ba9c c4b5 baca 2fe8 baf4     ..U..<......./..
    5588:	32cf bb0b c808 bb17 fd87 bb1e 3c4b bb20     .2..........K< .
    5598:	413a bb1b 0c52 bb10 9fd3 bafd 678c bad0     :A..R........g..
    55a8:	4591 ba9a 6267 ba3a 58c1 b95f 2403 399a     .E..gb:..X_..$.9
    55b8:	d4e5 3a4e 93ee 3aa3 44d0 3ad8 b21c 3b01     ..N:...:.D.:...;
    55c8:	6ca4 3b11 bb02 3b1a 6adf 3b1d 7c3d 3b19     .l.;...;.j.;=|.;
    55d8:	861a 3b0f 4103 3b00 945b 3ad9 03da 3aad     ...;.A.;[..:...:
    55e8:	6567 3a7b 8c6d 3a1d fc22 398b 8ca4 b7b8     ge{:m..:"..9....
    55f8:	126f b983 562e b9d4 a882 b9fb 8fa3 b9f9     o....V..........
    5608:	30e0 b9d1 d6d4 b988 93ee b8a3 2b4e 3905     .0..........N+.9
    5618:	1049 39ae 7ad9 3a06 d21c 3a28 55f8 3a39     I..9.z.:..(:.U9:
    5628:	4e77 3a33 1c82 3a14 6755 39b5 a882 37fb     wN3:...:Ug.9...7
    5638:	fc8f b9c1 ad3a ba5b af60 bab0 5de6 baf5     ....:.[.`....]..
    5648:	b6aa bb1b 4531 bb39 526e bb51 f7d7 bb61     ....1E9.nRQ...a.
    5658:	91ff bb69 46cc bb67 7f3d bb5a 5ce2 bb43     ..i..Fg.=.Z..\C.
    5668:	b9d4 bb22 eccc baf3 f245 ba95 69e8 b9c0     ..".....E....i..
    5678:	eb68 39e0 adfb 3a9d df2f 3afa 7a78 3b25     h..9...:/..:xz%;
    5688:	dec2 3b44 3c21 3b5a 96ee 3b64 de61 3b63     ..D;!<Z;..d;a.c;
    5698:	cb08 3b58 8adf 3b44 1538 3b29 e79b 3b08     ..X;..D;8.);...;
    56a8:	63cc 3acd ac97 3a8a 55c1 3a1e cdd1 397e     .c.:...:.U.:..~9
    56b8:	539c 36c9 73c5 b8b6 7e0f b7e2 be62 393c     .S.6.s...~..b.<9
    56c8:	0d80 3a08 224b 3a7b 3beb 3abf 3cac 3b01     ...:K"{:.;.:.<.;
    56d8:	3c4b 3b20 23a3 3b39 8a48 3b48 9ecf 3b4b     K< ;.#9;H.H;..K;
    56e8:	485a 3b40 2696 3b25 0e5a 3af4 9724 3a7f     ZH@;.&%;Z..:$..:
    56f8:	c8ac b8e8 f27c bab0 b3b7 bb2f 2742 bb84     ....|...../.B'..
    5708:	afab bbae e4c9 bbd4 623d bbf4 7f30 bc05     ........=b..0...
    5718:	8f15 bc0b cdff bc0b 0dcc bc06 e011 bbf4     ................
    5728:	f5dc bbd2 08c8 bba8 d8dc bb6c b21c bb01     ..........l.....
    5738:	2696 b9a5 4be4 3aa8 b778 3b32 f12c 3b80     .&...K.:x.2;,..;
    5748:	b207 3b9e 3598 3bb1 e4de 3bb7 02f7 3bb3     ...;.5.;...;...;
    5758:	ad19 3ba3 da94 3b8b 65c7 3b5c c771 3b1b     ...;...;.e\;q..;
    5768:	baa1 3ab9 ed57 3a1a 37bd 3606 5d0b b989     ...:W..:.7.6.]..
    5778:	8ec9 b90d 3372 39dc ae32 3ab8 90fb 3b37     ....r3.92..:..7;
    5788:	6801 3b94 c33b 3bd4 4bd3 3c0c 70e7 3c2d     .h.;;..;.K.<.p-<
    5798:	1466 3c4b 717a 3c62 d845 3c70 f530 3c73     f.K<zqb<E.p<0.s<
    57a8:	e1b1 3c69 6b98 3c51 1512 3c2a 9657 3be8     ..i<.kQ<..*<W..;
    57b8:	436c 3b45 3eb4 bae5 4f7b bbe5 faf0 bc4c     lCE;.>..{O....L.
    57c8:	bc0a bc93 caac bcbe 59f7 bce5 98cc bd02     .........Y......
    57d8:	28ed bd0e 8345 bd14 097d bd15 5d35 bd0f     .(..E...}...5]..
    57e8:	6b90 bd03 e0a0 bce2 e9a7 bcb3 2b45 bc77     .k..........E+w.
    57f8:	4146 bbf0 7fc7 3a81 065b 3c1c ad82 3c92     FA.....:[..<...<
    5808:	111f 3cd3 25ea 3d06 e482 3d1d ad6d 3d2f     ...<.%.=...=m./=
    5818:	aef3 3d3a 6927 3d3e aef3 3d3a ad6d 3d2f     ..:='i>=..:=m./=
    5828:	e482 3d1d 25ea 3d06 111f 3cd3 ad82 3c92     ...=.%.=...<...<
    5838:	065b 3c1c 7fc7 3a81 4146 bbf0 2b45 bc77     [..<...:FA..E+w.
    5848:	e9a7 bcb3 e0a0 bce2 6b90 bd03 5d35 bd0f     .........k..5]..
    5858:	097d bd15 8345 bd14 28ed bd0e 98cc bd02     }...E....(......
    5868:	59f7 bce5 caac bcbe bc0a bc93 faf0 bc4c     .Y............L.
    5878:	4f7b bbe5 3eb4 bae5 436c 3b45 9657 3be8     {O...>..lCE;W..;
    5888:	1512 3c2a 6b98 3c51 e1b1 3c69 f530 3c73     ..*<.kQ<..i<0.s<
    5898:	d845 3c70 717a 3c62 1466 3c4b 70e7 3c2d     E.p<zqb<f.K<.p-<
    58a8:	4bd3 3c0c c33b 3bd4 6801 3b94 90fb 3b37     .K.<;..;.h.;..7;
    58b8:	ae32 3ab8 3372 39dc 8ec9 b90d 5d0b b989     2..:r3.9.....]..
    58c8:	37bd 3606 ed57 3a1a baa1 3ab9 c771 3b1b     .7.6W..:...:q..;
    58d8:	65c7 3b5c da94 3b8b ad19 3ba3 02f7 3bb3     .e\;...;...;...;
    58e8:	e4de 3bb7 3598 3bb1 b207 3b9e f12c 3b80     ...;.5.;...;,..;
    58f8:	b778 3b32 4be4 3aa8 2696 b9a5 b21c bb01     x.2;.K.:.&......
    5908:	d8dc bb6c 08c8 bba8 f5dc bbd2 e011 bbf4     ..l.............
    5918:	0dcc bc06 cdff bc0b 8f15 bc0b 7f30 bc05     ............0...
    5928:	623d bbf4 e4c9 bbd4 afab bbae 2742 bb84     =b..........B'..
    5938:	b3b7 bb2f f27c bab0 c8ac b8e8 9724 3a7f     ../.|.......$..:
    5948:	0e5a 3af4 2696 3b25 485a 3b40 9ecf 3b4b     Z..:.&%;ZH@;..K;
    5958:	8a48 3b48 23a3 3b39 3c4b 3b20 3cac 3b01     H.H;.#9;K< ;.<.;
    5968:	3beb 3abf 224b 3a7b 0d80 3a08 be62 393c     .;.:K"{:...:b.<9
    5978:	7e0f b7e2 73c5 b8b6 539c 36c9 cdd1 397e     .~...s...S.6..~9
    5988:	55c1 3a1e ac97 3a8a 63cc 3acd e79b 3b08     .U.:...:.c.:...;
    5998:	1538 3b29 8adf 3b44 cb08 3b58 de61 3b63     8.);..D;..X;a.c;
    59a8:	96ee 3b64 3c21 3b5a dec2 3b44 7a78 3b25     ..d;!<Z;..D;xz%;
    59b8:	df2f 3afa adfb 3a9d eb68 39e0 69e8 b9c0     /..:...:h..9.i..
    59c8:	f245 ba95 eccc baf3 b9d4 bb22 5ce2 bb43     E........."..\C.
    59d8:	7f3d bb5a 46cc bb67 91ff bb69 f7d7 bb61     =.Z..Fg...i...a.
    59e8:	526e bb51 4531 bb39 b6aa bb1b 5de6 baf5     nRQ.1E9......]..
    59f8:	af60 bab0 ad3a ba5b fc8f b9c1 a882 37fb     `...:.[........7
    5a08:	6755 39b5 1c82 3a14 4e77 3a33 55f8 3a39     Ug.9...:wN3:.U9:
    5a18:	d21c 3a28 7ad9 3a06 1049 39ae 2b4e 3905     ..(:.z.:I..9N+.9
    5a28:	93ee b8a3 d6d4 b988 30e0 b9d1 8fa3 b9f9     .........0......
    5a38:	a882 b9fb 562e b9d4 126f b983 8ca4 b7b8     .....V..o.......
    5a48:	fc22 398b 8c6d 3a1d 6567 3a7b 03da 3aad     "..9m..:ge{:...:
    5a58:	945b 3ad9 4103 3b00 861a 3b0f 7c3d 3b19     [..:.A.;...;=|.;
    5a68:	6adf 3b1d bb02 3b1a 6ca4 3b11 b21c 3b01     .j.;...;.l.;...;
    5a78:	44d0 3ad8 93ee 3aa3 d4e5 3a4e 2403 399a     .D.:...:..N:.$.9
    5a88:	58c1 b95f 6267 ba3a 4591 ba9a 678c bad0     .X_.gb:..E...g..
    5a98:	9fd3 bafd 0c52 bb10 413a bb1b 3c4b bb20     ....R...:A..K< .
    5aa8:	fd87 bb1e c808 bb17 32cf bb0b 2fe8 baf4     .........2.../..
    5ab8:	c4b5 baca 3ce2 ba9c a5b9 ba55 8a7e b9e3     .....<....U.~...
    5ac8:	37bd b886 532e 3993 e0e7 3a19 c619 3a5d     .7...S.9...:..]:
    5ad8:	a027 3a89 e4a8 3a9c 6d72 3aa8 9f30 3aac     '..:...:rm.:0..:
    5ae8:	de8b 3aa9 1666 3aa1 31a1 3a93 7fc7 3a81     ...:f..:.1.:...:
    5af8:	1a93 3a5a 1049 3a2e 3cac 3a01 64c3 39aa     ..Z:I..:.<.:.d.9
    5b08:	2928 3930 7e0f 37e2 3abd b8c7 8559 b94d     ()09.~.7.:..Y.M.
    5b18:	2171 b98f f76a b9ab cad1 b9bd a815 b9c5     q!..j...........
    5b28:	9ba6 b9c4 be62 b9bc 1cb9 b9af cf89 b99d     ....b...........
    5b38:	e343 b989 e18b b96a fc8f b941 3073 b91b     C.....j...A.s0..
    5b48:	2c28 b8f1 5ae6 b8b4 da40 b87f f76a b82b     (,...Z..@...j.+.
    5b58:	1a93 b7da e18b b76a 539c b6c9 37bd b586     ......j..S...7..
    5b68:	37bd 3606 539c 3649 37bd 3706               .7.6.SI6.7.7

00005b74 <b4>:
    5b74:	e18b 376a 37bd 3786 f020 37c0 a882 37fb     ..j7.7.7 ..7...7
    5b84:	3073 381b 5ae6 3834 f020 3840 be62 383c     s0.8.Z48 .@8b.<8
    5b94:	93ee 3823 1a93 37da 539c 36c9 c5ac b7a7     ..#8...7.S.6....
    5ba4:	7e0f b862 21de b8c5 b418 b910 f020 b940     .~b..!...... .@.
    5bb4:	1349 b96f 75ea b98b 2403 b99a 6ea0 b9a0     I.o..u...$...n..
    5bc4:	3ce2 b99c 75ea b98b 1a93 b95a c161 b8fd     .<...u....Z.a...
    5bd4:	feb5 b716 126f 3903 1501 398e ad3a 39db     ....o..9...9:..9
    5be4:	7d6b 3a11 8a11 3a2d cad1 3a3d 0ded 3a3e     k}.:..-:..=:..>:
    5bf4:	f76a 3a2b 2b4e 3a05 f245 3995 37bd b606     j.+:N+.:E..9.7..
    5c04:	a2f0 b9af 9192 ba33 4cdb ba85 5853 baa9     ......3..L..SX..
    5c14:	11ae bac1 259e bac8 6ed6 babb e0e7 ba99     .....%...n......
    5c24:	cd64 ba48 5176 b974 cd64 39c8 f4a1 3a85     d.H.vQt.d..9...:
    5c34:	f184 3ad3 8f60 3b09 8c6d 3b1d ca9b 3b22     ...:`..;m..;..";
    5c44:	635e 3b17 ad71 3af6 f4d8 3aa0 49bf 39d3     ^c.;q..:...:.I.9
    5c54:	37bd ba06 a583 baba 2531 bb12 fdbd bb39     .7......1%....9.
    5c64:	f21b bb4f dcfd bb50 f50e bb3b 1013 bb13     ..O...P...;.....
    5c74:	3958 bab4 1f4b b9ba 12dc 3a39 6170 3add     X9..K.....9:pa.:
    5c84:	ec29 3b22 436c 3b45 2c88 3b52 cd64 3b48     ).";lCE;.,R;d.H;
    5c94:	c96d 3b2a e7de 3af8 ca64 3a87 1ede 3904     m.*;...:d..:...9
    5ca4:	449a ba3d 346a bab9 05ab baf6 509c bb08     .D=.j4.......P..
    5cb4:	c6a4 bb04 4b23 bae6 c47e baaf f7d7 ba61     ....#K..~.....a.
    5cc4:	629e b9d5 8559 b84d de8b 3929 3372 395c     .b..Y.M...)9r3\9
    5cd4:	1349 38ef 93ee b8a3 2403 b99a 8d11 b9ee     I..8.....$......
    5ce4:	5409 b9ff 4207 b9b2 37bd 3686 5d0b 3a09     .T...B...7.6.].:
    5cf4:	2cb2 3a98 8d11 3aee d3e1 3b1c 45c8 3b35     .,.:...:...;.E5;
    5d04:	732e 3b3a 6d72 3b28 b4f2 3afc 71d6 3a7c     .s:;rm(;...:.q|:
    5d14:	4507 b973 7dd8 bac7 f63c bb33 4d1f bb75     .Es..}..<.3..Mu.
    5d24:	3a9b bb8f 898f bb94 43e1 bb89 8755 bb5c     .:.......C..U.\.
    5d34:	1959 bb0d f9fd ba36 7b7c 3a57 9ef9 3b11     Y.....6.|{W:...;
    5d44:	4ce8 3b5a dbc2 3b83 bd5e 3b8a dc0e 3b81     .LZ;...;^..;...;
    5d54:	f545 3b56 5297 3b17 774f 3a9e feb5 3916     E.V;.R.;Ow.:...9
    5d64:	f020 ba40 eebb baad 7caa bacf 7dd8 bac7      .@......|...}..
    5d74:	e868 ba9f fa33 ba51 562e b9d4 1cb9 b92f     h...3.Q..V..../.
    5d84:	fc8f b941 dbc2 ba03 42ff ba8f 0e5a baf4     ..A......B..Z...
    5d94:	429e bb2e 7725 bb58 a687 bb6c 1dbd bb61     .B..%wX...l...a.
    5da4:	6c44 bb30 cbff bab5 472c 39c8 ecc0 3b1e     Dl0.....,G.9...;
    5db4:	ff4c 3b92 8dbd 3bcd 05ab 3bf6 7b70 3c02     L..;...;...;p{.<
    5dc4:	f4e4 3bf5 8a48 3bc8 7bbb 3b80 af29 3a95     ...;H..;.{.;)..:
    5dd4:	1e8a baf8 94d1 bb9d 245b bbed 42b3 bc11     ........[$...B..
    5de4:	6f5d bc1b ee5f bc13 ec35 bbf7 18ad bbae     ]o.._...5.......
    5df4:	9b6f bb29 3897 3972 781c 3b35 2c67 3b9a     o.)..8r9.x5;g,.;
    5e04:	0996 3bbf ef3d 3bc6 6349 3bb4 368f 3b8e     ...;=..;Ic.;.6.;
    5e14:	be62 3b3c 26cc 3ac0 a0cb 39da 3073 b81b     b.<;.&.:...9s0..
    5e24:	e8d5 3955 8ec9 3a8d 951c 3b1b 903a 3b75     ..U9...:...;:.u;
    5e34:	f56f 3b9c 1583 3ba7 ac00 3b8e b253 3b1c     o..;...;...;S..;
    5e44:	4c1b ba43 bab6 bb9c 6790 bc17 db38 bc5c     .LC......g..8.\.
    5e54:	80b2 bc89 5d14 bc97 a2e0 bc93 e804 bc77     .....]........w.
    5e64:	1ec9 bc21 7ed0 bb24 cd64 3bc8 7af6 3c77     ..!..~$.d..;.zw<
    5e74:	d0f6 3cbe 25b7 3cf2 cfc8 3d06 ccc9 3d05     ...<.%.<...=...=
    5e84:	c023 3ce9 b6b3 3ca9 2707 3c22 8ca4 bb38     #..<...<.'"<..8.
    5e94:	1ceb bc83 4b23 bce6 2403 bd1a 61a2 bd31     ....#K...$...a1.
    5ea4:	6da0 bd35 0b52 bd25 7226 bd01 6d1e bc9c     .m5.R.%.&r...m..
    5eb4:	4c90 bb87 2b49 3c3e 774b 3cd7 a4b1 3d1c     .L..I+><Kw.<...=
    5ec4:	83a9 3d3c 92d1 3d47 83a9 3d3c a4b1 3d1c     ..<=..G=..<=...=
    5ed4:	774b 3cd7 2b49 3c3e 4c90 bb87 6d1e bc9c     Kw.<I+><.L...m..
    5ee4:	7226 bd01 0b52 bd25 6da0 bd35 61a2 bd31     &r..R.%..m5..a1.
    5ef4:	2403 bd1a 4b23 bce6 1ceb bc83 8ca4 bb38     .$..#K........8.
    5f04:	2707 3c22 b6b3 3ca9 c023 3ce9 ccc9 3d05     .'"<...<#..<...=
    5f14:	cfc8 3d06 25b7 3cf2 d0f6 3cbe 7af6 3c77     ...=.%.<...<.zw<
    5f24:	cd64 3bc8 7ed0 bb24 1ec9 bc21 e804 bc77     d..;.~$...!...w.
    5f34:	a2e0 bc93 5d14 bc97 80b2 bc89 db38 bc5c     .....]......8.\.
    5f44:	6790 bc17 bab6 bb9c 4c1b ba43 b253 3b1c     .g.......LC.S..;
    5f54:	ac00 3b8e 1583 3ba7 f56f 3b9c 903a 3b75     ...;...;o..;:.u;
    5f64:	951c 3b1b 8ec9 3a8d e8d5 3955 3073 b81b     ...;...:..U9s0..
    5f74:	a0cb 39da 26cc 3ac0 be62 3b3c 368f 3b8e     ...9.&.:b.<;.6.;
    5f84:	6349 3bb4 ef3d 3bc6 0996 3bbf 2c67 3b9a     Ic.;=..;...;g,.;
    5f94:	781c 3b35 3897 3972 9b6f bb29 18ad bbae     .x5;.8r9o.).....
    5fa4:	ec35 bbf7 ee5f bc13 6f5d bc1b 42b3 bc11     5..._...]o...B..
    5fb4:	245b bbed 94d1 bb9d 1e8a baf8 af29 3a95     [$..........)..:
    5fc4:	7bbb 3b80 8a48 3bc8 f4e4 3bf5 7b70 3c02     .{.;H..;...;p{.<
    5fd4:	05ab 3bf6 8dbd 3bcd ff4c 3b92 ecc0 3b1e     ...;...;L..;...;
    5fe4:	472c 39c8 cbff bab5 6c44 bb30 1dbd bb61     ,G.9....Dl0...a.
    5ff4:	a687 bb6c 7725 bb58 429e bb2e 0e5a baf4     ..l.%wX..B..Z...
    6004:	42ff ba8f dbc2 ba03 fc8f b941 1cb9 b92f     .B........A.../.
    6014:	562e b9d4 fa33 ba51 e868 ba9f 7dd8 bac7     .V..3.Q.h....}..
    6024:	7caa bacf eebb baad f020 ba40 feb5 3916     .|...... .@....9
    6034:	774f 3a9e 5297 3b17 f545 3b56 dc0e 3b81     Ow.:.R.;E.V;...;
    6044:	bd5e 3b8a dbc2 3b83 4ce8 3b5a 9ef9 3b11     ^..;...;.LZ;...;
    6054:	7b7c 3a57 f9fd ba36 1959 bb0d 8755 bb5c     |{W:..6.Y...U.\.
    6064:	43e1 bb89 898f bb94 3a9b bb8f 4d1f bb75     .C.......:...Mu.
    6074:	f63c bb33 7dd8 bac7 4507 b973 71d6 3a7c     <.3..}...Es..q|:
    6084:	b4f2 3afc 6d72 3b28 732e 3b3a 45c8 3b35     ...:rm(;.s:;.E5;
    6094:	d3e1 3b1c 8d11 3aee 2cb2 3a98 5d0b 3a09     ...;...:.,.:.].:
    60a4:	37bd 3686 4207 b9b2 5409 b9ff 8d11 b9ee     .7.6.B...T......
    60b4:	2403 b99a 93ee b8a3 1349 38ef 3372 395c     .$......I..8r3\9
    60c4:	de8b 3929 8559 b84d 629e b9d5 f7d7 ba61     ..)9Y.M..b....a.
    60d4:	c47e baaf 4b23 bae6 c6a4 bb04 509c bb08     ~...#K.......P..
    60e4:	05ab baf6 346a bab9 449a ba3d 1ede 3904     ....j4...D=....9
    60f4:	ca64 3a87 e7de 3af8 c96d 3b2a cd64 3b48     d..:...:m.*;d.H;
    6104:	2c88 3b52 436c 3b45 ec29 3b22 6170 3add     .,R;lCE;).";pa.:
    6114:	12dc 3a39 1f4b b9ba 3958 bab4 1013 bb13     ..9:K...X9......
    6124:	f50e bb3b dcfd bb50 f21b bb4f fdbd bb39     ..;...P...O...9.
    6134:	2531 bb12 a583 baba 37bd ba06 49bf 39d3     1%.......7...I.9
    6144:	f4d8 3aa0 ad71 3af6 635e 3b17 ca9b 3b22     ...:q..:^c.;..";
    6154:	8c6d 3b1d 8f60 3b09 f184 3ad3 f4a1 3a85     m..;`..;...:...:
    6164:	cd64 39c8 5176 b974 cd64 ba48 e0e7 ba99     d..9vQt.d.H.....
    6174:	6ed6 babb 259e bac8 11ae bac1 5853 baa9     .n...%......SX..
    6184:	4cdb ba85 9192 ba33 a2f0 b9af 37bd b606     .L....3......7..
    6194:	f245 3995 2b4e 3a05 f76a 3a2b 0ded 3a3e     E..9N+.:j.+:..>:
    61a4:	cad1 3a3d 8a11 3a2d 7d6b 3a11 ad3a 39db     ..=:..-:k}.::..9
    61b4:	1501 398e 126f 3903 feb5 b716 c161 b8fd     ...9o..9....a...
    61c4:	1a93 b95a 75ea b98b 3ce2 b99c 6ea0 b9a0     ..Z..u...<...n..
    61d4:	2403 b99a 75ea b98b 1349 b96f f020 b940     .$...u..I.o. .@.
    61e4:	b418 b910 21de b8c5 7e0f b862 c5ac b7a7     .....!...~b.....
    61f4:	539c 36c9 1a93 37da 93ee 3823 be62 383c     .S.6...7..#8b.<8
    6204:	f020 3840 5ae6 3834 3073 381b a882 37fb      .@8.Z48s0.8...7
    6214:	f020 37c0 37bd 3786 e18b 376a                ..7.7.7..j7

00006220 <b5>:
    6220:	37bd b706 37bd b606 37bd b586 37bd 3586     .7...7...7...7.5
    6230:	0000 0000 539c b6c9 9b39 b78e 7e0f b7e2     .....S..9....~..
    6240:	539c b7c9 539c 36c9 4952 389d fc8f 3941     .S...S.6RI.8..A9
    6250:	3f75 39a7 3605 39e7 cf53 3a02 bc3c 39e7     u?.9.6.9S..:<..9
    6260:	5de6 3975 4507 b8f3 2de0 ba10 eb9e ba7b     .]u9.E...-....{.
    6270:	dbf9 ba9e cbc9 ba9a fa33 ba51 cff6 b8d3     ........3.Q.....
    6280:	8559 3a4d 629e 3ad5 8a72 3b0e e66d 3b10     Y.M:.b.:r..;m..;
    6290:	16d3 3ad7 4bad 3a0d d289 ba5e c11e bb0d     ...:.K.:..^.....
    62a0:	eb31 bb45 8559 bb4d ba6b bb1e 162f ba86     1.E.Y.M.k.../...
    62b0:	4988 3a38 f245 3b15 8c43 3b57 86be 3b60     .I8:E..;C.W;..`;
    62c0:	ea64 3b2e b57c 3aa3 7b7c b9d7 e90c baf0     d..;|..:|{......
    62d0:	ab9f bb2d b3b7 bb2f 2fa5 bb04 4c88 ba79     ..-.../../...Ly.
    62e0:	509c 3908 c8ac 3a68 bb99 3a96 d2bf 3a79     .P.9..h:...:..y:
    62f0:	7ad9 3a06 5de6 38f5 37bd b686 d51b 3969     .z.:.].8.7....i9
    6300:	4e77 3a33 1013 3a93 5d42 3aa4 aade 3a6b     wN3:...:B].:..k:
    6310:	697b 388a 162f ba86 dbc2 bb03 43cc bb26     {i.8/........C&.
    6320:	5200 bb1b 4fdb bac6 3fe2 b95d 0764 3a95     .R...O...?].d..:
    6330:	bd5e 3b0a c283 3b20 b0ee 3b09 c1ec 3aa4     ^..;.. ;...;...:
    6340:	fc22 398b 0111 ba07 c12b ba62 e643 ba4a     "..9....+.b.C.J.
    6350:	8a7e b9e3 9b39 b90e 2b4e b905 7358 ba00     ~...9...N+..Xs..
    6360:	bcc7 ba8e 77bc bad4 1d26 bae5 f898 baa3     .....w..&.......
    6370:	6ea0 b920 1177 3aa6 6102 3b27 cb9f 3b54     .n .w..:.a';..T;
    6380:	7981 3b48 126f 3b03 539c 39c9 a41e baa7     .yH;o..;.S.9....
    6390:	4463 bb22 7b46 bb3c a0f5 bb20 ce92 bac0     cD".F{<... .....
    63a0:	2e4d b9c6 562e 39d4 eafb 3a2a ad3a 39db     M....V.9..*::..9
    63b0:	e18b 36ea 78ea b94c 8559 38cd 8d11 3a6e     ...6.xL.Y..8..n:
    63c0:	d802 3b00 a61a 3b36 987c 3b3d b5dd 3b04     ...;..6;|.=;...;
    63d0:	84ec 3997 f57b baf1 5a25 bb72 8d50 bb97     ...9{...%Zr.P...
    63e0:	1db0 bb8c 5f3d bb33 b185 ba05 cec8 3adb     ....=_3........:
    63f0:	0b91 3b4e 6cb1 3b66 0a2d 3b3b 1bc1 3ad2     ..N;.lf;-.;;...:
    6400:	d9d3 39c9 e5d6 b994 afcd b966 1f4b 39ba     ...9......f.K..9
    6410:	b25f 3a71 e90c 3a70 4507 37f3 a5b9 bad5     _.q:..p:.E.7....
    6420:	9296 bb65 4952 bb9d f97b bb9d b229 bb56     ..e.RI..{...).V.
    6430:	06d9 b9ee baa1 3b39 4e2b 3bb5 d2d4 3bdc     ......9;+N.;...;
    6440:	2e4d 3bc6 cb3e 3b73 915c 3a18 4628 bb16     M..;>.s;\..:(F..
    6450:	6eb5 bb83 7636 bb89 e1eb bb4b d613 bac6     .n..6v....K.....
    6460:	c31a b99c da40 b87f 2703 ba5b 0111 bb07     ....@....'[.....
    6470:	12dc bb39 7425 bb17 8a7e b963 3f14 3b46     ..9.%t..~.c..?F;
    6480:	bfc6 3bcf 8f60 3c09 a4f0 3c05 ea64 3bae     ...;`..<...<d..;
    6490:	98dd 3a1e 4a34 bb97 b057 bc0d defc bc26     ...:4J..W.....&.
    64a0:	470b bc10 32ba bba8 41d1 ba17 024b 3b54     .G...2...A..K.T;
    64b0:	9357 3ba7 cb7d 3b9c ca3a 3b41 3b2a 3a7d     W..;}..;:.A;*;}:
    64c0:	825a 390c 03a3 3a92 89e7 3b67 6d11 3bc7     Z..9...:..g;.m.;
    64d0:	5b9f 3be8 9f30 3bac 3fe2 39dd 24bc bbce     .[.;0..;.?.9.$..
    64e0:	91a3 bc4f 271c bc85 f428 bc7a cb58 bc1d     ..O..'..(.z.X...
    64f0:	ed8d ba35 0414 3c0f 9f88 3c7f 87e8 3c91     ..5....<...<...<
    6500:	239e 3c72 b5dd 3c04 a882 39fb b49a bba9     .#r<...<...9....
    6510:	0c13 bbe7 0019 bbaa 0050 bac5 648c 3a8f     ........P....d.:
    6520:	de8b 38a9 a748 bbae 69d3 bc5d 2e3c bcaa     ...8H....i].<...
    6530:	fdbd bcb9 c6c9 bc83 b6aa ba1b 73e2 3ca7     .............s.<
    6540:	7d78 3d26 44f6 3d57 dd6e 3d4d 7525 3d02     x}&=.DW=n.M=%u.=
    6550:	6755 3a35 a9c1 bd0f ae00 bd84 ffda bda0     Ug5:............
    6560:	3a50 bd91 a555 bd2d 55c1 b99e 7ed8 3d32     P:..U.-..U...~2=
    6570:	a31e 3d9c 94f2 3db5 a31e 3d9c 7ed8 3d32     ...=...=...=.~2=
    6580:	55c1 b99e a555 bd2d 3a50 bd91 ffda bda0     .U..U.-.P:......
    6590:	ae00 bd84 a9c1 bd0f 6755 3a35 7525 3d02     ........Ug5:%u.=
    65a0:	dd6e 3d4d 44f6 3d57 7d78 3d26 73e2 3ca7     n.M=.DW=x}&=.s.<
    65b0:	b6aa ba1b c6c9 bc83 fdbd bcb9 2e3c bcaa     ............<...
    65c0:	69d3 bc5d a748 bbae de8b 38a9 648c 3a8f     .i].H......8.d.:
    65d0:	0050 bac5 0019 bbaa 0c13 bbe7 b49a bba9     P...............
    65e0:	a882 39fb b5dd 3c04 239e 3c72 87e8 3c91     ...9...<.#r<...<
    65f0:	9f88 3c7f 0414 3c0f ed8d ba35 cb58 bc1d     ...<...<..5.X...
    6600:	f428 bc7a 271c bc85 91a3 bc4f 24bc bbce     (.z..'....O..$..
    6610:	3fe2 39dd 9f30 3bac 5b9f 3be8 6d11 3bc7     .?.90..;.[.;.m.;
    6620:	89e7 3b67 03a3 3a92 825a 390c 3b2a 3a7d     ..g;...:Z..9*;}:
    6630:	ca3a 3b41 cb7d 3b9c 9357 3ba7 024b 3b54     :.A;}..;W..;K.T;
    6640:	41d1 ba17 32ba bba8 470b bc10 defc bc26     .A...2...G....&.
    6650:	b057 bc0d 4a34 bb97 98dd 3a1e ea64 3bae     W...4J.....:d..;
    6660:	a4f0 3c05 8f60 3c09 bfc6 3bcf 3f14 3b46     ...<`..<...;.?F;
    6670:	8a7e b963 7425 bb17 12dc bb39 0111 bb07     ~.c.%t....9.....
    6680:	2703 ba5b da40 b87f c31a b99c d613 bac6     .'[.@...........
    6690:	e1eb bb4b 7636 bb89 6eb5 bb83 4628 bb16     ..K.6v...n..(F..
    66a0:	915c 3a18 cb3e 3b73 2e4d 3bc6 d2d4 3bdc     \..:>.s;M..;...;
    66b0:	4e2b 3bb5 baa1 3b39 06d9 b9ee b229 bb56     +N.;..9;....).V.
    66c0:	f97b bb9d 4952 bb9d 9296 bb65 a5b9 bad5     {...RI....e.....
    66d0:	4507 37f3 e90c 3a70 b25f 3a71 1f4b 39ba     .E.7..p:_.q:K..9
    66e0:	afcd b966 e5d6 b994 d9d3 39c9 1bc1 3ad2     ..f........9...:
    66f0:	0a2d 3b3b 6cb1 3b66 0b91 3b4e cec8 3adb     -.;;.lf;..N;...:
    6700:	b185 ba05 5f3d bb33 1db0 bb8c 8d50 bb97     ....=_3.....P...
    6710:	5a25 bb72 f57b baf1 84ec 3997 b5dd 3b04     %Zr.{......9...;
    6720:	987c 3b3d a61a 3b36 d802 3b00 8d11 3a6e     |.=;..6;...;..n:
    6730:	8559 38cd 78ea b94c e18b 36ea ad3a 39db     Y..8.xL....6:..9
    6740:	eafb 3a2a 562e 39d4 2e4d b9c6 ce92 bac0     ..*:.V.9M.......
    6750:	a0f5 bb20 7b46 bb3c 4463 bb22 a41e baa7     .. .F{<.cD".....
    6760:	539c 39c9 126f 3b03 7981 3b48 cb9f 3b54     .S.9o..;.yH;..T;
    6770:	6102 3b27 1177 3aa6 6ea0 b920 f898 baa3     .a';w..:.n .....
    6780:	1d26 bae5 77bc bad4 bcc7 ba8e 7358 ba00     &....w......Xs..
    6790:	2b4e b905 9b39 b90e 8a7e b9e3 e643 ba4a     N+..9...~...C.J.
    67a0:	c12b ba62 0111 ba07 fc22 398b c1ec 3aa4     +.b....."..9...:
    67b0:	b0ee 3b09 c283 3b20 bd5e 3b0a 0764 3a95     ...;.. ;^..;d..:
    67c0:	3fe2 b95d 4fdb bac6 5200 bb1b 43cc bb26     .?]..O...R...C&.
    67d0:	dbc2 bb03 162f ba86 697b 388a aade 3a6b     ..../...{i.8..k:
    67e0:	5d42 3aa4 1013 3a93 4e77 3a33 d51b 3969     B].:...:wN3:..i9
    67f0:	37bd b686 5de6 38f5 7ad9 3a06 d2bf 3a79     .7...].8.z.:..y:
    6800:	bb99 3a96 c8ac 3a68 509c 3908 4c88 ba79     ...:..h:.P.9.Ly.
    6810:	2fa5 bb04 b3b7 bb2f ab9f bb2d e90c baf0     ./..../...-.....
    6820:	7b7c b9d7 b57c 3aa3 ea64 3b2e 86be 3b60     |{..|..:d..;..`;
    6830:	8c43 3b57 f245 3b15 4988 3a38 162f ba86     C.W;E..;.I8:/...
    6840:	ba6b bb1e 8559 bb4d eb31 bb45 c11e bb0d     k...Y.M.1.E.....
    6850:	d289 ba5e 4bad 3a0d 16d3 3ad7 e66d 3b10     ..^..K.:...:m..;
    6860:	8a72 3b0e 629e 3ad5 8559 3a4d cff6 b8d3     r..;.b.:Y.M:....
    6870:	fa33 ba51 cbc9 ba9a dbf9 ba9e eb9e ba7b     3.Q...........{.
    6880:	2de0 ba10 4507 b8f3 5de6 3975 bc3c 39e7     .-...E...]u9<..9
    6890:	cf53 3a02 3605 39e7 3f75 39a7 fc8f 3941     S..:.6.9u?.9..A9
    68a0:	4952 389d 539c 36c9 539c b7c9 7e0f b7e2     RI.8.S.6.S...~..
    68b0:	9b39 b78e 539c b6c9 0000 0000 37bd 3586     9....S.......7.5
    68c0:	37bd b586 37bd b606 37bd b706               .7...7...7..

000068cc <b8>:
    68cc:	5e70 bb1c f76a 3a2b 4be4 3aa8 6c7a b8cb     p^..j.+:.K.:zl..
    68dc:	cdd1 39fe 6ea0 b920 825a bb0c 37bd 3706     ...9.n .Z....7.7
    68ec:	b15b 3b3f 3073 399b c283 bb20 cd64 b9c8     [.?;s0.9.. .d...
    68fc:	ad71 3a76 37bd 3586 dc9c 3a6f 96b7 3a49     q.v:.7.5..o:..I:
    690c:	4a80 bb15 7169 bac6 36c6 3b29 9bdc 3adf     .J..iq...6);...:
    691c:	bffd baea 442c ba87 cd64 39c8 156e b9c4     ....,D..d..9n...
    692c:	4507 3a73 71d6 3afc 2d1f bace a583 bb3a     .Es:.q.:.-....:.
    693c:	8034 3ab7 d21c 3b28 12dc ba39 9b39 ba8e     4..:..(;..9.9...
    694c:	1a93 375a bdf5 ba86 8ec9 398d 55f8 3b39     ..Z7.......9.U9;
    695c:	4207 b8b2 25d5 bb63 5d0b b989 7132 3b2b     .B...%c..]..2q+;
    696c:	f76a 39ab 64c3 ba2a 1794 3919 7529 bac9     j..9.d*....9)u..
    697c:	6e69 ba85 82c7 3b42 0bc8 3ae9 57f3 bb48     in....B;...:.WH.
    698c:	4146 baf0 e41d 3af5 7920 3a67 73c5 b8b6     FA.....: yg:.s..
    699c:	cb08 3a58 59b8 babc 2eae bb27 f04a 3b06     ..X:.Y....'.J..;
    69ac:	0935 3b5e 768e badc 243a bb35 f020 3a40     5.^;.v..:$5. .@:
    69bc:	78ea 3a4c 5d0b 3909 afcd 3ae6 67c3 b9eb     .xL:.].9...:.g..
    69cc:	12b2 bb73 aaa8 3950 2b02 3b87 719f 3961     ..s...P9.+.;.qa9
    69dc:	e11e bb34 d6d4 b988 c387 3952 7132 b9ab     ..4.......R92q..
    69ec:	0636 3b1d eebb 3aad 1544 bb7e c1b5 bb09     6..;...:D.~.....
    69fc:	bf66 3b6e 0a57 3b01 2eba bafc 2e17 ba2b     f.n;W..;......+.
    6a0c:	8f36 b9c3 cad1 babd 7e02 3b0d 7236 3b5d     6........~.;6r];
    6a1c:	2079 bb32 a0be bb85 7f30 3b05 ebc8 3b41     y 2.....0..;..A;
    6a2c:	1a5d ba3f 4952 b99d 9ba6 b9c4 90fb bb37     ].?.RI........7.
    6a3c:	d741 3a3e 1ec9 3ba1 fc8f b9c1 7ac4 bba3     A.>:...;.....z..
    6a4c:	6230 b91f dff0 3b3c d741 393e 61fa 3a04     0b....<;A.>9.a.:
    6a5c:	d966 3a13 88b9 bb6f 7560 bae4 3f29 3ba9     f..:..o.`u..)?.;
    6a6c:	223e 3b26 18c2 bb91 b906 bb0b 7a85 3afa     >"&;.........z.:
    6a7c:	aa3b 399a 89db 3a92 ed57 3b1a a5b9 bb55     ;..9...:W..;..U.
    6a8c:	0b70 bb96 c326 3b71 82dc 3ba5 4824 bb25     p...&.q;...;$H%.
    6a9c:	aaa8 bb50 f76a 3a2b 4799 b9fe 3d4f 3a52     ..P.j.+:.G..O=R:
    6aac:	9aed 3b90 1b54 ba9c 3fe2 bbdd 4be4 3a28     ...;T....?...K(:
    6abc:	184c 3bcd 9b39 388e 4c1b bb43 1049 b8ae     L..;9..8.LC.I...
    6acc:	9bdc badf 06d9 ba6e f102 3bba d838 3b1b     ......n....;8..;
    6adc:	a687 bbec 3d4f bb52 9d6b 3bb8 951c 3b1b     ....O=R.k..;...;
    6aec:	7ce1 baea 3305 39a6 a0f5 bb20 a7eb bb7f     .|...3.9.. .....
    6afc:	478d 3ba9 f951 3bd7 ea64 bbae a92e bbda     .G.;Q..;d.......
    6b0c:	3409 3b58 a35d 3b65 2995 b9e6 8ab5 3afe     .4X;].e;.).....:
    6b1c:	9d0a bad7 a5f0 bbf0 ebf2 3b07 2264 3c25     ...........;d"%<
    6b2c:	f245 ba95 e729 bc0b 4c51 385e 0410 3b48     E...)...QL^8..H;
    6b3c:	e8d5 b855 1a3b 3b87 0410 3ac8 5144 bc20     ..U.;..;...:DQ .
    6b4c:	edfa bb6b 7785 3c39 ff00 3b94 2336 bc03     ..k..w9<...;6#..
    6b5c:	9064 bb3b 5237 3ab6 34a0 bad4 6395 3bb2     d.;.7R.:.4...c.;
    6b6c:	1394 3bed 9110 bc1a 243a bc35 4242 3c14     ...;....:$5.BB.<
    6b7c:	79e1 3c29 00fc bba4 19f0 bb89 4507 b973     .y)<.........Es.
    6b8c:	0ac4 bbb7 1544 3b7e cf96 3c72 eed0 bb90     ....D.~;..r<....
    6b9c:	34ca bc9a 0147 3b22 cfe1 3c70 3ce2 b99c     .4..G.";..p<.<..
    6bac:	d57c bb4a 5853 39a9 d767 bc3d b192 bb5a     |.J.SX.9g.=...Z.
    6bbc:	7953 3cbb b17d 3bf7 208a bcce 6ff4 bc17     Sy.<}..;. ...o..
    6bcc:	67f9 3c86 8455 3b9b d51b 39e9 fc2f 3be0     .g.<U..;...9/..;
    6bdc:	4c4d bc97 edb3 bcb4 fba0 3cf2 2492 3d08     ML.........<.$.=
    6bec:	28fe bcea 49b2 bcfe 2b6b 3c76 a81a 3c0c     .(...I..k+v<...<
    6bfc:	6b16 3bb8 1801 3d0f 70f8 bcc9 872f bdbd     .k.;...=.p../...
    6c0c:	55b4 3d09 79bc 3e1a 0bed bce8 e8b0 be46     .U.=.y.>......F.
    6c1c:	8d3b 3c34 55bd 3e57 8d3b 3c34 e8b0 be46     ;.4<.UW>;.4<..F.
    6c2c:	0bed bce8 79bc 3e1a 55b4 3d09 872f bdbd     .....y.>.U.=/...
    6c3c:	70f8 bcc9 1801 3d0f 6b16 3bb8 a81a 3c0c     .p.....=.k.;...<
    6c4c:	2b6b 3c76 49b2 bcfe 28fe bcea 2492 3d08     k+v<.I...(...$.=
    6c5c:	fba0 3cf2 edb3 bcb4 4c4d bc97 fc2f 3be0     ...<....ML../..;
    6c6c:	d51b 39e9 8455 3b9b 67f9 3c86 6ff4 bc17     ...9U..;.g.<.o..
    6c7c:	208a bcce b17d 3bf7 7953 3cbb b192 bb5a     . ..}..;Sy.<..Z.
    6c8c:	d767 bc3d 5853 39a9 d57c bb4a 3ce2 b99c     g.=.SX.9|.J..<..
    6c9c:	cfe1 3c70 0147 3b22 34ca bc9a eed0 bb90     ..p<G.";.4......
    6cac:	cf96 3c72 1544 3b7e 0ac4 bbb7 4507 b973     ..r<D.~;.....Es.
    6cbc:	19f0 bb89 00fc bba4 79e1 3c29 4242 3c14     .........y)<BB.<
    6ccc:	243a bc35 9110 bc1a 1394 3bed 6395 3bb2     :$5........;.c.;
    6cdc:	34a0 bad4 5237 3ab6 9064 bb3b 2336 bc03     .4..7R.:d.;.6#..
    6cec:	ff00 3b94 7785 3c39 edfa bb6b 5144 bc20     ...;.w9<..k.DQ .
    6cfc:	0410 3ac8 1a3b 3b87 e8d5 b855 0410 3b48     ...:;..;..U...H;
    6d0c:	4c51 385e e729 bc0b f245 ba95 2264 3c25     QL^8)...E...d"%<
    6d1c:	ebf2 3b07 a5f0 bbf0 9d0a bad7 8ab5 3afe     ...;...........:
    6d2c:	2995 b9e6 a35d 3b65 3409 3b58 a92e bbda     .)..].e;.4X;....
    6d3c:	ea64 bbae f951 3bd7 478d 3ba9 a7eb bb7f     d...Q..;.G.;....
    6d4c:	a0f5 bb20 3305 39a6 7ce1 baea 951c 3b1b     .. ..3.9.|.....;
    6d5c:	9d6b 3bb8 3d4f bb52 a687 bbec d838 3b1b     k..;O=R.....8..;
    6d6c:	f102 3bba 06d9 ba6e 9bdc badf 1049 b8ae     ...;..n.....I...
    6d7c:	4c1b bb43 9b39 388e 184c 3bcd 4be4 3a28     .LC.9..8L..;.K(:
    6d8c:	3fe2 bbdd 1b54 ba9c 9aed 3b90 3d4f 3a52     .?..T......;O=R:
    6d9c:	4799 b9fe f76a 3a2b aaa8 bb50 4824 bb25     .G..j.+:..P.$H%.
    6dac:	82dc 3ba5 c326 3b71 0b70 bb96 a5b9 bb55     ...;&.q;p.....U.
    6dbc:	ed57 3b1a 89db 3a92 aa3b 399a 7a85 3afa     W..;...:;..9.z.:
    6dcc:	b906 bb0b 18c2 bb91 223e 3b26 3f29 3ba9     ........>"&;)?.;
    6ddc:	7560 bae4 88b9 bb6f d966 3a13 61fa 3a04     `u....o.f..:.a.:
    6dec:	d741 393e dff0 3b3c 6230 b91f 7ac4 bba3     A.>9..<;0b...z..
    6dfc:	fc8f b9c1 1ec9 3ba1 d741 3a3e 90fb bb37     .......;A.>:..7.
    6e0c:	9ba6 b9c4 4952 b99d 1a5d ba3f ebc8 3b41     ....RI..].?...A;
    6e1c:	7f30 3b05 a0be bb85 2079 bb32 7236 3b5d     0..;....y 2.6r];
    6e2c:	7e02 3b0d cad1 babd 8f36 b9c3 2e17 ba2b     .~.;....6.....+.
    6e3c:	2eba bafc 0a57 3b01 bf66 3b6e c1b5 bb09     ....W..;f.n;....
    6e4c:	1544 bb7e eebb 3aad 0636 3b1d 7132 b9ab     D.~....:6..;2q..
    6e5c:	c387 3952 d6d4 b988 e11e bb34 719f 3961     ..R9......4..qa9
    6e6c:	2b02 3b87 aaa8 3950 12b2 bb73 67c3 b9eb     .+.;..P9..s..g..
    6e7c:	afcd 3ae6 5d0b 3909 78ea 3a4c f020 3a40     ...:.].9.xL: .@:
    6e8c:	243a bb35 768e badc 0935 3b5e f04a 3b06     :$5..v..5.^;J..;
    6e9c:	2eae bb27 59b8 babc cb08 3a58 73c5 b8b6     ..'..Y....X:.s..
    6eac:	7920 3a67 e41d 3af5 4146 baf0 57f3 bb48      yg:...:FA...WH.
    6ebc:	0bc8 3ae9 82c7 3b42 6e69 ba85 7529 bac9     ...:..B;in..)u..
    6ecc:	1794 3919 64c3 ba2a f76a 39ab 7132 3b2b     ...9.d*.j..92q+;
    6edc:	5d0b b989 25d5 bb63 4207 b8b2 55f8 3b39     .]...%c..B...U9;
    6eec:	8ec9 398d bdf5 ba86 1a93 375a 9b39 ba8e     ...9......Z79...
    6efc:	12dc ba39 d21c 3b28 8034 3ab7 a583 bb3a     ..9...(;4..:..:.
    6f0c:	2d1f bace 71d6 3afc 4507 3a73 156e b9c4     .-...q.:.Es:n...
    6f1c:	cd64 39c8 442c ba87 bffd baea 9bdc 3adf     d..9,D.........:
    6f2c:	36c6 3b29 7169 bac6 4a80 bb15 96b7 3a49     .6);iq...J....I:
    6f3c:	dc9c 3a6f 37bd 3586 ad71 3a76 cd64 b9c8     ..o:.7.5q.v:d...
    6f4c:	c283 bb20 3073 399b b15b 3b3f 37bd 3706     .. .s0.9[.?;.7.7
    6f5c:	825a bb0c 6ea0 b920 cdd1 39fe 6c7a b8cb     Z....n ....9zl..
    6f6c:	4be4 3aa8 f76a 3a2b 5e70 bb1c 2020 2020     .K.:j.+:p^..    
    6f7c:	2020 2020 5541 4944 204f 5053 4345 5254         AUDIO SPECTR
    6f8c:	4d55 4120 414e 594c 455a 2052 0020 0000     UM ANALYZER  ...
    6f9c:	2020 2020 2020 2020 2020 4420 5645 4c45                DEVEL
    6fac:	504f 4445 4120 2054 4543 5444 2020 0000     OPED AT CEDT  ..
    6fbc:	2e41 2020 2d30 3033 4830 007a 2e42 2020     A.  0-300Hz.B.  
    6fcc:	3033 2d30 3037 4830 007a 0000 2e43 2020     300-700Hz...C.  
    6fdc:	3037 2d30 3431 3030 7a48 0000 2e44 2020     700-1400Hz..D.  
    6fec:	3431 3030 322d 3031 4830 007a 2e45 2020     1400-2100Hz.E.  
    6ffc:	3132 3030 332d 3035 4830 007a 2e46 2020     2100-3500Hz.F.  
    700c:	3533 3030 342d 3039 4830 007a 2e47 2020     3500-4900Hz.G.  
    701c:	3934 3030 362d 3033 4830 007a 2e48 2020     4900-6300Hz.H.  
    702c:	3336 3030 392d 3038 4830 007a 7250 7365     6300-9800Hz.Pres
    703c:	2073 3253 7420 206f 6f63 746e 6e69 6575     s S2 to continue
    704c:	2e2e 0000 0041 0000 0042 0000 0043 0000     ....A...B...C...
    705c:	0044 0000 0045 0000 0046 0000 0047 0000     D...E...F...G...
    706c:	0048 0000                                   H...
