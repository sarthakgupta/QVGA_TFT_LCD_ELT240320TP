   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"usb.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USBIndexWrite,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	USBIndexWrite:
  24              	.LFB0:
  25              		.file 1 "C:/StellarisWare/driverlib/usb.c"
   1:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
   2:C:/StellarisWare/driverlib\usb.c **** //
   3:C:/StellarisWare/driverlib\usb.c **** // usb.c - Driver for the USB Interface.
   4:C:/StellarisWare/driverlib\usb.c **** //
   5:C:/StellarisWare/driverlib\usb.c **** // Copyright (c) 2007-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/driverlib\usb.c **** // Software License Agreement
   7:C:/StellarisWare/driverlib\usb.c **** // 
   8:C:/StellarisWare/driverlib\usb.c **** //   Redistribution and use in source and binary forms, with or without
   9:C:/StellarisWare/driverlib\usb.c **** //   modification, are permitted provided that the following conditions
  10:C:/StellarisWare/driverlib\usb.c **** //   are met:
  11:C:/StellarisWare/driverlib\usb.c **** // 
  12:C:/StellarisWare/driverlib\usb.c **** //   Redistributions of source code must retain the above copyright
  13:C:/StellarisWare/driverlib\usb.c **** //   notice, this list of conditions and the following disclaimer.
  14:C:/StellarisWare/driverlib\usb.c **** // 
  15:C:/StellarisWare/driverlib\usb.c **** //   Redistributions in binary form must reproduce the above copyright
  16:C:/StellarisWare/driverlib\usb.c **** //   notice, this list of conditions and the following disclaimer in the
  17:C:/StellarisWare/driverlib\usb.c **** //   documentation and/or other materials provided with the  
  18:C:/StellarisWare/driverlib\usb.c **** //   distribution.
  19:C:/StellarisWare/driverlib\usb.c **** // 
  20:C:/StellarisWare/driverlib\usb.c **** //   Neither the name of Texas Instruments Incorporated nor the names of
  21:C:/StellarisWare/driverlib\usb.c **** //   its contributors may be used to endorse or promote products derived
  22:C:/StellarisWare/driverlib\usb.c **** //   from this software without specific prior written permission.
  23:C:/StellarisWare/driverlib\usb.c **** // 
  24:C:/StellarisWare/driverlib\usb.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:C:/StellarisWare/driverlib\usb.c **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:C:/StellarisWare/driverlib\usb.c **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:C:/StellarisWare/driverlib\usb.c **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:C:/StellarisWare/driverlib\usb.c **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:C:/StellarisWare/driverlib\usb.c **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:C:/StellarisWare/driverlib\usb.c **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:C:/StellarisWare/driverlib\usb.c **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:C:/StellarisWare/driverlib\usb.c **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:C:/StellarisWare/driverlib\usb.c **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:C:/StellarisWare/driverlib\usb.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/StellarisWare/driverlib\usb.c **** // 
  36:C:/StellarisWare/driverlib\usb.c **** // This is part of revision 9107 of the Stellaris Peripheral Driver Library.
  37:C:/StellarisWare/driverlib\usb.c **** //
  38:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  39:C:/StellarisWare/driverlib\usb.c **** 
  40:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  41:C:/StellarisWare/driverlib\usb.c **** //
  42:C:/StellarisWare/driverlib\usb.c **** //! \addtogroup usb_api
  43:C:/StellarisWare/driverlib\usb.c **** //! @{
  44:C:/StellarisWare/driverlib\usb.c **** //
  45:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  46:C:/StellarisWare/driverlib\usb.c **** 
  47:C:/StellarisWare/driverlib\usb.c **** #include "inc/hw_ints.h"
  48:C:/StellarisWare/driverlib\usb.c **** #include "inc/hw_memmap.h"
  49:C:/StellarisWare/driverlib\usb.c **** #include "inc/hw_types.h"
  50:C:/StellarisWare/driverlib\usb.c **** #include "inc/hw_sysctl.h"
  51:C:/StellarisWare/driverlib\usb.c **** #include "inc/hw_usb.h"
  52:C:/StellarisWare/driverlib\usb.c **** #include "driverlib/debug.h"
  53:C:/StellarisWare/driverlib\usb.c **** #include "driverlib/interrupt.h"
  54:C:/StellarisWare/driverlib\usb.c **** #include "driverlib/sysctl.h"
  55:C:/StellarisWare/driverlib\usb.c **** #include "driverlib/udma.h"
  56:C:/StellarisWare/driverlib\usb.c **** #include "driverlib/usb.h"
  57:C:/StellarisWare/driverlib\usb.c **** 
  58:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  59:C:/StellarisWare/driverlib\usb.c **** //
  60:C:/StellarisWare/driverlib\usb.c **** // Amount to shift the RX interrupt sources by in the flags used in the
  61:C:/StellarisWare/driverlib\usb.c **** // interrupt calls.
  62:C:/StellarisWare/driverlib\usb.c **** //
  63:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  64:C:/StellarisWare/driverlib\usb.c **** #ifndef DEPRECATED
  65:C:/StellarisWare/driverlib\usb.c **** #define USB_INT_RX_SHIFT        8
  66:C:/StellarisWare/driverlib\usb.c **** #endif
  67:C:/StellarisWare/driverlib\usb.c **** #define USB_INTEP_RX_SHIFT      16
  68:C:/StellarisWare/driverlib\usb.c **** 
  69:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  70:C:/StellarisWare/driverlib\usb.c **** //
  71:C:/StellarisWare/driverlib\usb.c **** // Amount to shift the status interrupt sources by in the flags used in the
  72:C:/StellarisWare/driverlib\usb.c **** // interrupt calls.
  73:C:/StellarisWare/driverlib\usb.c **** //
  74:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  75:C:/StellarisWare/driverlib\usb.c **** #ifndef DEPRECATED
  76:C:/StellarisWare/driverlib\usb.c **** #define USB_INT_STATUS_SHIFT    24
  77:C:/StellarisWare/driverlib\usb.c **** #endif
  78:C:/StellarisWare/driverlib\usb.c **** 
  79:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  80:C:/StellarisWare/driverlib\usb.c **** //
  81:C:/StellarisWare/driverlib\usb.c **** // Amount to shift the RX endpoint status sources by in the flags used in the
  82:C:/StellarisWare/driverlib\usb.c **** // calls.
  83:C:/StellarisWare/driverlib\usb.c **** //
  84:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  85:C:/StellarisWare/driverlib\usb.c **** #define USB_RX_EPSTATUS_SHIFT   16
  86:C:/StellarisWare/driverlib\usb.c **** 
  87:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  88:C:/StellarisWare/driverlib\usb.c **** //
  89:C:/StellarisWare/driverlib\usb.c **** // Converts from an endpoint specifier to the offset of the endpoint's
  90:C:/StellarisWare/driverlib\usb.c **** // control/status registers.
  91:C:/StellarisWare/driverlib\usb.c **** //
  92:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  93:C:/StellarisWare/driverlib\usb.c **** #define EP_OFFSET(Endpoint)     (Endpoint - 0x10)
  94:C:/StellarisWare/driverlib\usb.c **** 
  95:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
  96:C:/StellarisWare/driverlib\usb.c **** //
  97:C:/StellarisWare/driverlib\usb.c **** // Sets one of the indexed registers.
  98:C:/StellarisWare/driverlib\usb.c **** //
  99:C:/StellarisWare/driverlib\usb.c **** // \param ulBase specifies the USB module base address.
 100:C:/StellarisWare/driverlib\usb.c **** // \param ulEndpoint is the endpoint index to target for this write.
 101:C:/StellarisWare/driverlib\usb.c **** // \param ulIndexedReg is the indexed register to write to.
 102:C:/StellarisWare/driverlib\usb.c **** // \param ucValue is the value to write to the register.
 103:C:/StellarisWare/driverlib\usb.c **** //
 104:C:/StellarisWare/driverlib\usb.c **** // This function is used to access the indexed registers for each endpoint.
 105:C:/StellarisWare/driverlib\usb.c **** // The only registers that are indexed are the FIFO configuration registers,
 106:C:/StellarisWare/driverlib\usb.c **** // which are not used after configuration.
 107:C:/StellarisWare/driverlib\usb.c **** //
 108:C:/StellarisWare/driverlib\usb.c **** // \return None.
 109:C:/StellarisWare/driverlib\usb.c **** //
 110:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 111:C:/StellarisWare/driverlib\usb.c **** static void
 112:C:/StellarisWare/driverlib\usb.c **** USBIndexWrite(unsigned long ulBase, unsigned long ulEndpoint,
 113:C:/StellarisWare/driverlib\usb.c ****               unsigned long ulIndexedReg, unsigned long ulValue,
 114:C:/StellarisWare/driverlib\usb.c ****               unsigned long ulSize)
 115:C:/StellarisWare/driverlib\usb.c **** {
  26              		.loc 1 115 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 24
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 80B4     		push	{r7}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 32
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
  44 000c 3B60     		str	r3, [r7, #0]
 116:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulIndex;
 117:C:/StellarisWare/driverlib\usb.c **** 
 118:C:/StellarisWare/driverlib\usb.c ****     //
 119:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 120:C:/StellarisWare/driverlib\usb.c ****     //
 121:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 122:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == 0) || (ulEndpoint == 1) || (ulEndpoint == 2) ||
 123:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == 3));
 124:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulSize == 1) || (ulSize == 2));
 125:C:/StellarisWare/driverlib\usb.c **** 
 126:C:/StellarisWare/driverlib\usb.c ****     //
 127:C:/StellarisWare/driverlib\usb.c ****     // Save the old index in case it was in use.
 128:C:/StellarisWare/driverlib\usb.c ****     //
 129:C:/StellarisWare/driverlib\usb.c ****     ulIndex = HWREGB(ulBase + USB_O_EPIDX);
  45              		.loc 1 129 0
  46 000e FB68     		ldr	r3, [r7, #12]
  47 0010 03F10E03 		add	r3, r3, #14
  48 0014 1B78     		ldrb	r3, [r3, #0]
  49 0016 DBB2     		uxtb	r3, r3
  50 0018 7B61     		str	r3, [r7, #20]
 130:C:/StellarisWare/driverlib\usb.c **** 
 131:C:/StellarisWare/driverlib\usb.c ****     //
 132:C:/StellarisWare/driverlib\usb.c ****     // Set the index.
 133:C:/StellarisWare/driverlib\usb.c ****     //
 134:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_EPIDX) = ulEndpoint;
  51              		.loc 1 134 0
  52 001a FB68     		ldr	r3, [r7, #12]
  53 001c 03F10E03 		add	r3, r3, #14
  54 0020 BA68     		ldr	r2, [r7, #8]
  55 0022 D2B2     		uxtb	r2, r2
  56 0024 1A70     		strb	r2, [r3, #0]
 135:C:/StellarisWare/driverlib\usb.c **** 
 136:C:/StellarisWare/driverlib\usb.c ****     //
 137:C:/StellarisWare/driverlib\usb.c ****     // Determine the size of the register value.
 138:C:/StellarisWare/driverlib\usb.c ****     //
 139:C:/StellarisWare/driverlib\usb.c ****     if(ulSize == 1)
  57              		.loc 1 139 0
  58 0026 3B6A     		ldr	r3, [r7, #32]
  59 0028 012B     		cmp	r3, #1
  60 002a 06D1     		bne	.L2
 140:C:/StellarisWare/driverlib\usb.c ****     {
 141:C:/StellarisWare/driverlib\usb.c ****         //
 142:C:/StellarisWare/driverlib\usb.c ****         // Set the value.
 143:C:/StellarisWare/driverlib\usb.c ****         //
 144:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + ulIndexedReg) = ulValue;
  61              		.loc 1 144 0
  62 002c FA68     		ldr	r2, [r7, #12]
  63 002e 7B68     		ldr	r3, [r7, #4]
  64 0030 D318     		adds	r3, r2, r3
  65 0032 3A68     		ldr	r2, [r7, #0]
  66 0034 D2B2     		uxtb	r2, r2
  67 0036 1A70     		strb	r2, [r3, #0]
  68 0038 05E0     		b	.L3
  69              	.L2:
 145:C:/StellarisWare/driverlib\usb.c ****     }
 146:C:/StellarisWare/driverlib\usb.c ****     else
 147:C:/StellarisWare/driverlib\usb.c ****     {
 148:C:/StellarisWare/driverlib\usb.c ****         //
 149:C:/StellarisWare/driverlib\usb.c ****         // Set the value.
 150:C:/StellarisWare/driverlib\usb.c ****         //
 151:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + ulIndexedReg) = ulValue;
  70              		.loc 1 151 0
  71 003a FA68     		ldr	r2, [r7, #12]
  72 003c 7B68     		ldr	r3, [r7, #4]
  73 003e D318     		adds	r3, r2, r3
  74 0040 3A68     		ldr	r2, [r7, #0]
  75 0042 92B2     		uxth	r2, r2
  76 0044 1A80     		strh	r2, [r3, #0]	@ movhi
  77              	.L3:
 152:C:/StellarisWare/driverlib\usb.c ****     }
 153:C:/StellarisWare/driverlib\usb.c **** 
 154:C:/StellarisWare/driverlib\usb.c ****     //
 155:C:/StellarisWare/driverlib\usb.c ****     // Restore the old index in case it was in use.
 156:C:/StellarisWare/driverlib\usb.c ****     //
 157:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_EPIDX) = ulIndex;
  78              		.loc 1 157 0
  79 0046 FB68     		ldr	r3, [r7, #12]
  80 0048 03F10E03 		add	r3, r3, #14
  81 004c 7A69     		ldr	r2, [r7, #20]
  82 004e D2B2     		uxtb	r2, r2
  83 0050 1A70     		strb	r2, [r3, #0]
 158:C:/StellarisWare/driverlib\usb.c **** }
  84              		.loc 1 158 0
  85 0052 07F11C07 		add	r7, r7, #28
  86 0056 BD46     		mov	sp, r7
  87 0058 80BC     		pop	{r7}
  88 005a 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE0:
  92              		.section	.text.USBIndexRead,"ax",%progbits
  93              		.align	2
  94              		.thumb
  95              		.thumb_func
  97              	USBIndexRead:
  98              	.LFB1:
 159:C:/StellarisWare/driverlib\usb.c **** 
 160:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 161:C:/StellarisWare/driverlib\usb.c **** //
 162:C:/StellarisWare/driverlib\usb.c **** // Reads one of the indexed registers.
 163:C:/StellarisWare/driverlib\usb.c **** //
 164:C:/StellarisWare/driverlib\usb.c **** // \param ulBase specifies the USB module base address.
 165:C:/StellarisWare/driverlib\usb.c **** // \param ulEndpoint is the endpoint index to target for this write.
 166:C:/StellarisWare/driverlib\usb.c **** // \param ulIndexedReg is the indexed register to write to.
 167:C:/StellarisWare/driverlib\usb.c **** //
 168:C:/StellarisWare/driverlib\usb.c **** // This function is used internally to access the indexed registers for each
 169:C:/StellarisWare/driverlib\usb.c **** // endpoint.  The only registers that are indexed are the FIFO configuration
 170:C:/StellarisWare/driverlib\usb.c **** // registers, which are not used after configuration.
 171:C:/StellarisWare/driverlib\usb.c **** //
 172:C:/StellarisWare/driverlib\usb.c **** // \return The value in the register requested.
 173:C:/StellarisWare/driverlib\usb.c **** //
 174:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 175:C:/StellarisWare/driverlib\usb.c **** static unsigned long
 176:C:/StellarisWare/driverlib\usb.c **** USBIndexRead(unsigned long ulBase, unsigned long ulEndpoint,
 177:C:/StellarisWare/driverlib\usb.c ****              unsigned long ulIndexedReg, unsigned long ulSize)
 178:C:/StellarisWare/driverlib\usb.c **** {
  99              		.loc 1 178 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 24
 102              		@ frame_needed = 1, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104 0000 80B4     		push	{r7}
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 4
 107              		.cfi_offset 7, -4
 108 0002 87B0     		sub	sp, sp, #28
 109              	.LCFI4:
 110              		.cfi_def_cfa_offset 32
 111 0004 00AF     		add	r7, sp, #0
 112              	.LCFI5:
 113              		.cfi_def_cfa_register 7
 114 0006 F860     		str	r0, [r7, #12]
 115 0008 B960     		str	r1, [r7, #8]
 116 000a 7A60     		str	r2, [r7, #4]
 117 000c 3B60     		str	r3, [r7, #0]
 179:C:/StellarisWare/driverlib\usb.c ****     unsigned char ulIndex;
 180:C:/StellarisWare/driverlib\usb.c ****     unsigned char ulValue;
 181:C:/StellarisWare/driverlib\usb.c **** 
 182:C:/StellarisWare/driverlib\usb.c ****     //
 183:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 184:C:/StellarisWare/driverlib\usb.c ****     //
 185:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 186:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == 0) || (ulEndpoint == 1) || (ulEndpoint == 2) ||
 187:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == 3));
 188:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulSize == 1) || (ulSize == 2));
 189:C:/StellarisWare/driverlib\usb.c **** 
 190:C:/StellarisWare/driverlib\usb.c ****     //
 191:C:/StellarisWare/driverlib\usb.c ****     // Save the old index in case it was in use.
 192:C:/StellarisWare/driverlib\usb.c ****     //
 193:C:/StellarisWare/driverlib\usb.c ****     ulIndex = HWREGB(ulBase + USB_O_EPIDX);
 118              		.loc 1 193 0
 119 000e FB68     		ldr	r3, [r7, #12]
 120 0010 03F10E03 		add	r3, r3, #14
 121 0014 1B78     		ldrb	r3, [r3, #0]
 122 0016 BB75     		strb	r3, [r7, #22]
 194:C:/StellarisWare/driverlib\usb.c **** 
 195:C:/StellarisWare/driverlib\usb.c ****     //
 196:C:/StellarisWare/driverlib\usb.c ****     // Set the index.
 197:C:/StellarisWare/driverlib\usb.c ****     //
 198:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_EPIDX) = ulEndpoint;
 123              		.loc 1 198 0
 124 0018 FB68     		ldr	r3, [r7, #12]
 125 001a 03F10E03 		add	r3, r3, #14
 126 001e BA68     		ldr	r2, [r7, #8]
 127 0020 D2B2     		uxtb	r2, r2
 128 0022 1A70     		strb	r2, [r3, #0]
 199:C:/StellarisWare/driverlib\usb.c **** 
 200:C:/StellarisWare/driverlib\usb.c ****     //
 201:C:/StellarisWare/driverlib\usb.c ****     // Determine the size of the register value.
 202:C:/StellarisWare/driverlib\usb.c ****     //
 203:C:/StellarisWare/driverlib\usb.c ****     if(ulSize == 1)
 129              		.loc 1 203 0
 130 0024 3B68     		ldr	r3, [r7, #0]
 131 0026 012B     		cmp	r3, #1
 132 0028 05D1     		bne	.L5
 204:C:/StellarisWare/driverlib\usb.c ****     {
 205:C:/StellarisWare/driverlib\usb.c ****         //
 206:C:/StellarisWare/driverlib\usb.c ****         // Get the value.
 207:C:/StellarisWare/driverlib\usb.c ****         //
 208:C:/StellarisWare/driverlib\usb.c ****         ulValue = HWREGB(ulBase + ulIndexedReg);
 133              		.loc 1 208 0
 134 002a FA68     		ldr	r2, [r7, #12]
 135 002c 7B68     		ldr	r3, [r7, #4]
 136 002e D318     		adds	r3, r2, r3
 137 0030 1B78     		ldrb	r3, [r3, #0]
 138 0032 FB75     		strb	r3, [r7, #23]
 139 0034 05E0     		b	.L6
 140              	.L5:
 209:C:/StellarisWare/driverlib\usb.c ****     }
 210:C:/StellarisWare/driverlib\usb.c ****     else
 211:C:/StellarisWare/driverlib\usb.c ****     {
 212:C:/StellarisWare/driverlib\usb.c ****         //
 213:C:/StellarisWare/driverlib\usb.c ****         // Get the value.
 214:C:/StellarisWare/driverlib\usb.c ****         //
 215:C:/StellarisWare/driverlib\usb.c ****         ulValue = HWREGH(ulBase + ulIndexedReg);
 141              		.loc 1 215 0
 142 0036 FA68     		ldr	r2, [r7, #12]
 143 0038 7B68     		ldr	r3, [r7, #4]
 144 003a D318     		adds	r3, r2, r3
 145 003c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 146 003e 9BB2     		uxth	r3, r3
 147 0040 FB75     		strb	r3, [r7, #23]
 148              	.L6:
 216:C:/StellarisWare/driverlib\usb.c ****     }
 217:C:/StellarisWare/driverlib\usb.c **** 
 218:C:/StellarisWare/driverlib\usb.c ****     //
 219:C:/StellarisWare/driverlib\usb.c ****     // Restore the old index in case it was in use.
 220:C:/StellarisWare/driverlib\usb.c ****     //
 221:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_EPIDX) = ulIndex;
 149              		.loc 1 221 0
 150 0042 FB68     		ldr	r3, [r7, #12]
 151 0044 03F10E03 		add	r3, r3, #14
 152 0048 BA7D     		ldrb	r2, [r7, #22]
 153 004a 1A70     		strb	r2, [r3, #0]
 222:C:/StellarisWare/driverlib\usb.c **** 
 223:C:/StellarisWare/driverlib\usb.c ****     //
 224:C:/StellarisWare/driverlib\usb.c ****     // Return the register's value.
 225:C:/StellarisWare/driverlib\usb.c ****     //
 226:C:/StellarisWare/driverlib\usb.c ****     return(ulValue);
 154              		.loc 1 226 0
 155 004c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 227:C:/StellarisWare/driverlib\usb.c **** }
 156              		.loc 1 227 0
 157 004e 1846     		mov	r0, r3
 158 0050 07F11C07 		add	r7, r7, #28
 159 0054 BD46     		mov	sp, r7
 160 0056 80BC     		pop	{r7}
 161 0058 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE1:
 165 005a 00BF     		.section	.text.USBHostSuspend,"ax",%progbits
 166              		.align	2
 167              		.global	USBHostSuspend
 168              		.thumb
 169              		.thumb_func
 171              	USBHostSuspend:
 172              	.LFB2:
 228:C:/StellarisWare/driverlib\usb.c **** 
 229:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 230:C:/StellarisWare/driverlib\usb.c **** //
 231:C:/StellarisWare/driverlib\usb.c **** //! Puts the USB bus in a suspended state.
 232:C:/StellarisWare/driverlib\usb.c **** //!
 233:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 234:C:/StellarisWare/driverlib\usb.c **** //!
 235:C:/StellarisWare/driverlib\usb.c **** //! When used in host mode, this function puts the USB bus in the suspended
 236:C:/StellarisWare/driverlib\usb.c **** //! state.
 237:C:/StellarisWare/driverlib\usb.c **** //!
 238:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
 239:C:/StellarisWare/driverlib\usb.c **** //!
 240:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 241:C:/StellarisWare/driverlib\usb.c **** //
 242:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 243:C:/StellarisWare/driverlib\usb.c **** void
 244:C:/StellarisWare/driverlib\usb.c **** USBHostSuspend(unsigned long ulBase)
 245:C:/StellarisWare/driverlib\usb.c **** {
 173              		.loc 1 245 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178 0000 80B4     		push	{r7}
 179              	.LCFI6:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 7, -4
 182 0002 83B0     		sub	sp, sp, #12
 183              	.LCFI7:
 184              		.cfi_def_cfa_offset 16
 185 0004 00AF     		add	r7, sp, #0
 186              	.LCFI8:
 187              		.cfi_def_cfa_register 7
 188 0006 7860     		str	r0, [r7, #4]
 246:C:/StellarisWare/driverlib\usb.c ****     //
 247:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 248:C:/StellarisWare/driverlib\usb.c ****     //
 249:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 250:C:/StellarisWare/driverlib\usb.c **** 
 251:C:/StellarisWare/driverlib\usb.c ****     //
 252:C:/StellarisWare/driverlib\usb.c ****     // Send the suspend signaling to the USB bus.
 253:C:/StellarisWare/driverlib\usb.c ****     //
 254:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_POWER) |= USB_POWER_SUSPEND;
 189              		.loc 1 254 0
 190 0008 7B68     		ldr	r3, [r7, #4]
 191 000a 03F10103 		add	r3, r3, #1
 192 000e 7A68     		ldr	r2, [r7, #4]
 193 0010 02F10102 		add	r2, r2, #1
 194 0014 1278     		ldrb	r2, [r2, #0]
 195 0016 D2B2     		uxtb	r2, r2
 196 0018 42F00202 		orr	r2, r2, #2
 197 001c D2B2     		uxtb	r2, r2
 198 001e 1A70     		strb	r2, [r3, #0]
 255:C:/StellarisWare/driverlib\usb.c **** }
 199              		.loc 1 255 0
 200 0020 07F10C07 		add	r7, r7, #12
 201 0024 BD46     		mov	sp, r7
 202 0026 80BC     		pop	{r7}
 203 0028 7047     		bx	lr
 204              		.cfi_endproc
 205              	.LFE2:
 207 002a 00BF     		.section	.text.USBHostReset,"ax",%progbits
 208              		.align	2
 209              		.global	USBHostReset
 210              		.thumb
 211              		.thumb_func
 213              	USBHostReset:
 214              	.LFB3:
 256:C:/StellarisWare/driverlib\usb.c **** 
 257:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 258:C:/StellarisWare/driverlib\usb.c **** //
 259:C:/StellarisWare/driverlib\usb.c **** //! Handles the USB bus reset condition.
 260:C:/StellarisWare/driverlib\usb.c **** //!
 261:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 262:C:/StellarisWare/driverlib\usb.c **** //! \param bStart specifies whether to start or stop signaling reset on the USB
 263:C:/StellarisWare/driverlib\usb.c **** //! bus.
 264:C:/StellarisWare/driverlib\usb.c **** //!
 265:C:/StellarisWare/driverlib\usb.c **** //! When this function is called with the \e bStart parameter set to \b true,
 266:C:/StellarisWare/driverlib\usb.c **** //! this function causes the start of a reset condition on the USB bus.
 267:C:/StellarisWare/driverlib\usb.c **** //! The caller should then delay at least 20ms before calling this function
 268:C:/StellarisWare/driverlib\usb.c **** //! again with the \e bStart parameter set to \b false.
 269:C:/StellarisWare/driverlib\usb.c **** //!
 270:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
 271:C:/StellarisWare/driverlib\usb.c **** //!
 272:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 273:C:/StellarisWare/driverlib\usb.c **** //
 274:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 275:C:/StellarisWare/driverlib\usb.c **** void
 276:C:/StellarisWare/driverlib\usb.c **** USBHostReset(unsigned long ulBase, tBoolean bStart)
 277:C:/StellarisWare/driverlib\usb.c **** {
 215              		.loc 1 277 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 8
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220 0000 80B4     		push	{r7}
 221              	.LCFI9:
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 0002 83B0     		sub	sp, sp, #12
 225              	.LCFI10:
 226              		.cfi_def_cfa_offset 16
 227 0004 00AF     		add	r7, sp, #0
 228              	.LCFI11:
 229              		.cfi_def_cfa_register 7
 230 0006 7860     		str	r0, [r7, #4]
 231 0008 0B46     		mov	r3, r1
 232 000a FB70     		strb	r3, [r7, #3]
 278:C:/StellarisWare/driverlib\usb.c ****     //
 279:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 280:C:/StellarisWare/driverlib\usb.c ****     //
 281:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 282:C:/StellarisWare/driverlib\usb.c **** 
 283:C:/StellarisWare/driverlib\usb.c ****     //
 284:C:/StellarisWare/driverlib\usb.c ****     // Send a reset signal to the bus.
 285:C:/StellarisWare/driverlib\usb.c ****     //
 286:C:/StellarisWare/driverlib\usb.c ****     if(bStart)
 233              		.loc 1 286 0
 234 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 235 000e 002B     		cmp	r3, #0
 236 0010 0CD0     		beq	.L9
 287:C:/StellarisWare/driverlib\usb.c ****     {
 288:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_POWER) |= USB_POWER_RESET;
 237              		.loc 1 288 0
 238 0012 7B68     		ldr	r3, [r7, #4]
 239 0014 03F10103 		add	r3, r3, #1
 240 0018 7A68     		ldr	r2, [r7, #4]
 241 001a 02F10102 		add	r2, r2, #1
 242 001e 1278     		ldrb	r2, [r2, #0]
 243 0020 D2B2     		uxtb	r2, r2
 244 0022 42F00802 		orr	r2, r2, #8
 245 0026 D2B2     		uxtb	r2, r2
 246 0028 1A70     		strb	r2, [r3, #0]
 247 002a 0BE0     		b	.L8
 248              	.L9:
 289:C:/StellarisWare/driverlib\usb.c ****     }
 290:C:/StellarisWare/driverlib\usb.c ****     else
 291:C:/StellarisWare/driverlib\usb.c ****     {
 292:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_POWER) &= ~USB_POWER_RESET;
 249              		.loc 1 292 0
 250 002c 7B68     		ldr	r3, [r7, #4]
 251 002e 03F10103 		add	r3, r3, #1
 252 0032 7A68     		ldr	r2, [r7, #4]
 253 0034 02F10102 		add	r2, r2, #1
 254 0038 1278     		ldrb	r2, [r2, #0]
 255 003a D2B2     		uxtb	r2, r2
 256 003c 22F00802 		bic	r2, r2, #8
 257 0040 D2B2     		uxtb	r2, r2
 258 0042 1A70     		strb	r2, [r3, #0]
 259              	.L8:
 293:C:/StellarisWare/driverlib\usb.c ****     }
 294:C:/StellarisWare/driverlib\usb.c **** }
 260              		.loc 1 294 0
 261 0044 07F10C07 		add	r7, r7, #12
 262 0048 BD46     		mov	sp, r7
 263 004a 80BC     		pop	{r7}
 264 004c 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE3:
 268 004e 00BF     		.section	.text.USBHostResume,"ax",%progbits
 269              		.align	2
 270              		.global	USBHostResume
 271              		.thumb
 272              		.thumb_func
 274              	USBHostResume:
 275              	.LFB4:
 295:C:/StellarisWare/driverlib\usb.c **** 
 296:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 297:C:/StellarisWare/driverlib\usb.c **** //
 298:C:/StellarisWare/driverlib\usb.c **** //! Handles the USB bus resume condition.
 299:C:/StellarisWare/driverlib\usb.c **** //!
 300:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 301:C:/StellarisWare/driverlib\usb.c **** //! \param bStart specifies if the USB controller is entering or leaving the
 302:C:/StellarisWare/driverlib\usb.c **** //! resume signaling state.
 303:C:/StellarisWare/driverlib\usb.c **** //!
 304:C:/StellarisWare/driverlib\usb.c **** //! When in device mode, this function brings the USB controller out of the
 305:C:/StellarisWare/driverlib\usb.c **** //! suspend state.  This call should first be made with the \e bStart parameter
 306:C:/StellarisWare/driverlib\usb.c **** //! set to \b true to start resume signaling.  The device application should
 307:C:/StellarisWare/driverlib\usb.c **** //! then delay at least 10ms but not more than 15ms before calling this
 308:C:/StellarisWare/driverlib\usb.c **** //! function with the \e bStart parameter set to \b false.
 309:C:/StellarisWare/driverlib\usb.c **** //!
 310:C:/StellarisWare/driverlib\usb.c **** //! When in host mode, this function signals devices to leave the suspend
 311:C:/StellarisWare/driverlib\usb.c **** //! state.  This call should first be made with the \e bStart parameter set to
 312:C:/StellarisWare/driverlib\usb.c **** //! \b true to start resume signaling.  The host application should then delay
 313:C:/StellarisWare/driverlib\usb.c **** //! at least 20ms before calling this function with the \e bStart parameter set
 314:C:/StellarisWare/driverlib\usb.c **** //! to \b false.  This action causes the controller to complete the resume
 315:C:/StellarisWare/driverlib\usb.c **** //! signaling on the USB bus.
 316:C:/StellarisWare/driverlib\usb.c **** //!
 317:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 318:C:/StellarisWare/driverlib\usb.c **** //
 319:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 320:C:/StellarisWare/driverlib\usb.c **** void
 321:C:/StellarisWare/driverlib\usb.c **** USBHostResume(unsigned long ulBase, tBoolean bStart)
 322:C:/StellarisWare/driverlib\usb.c **** {
 276              		.loc 1 322 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281 0000 80B4     		push	{r7}
 282              	.LCFI12:
 283              		.cfi_def_cfa_offset 4
 284              		.cfi_offset 7, -4
 285 0002 83B0     		sub	sp, sp, #12
 286              	.LCFI13:
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI14:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 292 0008 0B46     		mov	r3, r1
 293 000a FB70     		strb	r3, [r7, #3]
 323:C:/StellarisWare/driverlib\usb.c ****     //
 324:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 325:C:/StellarisWare/driverlib\usb.c ****     //
 326:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 327:C:/StellarisWare/driverlib\usb.c **** 
 328:C:/StellarisWare/driverlib\usb.c ****     //
 329:C:/StellarisWare/driverlib\usb.c ****     // Send a resume signal to the bus.
 330:C:/StellarisWare/driverlib\usb.c ****     //
 331:C:/StellarisWare/driverlib\usb.c ****     if(bStart)
 294              		.loc 1 331 0
 295 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 296 000e 002B     		cmp	r3, #0
 297 0010 0CD0     		beq	.L12
 332:C:/StellarisWare/driverlib\usb.c ****     {
 333:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_POWER) |= USB_POWER_RESUME;
 298              		.loc 1 333 0
 299 0012 7B68     		ldr	r3, [r7, #4]
 300 0014 03F10103 		add	r3, r3, #1
 301 0018 7A68     		ldr	r2, [r7, #4]
 302 001a 02F10102 		add	r2, r2, #1
 303 001e 1278     		ldrb	r2, [r2, #0]
 304 0020 D2B2     		uxtb	r2, r2
 305 0022 42F00402 		orr	r2, r2, #4
 306 0026 D2B2     		uxtb	r2, r2
 307 0028 1A70     		strb	r2, [r3, #0]
 308 002a 0BE0     		b	.L11
 309              	.L12:
 334:C:/StellarisWare/driverlib\usb.c ****     }
 335:C:/StellarisWare/driverlib\usb.c ****     else
 336:C:/StellarisWare/driverlib\usb.c ****     {
 337:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_POWER) &= ~USB_POWER_RESUME;
 310              		.loc 1 337 0
 311 002c 7B68     		ldr	r3, [r7, #4]
 312 002e 03F10103 		add	r3, r3, #1
 313 0032 7A68     		ldr	r2, [r7, #4]
 314 0034 02F10102 		add	r2, r2, #1
 315 0038 1278     		ldrb	r2, [r2, #0]
 316 003a D2B2     		uxtb	r2, r2
 317 003c 22F00402 		bic	r2, r2, #4
 318 0040 D2B2     		uxtb	r2, r2
 319 0042 1A70     		strb	r2, [r3, #0]
 320              	.L11:
 338:C:/StellarisWare/driverlib\usb.c ****     }
 339:C:/StellarisWare/driverlib\usb.c **** }
 321              		.loc 1 339 0
 322 0044 07F10C07 		add	r7, r7, #12
 323 0048 BD46     		mov	sp, r7
 324 004a 80BC     		pop	{r7}
 325 004c 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE4:
 329 004e 00BF     		.section	.text.USBHostSpeedGet,"ax",%progbits
 330              		.align	2
 331              		.global	USBHostSpeedGet
 332              		.thumb
 333              		.thumb_func
 335              	USBHostSpeedGet:
 336              	.LFB5:
 340:C:/StellarisWare/driverlib\usb.c **** 
 341:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 342:C:/StellarisWare/driverlib\usb.c **** //
 343:C:/StellarisWare/driverlib\usb.c **** //! Returns the current speed of the USB device connected.
 344:C:/StellarisWare/driverlib\usb.c **** //!
 345:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 346:C:/StellarisWare/driverlib\usb.c **** //!
 347:C:/StellarisWare/driverlib\usb.c **** //! This function returns the current speed of the USB bus.
 348:C:/StellarisWare/driverlib\usb.c **** //!
 349:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
 350:C:/StellarisWare/driverlib\usb.c **** //!
 351:C:/StellarisWare/driverlib\usb.c **** //! \return Returns either \b USB_LOW_SPEED, \b USB_FULL_SPEED, or
 352:C:/StellarisWare/driverlib\usb.c **** //! \b USB_UNDEF_SPEED.
 353:C:/StellarisWare/driverlib\usb.c **** //
 354:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 355:C:/StellarisWare/driverlib\usb.c **** unsigned long
 356:C:/StellarisWare/driverlib\usb.c **** USBHostSpeedGet(unsigned long ulBase)
 357:C:/StellarisWare/driverlib\usb.c **** {
 337              		.loc 1 357 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342 0000 80B4     		push	{r7}
 343              	.LCFI15:
 344              		.cfi_def_cfa_offset 4
 345              		.cfi_offset 7, -4
 346 0002 83B0     		sub	sp, sp, #12
 347              	.LCFI16:
 348              		.cfi_def_cfa_offset 16
 349 0004 00AF     		add	r7, sp, #0
 350              	.LCFI17:
 351              		.cfi_def_cfa_register 7
 352 0006 7860     		str	r0, [r7, #4]
 358:C:/StellarisWare/driverlib\usb.c ****     //
 359:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 360:C:/StellarisWare/driverlib\usb.c ****     //
 361:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 362:C:/StellarisWare/driverlib\usb.c **** 
 363:C:/StellarisWare/driverlib\usb.c ****     //
 364:C:/StellarisWare/driverlib\usb.c ****     // If the Full Speed device bit is set, then this is a full speed device.
 365:C:/StellarisWare/driverlib\usb.c ****     //
 366:C:/StellarisWare/driverlib\usb.c ****     if(HWREGB(ulBase + USB_O_DEVCTL) & USB_DEVCTL_FSDEV)
 353              		.loc 1 366 0
 354 0008 7B68     		ldr	r3, [r7, #4]
 355 000a 03F16003 		add	r3, r3, #96
 356 000e 1B78     		ldrb	r3, [r3, #0]
 357 0010 DBB2     		uxtb	r3, r3
 358 0012 03F04003 		and	r3, r3, #64
 359 0016 002B     		cmp	r3, #0
 360 0018 02D0     		beq	.L15
 367:C:/StellarisWare/driverlib\usb.c ****     {
 368:C:/StellarisWare/driverlib\usb.c ****         return(USB_FULL_SPEED);
 361              		.loc 1 368 0
 362 001a 4FF00103 		mov	r3, #1
 363 001e 0DE0     		b	.L16
 364              	.L15:
 369:C:/StellarisWare/driverlib\usb.c ****     }
 370:C:/StellarisWare/driverlib\usb.c **** 
 371:C:/StellarisWare/driverlib\usb.c ****     //
 372:C:/StellarisWare/driverlib\usb.c ****     // If the Low Speed device bit is set, then this is a low speed device.
 373:C:/StellarisWare/driverlib\usb.c ****     //
 374:C:/StellarisWare/driverlib\usb.c ****     if(HWREGB(ulBase + USB_O_DEVCTL) & USB_DEVCTL_LSDEV)
 365              		.loc 1 374 0
 366 0020 7B68     		ldr	r3, [r7, #4]
 367 0022 03F16003 		add	r3, r3, #96
 368 0026 1B78     		ldrb	r3, [r3, #0]
 369 0028 DBB2     		uxtb	r3, r3
 370 002a 03F02003 		and	r3, r3, #32
 371 002e 002B     		cmp	r3, #0
 372 0030 02D0     		beq	.L17
 375:C:/StellarisWare/driverlib\usb.c ****     {
 376:C:/StellarisWare/driverlib\usb.c ****         return(USB_LOW_SPEED);
 373              		.loc 1 376 0
 374 0032 4FF00003 		mov	r3, #0
 375 0036 01E0     		b	.L16
 376              	.L17:
 377:C:/StellarisWare/driverlib\usb.c ****     }
 378:C:/StellarisWare/driverlib\usb.c **** 
 379:C:/StellarisWare/driverlib\usb.c ****     //
 380:C:/StellarisWare/driverlib\usb.c ****     // The device speed is not known.
 381:C:/StellarisWare/driverlib\usb.c ****     //
 382:C:/StellarisWare/driverlib\usb.c ****     return(USB_UNDEF_SPEED);
 377              		.loc 1 382 0
 378 0038 4FF00043 		mov	r3, #-2147483648
 379              	.L16:
 383:C:/StellarisWare/driverlib\usb.c **** }
 380              		.loc 1 383 0
 381 003c 1846     		mov	r0, r3
 382 003e 07F10C07 		add	r7, r7, #12
 383 0042 BD46     		mov	sp, r7
 384 0044 80BC     		pop	{r7}
 385 0046 7047     		bx	lr
 386              		.cfi_endproc
 387              	.LFE5:
 389              		.section	.text.USBIntStatus,"ax",%progbits
 390              		.align	2
 391              		.global	USBIntStatus
 392              		.thumb
 393              		.thumb_func
 395              	USBIntStatus:
 396              	.LFB6:
 384:C:/StellarisWare/driverlib\usb.c **** 
 385:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 386:C:/StellarisWare/driverlib\usb.c **** //
 387:C:/StellarisWare/driverlib\usb.c **** //! Returns the status of the USB interrupts.
 388:C:/StellarisWare/driverlib\usb.c **** //!
 389:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 390:C:/StellarisWare/driverlib\usb.c **** //!
 391:C:/StellarisWare/driverlib\usb.c **** //! This function reads the source of the interrupt for the USB controller.
 392:C:/StellarisWare/driverlib\usb.c **** //! There are three groups of interrupt sources, IN Endpoints, OUT Endpoints,
 393:C:/StellarisWare/driverlib\usb.c **** //! and general status changes.  This call returns the current status for
 394:C:/StellarisWare/driverlib\usb.c **** //! all of these interrupts.  The bit values returned should be compared
 395:C:/StellarisWare/driverlib\usb.c **** //! against the \b USB_HOST_IN, \b USB_HOST_OUT, \b USB_HOST_EP0,
 396:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DEV_IN, \b USB_DEV_OUT, and \b USB_DEV_EP0 values.
 397:C:/StellarisWare/driverlib\usb.c **** //!
 398:C:/StellarisWare/driverlib\usb.c **** //! \note This call clears the source of all of the general status interrupts.
 399:C:/StellarisWare/driverlib\usb.c **** //!
 400:C:/StellarisWare/driverlib\usb.c **** //! \note WARNING: This API cannot be used on endpoint numbers greater than
 401:C:/StellarisWare/driverlib\usb.c **** //! endpoint 3 so USBIntStatusControl() or USBIntStatusEndpoint() should be
 402:C:/StellarisWare/driverlib\usb.c **** //! used instead.
 403:C:/StellarisWare/driverlib\usb.c **** //!
 404:C:/StellarisWare/driverlib\usb.c **** //! \return Returns the status of the sources for the USB controller's
 405:C:/StellarisWare/driverlib\usb.c **** //! interrupt.
 406:C:/StellarisWare/driverlib\usb.c **** //
 407:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 408:C:/StellarisWare/driverlib\usb.c **** #ifndef DEPRECATED
 409:C:/StellarisWare/driverlib\usb.c **** unsigned long
 410:C:/StellarisWare/driverlib\usb.c **** USBIntStatus(unsigned long ulBase)
 411:C:/StellarisWare/driverlib\usb.c **** {
 397              		.loc 1 411 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 16
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 402 0000 80B4     		push	{r7}
 403              	.LCFI18:
 404              		.cfi_def_cfa_offset 4
 405              		.cfi_offset 7, -4
 406 0002 85B0     		sub	sp, sp, #20
 407              	.LCFI19:
 408              		.cfi_def_cfa_offset 24
 409 0004 00AF     		add	r7, sp, #0
 410              	.LCFI20:
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 412:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulStatus;
 413:C:/StellarisWare/driverlib\usb.c **** 
 414:C:/StellarisWare/driverlib\usb.c ****     //
 415:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 416:C:/StellarisWare/driverlib\usb.c ****     //
 417:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 418:C:/StellarisWare/driverlib\usb.c **** 
 419:C:/StellarisWare/driverlib\usb.c ****     //
 420:C:/StellarisWare/driverlib\usb.c ****     // Get the transmit interrupt status.
 421:C:/StellarisWare/driverlib\usb.c ****     //
 422:C:/StellarisWare/driverlib\usb.c ****     ulStatus = (HWREGB(ulBase + USB_O_TXIS));
 413              		.loc 1 422 0
 414 0008 7B68     		ldr	r3, [r7, #4]
 415 000a 03F10203 		add	r3, r3, #2
 416 000e 1B78     		ldrb	r3, [r3, #0]
 417 0010 DBB2     		uxtb	r3, r3
 418 0012 FB60     		str	r3, [r7, #12]
 423:C:/StellarisWare/driverlib\usb.c **** 
 424:C:/StellarisWare/driverlib\usb.c ****     //
 425:C:/StellarisWare/driverlib\usb.c ****     // Get the receive interrupt status, these bits go into the second byte of
 426:C:/StellarisWare/driverlib\usb.c ****     // the returned value.
 427:C:/StellarisWare/driverlib\usb.c ****     //
 428:C:/StellarisWare/driverlib\usb.c ****     ulStatus |= (HWREGB(ulBase + USB_O_RXIS) << USB_INT_RX_SHIFT);
 419              		.loc 1 428 0
 420 0014 7B68     		ldr	r3, [r7, #4]
 421 0016 03F10403 		add	r3, r3, #4
 422 001a 1B78     		ldrb	r3, [r3, #0]
 423 001c DBB2     		uxtb	r3, r3
 424 001e 4FEA0323 		lsl	r3, r3, #8
 425 0022 FA68     		ldr	r2, [r7, #12]
 426 0024 1343     		orrs	r3, r3, r2
 427 0026 FB60     		str	r3, [r7, #12]
 429:C:/StellarisWare/driverlib\usb.c **** 
 430:C:/StellarisWare/driverlib\usb.c ****     //
 431:C:/StellarisWare/driverlib\usb.c ****     // Get the general interrupt status, these bits go into the upper 8 bits
 432:C:/StellarisWare/driverlib\usb.c ****     // of the returned value.
 433:C:/StellarisWare/driverlib\usb.c ****     //
 434:C:/StellarisWare/driverlib\usb.c ****     ulStatus |= (HWREGB(ulBase + USB_O_IS) << USB_INT_STATUS_SHIFT);
 428              		.loc 1 434 0
 429 0028 7B68     		ldr	r3, [r7, #4]
 430 002a 03F10A03 		add	r3, r3, #10
 431 002e 1B78     		ldrb	r3, [r3, #0]
 432 0030 DBB2     		uxtb	r3, r3
 433 0032 4FEA0363 		lsl	r3, r3, #24
 434 0036 FA68     		ldr	r2, [r7, #12]
 435 0038 1343     		orrs	r3, r3, r2
 436 003a FB60     		str	r3, [r7, #12]
 435:C:/StellarisWare/driverlib\usb.c **** 
 436:C:/StellarisWare/driverlib\usb.c ****     //
 437:C:/StellarisWare/driverlib\usb.c ****     // Add the power fault status.
 438:C:/StellarisWare/driverlib\usb.c ****     //
 439:C:/StellarisWare/driverlib\usb.c ****     if(HWREG(ulBase + USB_O_EPCISC) & USB_EPCISC_PF)
 437              		.loc 1 439 0
 438 003c 7B68     		ldr	r3, [r7, #4]
 439 003e 03F58063 		add	r3, r3, #1024
 440 0042 03F10C03 		add	r3, r3, #12
 441 0046 1B68     		ldr	r3, [r3, #0]
 442 0048 03F00103 		and	r3, r3, #1
 443 004c DBB2     		uxtb	r3, r3
 444 004e 002B     		cmp	r3, #0
 445 0050 14D0     		beq	.L19
 440:C:/StellarisWare/driverlib\usb.c ****     {
 441:C:/StellarisWare/driverlib\usb.c ****         //
 442:C:/StellarisWare/driverlib\usb.c ****         // Indicate a power fault was detected.
 443:C:/StellarisWare/driverlib\usb.c ****         //
 444:C:/StellarisWare/driverlib\usb.c ****         ulStatus |= USB_INT_POWER_FAULT;
 446              		.loc 1 444 0
 447 0052 FB68     		ldr	r3, [r7, #12]
 448 0054 43F48033 		orr	r3, r3, #65536
 449 0058 FB60     		str	r3, [r7, #12]
 445:C:/StellarisWare/driverlib\usb.c **** 
 446:C:/StellarisWare/driverlib\usb.c ****         //
 447:C:/StellarisWare/driverlib\usb.c ****         // Clear the power fault interrupt.
 448:C:/StellarisWare/driverlib\usb.c ****         //
 449:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_EPCISC) |= USB_EPCISC_PF;
 450              		.loc 1 449 0
 451 005a 7B68     		ldr	r3, [r7, #4]
 452 005c 03F58063 		add	r3, r3, #1024
 453 0060 03F10C03 		add	r3, r3, #12
 454 0064 1A46     		mov	r2, r3
 455 0066 7B68     		ldr	r3, [r7, #4]
 456 0068 03F58063 		add	r3, r3, #1024
 457 006c 03F10C03 		add	r3, r3, #12
 458 0070 1B78     		ldrb	r3, [r3, #0]
 459 0072 DBB2     		uxtb	r3, r3
 460 0074 43F00103 		orr	r3, r3, #1
 461 0078 DBB2     		uxtb	r3, r3
 462 007a 1370     		strb	r3, [r2, #0]
 463              	.L19:
 450:C:/StellarisWare/driverlib\usb.c ****     }
 451:C:/StellarisWare/driverlib\usb.c **** 
 452:C:/StellarisWare/driverlib\usb.c ****     if(HWREG(USB0_BASE + USB_O_IDVISC) & USB_IDVRIS_ID)
 464              		.loc 1 452 0
 465 007c 40F24C43 		movw	r3, #1100
 466 0080 C4F20503 		movt	r3, 16389
 467 0084 1B68     		ldr	r3, [r3, #0]
 468 0086 03F00103 		and	r3, r3, #1
 469 008a DBB2     		uxtb	r3, r3
 470 008c 002B     		cmp	r3, #0
 471 008e 0FD0     		beq	.L20
 453:C:/StellarisWare/driverlib\usb.c ****     {
 454:C:/StellarisWare/driverlib\usb.c ****         //
 455:C:/StellarisWare/driverlib\usb.c ****         // Indicate an id detection was detected.
 456:C:/StellarisWare/driverlib\usb.c ****         //
 457:C:/StellarisWare/driverlib\usb.c ****         ulStatus |= USB_INT_MODE_DETECT;
 472              		.loc 1 457 0
 473 0090 FB68     		ldr	r3, [r7, #12]
 474 0092 43F40033 		orr	r3, r3, #131072
 475 0096 FB60     		str	r3, [r7, #12]
 458:C:/StellarisWare/driverlib\usb.c **** 
 459:C:/StellarisWare/driverlib\usb.c ****         //
 460:C:/StellarisWare/driverlib\usb.c ****         // Clear the id detection interrupt.
 461:C:/StellarisWare/driverlib\usb.c ****         //
 462:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVISC) |= USB_IDVRIS_ID;
 476              		.loc 1 462 0
 477 0098 40F24C43 		movw	r3, #1100
 478 009c C4F20503 		movt	r3, 16389
 479 00a0 40F24C42 		movw	r2, #1100
 480 00a4 C4F20502 		movt	r2, 16389
 481 00a8 1268     		ldr	r2, [r2, #0]
 482 00aa 42F00102 		orr	r2, r2, #1
 483 00ae 1A60     		str	r2, [r3, #0]
 484              	.L20:
 463:C:/StellarisWare/driverlib\usb.c ****     }
 464:C:/StellarisWare/driverlib\usb.c **** 
 465:C:/StellarisWare/driverlib\usb.c ****     //
 466:C:/StellarisWare/driverlib\usb.c ****     // Return the combined interrupt status.
 467:C:/StellarisWare/driverlib\usb.c ****     //
 468:C:/StellarisWare/driverlib\usb.c ****     return(ulStatus);
 485              		.loc 1 468 0
 486 00b0 FB68     		ldr	r3, [r7, #12]
 469:C:/StellarisWare/driverlib\usb.c **** }
 487              		.loc 1 469 0
 488 00b2 1846     		mov	r0, r3
 489 00b4 07F11407 		add	r7, r7, #20
 490 00b8 BD46     		mov	sp, r7
 491 00ba 80BC     		pop	{r7}
 492 00bc 7047     		bx	lr
 493              		.cfi_endproc
 494              	.LFE6:
 496 00be 00BF     		.section	.text.USBIntDisable,"ax",%progbits
 497              		.align	2
 498              		.global	USBIntDisable
 499              		.thumb
 500              		.thumb_func
 502              	USBIntDisable:
 503              	.LFB7:
 470:C:/StellarisWare/driverlib\usb.c **** #endif
 471:C:/StellarisWare/driverlib\usb.c **** 
 472:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 473:C:/StellarisWare/driverlib\usb.c **** //
 474:C:/StellarisWare/driverlib\usb.c **** //! Disables the sources for USB interrupts.
 475:C:/StellarisWare/driverlib\usb.c **** //!
 476:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 477:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which interrupts to disable.
 478:C:/StellarisWare/driverlib\usb.c **** //!
 479:C:/StellarisWare/driverlib\usb.c **** //! This function disables the USB controller from generating the
 480:C:/StellarisWare/driverlib\usb.c **** //! interrupts indicated by the \e ulFlags parameter.  There are three groups
 481:C:/StellarisWare/driverlib\usb.c **** //! of interrupt sources, IN Endpoints, OUT Endpoints, and general status
 482:C:/StellarisWare/driverlib\usb.c **** //! changes, specified by \b USB_INT_HOST_IN, \b USB_INT_HOST_OUT,
 483:C:/StellarisWare/driverlib\usb.c **** //! \b USB_INT_DEV_IN, \b USB_INT_DEV_OUT, and \b USB_INT_STATUS.  If
 484:C:/StellarisWare/driverlib\usb.c **** //! \b USB_INT_ALL is specified, then all interrupts are disabled.
 485:C:/StellarisWare/driverlib\usb.c **** //!
 486:C:/StellarisWare/driverlib\usb.c **** //! \note WARNING: This API cannot be used on endpoint numbers greater than
 487:C:/StellarisWare/driverlib\usb.c **** //! endpoint 3 so USBIntDisableControl() or USBIntDisableEndpoint() should be
 488:C:/StellarisWare/driverlib\usb.c **** //! used instead.
 489:C:/StellarisWare/driverlib\usb.c **** //!
 490:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 491:C:/StellarisWare/driverlib\usb.c **** //
 492:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 493:C:/StellarisWare/driverlib\usb.c **** #ifndef DEPRECATED
 494:C:/StellarisWare/driverlib\usb.c **** void
 495:C:/StellarisWare/driverlib\usb.c **** USBIntDisable(unsigned long ulBase, unsigned long ulFlags)
 496:C:/StellarisWare/driverlib\usb.c **** {
 504              		.loc 1 496 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 8
 507              		@ frame_needed = 1, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509 0000 80B4     		push	{r7}
 510              	.LCFI21:
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 7, -4
 513 0002 83B0     		sub	sp, sp, #12
 514              	.LCFI22:
 515              		.cfi_def_cfa_offset 16
 516 0004 00AF     		add	r7, sp, #0
 517              	.LCFI23:
 518              		.cfi_def_cfa_register 7
 519 0006 7860     		str	r0, [r7, #4]
 520 0008 3960     		str	r1, [r7, #0]
 497:C:/StellarisWare/driverlib\usb.c ****     //
 498:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 499:C:/StellarisWare/driverlib\usb.c ****     //
 500:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 501:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & ~(USB_INT_ALL)) == 0);
 502:C:/StellarisWare/driverlib\usb.c **** 
 503:C:/StellarisWare/driverlib\usb.c ****     //
 504:C:/StellarisWare/driverlib\usb.c ****     // If any transmit interrupts were disabled, then write the transmit
 505:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 506:C:/StellarisWare/driverlib\usb.c ****     //
 507:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_INT_HOST_OUT | USB_INT_DEV_IN | USB_INT_EP0))
 521              		.loc 1 507 0
 522 000a 3B68     		ldr	r3, [r7, #0]
 523 000c 03F00F03 		and	r3, r3, #15
 524 0010 002B     		cmp	r3, #0
 525 0012 12D0     		beq	.L22
 508:C:/StellarisWare/driverlib\usb.c ****     {
 509:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_TXIE) &=
 526              		.loc 1 509 0
 527 0014 7B68     		ldr	r3, [r7, #4]
 528 0016 03F10603 		add	r3, r3, #6
 529 001a 7A68     		ldr	r2, [r7, #4]
 530 001c 02F10602 		add	r2, r2, #6
 531 0020 1288     		ldrh	r2, [r2, #0]	@ movhi
 532 0022 91B2     		uxth	r1, r2
 533 0024 3A68     		ldr	r2, [r7, #0]
 534 0026 92B2     		uxth	r2, r2
 535 0028 02F00F02 		and	r2, r2, #15
 536 002c 92B2     		uxth	r2, r2
 537 002e 6FEA0202 		mvn	r2, r2
 538 0032 92B2     		uxth	r2, r2
 539 0034 0A40     		ands	r2, r2, r1
 540 0036 92B2     		uxth	r2, r2
 541 0038 1A80     		strh	r2, [r3, #0]	@ movhi
 542              	.L22:
 510:C:/StellarisWare/driverlib\usb.c ****             ~(ulFlags & (USB_INT_HOST_OUT | USB_INT_DEV_IN | USB_INT_EP0));
 511:C:/StellarisWare/driverlib\usb.c ****     }
 512:C:/StellarisWare/driverlib\usb.c **** 
 513:C:/StellarisWare/driverlib\usb.c ****     //
 514:C:/StellarisWare/driverlib\usb.c ****     // If any receive interrupts were disabled, then write the receive
 515:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 516:C:/StellarisWare/driverlib\usb.c ****     //
 517:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_INT_HOST_IN | USB_INT_DEV_OUT))
 543              		.loc 1 517 0
 544 003a 3B68     		ldr	r3, [r7, #0]
 545 003c 03F46063 		and	r3, r3, #3584
 546 0040 002B     		cmp	r3, #0
 547 0042 13D0     		beq	.L23
 518:C:/StellarisWare/driverlib\usb.c ****     {
 519:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_RXIE) &=
 548              		.loc 1 519 0
 549 0044 7B68     		ldr	r3, [r7, #4]
 550 0046 03F10803 		add	r3, r3, #8
 551 004a 7A68     		ldr	r2, [r7, #4]
 552 004c 02F10802 		add	r2, r2, #8
 553 0050 1288     		ldrh	r2, [r2, #0]	@ movhi
 554 0052 91B2     		uxth	r1, r2
 520:C:/StellarisWare/driverlib\usb.c ****             ~((ulFlags & (USB_INT_HOST_IN | USB_INT_DEV_OUT)) >>
 555              		.loc 1 520 0
 556 0054 3A68     		ldr	r2, [r7, #0]
 557 0056 02F46062 		and	r2, r2, #3584
 558 005a 4FEA1222 		lsr	r2, r2, #8
 519:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_RXIE) &=
 559              		.loc 1 519 0
 560 005e 92B2     		uxth	r2, r2
 561 0060 6FEA0202 		mvn	r2, r2
 562 0064 92B2     		uxth	r2, r2
 563 0066 0A40     		ands	r2, r2, r1
 564 0068 92B2     		uxth	r2, r2
 565 006a 1A80     		strh	r2, [r3, #0]	@ movhi
 566              	.L23:
 521:C:/StellarisWare/driverlib\usb.c ****               USB_INT_RX_SHIFT);
 522:C:/StellarisWare/driverlib\usb.c ****     }
 523:C:/StellarisWare/driverlib\usb.c **** 
 524:C:/StellarisWare/driverlib\usb.c ****     //
 525:C:/StellarisWare/driverlib\usb.c ****     // If any general interrupts were disabled, then write the general
 526:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 527:C:/StellarisWare/driverlib\usb.c ****     //
 528:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_STATUS)
 567              		.loc 1 528 0
 568 006c 3B68     		ldr	r3, [r7, #0]
 569 006e 03F07F43 		and	r3, r3, #-16777216
 570 0072 002B     		cmp	r3, #0
 571 0074 11D0     		beq	.L24
 529:C:/StellarisWare/driverlib\usb.c ****     {
 530:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) &=
 572              		.loc 1 530 0
 573 0076 7B68     		ldr	r3, [r7, #4]
 574 0078 03F10B03 		add	r3, r3, #11
 575 007c 7A68     		ldr	r2, [r7, #4]
 576 007e 02F10B02 		add	r2, r2, #11
 577 0082 1278     		ldrb	r2, [r2, #0]
 578 0084 D1B2     		uxtb	r1, r2
 531:C:/StellarisWare/driverlib\usb.c ****             ~((ulFlags & USB_INT_STATUS) >> USB_INT_STATUS_SHIFT);
 579              		.loc 1 531 0
 580 0086 3A68     		ldr	r2, [r7, #0]
 581 0088 4FEA1262 		lsr	r2, r2, #24
 530:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) &=
 582              		.loc 1 530 0
 583 008c D2B2     		uxtb	r2, r2
 584 008e 6FEA0202 		mvn	r2, r2
 585 0092 D2B2     		uxtb	r2, r2
 586 0094 0A40     		ands	r2, r2, r1
 587 0096 D2B2     		uxtb	r2, r2
 588 0098 1A70     		strb	r2, [r3, #0]
 589              	.L24:
 532:C:/StellarisWare/driverlib\usb.c ****     }
 533:C:/StellarisWare/driverlib\usb.c **** 
 534:C:/StellarisWare/driverlib\usb.c ****     //
 535:C:/StellarisWare/driverlib\usb.c ****     // Disable the power fault interrupt.
 536:C:/StellarisWare/driverlib\usb.c ****     //
 537:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_POWER_FAULT)
 590              		.loc 1 537 0
 591 009a 3B68     		ldr	r3, [r7, #0]
 592 009c 03F48033 		and	r3, r3, #65536
 593 00a0 002B     		cmp	r3, #0
 594 00a2 05D0     		beq	.L25
 538:C:/StellarisWare/driverlib\usb.c ****     {
 539:C:/StellarisWare/driverlib\usb.c ****         HWREG(ulBase + USB_O_EPCIM) = 0;
 595              		.loc 1 539 0
 596 00a4 7B68     		ldr	r3, [r7, #4]
 597 00a6 03F58163 		add	r3, r3, #1032
 598 00aa 4FF00002 		mov	r2, #0
 599 00ae 1A60     		str	r2, [r3, #0]
 600              	.L25:
 540:C:/StellarisWare/driverlib\usb.c ****     }
 541:C:/StellarisWare/driverlib\usb.c **** 
 542:C:/StellarisWare/driverlib\usb.c ****     //
 543:C:/StellarisWare/driverlib\usb.c ****     // Disable the ID pin detect interrupt.
 544:C:/StellarisWare/driverlib\usb.c ****     //
 545:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_MODE_DETECT)
 601              		.loc 1 545 0
 602 00b0 3B68     		ldr	r3, [r7, #0]
 603 00b2 03F40033 		and	r3, r3, #131072
 604 00b6 002B     		cmp	r3, #0
 605 00b8 06D0     		beq	.L21
 546:C:/StellarisWare/driverlib\usb.c ****     {
 547:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVIM) = 0;
 606              		.loc 1 547 0
 607 00ba 4FF48963 		mov	r3, #1096
 608 00be C4F20503 		movt	r3, 16389
 609 00c2 4FF00002 		mov	r2, #0
 610 00c6 1A60     		str	r2, [r3, #0]
 611              	.L21:
 548:C:/StellarisWare/driverlib\usb.c ****     }
 549:C:/StellarisWare/driverlib\usb.c **** }
 612              		.loc 1 549 0
 613 00c8 07F10C07 		add	r7, r7, #12
 614 00cc BD46     		mov	sp, r7
 615 00ce 80BC     		pop	{r7}
 616 00d0 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE7:
 620 00d2 00BF     		.section	.text.USBIntEnable,"ax",%progbits
 621              		.align	2
 622              		.global	USBIntEnable
 623              		.thumb
 624              		.thumb_func
 626              	USBIntEnable:
 627              	.LFB8:
 550:C:/StellarisWare/driverlib\usb.c **** #endif
 551:C:/StellarisWare/driverlib\usb.c **** 
 552:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 553:C:/StellarisWare/driverlib\usb.c **** //
 554:C:/StellarisWare/driverlib\usb.c **** //! Enables the sources for USB interrupts.
 555:C:/StellarisWare/driverlib\usb.c **** //!
 556:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 557:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which interrupts to enable.
 558:C:/StellarisWare/driverlib\usb.c **** //!
 559:C:/StellarisWare/driverlib\usb.c **** //! This function enables the USB controller's ability to generate the
 560:C:/StellarisWare/driverlib\usb.c **** //! interrupts indicated by the \e ulFlags parameter.  There are three
 561:C:/StellarisWare/driverlib\usb.c **** //! groups of interrupt sources, IN Endpoints, OUT Endpoints, and
 562:C:/StellarisWare/driverlib\usb.c **** //! general status changes, specified by \b USB_INT_HOST_IN,
 563:C:/StellarisWare/driverlib\usb.c **** //! \b USB_INT_HOST_OUT, \b USB_INT_DEV_IN, \b USB_INT_DEV_OUT, and
 564:C:/StellarisWare/driverlib\usb.c **** //! \b USB_STATUS.  If \b USB_INT_ALL is specified then all interrupts are
 565:C:/StellarisWare/driverlib\usb.c **** //! enabled.
 566:C:/StellarisWare/driverlib\usb.c **** //!
 567:C:/StellarisWare/driverlib\usb.c **** //! \note A call must be made to enable the interrupt in the main interrupt
 568:C:/StellarisWare/driverlib\usb.c **** //! controller to receive interrupts.  The USBIntRegister() API performs this
 569:C:/StellarisWare/driverlib\usb.c **** //! controller-level interrupt enable.  However if static interrupt handlers
 570:C:/StellarisWare/driverlib\usb.c **** //! are used, then then a call to IntEnable() must be made in order to allow
 571:C:/StellarisWare/driverlib\usb.c **** //! any USB interrupts to occur.
 572:C:/StellarisWare/driverlib\usb.c **** //!
 573:C:/StellarisWare/driverlib\usb.c **** //! \note WARNING: This API cannot be used on endpoint numbers greater than
 574:C:/StellarisWare/driverlib\usb.c **** //! endpoint 3 so USBIntEnableControl() or USBIntEnableEndpoint() should be
 575:C:/StellarisWare/driverlib\usb.c **** //! used instead.
 576:C:/StellarisWare/driverlib\usb.c **** //!
 577:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 578:C:/StellarisWare/driverlib\usb.c **** //
 579:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 580:C:/StellarisWare/driverlib\usb.c **** #ifndef DEPRECATED
 581:C:/StellarisWare/driverlib\usb.c **** void
 582:C:/StellarisWare/driverlib\usb.c **** USBIntEnable(unsigned long ulBase, unsigned long ulFlags)
 583:C:/StellarisWare/driverlib\usb.c **** {
 628              		.loc 1 583 0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 8
 631              		@ frame_needed = 1, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 633 0000 80B4     		push	{r7}
 634              	.LCFI24:
 635              		.cfi_def_cfa_offset 4
 636              		.cfi_offset 7, -4
 637 0002 83B0     		sub	sp, sp, #12
 638              	.LCFI25:
 639              		.cfi_def_cfa_offset 16
 640 0004 00AF     		add	r7, sp, #0
 641              	.LCFI26:
 642              		.cfi_def_cfa_register 7
 643 0006 7860     		str	r0, [r7, #4]
 644 0008 3960     		str	r1, [r7, #0]
 584:C:/StellarisWare/driverlib\usb.c ****     //
 585:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 586:C:/StellarisWare/driverlib\usb.c ****     //
 587:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 588:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & (~USB_INT_ALL)) == 0);
 589:C:/StellarisWare/driverlib\usb.c **** 
 590:C:/StellarisWare/driverlib\usb.c ****     //
 591:C:/StellarisWare/driverlib\usb.c ****     // If any transmit interrupts were enabled, then write the transmit
 592:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 593:C:/StellarisWare/driverlib\usb.c ****     //
 594:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_INT_HOST_OUT | USB_INT_DEV_IN | USB_INT_EP0))
 645              		.loc 1 594 0
 646 000a 3B68     		ldr	r3, [r7, #0]
 647 000c 03F00F03 		and	r3, r3, #15
 648 0010 002B     		cmp	r3, #0
 649 0012 0FD0     		beq	.L28
 595:C:/StellarisWare/driverlib\usb.c ****     {
 596:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_TXIE) |=
 650              		.loc 1 596 0
 651 0014 7B68     		ldr	r3, [r7, #4]
 652 0016 03F10603 		add	r3, r3, #6
 653 001a 7A68     		ldr	r2, [r7, #4]
 654 001c 02F10602 		add	r2, r2, #6
 655 0020 1288     		ldrh	r2, [r2, #0]	@ movhi
 656 0022 91B2     		uxth	r1, r2
 657 0024 3A68     		ldr	r2, [r7, #0]
 658 0026 92B2     		uxth	r2, r2
 659 0028 02F00F02 		and	r2, r2, #15
 660 002c 92B2     		uxth	r2, r2
 661 002e 0A43     		orrs	r2, r2, r1
 662 0030 92B2     		uxth	r2, r2
 663 0032 1A80     		strh	r2, [r3, #0]	@ movhi
 664              	.L28:
 597:C:/StellarisWare/driverlib\usb.c ****             ulFlags & (USB_INT_HOST_OUT | USB_INT_DEV_IN | USB_INT_EP0);
 598:C:/StellarisWare/driverlib\usb.c ****     }
 599:C:/StellarisWare/driverlib\usb.c **** 
 600:C:/StellarisWare/driverlib\usb.c ****     //
 601:C:/StellarisWare/driverlib\usb.c ****     // If any receive interrupts were enabled, then write the receive
 602:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 603:C:/StellarisWare/driverlib\usb.c ****     //
 604:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_INT_HOST_IN | USB_INT_DEV_OUT))
 665              		.loc 1 604 0
 666 0034 3B68     		ldr	r3, [r7, #0]
 667 0036 03F46063 		and	r3, r3, #3584
 668 003a 002B     		cmp	r3, #0
 669 003c 10D0     		beq	.L29
 605:C:/StellarisWare/driverlib\usb.c ****     {
 606:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_RXIE) |=
 670              		.loc 1 606 0
 671 003e 7B68     		ldr	r3, [r7, #4]
 672 0040 03F10803 		add	r3, r3, #8
 673 0044 7A68     		ldr	r2, [r7, #4]
 674 0046 02F10802 		add	r2, r2, #8
 675 004a 1288     		ldrh	r2, [r2, #0]	@ movhi
 676 004c 91B2     		uxth	r1, r2
 607:C:/StellarisWare/driverlib\usb.c ****             ((ulFlags & (USB_INT_HOST_IN | USB_INT_DEV_OUT)) >>
 677              		.loc 1 607 0
 678 004e 3A68     		ldr	r2, [r7, #0]
 679 0050 02F46062 		and	r2, r2, #3584
 680 0054 4FEA1222 		lsr	r2, r2, #8
 606:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_RXIE) |=
 681              		.loc 1 606 0
 682 0058 92B2     		uxth	r2, r2
 683 005a 0A43     		orrs	r2, r2, r1
 684 005c 92B2     		uxth	r2, r2
 685 005e 1A80     		strh	r2, [r3, #0]	@ movhi
 686              	.L29:
 608:C:/StellarisWare/driverlib\usb.c ****              USB_INT_RX_SHIFT);
 609:C:/StellarisWare/driverlib\usb.c ****     }
 610:C:/StellarisWare/driverlib\usb.c **** 
 611:C:/StellarisWare/driverlib\usb.c ****     //
 612:C:/StellarisWare/driverlib\usb.c ****     // If any general interrupts were enabled, then write the general
 613:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 614:C:/StellarisWare/driverlib\usb.c ****     //
 615:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_STATUS)
 687              		.loc 1 615 0
 688 0060 3B68     		ldr	r3, [r7, #0]
 689 0062 03F07F43 		and	r3, r3, #-16777216
 690 0066 002B     		cmp	r3, #0
 691 0068 0ED0     		beq	.L30
 616:C:/StellarisWare/driverlib\usb.c ****     {
 617:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) |=
 692              		.loc 1 617 0
 693 006a 7B68     		ldr	r3, [r7, #4]
 694 006c 03F10B03 		add	r3, r3, #11
 695 0070 7A68     		ldr	r2, [r7, #4]
 696 0072 02F10B02 		add	r2, r2, #11
 697 0076 1278     		ldrb	r2, [r2, #0]
 698 0078 D1B2     		uxtb	r1, r2
 618:C:/StellarisWare/driverlib\usb.c ****             (ulFlags & USB_INT_STATUS) >> USB_INT_STATUS_SHIFT;
 699              		.loc 1 618 0
 700 007a 3A68     		ldr	r2, [r7, #0]
 701 007c 4FEA1262 		lsr	r2, r2, #24
 617:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) |=
 702              		.loc 1 617 0
 703 0080 D2B2     		uxtb	r2, r2
 704 0082 0A43     		orrs	r2, r2, r1
 705 0084 D2B2     		uxtb	r2, r2
 706 0086 1A70     		strb	r2, [r3, #0]
 707              	.L30:
 619:C:/StellarisWare/driverlib\usb.c ****     }
 620:C:/StellarisWare/driverlib\usb.c **** 
 621:C:/StellarisWare/driverlib\usb.c ****     //
 622:C:/StellarisWare/driverlib\usb.c ****     // Enable the power fault interrupt.
 623:C:/StellarisWare/driverlib\usb.c ****     //
 624:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_POWER_FAULT)
 708              		.loc 1 624 0
 709 0088 3B68     		ldr	r3, [r7, #0]
 710 008a 03F48033 		and	r3, r3, #65536
 711 008e 002B     		cmp	r3, #0
 712 0090 05D0     		beq	.L31
 625:C:/StellarisWare/driverlib\usb.c ****     {
 626:C:/StellarisWare/driverlib\usb.c ****         HWREG(ulBase + USB_O_EPCIM) = USB_EPCIM_PF;
 713              		.loc 1 626 0
 714 0092 7B68     		ldr	r3, [r7, #4]
 715 0094 03F58163 		add	r3, r3, #1032
 716 0098 4FF00102 		mov	r2, #1
 717 009c 1A60     		str	r2, [r3, #0]
 718              	.L31:
 627:C:/StellarisWare/driverlib\usb.c ****     }
 628:C:/StellarisWare/driverlib\usb.c **** 
 629:C:/StellarisWare/driverlib\usb.c ****     //
 630:C:/StellarisWare/driverlib\usb.c ****     // Enable the ID pin detect interrupt.
 631:C:/StellarisWare/driverlib\usb.c ****     //
 632:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INT_MODE_DETECT)
 719              		.loc 1 632 0
 720 009e 3B68     		ldr	r3, [r7, #0]
 721 00a0 03F40033 		and	r3, r3, #131072
 722 00a4 002B     		cmp	r3, #0
 723 00a6 06D0     		beq	.L27
 633:C:/StellarisWare/driverlib\usb.c ****     {
 634:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVIM) = USB_IDVIM_ID;
 724              		.loc 1 634 0
 725 00a8 4FF48963 		mov	r3, #1096
 726 00ac C4F20503 		movt	r3, 16389
 727 00b0 4FF00102 		mov	r2, #1
 728 00b4 1A60     		str	r2, [r3, #0]
 729              	.L27:
 635:C:/StellarisWare/driverlib\usb.c ****     }
 636:C:/StellarisWare/driverlib\usb.c **** }
 730              		.loc 1 636 0
 731 00b6 07F10C07 		add	r7, r7, #12
 732 00ba BD46     		mov	sp, r7
 733 00bc 80BC     		pop	{r7}
 734 00be 7047     		bx	lr
 735              		.cfi_endproc
 736              	.LFE8:
 738              		.section	.text.USBIntDisableControl,"ax",%progbits
 739              		.align	2
 740              		.global	USBIntDisableControl
 741              		.thumb
 742              		.thumb_func
 744              	USBIntDisableControl:
 745              	.LFB9:
 637:C:/StellarisWare/driverlib\usb.c **** #endif
 638:C:/StellarisWare/driverlib\usb.c **** 
 639:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 640:C:/StellarisWare/driverlib\usb.c **** //
 641:C:/StellarisWare/driverlib\usb.c **** //! Disables control interrupts on a given USB controller.
 642:C:/StellarisWare/driverlib\usb.c **** //!
 643:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 644:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which control interrupts to disable.
 645:C:/StellarisWare/driverlib\usb.c **** //!
 646:C:/StellarisWare/driverlib\usb.c **** //! This function disables the control interrupts for the USB controller
 647:C:/StellarisWare/driverlib\usb.c **** //! specified by the \e ulBase parameter.  The \e ulFlags parameter specifies
 648:C:/StellarisWare/driverlib\usb.c **** //! which control interrupts to disable.  The flags passed in the \e ulFlags
 649:C:/StellarisWare/driverlib\usb.c **** //! parameters should be the definitions that start with \b USB_INTCTRL_* and
 650:C:/StellarisWare/driverlib\usb.c **** //! not any other \b USB_INT flags.
 651:C:/StellarisWare/driverlib\usb.c **** //!
 652:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 653:C:/StellarisWare/driverlib\usb.c **** //
 654:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 655:C:/StellarisWare/driverlib\usb.c **** void
 656:C:/StellarisWare/driverlib\usb.c **** USBIntDisableControl(unsigned long ulBase, unsigned long ulFlags)
 657:C:/StellarisWare/driverlib\usb.c **** {
 746              		.loc 1 657 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 8
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0000 80B4     		push	{r7}
 752              	.LCFI27:
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 7, -4
 755 0002 83B0     		sub	sp, sp, #12
 756              	.LCFI28:
 757              		.cfi_def_cfa_offset 16
 758 0004 00AF     		add	r7, sp, #0
 759              	.LCFI29:
 760              		.cfi_def_cfa_register 7
 761 0006 7860     		str	r0, [r7, #4]
 762 0008 3960     		str	r1, [r7, #0]
 658:C:/StellarisWare/driverlib\usb.c ****     //
 659:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 660:C:/StellarisWare/driverlib\usb.c ****     //
 661:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 662:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & ~(USB_INTCTRL_ALL)) == 0);
 663:C:/StellarisWare/driverlib\usb.c **** 
 664:C:/StellarisWare/driverlib\usb.c ****     //
 665:C:/StellarisWare/driverlib\usb.c ****     // If any general interrupts were disabled then write the general interrupt
 666:C:/StellarisWare/driverlib\usb.c ****     // settings out to the hardware.
 667:C:/StellarisWare/driverlib\usb.c ****     //
 668:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_STATUS)
 763              		.loc 1 668 0
 764 000a 3B68     		ldr	r3, [r7, #0]
 765 000c DBB2     		uxtb	r3, r3
 766 000e 002B     		cmp	r3, #0
 767 0010 0FD0     		beq	.L34
 669:C:/StellarisWare/driverlib\usb.c ****     {
 670:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) &= ~(ulFlags & USB_INTCTRL_STATUS);
 768              		.loc 1 670 0
 769 0012 7B68     		ldr	r3, [r7, #4]
 770 0014 03F10B03 		add	r3, r3, #11
 771 0018 7A68     		ldr	r2, [r7, #4]
 772 001a 02F10B02 		add	r2, r2, #11
 773 001e 1278     		ldrb	r2, [r2, #0]
 774 0020 D1B2     		uxtb	r1, r2
 775 0022 3A68     		ldr	r2, [r7, #0]
 776 0024 D2B2     		uxtb	r2, r2
 777 0026 6FEA0202 		mvn	r2, r2
 778 002a D2B2     		uxtb	r2, r2
 779 002c 0A40     		ands	r2, r2, r1
 780 002e D2B2     		uxtb	r2, r2
 781 0030 1A70     		strb	r2, [r3, #0]
 782              	.L34:
 671:C:/StellarisWare/driverlib\usb.c ****     }
 672:C:/StellarisWare/driverlib\usb.c **** 
 673:C:/StellarisWare/driverlib\usb.c ****     //
 674:C:/StellarisWare/driverlib\usb.c ****     // Disable the power fault interrupt.
 675:C:/StellarisWare/driverlib\usb.c ****     //
 676:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_POWER_FAULT)
 783              		.loc 1 676 0
 784 0032 3B68     		ldr	r3, [r7, #0]
 785 0034 03F48073 		and	r3, r3, #256
 786 0038 002B     		cmp	r3, #0
 787 003a 05D0     		beq	.L35
 677:C:/StellarisWare/driverlib\usb.c ****     {
 678:C:/StellarisWare/driverlib\usb.c ****         HWREG(ulBase + USB_O_EPCIM) = 0;
 788              		.loc 1 678 0
 789 003c 7B68     		ldr	r3, [r7, #4]
 790 003e 03F58163 		add	r3, r3, #1032
 791 0042 4FF00002 		mov	r2, #0
 792 0046 1A60     		str	r2, [r3, #0]
 793              	.L35:
 679:C:/StellarisWare/driverlib\usb.c ****     }
 680:C:/StellarisWare/driverlib\usb.c **** 
 681:C:/StellarisWare/driverlib\usb.c ****     //
 682:C:/StellarisWare/driverlib\usb.c ****     // Disable the ID pin detect interrupt.
 683:C:/StellarisWare/driverlib\usb.c ****     //
 684:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_MODE_DETECT)
 794              		.loc 1 684 0
 795 0048 3B68     		ldr	r3, [r7, #0]
 796 004a 03F40073 		and	r3, r3, #512
 797 004e 002B     		cmp	r3, #0
 798 0050 06D0     		beq	.L33
 685:C:/StellarisWare/driverlib\usb.c ****     {
 686:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVIM) = 0;
 799              		.loc 1 686 0
 800 0052 4FF48963 		mov	r3, #1096
 801 0056 C4F20503 		movt	r3, 16389
 802 005a 4FF00002 		mov	r2, #0
 803 005e 1A60     		str	r2, [r3, #0]
 804              	.L33:
 687:C:/StellarisWare/driverlib\usb.c ****     }
 688:C:/StellarisWare/driverlib\usb.c **** }
 805              		.loc 1 688 0
 806 0060 07F10C07 		add	r7, r7, #12
 807 0064 BD46     		mov	sp, r7
 808 0066 80BC     		pop	{r7}
 809 0068 7047     		bx	lr
 810              		.cfi_endproc
 811              	.LFE9:
 813 006a 00BF     		.section	.text.USBIntEnableControl,"ax",%progbits
 814              		.align	2
 815              		.global	USBIntEnableControl
 816              		.thumb
 817              		.thumb_func
 819              	USBIntEnableControl:
 820              	.LFB10:
 689:C:/StellarisWare/driverlib\usb.c **** 
 690:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 691:C:/StellarisWare/driverlib\usb.c **** //
 692:C:/StellarisWare/driverlib\usb.c **** //! Enables control interrupts on a given USB controller.
 693:C:/StellarisWare/driverlib\usb.c **** //!
 694:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 695:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which control interrupts to enable.
 696:C:/StellarisWare/driverlib\usb.c **** //!
 697:C:/StellarisWare/driverlib\usb.c **** //! This function enables the control interrupts for the USB controller
 698:C:/StellarisWare/driverlib\usb.c **** //! specified by the \e ulBase parameter.  The \e ulFlags parameter specifies
 699:C:/StellarisWare/driverlib\usb.c **** //! which control interrupts to enable.  The flags passed in the \e ulFlags
 700:C:/StellarisWare/driverlib\usb.c **** //! parameters should be the definitions that start with \b USB_INTCTRL_* and
 701:C:/StellarisWare/driverlib\usb.c **** //! not any other \b USB_INT flags.
 702:C:/StellarisWare/driverlib\usb.c **** //!
 703:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 704:C:/StellarisWare/driverlib\usb.c **** //
 705:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 706:C:/StellarisWare/driverlib\usb.c **** void
 707:C:/StellarisWare/driverlib\usb.c **** USBIntEnableControl(unsigned long ulBase, unsigned long ulFlags)
 708:C:/StellarisWare/driverlib\usb.c **** {
 821              		.loc 1 708 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 8
 824              		@ frame_needed = 1, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826 0000 80B4     		push	{r7}
 827              	.LCFI30:
 828              		.cfi_def_cfa_offset 4
 829              		.cfi_offset 7, -4
 830 0002 83B0     		sub	sp, sp, #12
 831              	.LCFI31:
 832              		.cfi_def_cfa_offset 16
 833 0004 00AF     		add	r7, sp, #0
 834              	.LCFI32:
 835              		.cfi_def_cfa_register 7
 836 0006 7860     		str	r0, [r7, #4]
 837 0008 3960     		str	r1, [r7, #0]
 709:C:/StellarisWare/driverlib\usb.c ****     //
 710:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 711:C:/StellarisWare/driverlib\usb.c ****     //
 712:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 713:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & (~USB_INTCTRL_ALL)) == 0);
 714:C:/StellarisWare/driverlib\usb.c **** 
 715:C:/StellarisWare/driverlib\usb.c ****     //
 716:C:/StellarisWare/driverlib\usb.c ****     // If any general interrupts were enabled, then write the general
 717:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 718:C:/StellarisWare/driverlib\usb.c ****     //
 719:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_STATUS)
 838              		.loc 1 719 0
 839 000a 3B68     		ldr	r3, [r7, #0]
 840 000c DBB2     		uxtb	r3, r3
 841 000e 002B     		cmp	r3, #0
 842 0010 0CD0     		beq	.L38
 720:C:/StellarisWare/driverlib\usb.c ****     {
 721:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_IE) |= ulFlags;
 843              		.loc 1 721 0
 844 0012 7B68     		ldr	r3, [r7, #4]
 845 0014 03F10B03 		add	r3, r3, #11
 846 0018 7A68     		ldr	r2, [r7, #4]
 847 001a 02F10B02 		add	r2, r2, #11
 848 001e 1278     		ldrb	r2, [r2, #0]
 849 0020 D1B2     		uxtb	r1, r2
 850 0022 3A68     		ldr	r2, [r7, #0]
 851 0024 D2B2     		uxtb	r2, r2
 852 0026 0A43     		orrs	r2, r2, r1
 853 0028 D2B2     		uxtb	r2, r2
 854 002a 1A70     		strb	r2, [r3, #0]
 855              	.L38:
 722:C:/StellarisWare/driverlib\usb.c ****     }
 723:C:/StellarisWare/driverlib\usb.c **** 
 724:C:/StellarisWare/driverlib\usb.c ****     //
 725:C:/StellarisWare/driverlib\usb.c ****     // Enable the power fault interrupt.
 726:C:/StellarisWare/driverlib\usb.c ****     //
 727:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_POWER_FAULT)
 856              		.loc 1 727 0
 857 002c 3B68     		ldr	r3, [r7, #0]
 858 002e 03F48073 		and	r3, r3, #256
 859 0032 002B     		cmp	r3, #0
 860 0034 05D0     		beq	.L39
 728:C:/StellarisWare/driverlib\usb.c ****     {
 729:C:/StellarisWare/driverlib\usb.c ****         HWREG(ulBase + USB_O_EPCIM) = USB_EPCIM_PF;
 861              		.loc 1 729 0
 862 0036 7B68     		ldr	r3, [r7, #4]
 863 0038 03F58163 		add	r3, r3, #1032
 864 003c 4FF00102 		mov	r2, #1
 865 0040 1A60     		str	r2, [r3, #0]
 866              	.L39:
 730:C:/StellarisWare/driverlib\usb.c ****     }
 731:C:/StellarisWare/driverlib\usb.c **** 
 732:C:/StellarisWare/driverlib\usb.c ****     //
 733:C:/StellarisWare/driverlib\usb.c ****     // Enable the ID pin detect interrupt.
 734:C:/StellarisWare/driverlib\usb.c ****     //
 735:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_INTCTRL_MODE_DETECT)
 867              		.loc 1 735 0
 868 0042 3B68     		ldr	r3, [r7, #0]
 869 0044 03F40073 		and	r3, r3, #512
 870 0048 002B     		cmp	r3, #0
 871 004a 06D0     		beq	.L37
 736:C:/StellarisWare/driverlib\usb.c ****     {
 737:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVIM) = USB_IDVIM_ID;
 872              		.loc 1 737 0
 873 004c 4FF48963 		mov	r3, #1096
 874 0050 C4F20503 		movt	r3, 16389
 875 0054 4FF00102 		mov	r2, #1
 876 0058 1A60     		str	r2, [r3, #0]
 877              	.L37:
 738:C:/StellarisWare/driverlib\usb.c ****     }
 739:C:/StellarisWare/driverlib\usb.c **** }
 878              		.loc 1 739 0
 879 005a 07F10C07 		add	r7, r7, #12
 880 005e BD46     		mov	sp, r7
 881 0060 80BC     		pop	{r7}
 882 0062 7047     		bx	lr
 883              		.cfi_endproc
 884              	.LFE10:
 886              		.section	.text.USBIntStatusControl,"ax",%progbits
 887              		.align	2
 888              		.global	USBIntStatusControl
 889              		.thumb
 890              		.thumb_func
 892              	USBIntStatusControl:
 893              	.LFB11:
 740:C:/StellarisWare/driverlib\usb.c **** 
 741:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 742:C:/StellarisWare/driverlib\usb.c **** //
 743:C:/StellarisWare/driverlib\usb.c **** //! Returns the control interrupt status on a given USB controller.
 744:C:/StellarisWare/driverlib\usb.c **** //!
 745:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 746:C:/StellarisWare/driverlib\usb.c **** //!
 747:C:/StellarisWare/driverlib\usb.c **** //! This function reads control interrupt status for a USB controller. This
 748:C:/StellarisWare/driverlib\usb.c **** //! call returns the current status for control interrupts only, the endpoint
 749:C:/StellarisWare/driverlib\usb.c **** //! interrupt status is retrieved by calling USBIntStatusEndpoint(). The bit
 750:C:/StellarisWare/driverlib\usb.c **** //! values returned should be compared against the \b USB_INTCTRL_*
 751:C:/StellarisWare/driverlib\usb.c **** //! values.
 752:C:/StellarisWare/driverlib\usb.c **** //!
 753:C:/StellarisWare/driverlib\usb.c **** //! The following are the meanings of all \b USB_INCTRL_ flags and the modes
 754:C:/StellarisWare/driverlib\usb.c **** //! for which they are valid.  These values apply to any calls to
 755:C:/StellarisWare/driverlib\usb.c **** //! USBIntStatusControl(), USBIntEnableControl(), and USBIntDisableControl().
 756:C:/StellarisWare/driverlib\usb.c **** //! Some of these flags are only valid in the following modes as indicated in
 757:C:/StellarisWare/driverlib\usb.c **** //! the parentheses:  Host, Device, and OTG.
 758:C:/StellarisWare/driverlib\usb.c **** //!
 759:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_ALL - A full mask of all control interrupt sources.
 760:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_VBUS_ERR - A VBUS error has occurred (Host Only).
 761:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_SESSION - Session Start Detected on A-side of cable
 762:C:/StellarisWare/driverlib\usb.c **** //!                            (OTG Only).
 763:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_SESSION_END - Session End Detected (Device Only)
 764:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_DISCONNECT - Device Disconnect Detected (Host Only)
 765:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_CONNECT - Device Connect Detected (Host Only)
 766:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_SOF - Start of Frame Detected.
 767:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_BABBLE - USB controller detected a device signaling past
 768:C:/StellarisWare/driverlib\usb.c **** //!                           the end of a frame. (Host Only)
 769:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_RESET - Reset signaling detected by device. (Device Only)
 770:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_RESUME - Resume signaling detected.
 771:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_SUSPEND - Suspend signaling detected by device (Device
 772:C:/StellarisWare/driverlib\usb.c **** //!                            Only)
 773:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_MODE_DETECT - OTG cable mode detection has completed
 774:C:/StellarisWare/driverlib\usb.c **** //!                                (OTG Only)
 775:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_INTCTRL_POWER_FAULT - Power Fault detected. (Host Only)
 776:C:/StellarisWare/driverlib\usb.c **** //!
 777:C:/StellarisWare/driverlib\usb.c **** //! \note This call clears the source of all of the control status interrupts.
 778:C:/StellarisWare/driverlib\usb.c **** //!
 779:C:/StellarisWare/driverlib\usb.c **** //! \return Returns the status of the control interrupts for a USB controller.
 780:C:/StellarisWare/driverlib\usb.c **** //
 781:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 782:C:/StellarisWare/driverlib\usb.c **** unsigned long
 783:C:/StellarisWare/driverlib\usb.c **** USBIntStatusControl(unsigned long ulBase)
 784:C:/StellarisWare/driverlib\usb.c **** {
 894              		.loc 1 784 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 16
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898              		@ link register save eliminated.
 899 0000 80B4     		push	{r7}
 900              	.LCFI33:
 901              		.cfi_def_cfa_offset 4
 902              		.cfi_offset 7, -4
 903 0002 85B0     		sub	sp, sp, #20
 904              	.LCFI34:
 905              		.cfi_def_cfa_offset 24
 906 0004 00AF     		add	r7, sp, #0
 907              	.LCFI35:
 908              		.cfi_def_cfa_register 7
 909 0006 7860     		str	r0, [r7, #4]
 785:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulStatus;
 786:C:/StellarisWare/driverlib\usb.c **** 
 787:C:/StellarisWare/driverlib\usb.c ****     //
 788:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 789:C:/StellarisWare/driverlib\usb.c ****     //
 790:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 791:C:/StellarisWare/driverlib\usb.c **** 
 792:C:/StellarisWare/driverlib\usb.c ****     //
 793:C:/StellarisWare/driverlib\usb.c ****     // Get the general interrupt status, these bits go into the upper 8 bits
 794:C:/StellarisWare/driverlib\usb.c ****     // of the returned value.
 795:C:/StellarisWare/driverlib\usb.c ****     //
 796:C:/StellarisWare/driverlib\usb.c ****     ulStatus = HWREGB(ulBase + USB_O_IS);
 910              		.loc 1 796 0
 911 0008 7B68     		ldr	r3, [r7, #4]
 912 000a 03F10A03 		add	r3, r3, #10
 913 000e 1B78     		ldrb	r3, [r3, #0]
 914 0010 DBB2     		uxtb	r3, r3
 915 0012 FB60     		str	r3, [r7, #12]
 797:C:/StellarisWare/driverlib\usb.c **** 
 798:C:/StellarisWare/driverlib\usb.c ****     //
 799:C:/StellarisWare/driverlib\usb.c ****     // Add the power fault status.
 800:C:/StellarisWare/driverlib\usb.c ****     //
 801:C:/StellarisWare/driverlib\usb.c ****     if(HWREG(ulBase + USB_O_EPCISC) & USB_EPCISC_PF)
 916              		.loc 1 801 0
 917 0014 7B68     		ldr	r3, [r7, #4]
 918 0016 03F58063 		add	r3, r3, #1024
 919 001a 03F10C03 		add	r3, r3, #12
 920 001e 1B68     		ldr	r3, [r3, #0]
 921 0020 03F00103 		and	r3, r3, #1
 922 0024 DBB2     		uxtb	r3, r3
 923 0026 002B     		cmp	r3, #0
 924 0028 14D0     		beq	.L42
 802:C:/StellarisWare/driverlib\usb.c ****     {
 803:C:/StellarisWare/driverlib\usb.c ****         //
 804:C:/StellarisWare/driverlib\usb.c ****         // Indicate a power fault was detected.
 805:C:/StellarisWare/driverlib\usb.c ****         //
 806:C:/StellarisWare/driverlib\usb.c ****         ulStatus |= USB_INTCTRL_POWER_FAULT;
 925              		.loc 1 806 0
 926 002a FB68     		ldr	r3, [r7, #12]
 927 002c 43F48073 		orr	r3, r3, #256
 928 0030 FB60     		str	r3, [r7, #12]
 807:C:/StellarisWare/driverlib\usb.c **** 
 808:C:/StellarisWare/driverlib\usb.c ****         //
 809:C:/StellarisWare/driverlib\usb.c ****         // Clear the power fault interrupt.
 810:C:/StellarisWare/driverlib\usb.c ****         //
 811:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_EPCISC) |= USB_EPCISC_PF;
 929              		.loc 1 811 0
 930 0032 7B68     		ldr	r3, [r7, #4]
 931 0034 03F58063 		add	r3, r3, #1024
 932 0038 03F10C03 		add	r3, r3, #12
 933 003c 1A46     		mov	r2, r3
 934 003e 7B68     		ldr	r3, [r7, #4]
 935 0040 03F58063 		add	r3, r3, #1024
 936 0044 03F10C03 		add	r3, r3, #12
 937 0048 1B78     		ldrb	r3, [r3, #0]
 938 004a DBB2     		uxtb	r3, r3
 939 004c 43F00103 		orr	r3, r3, #1
 940 0050 DBB2     		uxtb	r3, r3
 941 0052 1370     		strb	r3, [r2, #0]
 942              	.L42:
 812:C:/StellarisWare/driverlib\usb.c ****     }
 813:C:/StellarisWare/driverlib\usb.c **** 
 814:C:/StellarisWare/driverlib\usb.c ****     if(HWREG(USB0_BASE + USB_O_IDVISC) & USB_IDVRIS_ID)
 943              		.loc 1 814 0
 944 0054 40F24C43 		movw	r3, #1100
 945 0058 C4F20503 		movt	r3, 16389
 946 005c 1B68     		ldr	r3, [r3, #0]
 947 005e 03F00103 		and	r3, r3, #1
 948 0062 DBB2     		uxtb	r3, r3
 949 0064 002B     		cmp	r3, #0
 950 0066 0FD0     		beq	.L43
 815:C:/StellarisWare/driverlib\usb.c ****     {
 816:C:/StellarisWare/driverlib\usb.c ****         //
 817:C:/StellarisWare/driverlib\usb.c ****         // Indicate an id detection.
 818:C:/StellarisWare/driverlib\usb.c ****         //
 819:C:/StellarisWare/driverlib\usb.c ****         ulStatus |= USB_INTCTRL_MODE_DETECT;
 951              		.loc 1 819 0
 952 0068 FB68     		ldr	r3, [r7, #12]
 953 006a 43F40073 		orr	r3, r3, #512
 954 006e FB60     		str	r3, [r7, #12]
 820:C:/StellarisWare/driverlib\usb.c **** 
 821:C:/StellarisWare/driverlib\usb.c ****         //
 822:C:/StellarisWare/driverlib\usb.c ****         // Clear the id detection interrupt.
 823:C:/StellarisWare/driverlib\usb.c ****         //
 824:C:/StellarisWare/driverlib\usb.c ****         HWREG(USB0_BASE + USB_O_IDVISC) |= USB_IDVRIS_ID;
 955              		.loc 1 824 0
 956 0070 40F24C43 		movw	r3, #1100
 957 0074 C4F20503 		movt	r3, 16389
 958 0078 40F24C42 		movw	r2, #1100
 959 007c C4F20502 		movt	r2, 16389
 960 0080 1268     		ldr	r2, [r2, #0]
 961 0082 42F00102 		orr	r2, r2, #1
 962 0086 1A60     		str	r2, [r3, #0]
 963              	.L43:
 825:C:/StellarisWare/driverlib\usb.c ****     }
 826:C:/StellarisWare/driverlib\usb.c **** 
 827:C:/StellarisWare/driverlib\usb.c ****     //
 828:C:/StellarisWare/driverlib\usb.c ****     // Return the combined interrupt status.
 829:C:/StellarisWare/driverlib\usb.c ****     //
 830:C:/StellarisWare/driverlib\usb.c ****     return(ulStatus);
 964              		.loc 1 830 0
 965 0088 FB68     		ldr	r3, [r7, #12]
 831:C:/StellarisWare/driverlib\usb.c **** }
 966              		.loc 1 831 0
 967 008a 1846     		mov	r0, r3
 968 008c 07F11407 		add	r7, r7, #20
 969 0090 BD46     		mov	sp, r7
 970 0092 80BC     		pop	{r7}
 971 0094 7047     		bx	lr
 972              		.cfi_endproc
 973              	.LFE11:
 975 0096 00BF     		.section	.text.USBIntDisableEndpoint,"ax",%progbits
 976              		.align	2
 977              		.global	USBIntDisableEndpoint
 978              		.thumb
 979              		.thumb_func
 981              	USBIntDisableEndpoint:
 982              	.LFB12:
 832:C:/StellarisWare/driverlib\usb.c **** 
 833:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 834:C:/StellarisWare/driverlib\usb.c **** //
 835:C:/StellarisWare/driverlib\usb.c **** //! Disables endpoint interrupts on a given USB controller.
 836:C:/StellarisWare/driverlib\usb.c **** //!
 837:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 838:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which endpoint interrupts to disable.
 839:C:/StellarisWare/driverlib\usb.c **** //!
 840:C:/StellarisWare/driverlib\usb.c **** //! This function disables endpoint interrupts for the USB controller specified
 841:C:/StellarisWare/driverlib\usb.c **** //! by the \e ulBase parameter.  The \e ulFlags parameter specifies which
 842:C:/StellarisWare/driverlib\usb.c **** //! endpoint interrupts to disable.  The flags passed in the \e ulFlags
 843:C:/StellarisWare/driverlib\usb.c **** //! parameters should be the definitions that start with \b USB_INTEP_* and not
 844:C:/StellarisWare/driverlib\usb.c **** //! any other \b USB_INT flags.
 845:C:/StellarisWare/driverlib\usb.c **** //!
 846:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 847:C:/StellarisWare/driverlib\usb.c **** //
 848:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 849:C:/StellarisWare/driverlib\usb.c **** void
 850:C:/StellarisWare/driverlib\usb.c **** USBIntDisableEndpoint(unsigned long ulBase, unsigned long ulFlags)
 851:C:/StellarisWare/driverlib\usb.c **** {
 983              		.loc 1 851 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 8
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988 0000 80B4     		push	{r7}
 989              	.LCFI36:
 990              		.cfi_def_cfa_offset 4
 991              		.cfi_offset 7, -4
 992 0002 83B0     		sub	sp, sp, #12
 993              	.LCFI37:
 994              		.cfi_def_cfa_offset 16
 995 0004 00AF     		add	r7, sp, #0
 996              	.LCFI38:
 997              		.cfi_def_cfa_register 7
 998 0006 7860     		str	r0, [r7, #4]
 999 0008 3960     		str	r1, [r7, #0]
 852:C:/StellarisWare/driverlib\usb.c ****     //
 853:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 854:C:/StellarisWare/driverlib\usb.c ****     //
 855:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 856:C:/StellarisWare/driverlib\usb.c **** 
 857:C:/StellarisWare/driverlib\usb.c ****     //
 858:C:/StellarisWare/driverlib\usb.c ****     // If any transmit interrupts were disabled, then write the transmit
 859:C:/StellarisWare/driverlib\usb.c ****     // interrupt settings out to the hardware.
 860:C:/StellarisWare/driverlib\usb.c ****     //
 861:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_TXIE) &=
 1000              		.loc 1 861 0
 1001 000a 7B68     		ldr	r3, [r7, #4]
 1002 000c 03F10603 		add	r3, r3, #6
 1003 0010 7A68     		ldr	r2, [r7, #4]
 1004 0012 02F10602 		add	r2, r2, #6
 1005 0016 1288     		ldrh	r2, [r2, #0]	@ movhi
 1006 0018 91B2     		uxth	r1, r2
 1007 001a 3A68     		ldr	r2, [r7, #0]
 1008 001c 92B2     		uxth	r2, r2
 1009 001e 6FEA0202 		mvn	r2, r2
 1010 0022 92B2     		uxth	r2, r2
 1011 0024 0A40     		ands	r2, r2, r1
 1012 0026 92B2     		uxth	r2, r2
 1013 0028 1A80     		strh	r2, [r3, #0]	@ movhi
 862:C:/StellarisWare/driverlib\usb.c ****         ~(ulFlags & (USB_INTEP_HOST_OUT | USB_INTEP_DEV_IN | USB_INTEP_0));
 863:C:/StellarisWare/driverlib\usb.c **** 
 864:C:/StellarisWare/driverlib\usb.c ****     //
 865:C:/StellarisWare/driverlib\usb.c ****     // If any receive interrupts were disabled, then write the receive interrupt
 866:C:/StellarisWare/driverlib\usb.c ****     // settings out to the hardware.
 867:C:/StellarisWare/driverlib\usb.c ****     //
 868:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_RXIE) &=
 1014              		.loc 1 868 0
 1015 002a 7B68     		ldr	r3, [r7, #4]
 1016 002c 03F10803 		add	r3, r3, #8
 1017 0030 1A46     		mov	r2, r3
 1018 0032 7B68     		ldr	r3, [r7, #4]
 1019 0034 03F10803 		add	r3, r3, #8
 1020 0038 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1021 003a 99B2     		uxth	r1, r3
 869:C:/StellarisWare/driverlib\usb.c ****         ~((ulFlags & (USB_INTEP_HOST_IN | USB_INTEP_DEV_OUT)) >>
 1022              		.loc 1 869 0
 1023 003c 3B68     		ldr	r3, [r7, #0]
 1024 003e 4FEA5343 		lsr	r3, r3, #17
 1025 0042 4FEA4343 		lsl	r3, r3, #17
 1026 0046 4FEA1343 		lsr	r3, r3, #16
 868:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_RXIE) &=
 1027              		.loc 1 868 0
 1028 004a 9BB2     		uxth	r3, r3
 1029 004c 6FEA0303 		mvn	r3, r3
 1030 0050 9BB2     		uxth	r3, r3
 1031 0052 0B40     		ands	r3, r3, r1
 1032 0054 9BB2     		uxth	r3, r3
 1033 0056 1380     		strh	r3, [r2, #0]	@ movhi
 870:C:/StellarisWare/driverlib\usb.c ****           USB_INTEP_RX_SHIFT);
 871:C:/StellarisWare/driverlib\usb.c **** }
 1034              		.loc 1 871 0
 1035 0058 07F10C07 		add	r7, r7, #12
 1036 005c BD46     		mov	sp, r7
 1037 005e 80BC     		pop	{r7}
 1038 0060 7047     		bx	lr
 1039              		.cfi_endproc
 1040              	.LFE12:
 1042 0062 00BF     		.section	.text.USBIntEnableEndpoint,"ax",%progbits
 1043              		.align	2
 1044              		.global	USBIntEnableEndpoint
 1045              		.thumb
 1046              		.thumb_func
 1048              	USBIntEnableEndpoint:
 1049              	.LFB13:
 872:C:/StellarisWare/driverlib\usb.c **** 
 873:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 874:C:/StellarisWare/driverlib\usb.c **** //
 875:C:/StellarisWare/driverlib\usb.c **** //! Enables endpoint interrupts on a given USB controller.
 876:C:/StellarisWare/driverlib\usb.c **** //!
 877:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 878:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which endpoint interrupts to enable.
 879:C:/StellarisWare/driverlib\usb.c **** //!
 880:C:/StellarisWare/driverlib\usb.c **** //! This function enables endpoint interrupts for the USB controller specified
 881:C:/StellarisWare/driverlib\usb.c **** //! by the \e ulBase parameter.  The \e ulFlags parameter specifies which
 882:C:/StellarisWare/driverlib\usb.c **** //! endpoint interrupts to enable.  The flags passed in the \e ulFlags
 883:C:/StellarisWare/driverlib\usb.c **** //! parameters should be the definitions that start with \b USB_INTEP_* and not
 884:C:/StellarisWare/driverlib\usb.c **** //! any other \b USB_INT flags.
 885:C:/StellarisWare/driverlib\usb.c **** //!
 886:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 887:C:/StellarisWare/driverlib\usb.c **** //
 888:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 889:C:/StellarisWare/driverlib\usb.c **** void
 890:C:/StellarisWare/driverlib\usb.c **** USBIntEnableEndpoint(unsigned long ulBase, unsigned long ulFlags)
 891:C:/StellarisWare/driverlib\usb.c **** {
 1050              		.loc 1 891 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 8
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054              		@ link register save eliminated.
 1055 0000 80B4     		push	{r7}
 1056              	.LCFI39:
 1057              		.cfi_def_cfa_offset 4
 1058              		.cfi_offset 7, -4
 1059 0002 83B0     		sub	sp, sp, #12
 1060              	.LCFI40:
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              	.LCFI41:
 1064              		.cfi_def_cfa_register 7
 1065 0006 7860     		str	r0, [r7, #4]
 1066 0008 3960     		str	r1, [r7, #0]
 892:C:/StellarisWare/driverlib\usb.c ****     //
 893:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 894:C:/StellarisWare/driverlib\usb.c ****     //
 895:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 896:C:/StellarisWare/driverlib\usb.c **** 
 897:C:/StellarisWare/driverlib\usb.c ****     //
 898:C:/StellarisWare/driverlib\usb.c ****     // Enable any transmit endpoint interrupts.
 899:C:/StellarisWare/driverlib\usb.c ****     //
 900:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_TXIE) |=
 1067              		.loc 1 900 0
 1068 000a 7B68     		ldr	r3, [r7, #4]
 1069 000c 03F10603 		add	r3, r3, #6
 1070 0010 7A68     		ldr	r2, [r7, #4]
 1071 0012 02F10602 		add	r2, r2, #6
 1072 0016 1288     		ldrh	r2, [r2, #0]	@ movhi
 1073 0018 91B2     		uxth	r1, r2
 1074 001a 3A68     		ldr	r2, [r7, #0]
 1075 001c 92B2     		uxth	r2, r2
 1076 001e 0A43     		orrs	r2, r2, r1
 1077 0020 92B2     		uxth	r2, r2
 1078 0022 1A80     		strh	r2, [r3, #0]	@ movhi
 901:C:/StellarisWare/driverlib\usb.c ****            ulFlags & (USB_INTEP_HOST_OUT | USB_INTEP_DEV_IN | USB_INTEP_0);
 902:C:/StellarisWare/driverlib\usb.c **** 
 903:C:/StellarisWare/driverlib\usb.c ****     //
 904:C:/StellarisWare/driverlib\usb.c ****     // Enable any receive endpoint interrupts.
 905:C:/StellarisWare/driverlib\usb.c ****     //
 906:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_RXIE) |=
 1079              		.loc 1 906 0
 1080 0024 7B68     		ldr	r3, [r7, #4]
 1081 0026 03F10803 		add	r3, r3, #8
 1082 002a 1A46     		mov	r2, r3
 1083 002c 7B68     		ldr	r3, [r7, #4]
 1084 002e 03F10803 		add	r3, r3, #8
 1085 0032 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1086 0034 99B2     		uxth	r1, r3
 907:C:/StellarisWare/driverlib\usb.c ****         ((ulFlags & (USB_INTEP_HOST_IN | USB_INTEP_DEV_OUT)) >>
 1087              		.loc 1 907 0
 1088 0036 3B68     		ldr	r3, [r7, #0]
 1089 0038 4FEA5343 		lsr	r3, r3, #17
 1090 003c 4FEA4343 		lsl	r3, r3, #17
 1091 0040 4FEA1343 		lsr	r3, r3, #16
 906:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_RXIE) |=
 1092              		.loc 1 906 0
 1093 0044 9BB2     		uxth	r3, r3
 1094 0046 0B43     		orrs	r3, r3, r1
 1095 0048 9BB2     		uxth	r3, r3
 1096 004a 1380     		strh	r3, [r2, #0]	@ movhi
 908:C:/StellarisWare/driverlib\usb.c ****          USB_INTEP_RX_SHIFT);
 909:C:/StellarisWare/driverlib\usb.c **** }
 1097              		.loc 1 909 0
 1098 004c 07F10C07 		add	r7, r7, #12
 1099 0050 BD46     		mov	sp, r7
 1100 0052 80BC     		pop	{r7}
 1101 0054 7047     		bx	lr
 1102              		.cfi_endproc
 1103              	.LFE13:
 1105 0056 00BF     		.section	.text.USBIntStatusEndpoint,"ax",%progbits
 1106              		.align	2
 1107              		.global	USBIntStatusEndpoint
 1108              		.thumb
 1109              		.thumb_func
 1111              	USBIntStatusEndpoint:
 1112              	.LFB14:
 910:C:/StellarisWare/driverlib\usb.c **** 
 911:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 912:C:/StellarisWare/driverlib\usb.c **** //
 913:C:/StellarisWare/driverlib\usb.c **** //! Returns the endpoint interrupt status on a given USB controller.
 914:C:/StellarisWare/driverlib\usb.c **** //!
 915:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 916:C:/StellarisWare/driverlib\usb.c **** //!
 917:C:/StellarisWare/driverlib\usb.c **** //! This function reads endpoint interrupt status for a USB controller. This
 918:C:/StellarisWare/driverlib\usb.c **** //! call returns the current status for endpoint interrupts only, the control
 919:C:/StellarisWare/driverlib\usb.c **** //! interrupt status is retrieved by calling USBIntStatusControl(). The bit
 920:C:/StellarisWare/driverlib\usb.c **** //! values returned should be compared against the \b USB_INTEP_* values.
 921:C:/StellarisWare/driverlib\usb.c **** //! These values are grouped into classes for \b USB_INTEP_HOST_* and
 922:C:/StellarisWare/driverlib\usb.c **** //! \b USB_INTEP_DEV_* values to handle both host and device modes with all
 923:C:/StellarisWare/driverlib\usb.c **** //! endpoints.
 924:C:/StellarisWare/driverlib\usb.c **** //!
 925:C:/StellarisWare/driverlib\usb.c **** //! \note This call clears the source of all of the endpoint interrupts.
 926:C:/StellarisWare/driverlib\usb.c **** //!
 927:C:/StellarisWare/driverlib\usb.c **** //! \return Returns the status of the endpoint interrupts for a USB controller.
 928:C:/StellarisWare/driverlib\usb.c **** //
 929:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 930:C:/StellarisWare/driverlib\usb.c **** unsigned long
 931:C:/StellarisWare/driverlib\usb.c **** USBIntStatusEndpoint(unsigned long ulBase)
 932:C:/StellarisWare/driverlib\usb.c **** {
 1113              		.loc 1 932 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 16
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117              		@ link register save eliminated.
 1118 0000 80B4     		push	{r7}
 1119              	.LCFI42:
 1120              		.cfi_def_cfa_offset 4
 1121              		.cfi_offset 7, -4
 1122 0002 85B0     		sub	sp, sp, #20
 1123              	.LCFI43:
 1124              		.cfi_def_cfa_offset 24
 1125 0004 00AF     		add	r7, sp, #0
 1126              	.LCFI44:
 1127              		.cfi_def_cfa_register 7
 1128 0006 7860     		str	r0, [r7, #4]
 933:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulStatus;
 934:C:/StellarisWare/driverlib\usb.c **** 
 935:C:/StellarisWare/driverlib\usb.c ****     //
 936:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 937:C:/StellarisWare/driverlib\usb.c ****     //
 938:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 939:C:/StellarisWare/driverlib\usb.c **** 
 940:C:/StellarisWare/driverlib\usb.c ****     //
 941:C:/StellarisWare/driverlib\usb.c ****     // Get the transmit interrupt status.
 942:C:/StellarisWare/driverlib\usb.c ****     //
 943:C:/StellarisWare/driverlib\usb.c ****     ulStatus = HWREGH(ulBase + USB_O_TXIS);
 1129              		.loc 1 943 0
 1130 0008 7B68     		ldr	r3, [r7, #4]
 1131 000a 03F10203 		add	r3, r3, #2
 1132 000e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1133 0010 9BB2     		uxth	r3, r3
 1134 0012 FB60     		str	r3, [r7, #12]
 944:C:/StellarisWare/driverlib\usb.c **** 
 945:C:/StellarisWare/driverlib\usb.c ****     ulStatus |= (HWREGH(ulBase + USB_O_RXIS) << USB_INTEP_RX_SHIFT);
 1135              		.loc 1 945 0
 1136 0014 7B68     		ldr	r3, [r7, #4]
 1137 0016 03F10403 		add	r3, r3, #4
 1138 001a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1139 001c 9BB2     		uxth	r3, r3
 1140 001e 4FEA0343 		lsl	r3, r3, #16
 1141 0022 FA68     		ldr	r2, [r7, #12]
 1142 0024 1343     		orrs	r3, r3, r2
 1143 0026 FB60     		str	r3, [r7, #12]
 946:C:/StellarisWare/driverlib\usb.c **** 
 947:C:/StellarisWare/driverlib\usb.c ****     //
 948:C:/StellarisWare/driverlib\usb.c ****     // Return the combined interrupt status.
 949:C:/StellarisWare/driverlib\usb.c ****     //
 950:C:/StellarisWare/driverlib\usb.c ****     return(ulStatus);
 1144              		.loc 1 950 0
 1145 0028 FB68     		ldr	r3, [r7, #12]
 951:C:/StellarisWare/driverlib\usb.c **** }
 1146              		.loc 1 951 0
 1147 002a 1846     		mov	r0, r3
 1148 002c 07F11407 		add	r7, r7, #20
 1149 0030 BD46     		mov	sp, r7
 1150 0032 80BC     		pop	{r7}
 1151 0034 7047     		bx	lr
 1152              		.cfi_endproc
 1153              	.LFE14:
 1155 0036 00BF     		.section	.text.USBIntRegister,"ax",%progbits
 1156              		.align	2
 1157              		.global	USBIntRegister
 1158              		.thumb
 1159              		.thumb_func
 1161              	USBIntRegister:
 1162              	.LFB15:
 952:C:/StellarisWare/driverlib\usb.c **** 
 953:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 954:C:/StellarisWare/driverlib\usb.c **** //
 955:C:/StellarisWare/driverlib\usb.c **** //! Registers an interrupt handler for the USB controller.
 956:C:/StellarisWare/driverlib\usb.c **** //!
 957:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 958:C:/StellarisWare/driverlib\usb.c **** //! \param pfnHandler is a pointer to the function to be called when a USB
 959:C:/StellarisWare/driverlib\usb.c **** //! interrupt occurs.
 960:C:/StellarisWare/driverlib\usb.c **** //!
 961:C:/StellarisWare/driverlib\usb.c **** //! This function registers the handler to be called when a USB interrupt
 962:C:/StellarisWare/driverlib\usb.c **** //! occurs and enables the global USB interrupt in the interrupt controller.
 963:C:/StellarisWare/driverlib\usb.c **** //! The specific desired USB interrupts must be enabled via a separate call to
 964:C:/StellarisWare/driverlib\usb.c **** //! USBIntEnable().  It is the interrupt handler's responsibility to clear the
 965:C:/StellarisWare/driverlib\usb.c **** //! interrupt sources via calls to USBIntStatusControl() and
 966:C:/StellarisWare/driverlib\usb.c **** //! USBIntStatusEndpoint().
 967:C:/StellarisWare/driverlib\usb.c **** //!
 968:C:/StellarisWare/driverlib\usb.c **** //! \sa IntRegister() for important information about registering interrupt
 969:C:/StellarisWare/driverlib\usb.c **** //! handlers.
 970:C:/StellarisWare/driverlib\usb.c **** //!
 971:C:/StellarisWare/driverlib\usb.c **** //! \return None.
 972:C:/StellarisWare/driverlib\usb.c **** //
 973:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 974:C:/StellarisWare/driverlib\usb.c **** void
 975:C:/StellarisWare/driverlib\usb.c **** USBIntRegister(unsigned long ulBase, void(*pfnHandler)(void))
 976:C:/StellarisWare/driverlib\usb.c **** {
 1163              		.loc 1 976 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 8
 1166              		@ frame_needed = 1, uses_anonymous_args = 0
 1167 0000 80B5     		push	{r7, lr}
 1168              	.LCFI45:
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 14, -4
 1171              		.cfi_offset 7, -8
 1172 0002 82B0     		sub	sp, sp, #8
 1173              	.LCFI46:
 1174              		.cfi_def_cfa_offset 16
 1175 0004 00AF     		add	r7, sp, #0
 1176              	.LCFI47:
 1177              		.cfi_def_cfa_register 7
 1178 0006 7860     		str	r0, [r7, #4]
 1179 0008 3960     		str	r1, [r7, #0]
 977:C:/StellarisWare/driverlib\usb.c ****     //
 978:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
 979:C:/StellarisWare/driverlib\usb.c ****     //
 980:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
 981:C:/StellarisWare/driverlib\usb.c **** 
 982:C:/StellarisWare/driverlib\usb.c ****     //
 983:C:/StellarisWare/driverlib\usb.c ****     // Register the interrupt handler.
 984:C:/StellarisWare/driverlib\usb.c ****     //
 985:C:/StellarisWare/driverlib\usb.c ****     IntRegister(INT_USB0, pfnHandler);
 1180              		.loc 1 985 0
 1181 000a 4FF03C00 		mov	r0, #60
 1182 000e 3968     		ldr	r1, [r7, #0]
 1183 0010 FFF7FEFF 		bl	IntRegister
 986:C:/StellarisWare/driverlib\usb.c **** 
 987:C:/StellarisWare/driverlib\usb.c ****     //
 988:C:/StellarisWare/driverlib\usb.c ****     // Enable the USB interrupt.
 989:C:/StellarisWare/driverlib\usb.c ****     //
 990:C:/StellarisWare/driverlib\usb.c ****     IntEnable(INT_USB0);
 1184              		.loc 1 990 0
 1185 0014 4FF03C00 		mov	r0, #60
 1186 0018 FFF7FEFF 		bl	IntEnable
 991:C:/StellarisWare/driverlib\usb.c **** }
 1187              		.loc 1 991 0
 1188 001c 07F10807 		add	r7, r7, #8
 1189 0020 BD46     		mov	sp, r7
 1190 0022 80BD     		pop	{r7, pc}
 1191              		.cfi_endproc
 1192              	.LFE15:
 1194              		.section	.text.USBIntUnregister,"ax",%progbits
 1195              		.align	2
 1196              		.global	USBIntUnregister
 1197              		.thumb
 1198              		.thumb_func
 1200              	USBIntUnregister:
 1201              	.LFB16:
 992:C:/StellarisWare/driverlib\usb.c **** 
 993:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
 994:C:/StellarisWare/driverlib\usb.c **** //
 995:C:/StellarisWare/driverlib\usb.c **** //! Unregisters an interrupt handler for the USB controller.
 996:C:/StellarisWare/driverlib\usb.c **** //!
 997:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
 998:C:/StellarisWare/driverlib\usb.c **** //!
 999:C:/StellarisWare/driverlib\usb.c **** //! This function unregisters the interrupt handler.  This function also
1000:C:/StellarisWare/driverlib\usb.c **** //! disables the USB interrupt in the interrupt controller.
1001:C:/StellarisWare/driverlib\usb.c **** //!
1002:C:/StellarisWare/driverlib\usb.c **** //! \sa IntRegister() for important information about registering or
1003:C:/StellarisWare/driverlib\usb.c **** //! unregistering interrupt handlers.
1004:C:/StellarisWare/driverlib\usb.c **** //!
1005:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1006:C:/StellarisWare/driverlib\usb.c **** //
1007:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1008:C:/StellarisWare/driverlib\usb.c **** void
1009:C:/StellarisWare/driverlib\usb.c **** USBIntUnregister(unsigned long ulBase)
1010:C:/StellarisWare/driverlib\usb.c **** {
 1202              		.loc 1 1010 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 0000 80B5     		push	{r7, lr}
 1207              	.LCFI48:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 14, -4
 1210              		.cfi_offset 7, -8
 1211 0002 82B0     		sub	sp, sp, #8
 1212              	.LCFI49:
 1213              		.cfi_def_cfa_offset 16
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI50:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
1011:C:/StellarisWare/driverlib\usb.c ****     //
1012:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1013:C:/StellarisWare/driverlib\usb.c ****     //
1014:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1015:C:/StellarisWare/driverlib\usb.c **** 
1016:C:/StellarisWare/driverlib\usb.c ****     //
1017:C:/StellarisWare/driverlib\usb.c ****     // Disable the USB interrupt.
1018:C:/StellarisWare/driverlib\usb.c ****     //
1019:C:/StellarisWare/driverlib\usb.c ****     IntDisable(INT_USB0);
 1218              		.loc 1 1019 0
 1219 0008 4FF03C00 		mov	r0, #60
 1220 000c FFF7FEFF 		bl	IntDisable
1020:C:/StellarisWare/driverlib\usb.c **** 
1021:C:/StellarisWare/driverlib\usb.c ****     //
1022:C:/StellarisWare/driverlib\usb.c ****     // Unregister the interrupt handler.
1023:C:/StellarisWare/driverlib\usb.c ****     //
1024:C:/StellarisWare/driverlib\usb.c ****     IntUnregister(INT_USB0);
 1221              		.loc 1 1024 0
 1222 0010 4FF03C00 		mov	r0, #60
 1223 0014 FFF7FEFF 		bl	IntUnregister
1025:C:/StellarisWare/driverlib\usb.c **** }
 1224              		.loc 1 1025 0
 1225 0018 07F10807 		add	r7, r7, #8
 1226 001c BD46     		mov	sp, r7
 1227 001e 80BD     		pop	{r7, pc}
 1228              		.cfi_endproc
 1229              	.LFE16:
 1231              		.section	.text.USBEndpointStatus,"ax",%progbits
 1232              		.align	2
 1233              		.global	USBEndpointStatus
 1234              		.thumb
 1235              		.thumb_func
 1237              	USBEndpointStatus:
 1238              	.LFB17:
1026:C:/StellarisWare/driverlib\usb.c **** 
1027:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1028:C:/StellarisWare/driverlib\usb.c **** //
1029:C:/StellarisWare/driverlib\usb.c **** //! Returns the current status of an endpoint.
1030:C:/StellarisWare/driverlib\usb.c **** //!
1031:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1032:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
1033:C:/StellarisWare/driverlib\usb.c **** //!
1034:C:/StellarisWare/driverlib\usb.c **** //! This function returns the status of a given endpoint.  If any of these
1035:C:/StellarisWare/driverlib\usb.c **** //! status bits must be cleared, then the USBDevEndpointStatusClear() or the
1036:C:/StellarisWare/driverlib\usb.c **** //! USBHostEndpointStatusClear() functions should be called.
1037:C:/StellarisWare/driverlib\usb.c **** //!
1038:C:/StellarisWare/driverlib\usb.c **** //! The following are the status flags for host mode:
1039:C:/StellarisWare/driverlib\usb.c **** //!
1040:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_PID_ERROR - PID error on the given endpoint.
1041:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_NOT_COMP - The device failed to respond to an IN request.
1042:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_STALL - A stall was received on an IN endpoint.
1043:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_DATA_ERROR - There was a CRC or bit-stuff error on an IN
1044:C:/StellarisWare/driverlib\usb.c **** //!   endpoint in Isochronous mode.
1045:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_NAK_TO - NAKs received on this IN endpoint for more than
1046:C:/StellarisWare/driverlib\usb.c **** //!   the specified timeout period.
1047:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_ERROR - Failed to communicate with a device using this IN
1048:C:/StellarisWare/driverlib\usb.c **** //!   endpoint.
1049:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_FIFO_FULL - This IN endpoint's FIFO is full.
1050:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_IN_PKTRDY - Data packet ready on this IN endpoint.
1051:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_NAK_TO - NAKs received on this OUT endpoint for more than
1052:C:/StellarisWare/driverlib\usb.c **** //!   the specified timeout period.
1053:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_NOT_COMP - The device failed to respond to an OUT
1054:C:/StellarisWare/driverlib\usb.c **** //!   request.
1055:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_STALL - A stall was received on this OUT endpoint.
1056:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_ERROR - Failed to communicate with a device using this
1057:C:/StellarisWare/driverlib\usb.c **** //!   OUT endpoint.
1058:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_FIFO_NE - This endpoint's OUT FIFO is not empty.
1059:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_OUT_PKTPEND - The data transfer on this OUT endpoint has not
1060:C:/StellarisWare/driverlib\usb.c **** //!   completed.
1061:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_EP0_NAK_TO - NAKs received on endpoint zero for more than the
1062:C:/StellarisWare/driverlib\usb.c **** //!   specified timeout period.
1063:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_EP0_ERROR - The device failed to respond to a request on
1064:C:/StellarisWare/driverlib\usb.c **** //!   endpoint zero.
1065:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_EP0_IN_STALL - A stall was received on endpoint zero for an
1066:C:/StellarisWare/driverlib\usb.c **** //!   IN transaction.
1067:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_EP0_IN_PKTRDY - Data packet ready on endpoint zero for an IN
1068:C:/StellarisWare/driverlib\usb.c **** //!   transaction.
1069:C:/StellarisWare/driverlib\usb.c **** //!
1070:C:/StellarisWare/driverlib\usb.c **** //! The following are the status flags for device mode:
1071:C:/StellarisWare/driverlib\usb.c **** //!
1072:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_OUT_SENT_STALL - A stall was sent on this OUT endpoint.
1073:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_OUT_DATA_ERROR - There was a CRC or bit-stuff error on an OUT
1074:C:/StellarisWare/driverlib\usb.c **** //!   endpoint.
1075:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_OUT_OVERRUN - An OUT packet was not loaded due to a full FIFO.
1076:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_OUT_FIFO_FULL - The OUT endpoint's FIFO is full.
1077:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_OUT_PKTRDY - There is a data packet ready in the OUT
1078:C:/StellarisWare/driverlib\usb.c **** //!   endpoint's FIFO.
1079:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_IN_NOT_COMP - A larger packet was split up, more data to come.
1080:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_IN_SENT_STALL - A stall was sent on this IN endpoint.
1081:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_IN_UNDERRUN - Data was requested on the IN endpoint and no
1082:C:/StellarisWare/driverlib\usb.c **** //!   data was ready.
1083:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_IN_FIFO_NE - The IN endpoint's FIFO is not empty.
1084:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_IN_PKTPEND - The data transfer on this IN endpoint has not
1085:C:/StellarisWare/driverlib\usb.c **** //!   completed.
1086:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_EP0_SETUP_END - A control transaction ended before Data End
1087:C:/StellarisWare/driverlib\usb.c **** //!   condition was sent.
1088:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_EP0_SENT_STALL - A stall was sent on endpoint zero.
1089:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_EP0_IN_PKTPEND - The data transfer on endpoint zero has not
1090:C:/StellarisWare/driverlib\usb.c **** //!   completed.
1091:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_DEV_EP0_OUT_PKTRDY - There is a data packet ready in endpoint
1092:C:/StellarisWare/driverlib\usb.c **** //!   zero's OUT FIFO.
1093:C:/StellarisWare/driverlib\usb.c **** //!
1094:C:/StellarisWare/driverlib\usb.c **** //! \return The current status flags for the endpoint depending on mode.
1095:C:/StellarisWare/driverlib\usb.c **** //
1096:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1097:C:/StellarisWare/driverlib\usb.c **** unsigned long
1098:C:/StellarisWare/driverlib\usb.c **** USBEndpointStatus(unsigned long ulBase, unsigned long ulEndpoint)
1099:C:/StellarisWare/driverlib\usb.c **** {
 1239              		.loc 1 1099 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 16
 1242              		@ frame_needed = 1, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244 0000 80B4     		push	{r7}
 1245              	.LCFI51:
 1246              		.cfi_def_cfa_offset 4
 1247              		.cfi_offset 7, -4
 1248 0002 85B0     		sub	sp, sp, #20
 1249              	.LCFI52:
 1250              		.cfi_def_cfa_offset 24
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI53:
 1253              		.cfi_def_cfa_register 7
 1254 0006 7860     		str	r0, [r7, #4]
 1255 0008 3960     		str	r1, [r7, #0]
1100:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulStatus;
1101:C:/StellarisWare/driverlib\usb.c **** 
1102:C:/StellarisWare/driverlib\usb.c ****     //
1103:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1104:C:/StellarisWare/driverlib\usb.c ****     //
1105:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1106:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1107:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1108:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1109:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1110:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1111:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1112:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1113:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1114:C:/StellarisWare/driverlib\usb.c **** 
1115:C:/StellarisWare/driverlib\usb.c ****     //
1116:C:/StellarisWare/driverlib\usb.c ****     // Get the TX portion of the endpoint status.
1117:C:/StellarisWare/driverlib\usb.c ****     //
1118:C:/StellarisWare/driverlib\usb.c ****     ulStatus = HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRL1);
 1256              		.loc 1 1118 0
 1257 000a 3A68     		ldr	r2, [r7, #0]
 1258 000c 7B68     		ldr	r3, [r7, #4]
 1259 000e D318     		adds	r3, r2, r3
 1260 0010 03F58173 		add	r3, r3, #258
 1261 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1262 0016 9BB2     		uxth	r3, r3
 1263 0018 FB60     		str	r3, [r7, #12]
1119:C:/StellarisWare/driverlib\usb.c **** 
1120:C:/StellarisWare/driverlib\usb.c ****     //
1121:C:/StellarisWare/driverlib\usb.c ****     // Get the RX portion of the endpoint status.
1122:C:/StellarisWare/driverlib\usb.c ****     //
1123:C:/StellarisWare/driverlib\usb.c ****     ulStatus |= ((HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1)) <<
 1264              		.loc 1 1123 0
 1265 001a 3A68     		ldr	r2, [r7, #0]
 1266 001c 7B68     		ldr	r3, [r7, #4]
 1267 001e D318     		adds	r3, r2, r3
 1268 0020 03F58373 		add	r3, r3, #262
 1269 0024 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1270 0026 9BB2     		uxth	r3, r3
 1271 0028 4FEA0343 		lsl	r3, r3, #16
 1272 002c FA68     		ldr	r2, [r7, #12]
 1273 002e 1343     		orrs	r3, r3, r2
 1274 0030 FB60     		str	r3, [r7, #12]
1124:C:/StellarisWare/driverlib\usb.c ****                  USB_RX_EPSTATUS_SHIFT);
1125:C:/StellarisWare/driverlib\usb.c **** 
1126:C:/StellarisWare/driverlib\usb.c ****     //
1127:C:/StellarisWare/driverlib\usb.c ****     // Return the endpoint status.
1128:C:/StellarisWare/driverlib\usb.c ****     //
1129:C:/StellarisWare/driverlib\usb.c ****     return(ulStatus);
 1275              		.loc 1 1129 0
 1276 0032 FB68     		ldr	r3, [r7, #12]
1130:C:/StellarisWare/driverlib\usb.c **** }
 1277              		.loc 1 1130 0
 1278 0034 1846     		mov	r0, r3
 1279 0036 07F11407 		add	r7, r7, #20
 1280 003a BD46     		mov	sp, r7
 1281 003c 80BC     		pop	{r7}
 1282 003e 7047     		bx	lr
 1283              		.cfi_endproc
 1284              	.LFE17:
 1286              		.section	.text.USBHostEndpointStatusClear,"ax",%progbits
 1287              		.align	2
 1288              		.global	USBHostEndpointStatusClear
 1289              		.thumb
 1290              		.thumb_func
 1292              	USBHostEndpointStatusClear:
 1293              	.LFB18:
1131:C:/StellarisWare/driverlib\usb.c **** 
1132:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1133:C:/StellarisWare/driverlib\usb.c **** //
1134:C:/StellarisWare/driverlib\usb.c **** //! Clears the status bits in this endpoint in host mode.
1135:C:/StellarisWare/driverlib\usb.c **** //!
1136:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1137:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
1138:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags are the status bits that should be cleared.
1139:C:/StellarisWare/driverlib\usb.c **** //!
1140:C:/StellarisWare/driverlib\usb.c **** //! This function clears the status of any bits that are passed in the
1141:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter.  The \e ulFlags parameter can take the value returned
1142:C:/StellarisWare/driverlib\usb.c **** //! from the USBEndpointStatus() call.
1143:C:/StellarisWare/driverlib\usb.c **** //!
1144:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
1145:C:/StellarisWare/driverlib\usb.c **** //!
1146:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1147:C:/StellarisWare/driverlib\usb.c **** //
1148:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1149:C:/StellarisWare/driverlib\usb.c **** void
1150:C:/StellarisWare/driverlib\usb.c **** USBHostEndpointStatusClear(unsigned long ulBase, unsigned long ulEndpoint,
1151:C:/StellarisWare/driverlib\usb.c ****                            unsigned long ulFlags)
1152:C:/StellarisWare/driverlib\usb.c **** {
 1294              		.loc 1 1152 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 16
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299 0000 80B4     		push	{r7}
 1300              	.LCFI54:
 1301              		.cfi_def_cfa_offset 4
 1302              		.cfi_offset 7, -4
 1303 0002 85B0     		sub	sp, sp, #20
 1304              	.LCFI55:
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              	.LCFI56:
 1308              		.cfi_def_cfa_register 7
 1309 0006 F860     		str	r0, [r7, #12]
 1310 0008 B960     		str	r1, [r7, #8]
 1311 000a 7A60     		str	r2, [r7, #4]
1153:C:/StellarisWare/driverlib\usb.c ****     //
1154:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1155:C:/StellarisWare/driverlib\usb.c ****     //
1156:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1157:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1158:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1159:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1160:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1161:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1162:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1163:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1164:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1165:C:/StellarisWare/driverlib\usb.c **** 
1166:C:/StellarisWare/driverlib\usb.c ****     //
1167:C:/StellarisWare/driverlib\usb.c ****     // Clear the specified flags for the endpoint.
1168:C:/StellarisWare/driverlib\usb.c ****     //
1169:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 1312              		.loc 1 1169 0
 1313 000c BB68     		ldr	r3, [r7, #8]
 1314 000e 002B     		cmp	r3, #0
 1315 0010 10D1     		bne	.L51
1170:C:/StellarisWare/driverlib\usb.c ****     {
1171:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRL0) &= ~ulFlags;
 1316              		.loc 1 1171 0
 1317 0012 FB68     		ldr	r3, [r7, #12]
 1318 0014 03F58173 		add	r3, r3, #258
 1319 0018 FA68     		ldr	r2, [r7, #12]
 1320 001a 02F58172 		add	r2, r2, #258
 1321 001e 1278     		ldrb	r2, [r2, #0]
 1322 0020 D1B2     		uxtb	r1, r2
 1323 0022 7A68     		ldr	r2, [r7, #4]
 1324 0024 D2B2     		uxtb	r2, r2
 1325 0026 6FEA0202 		mvn	r2, r2
 1326 002a D2B2     		uxtb	r2, r2
 1327 002c 0A40     		ands	r2, r2, r1
 1328 002e D2B2     		uxtb	r2, r2
 1329 0030 1A70     		strb	r2, [r3, #0]
 1330 0032 29E0     		b	.L50
 1331              	.L51:
1172:C:/StellarisWare/driverlib\usb.c ****     }
1173:C:/StellarisWare/driverlib\usb.c ****     else
1174:C:/StellarisWare/driverlib\usb.c ****     {
1175:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) &= ~ulFlags;
 1332              		.loc 1 1175 0
 1333 0034 FA68     		ldr	r2, [r7, #12]
 1334 0036 BB68     		ldr	r3, [r7, #8]
 1335 0038 D318     		adds	r3, r2, r3
 1336 003a 03F58173 		add	r3, r3, #258
 1337 003e F968     		ldr	r1, [r7, #12]
 1338 0040 BA68     		ldr	r2, [r7, #8]
 1339 0042 8A18     		adds	r2, r1, r2
 1340 0044 02F58172 		add	r2, r2, #258
 1341 0048 1278     		ldrb	r2, [r2, #0]
 1342 004a D1B2     		uxtb	r1, r2
 1343 004c 7A68     		ldr	r2, [r7, #4]
 1344 004e D2B2     		uxtb	r2, r2
 1345 0050 6FEA0202 		mvn	r2, r2
 1346 0054 D2B2     		uxtb	r2, r2
 1347 0056 0A40     		ands	r2, r2, r1
 1348 0058 D2B2     		uxtb	r2, r2
 1349 005a 1A70     		strb	r2, [r3, #0]
1176:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1350              		.loc 1 1176 0
 1351 005c FA68     		ldr	r2, [r7, #12]
 1352 005e BB68     		ldr	r3, [r7, #8]
 1353 0060 D318     		adds	r3, r2, r3
 1354 0062 03F58373 		add	r3, r3, #262
 1355 0066 F968     		ldr	r1, [r7, #12]
 1356 0068 BA68     		ldr	r2, [r7, #8]
 1357 006a 8A18     		adds	r2, r1, r2
 1358 006c 02F58372 		add	r2, r2, #262
 1359 0070 1278     		ldrb	r2, [r2, #0]
 1360 0072 D1B2     		uxtb	r1, r2
1177:C:/StellarisWare/driverlib\usb.c ****             ~(ulFlags >> USB_RX_EPSTATUS_SHIFT);
 1361              		.loc 1 1177 0
 1362 0074 7A68     		ldr	r2, [r7, #4]
 1363 0076 4FEA1242 		lsr	r2, r2, #16
1176:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1364              		.loc 1 1176 0
 1365 007a D2B2     		uxtb	r2, r2
 1366 007c 6FEA0202 		mvn	r2, r2
 1367 0080 D2B2     		uxtb	r2, r2
 1368 0082 0A40     		ands	r2, r2, r1
 1369 0084 D2B2     		uxtb	r2, r2
 1370 0086 1A70     		strb	r2, [r3, #0]
 1371              	.L50:
1178:C:/StellarisWare/driverlib\usb.c ****     }
1179:C:/StellarisWare/driverlib\usb.c **** }
 1372              		.loc 1 1179 0
 1373 0088 07F11407 		add	r7, r7, #20
 1374 008c BD46     		mov	sp, r7
 1375 008e 80BC     		pop	{r7}
 1376 0090 7047     		bx	lr
 1377              		.cfi_endproc
 1378              	.LFE18:
 1380 0092 00BF     		.section	.text.USBDevEndpointStatusClear,"ax",%progbits
 1381              		.align	2
 1382              		.global	USBDevEndpointStatusClear
 1383              		.thumb
 1384              		.thumb_func
 1386              	USBDevEndpointStatusClear:
 1387              	.LFB19:
1180:C:/StellarisWare/driverlib\usb.c **** 
1181:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1182:C:/StellarisWare/driverlib\usb.c **** //
1183:C:/StellarisWare/driverlib\usb.c **** //! Clears the status bits in this endpoint in device mode.
1184:C:/StellarisWare/driverlib\usb.c **** //!
1185:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1186:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
1187:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags are the status bits that should be cleared.
1188:C:/StellarisWare/driverlib\usb.c **** //!
1189:C:/StellarisWare/driverlib\usb.c **** //! This function clears the status of any bits that are passed in the
1190:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter.  The \e ulFlags parameter can take the value returned
1191:C:/StellarisWare/driverlib\usb.c **** //! from the USBEndpointStatus() call.
1192:C:/StellarisWare/driverlib\usb.c **** //!
1193:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1194:C:/StellarisWare/driverlib\usb.c **** //!
1195:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1196:C:/StellarisWare/driverlib\usb.c **** //
1197:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1198:C:/StellarisWare/driverlib\usb.c **** void
1199:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointStatusClear(unsigned long ulBase, unsigned long ulEndpoint,
1200:C:/StellarisWare/driverlib\usb.c ****                           unsigned long ulFlags)
1201:C:/StellarisWare/driverlib\usb.c **** {
 1388              		.loc 1 1201 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 16
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392              		@ link register save eliminated.
 1393 0000 80B4     		push	{r7}
 1394              	.LCFI57:
 1395              		.cfi_def_cfa_offset 4
 1396              		.cfi_offset 7, -4
 1397 0002 85B0     		sub	sp, sp, #20
 1398              	.LCFI58:
 1399              		.cfi_def_cfa_offset 24
 1400 0004 00AF     		add	r7, sp, #0
 1401              	.LCFI59:
 1402              		.cfi_def_cfa_register 7
 1403 0006 F860     		str	r0, [r7, #12]
 1404 0008 B960     		str	r1, [r7, #8]
 1405 000a 7A60     		str	r2, [r7, #4]
1202:C:/StellarisWare/driverlib\usb.c ****     //
1203:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1204:C:/StellarisWare/driverlib\usb.c ****     //
1205:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1206:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1207:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1208:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1209:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1210:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1211:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1212:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1213:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1214:C:/StellarisWare/driverlib\usb.c **** 
1215:C:/StellarisWare/driverlib\usb.c ****     //
1216:C:/StellarisWare/driverlib\usb.c ****     // If this is endpoint 0, then the bits have different meaning and map
1217:C:/StellarisWare/driverlib\usb.c ****     // into the TX memory location.
1218:C:/StellarisWare/driverlib\usb.c ****     //
1219:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 1406              		.loc 1 1219 0
 1407 000c BB68     		ldr	r3, [r7, #8]
 1408 000e 002B     		cmp	r3, #0
 1409 0010 34D1     		bne	.L54
1220:C:/StellarisWare/driverlib\usb.c ****     {
1221:C:/StellarisWare/driverlib\usb.c ****         //
1222:C:/StellarisWare/driverlib\usb.c ****         // Set the Serviced RxPktRdy bit to clear the RxPktRdy.
1223:C:/StellarisWare/driverlib\usb.c ****         //
1224:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_DEV_EP0_OUT_PKTRDY)
 1410              		.loc 1 1224 0
 1411 0012 7B68     		ldr	r3, [r7, #4]
 1412 0014 03F00103 		and	r3, r3, #1
 1413 0018 DBB2     		uxtb	r3, r3
 1414 001a 002B     		cmp	r3, #0
 1415 001c 0BD0     		beq	.L55
1225:C:/StellarisWare/driverlib\usb.c ****         {
1226:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_CSRL0) |= USB_CSRL0_RXRDYC;
 1416              		.loc 1 1226 0
 1417 001e FB68     		ldr	r3, [r7, #12]
 1418 0020 03F58173 		add	r3, r3, #258
 1419 0024 FA68     		ldr	r2, [r7, #12]
 1420 0026 02F58172 		add	r2, r2, #258
 1421 002a 1278     		ldrb	r2, [r2, #0]
 1422 002c D2B2     		uxtb	r2, r2
 1423 002e 42F04002 		orr	r2, r2, #64
 1424 0032 D2B2     		uxtb	r2, r2
 1425 0034 1A70     		strb	r2, [r3, #0]
 1426              	.L55:
1227:C:/StellarisWare/driverlib\usb.c ****         }
1228:C:/StellarisWare/driverlib\usb.c **** 
1229:C:/StellarisWare/driverlib\usb.c ****         //
1230:C:/StellarisWare/driverlib\usb.c ****         // Set the serviced Setup End bit to clear the SetupEnd status.
1231:C:/StellarisWare/driverlib\usb.c ****         //
1232:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_DEV_EP0_SETUP_END)
 1427              		.loc 1 1232 0
 1428 0036 7B68     		ldr	r3, [r7, #4]
 1429 0038 03F01003 		and	r3, r3, #16
 1430 003c 002B     		cmp	r3, #0
 1431 003e 0BD0     		beq	.L56
1233:C:/StellarisWare/driverlib\usb.c ****         {
1234:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_CSRL0) |= USB_CSRL0_SETENDC;
 1432              		.loc 1 1234 0
 1433 0040 FB68     		ldr	r3, [r7, #12]
 1434 0042 03F58173 		add	r3, r3, #258
 1435 0046 FA68     		ldr	r2, [r7, #12]
 1436 0048 02F58172 		add	r2, r2, #258
 1437 004c 1278     		ldrb	r2, [r2, #0]
 1438 004e D2B2     		uxtb	r2, r2
 1439 0050 62F07F02 		orn	r2, r2, #127
 1440 0054 D2B2     		uxtb	r2, r2
 1441 0056 1A70     		strb	r2, [r3, #0]
 1442              	.L56:
1235:C:/StellarisWare/driverlib\usb.c ****         }
1236:C:/StellarisWare/driverlib\usb.c **** 
1237:C:/StellarisWare/driverlib\usb.c ****         //
1238:C:/StellarisWare/driverlib\usb.c ****         // Clear the Sent Stall status flag.
1239:C:/StellarisWare/driverlib\usb.c ****         //
1240:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_DEV_EP0_SENT_STALL)
 1443              		.loc 1 1240 0
 1444 0058 7B68     		ldr	r3, [r7, #4]
 1445 005a 03F00403 		and	r3, r3, #4
 1446 005e 002B     		cmp	r3, #0
 1447 0060 3BD0     		beq	.L53
1241:C:/StellarisWare/driverlib\usb.c ****         {
1242:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_CSRL0) &= ~(USB_DEV_EP0_SENT_STALL);
 1448              		.loc 1 1242 0
 1449 0062 FB68     		ldr	r3, [r7, #12]
 1450 0064 03F58173 		add	r3, r3, #258
 1451 0068 FA68     		ldr	r2, [r7, #12]
 1452 006a 02F58172 		add	r2, r2, #258
 1453 006e 1278     		ldrb	r2, [r2, #0]
 1454 0070 D2B2     		uxtb	r2, r2
 1455 0072 22F00402 		bic	r2, r2, #4
 1456 0076 D2B2     		uxtb	r2, r2
 1457 0078 1A70     		strb	r2, [r3, #0]
 1458 007a 2EE0     		b	.L53
 1459              	.L54:
1243:C:/StellarisWare/driverlib\usb.c ****         }
1244:C:/StellarisWare/driverlib\usb.c ****     }
1245:C:/StellarisWare/driverlib\usb.c ****     else
1246:C:/StellarisWare/driverlib\usb.c ****     {
1247:C:/StellarisWare/driverlib\usb.c ****         //
1248:C:/StellarisWare/driverlib\usb.c ****         // Clear out any TX flags that were passed in.  Only
1249:C:/StellarisWare/driverlib\usb.c ****         // USB_DEV_TX_SENT_STALL and USB_DEV_TX_UNDERRUN should be cleared.
1250:C:/StellarisWare/driverlib\usb.c ****         //
1251:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1460              		.loc 1 1251 0
 1461 007c FA68     		ldr	r2, [r7, #12]
 1462 007e BB68     		ldr	r3, [r7, #8]
 1463 0080 D318     		adds	r3, r2, r3
 1464 0082 03F58173 		add	r3, r3, #258
 1465 0086 F968     		ldr	r1, [r7, #12]
 1466 0088 BA68     		ldr	r2, [r7, #8]
 1467 008a 8A18     		adds	r2, r1, r2
 1468 008c 02F58172 		add	r2, r2, #258
 1469 0090 1278     		ldrb	r2, [r2, #0]
 1470 0092 D1B2     		uxtb	r1, r2
 1471 0094 7A68     		ldr	r2, [r7, #4]
 1472 0096 D2B2     		uxtb	r2, r2
 1473 0098 02F02402 		and	r2, r2, #36
 1474 009c D2B2     		uxtb	r2, r2
 1475 009e 6FEA0202 		mvn	r2, r2
 1476 00a2 D2B2     		uxtb	r2, r2
 1477 00a4 0A40     		ands	r2, r2, r1
 1478 00a6 D2B2     		uxtb	r2, r2
 1479 00a8 1A70     		strb	r2, [r3, #0]
1252:C:/StellarisWare/driverlib\usb.c ****             ~(ulFlags & (USB_DEV_TX_SENT_STALL | USB_DEV_TX_UNDERRUN));
1253:C:/StellarisWare/driverlib\usb.c **** 
1254:C:/StellarisWare/driverlib\usb.c ****         //
1255:C:/StellarisWare/driverlib\usb.c ****         // Clear out valid RX flags that were passed in.  Only
1256:C:/StellarisWare/driverlib\usb.c ****         // USB_DEV_RX_SENT_STALL, USB_DEV_RX_DATA_ERROR, and USB_DEV_RX_OVERRUN
1257:C:/StellarisWare/driverlib\usb.c ****         // should be cleared.
1258:C:/StellarisWare/driverlib\usb.c ****         //
1259:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1480              		.loc 1 1259 0
 1481 00aa FA68     		ldr	r2, [r7, #12]
 1482 00ac BB68     		ldr	r3, [r7, #8]
 1483 00ae D318     		adds	r3, r2, r3
 1484 00b0 03F58373 		add	r3, r3, #262
 1485 00b4 F968     		ldr	r1, [r7, #12]
 1486 00b6 BA68     		ldr	r2, [r7, #8]
 1487 00b8 8A18     		adds	r2, r1, r2
 1488 00ba 02F58372 		add	r2, r2, #262
 1489 00be 1278     		ldrb	r2, [r2, #0]
 1490 00c0 D1B2     		uxtb	r1, r2
1260:C:/StellarisWare/driverlib\usb.c ****             ~((ulFlags & (USB_DEV_RX_SENT_STALL | USB_DEV_RX_DATA_ERROR |
 1491              		.loc 1 1260 0
 1492 00c2 7A68     		ldr	r2, [r7, #4]
 1493 00c4 02F49802 		and	r2, r2, #4980736
1261:C:/StellarisWare/driverlib\usb.c ****                           USB_DEV_RX_OVERRUN)) >> USB_RX_EPSTATUS_SHIFT);
 1494              		.loc 1 1261 0
 1495 00c8 4FEA1242 		lsr	r2, r2, #16
1259:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1496              		.loc 1 1259 0
 1497 00cc D2B2     		uxtb	r2, r2
 1498 00ce 6FEA0202 		mvn	r2, r2
 1499 00d2 D2B2     		uxtb	r2, r2
 1500 00d4 0A40     		ands	r2, r2, r1
 1501 00d6 D2B2     		uxtb	r2, r2
 1502 00d8 1A70     		strb	r2, [r3, #0]
 1503              	.L53:
1262:C:/StellarisWare/driverlib\usb.c ****     }
1263:C:/StellarisWare/driverlib\usb.c **** }
 1504              		.loc 1 1263 0
 1505 00da 07F11407 		add	r7, r7, #20
 1506 00de BD46     		mov	sp, r7
 1507 00e0 80BC     		pop	{r7}
 1508 00e2 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE19:
 1512              		.section	.text.USBHostEndpointDataToggle,"ax",%progbits
 1513              		.align	2
 1514              		.global	USBHostEndpointDataToggle
 1515              		.thumb
 1516              		.thumb_func
 1518              	USBHostEndpointDataToggle:
 1519              	.LFB20:
1264:C:/StellarisWare/driverlib\usb.c **** 
1265:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1266:C:/StellarisWare/driverlib\usb.c **** //
1267:C:/StellarisWare/driverlib\usb.c **** //! Sets the value data toggle on an endpoint in host mode.
1268:C:/StellarisWare/driverlib\usb.c **** //!
1269:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1270:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies the endpoint to reset the data toggle.
1271:C:/StellarisWare/driverlib\usb.c **** //! \param bDataToggle specifies whether to set the state to DATA0 or DATA1.
1272:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies whether to set the IN or OUT endpoint.
1273:C:/StellarisWare/driverlib\usb.c **** //!
1274:C:/StellarisWare/driverlib\usb.c **** //! This function is used to force the state of the data toggle in host mode.
1275:C:/StellarisWare/driverlib\usb.c **** //! If the value passed in the \e bDataToggle parameter is \b false, then the
1276:C:/StellarisWare/driverlib\usb.c **** //! data toggle is set to the DATA0 state, and if it is \b true it is set to
1277:C:/StellarisWare/driverlib\usb.c **** //! the DATA1 state.  The \e ulFlags parameter can be \b USB_EP_HOST_IN or
1278:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_HOST_OUT to access the desired portion of this endpoint.  The
1279:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter is ignored for endpoint zero.
1280:C:/StellarisWare/driverlib\usb.c **** //!
1281:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
1282:C:/StellarisWare/driverlib\usb.c **** //!
1283:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1284:C:/StellarisWare/driverlib\usb.c **** //
1285:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1286:C:/StellarisWare/driverlib\usb.c **** void
1287:C:/StellarisWare/driverlib\usb.c **** USBHostEndpointDataToggle(unsigned long ulBase, unsigned long ulEndpoint,
1288:C:/StellarisWare/driverlib\usb.c ****                           tBoolean bDataToggle, unsigned long ulFlags)
1289:C:/StellarisWare/driverlib\usb.c **** {
 1520              		.loc 1 1289 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 24
 1523              		@ frame_needed = 1, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
 1525 0000 80B4     		push	{r7}
 1526              	.LCFI60:
 1527              		.cfi_def_cfa_offset 4
 1528              		.cfi_offset 7, -4
 1529 0002 87B0     		sub	sp, sp, #28
 1530              	.LCFI61:
 1531              		.cfi_def_cfa_offset 32
 1532 0004 00AF     		add	r7, sp, #0
 1533              	.LCFI62:
 1534              		.cfi_def_cfa_register 7
 1535 0006 F860     		str	r0, [r7, #12]
 1536 0008 B960     		str	r1, [r7, #8]
 1537 000a 3B60     		str	r3, [r7, #0]
 1538 000c 1346     		mov	r3, r2
 1539 000e FB71     		strb	r3, [r7, #7]
1290:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulDataToggle;
1291:C:/StellarisWare/driverlib\usb.c **** 
1292:C:/StellarisWare/driverlib\usb.c ****     //
1293:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1294:C:/StellarisWare/driverlib\usb.c ****     //
1295:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1296:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1297:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1298:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1299:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1300:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1301:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1302:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1303:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1304:C:/StellarisWare/driverlib\usb.c **** 
1305:C:/StellarisWare/driverlib\usb.c ****     //
1306:C:/StellarisWare/driverlib\usb.c ****     // The data toggle defaults to DATA0.
1307:C:/StellarisWare/driverlib\usb.c ****     //
1308:C:/StellarisWare/driverlib\usb.c ****     ulDataToggle = 0;
 1540              		.loc 1 1308 0
 1541 0010 4FF00003 		mov	r3, #0
 1542 0014 7B61     		str	r3, [r7, #20]
1309:C:/StellarisWare/driverlib\usb.c **** 
1310:C:/StellarisWare/driverlib\usb.c ****     //
1311:C:/StellarisWare/driverlib\usb.c ****     // See if the data toggle should be set to DATA1.
1312:C:/StellarisWare/driverlib\usb.c ****     //
1313:C:/StellarisWare/driverlib\usb.c ****     if(bDataToggle)
 1543              		.loc 1 1313 0
 1544 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1545 0018 002B     		cmp	r3, #0
 1546 001a 10D0     		beq	.L59
1314:C:/StellarisWare/driverlib\usb.c ****     {
1315:C:/StellarisWare/driverlib\usb.c ****         //
1316:C:/StellarisWare/driverlib\usb.c ****         // Select the data toggle bit based on the endpoint.
1317:C:/StellarisWare/driverlib\usb.c ****         //
1318:C:/StellarisWare/driverlib\usb.c ****         if(ulEndpoint == USB_EP_0)
 1547              		.loc 1 1318 0
 1548 001c BB68     		ldr	r3, [r7, #8]
 1549 001e 002B     		cmp	r3, #0
 1550 0020 03D1     		bne	.L60
1319:C:/StellarisWare/driverlib\usb.c ****         {
1320:C:/StellarisWare/driverlib\usb.c ****             ulDataToggle = USB_CSRH0_DT;
 1551              		.loc 1 1320 0
 1552 0022 4FF00203 		mov	r3, #2
 1553 0026 7B61     		str	r3, [r7, #20]
 1554 0028 09E0     		b	.L59
 1555              	.L60:
1321:C:/StellarisWare/driverlib\usb.c ****         }
1322:C:/StellarisWare/driverlib\usb.c ****         else if(ulFlags == USB_EP_HOST_IN)
 1556              		.loc 1 1322 0
 1557 002a 3B68     		ldr	r3, [r7, #0]
 1558 002c 002B     		cmp	r3, #0
 1559 002e 03D1     		bne	.L61
1323:C:/StellarisWare/driverlib\usb.c ****         {
1324:C:/StellarisWare/driverlib\usb.c ****             ulDataToggle = USB_RXCSRH1_DT;
 1560              		.loc 1 1324 0
 1561 0030 4FF00203 		mov	r3, #2
 1562 0034 7B61     		str	r3, [r7, #20]
 1563 0036 02E0     		b	.L59
 1564              	.L61:
1325:C:/StellarisWare/driverlib\usb.c ****         }
1326:C:/StellarisWare/driverlib\usb.c ****         else
1327:C:/StellarisWare/driverlib\usb.c ****         {
1328:C:/StellarisWare/driverlib\usb.c ****             ulDataToggle = USB_TXCSRH1_DT;
 1565              		.loc 1 1328 0
 1566 0038 4FF00103 		mov	r3, #1
 1567 003c 7B61     		str	r3, [r7, #20]
 1568              	.L59:
1329:C:/StellarisWare/driverlib\usb.c ****         }
1330:C:/StellarisWare/driverlib\usb.c ****     }
1331:C:/StellarisWare/driverlib\usb.c **** 
1332:C:/StellarisWare/driverlib\usb.c ****     //
1333:C:/StellarisWare/driverlib\usb.c ****     // Set the data toggle based on the endpoint.
1334:C:/StellarisWare/driverlib\usb.c ****     //
1335:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 1569              		.loc 1 1335 0
 1570 003e BB68     		ldr	r3, [r7, #8]
 1571 0040 002B     		cmp	r3, #0
 1572 0042 18D1     		bne	.L62
1336:C:/StellarisWare/driverlib\usb.c ****     {
1337:C:/StellarisWare/driverlib\usb.c ****         //
1338:C:/StellarisWare/driverlib\usb.c ****         // Set the write enable and the bit value for endpoint zero.
1339:C:/StellarisWare/driverlib\usb.c ****         //
1340:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRH0) =
 1573              		.loc 1 1340 0
 1574 0044 FB68     		ldr	r3, [r7, #12]
 1575 0046 03F58073 		add	r3, r3, #256
 1576 004a 03F10303 		add	r3, r3, #3
 1577 004e 1A46     		mov	r2, r3
1341:C:/StellarisWare/driverlib\usb.c ****             ((HWREGB(ulBase + USB_O_CSRH0) &
 1578              		.loc 1 1341 0
 1579 0050 FB68     		ldr	r3, [r7, #12]
 1580 0052 03F58073 		add	r3, r3, #256
 1581 0056 03F10303 		add	r3, r3, #3
 1582 005a 1B78     		ldrb	r3, [r3, #0]
 1583 005c DBB2     		uxtb	r3, r3
1340:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRH0) =
 1584              		.loc 1 1340 0
 1585 005e 23F00603 		bic	r3, r3, #6
 1586 0062 D9B2     		uxtb	r1, r3
 1587 0064 7B69     		ldr	r3, [r7, #20]
 1588 0066 DBB2     		uxtb	r3, r3
 1589 0068 0B43     		orrs	r3, r3, r1
 1590 006a DBB2     		uxtb	r3, r3
 1591 006c 43F00403 		orr	r3, r3, #4
 1592 0070 DBB2     		uxtb	r3, r3
 1593 0072 1370     		strb	r3, [r2, #0]
 1594 0074 3BE0     		b	.L58
 1595              	.L62:
1342:C:/StellarisWare/driverlib\usb.c ****               ~(USB_CSRH0_DTWE | USB_CSRH0_DT)) |
1343:C:/StellarisWare/driverlib\usb.c ****              (ulDataToggle | USB_CSRH0_DTWE));
1344:C:/StellarisWare/driverlib\usb.c ****     }
1345:C:/StellarisWare/driverlib\usb.c ****     else if(ulFlags == USB_EP_HOST_IN)
 1596              		.loc 1 1345 0
 1597 0076 3B68     		ldr	r3, [r7, #0]
 1598 0078 002B     		cmp	r3, #0
 1599 007a 1CD1     		bne	.L64
1346:C:/StellarisWare/driverlib\usb.c ****     {
1347:C:/StellarisWare/driverlib\usb.c ****         //
1348:C:/StellarisWare/driverlib\usb.c ****         // Set the Write enable and the bit value for an IN endpoint.
1349:C:/StellarisWare/driverlib\usb.c ****         //
1350:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRH1 + EP_OFFSET(ulEndpoint)) =
 1600              		.loc 1 1350 0
 1601 007c FA68     		ldr	r2, [r7, #12]
 1602 007e BB68     		ldr	r3, [r7, #8]
 1603 0080 D318     		adds	r3, r2, r3
 1604 0082 03F58273 		add	r3, r3, #260
 1605 0086 03F10303 		add	r3, r3, #3
 1606 008a 1A46     		mov	r2, r3
1351:C:/StellarisWare/driverlib\usb.c ****             ((HWREGB(ulBase + USB_O_RXCSRH1 + EP_OFFSET(ulEndpoint)) &
 1607              		.loc 1 1351 0
 1608 008c F968     		ldr	r1, [r7, #12]
 1609 008e BB68     		ldr	r3, [r7, #8]
 1610 0090 CB18     		adds	r3, r1, r3
 1611 0092 03F58273 		add	r3, r3, #260
 1612 0096 03F10303 		add	r3, r3, #3
 1613 009a 1B78     		ldrb	r3, [r3, #0]
 1614 009c DBB2     		uxtb	r3, r3
1350:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRH1 + EP_OFFSET(ulEndpoint)) =
 1615              		.loc 1 1350 0
 1616 009e 23F00603 		bic	r3, r3, #6
 1617 00a2 D9B2     		uxtb	r1, r3
 1618 00a4 7B69     		ldr	r3, [r7, #20]
 1619 00a6 DBB2     		uxtb	r3, r3
 1620 00a8 0B43     		orrs	r3, r3, r1
 1621 00aa DBB2     		uxtb	r3, r3
 1622 00ac 43F00403 		orr	r3, r3, #4
 1623 00b0 DBB2     		uxtb	r3, r3
 1624 00b2 1370     		strb	r3, [r2, #0]
 1625 00b4 1BE0     		b	.L58
 1626              	.L64:
1352:C:/StellarisWare/driverlib\usb.c ****               ~(USB_RXCSRH1_DTWE | USB_RXCSRH1_DT)) |
1353:C:/StellarisWare/driverlib\usb.c ****              (ulDataToggle | USB_RXCSRH1_DTWE));
1354:C:/StellarisWare/driverlib\usb.c ****     }
1355:C:/StellarisWare/driverlib\usb.c ****     else
1356:C:/StellarisWare/driverlib\usb.c ****     {
1357:C:/StellarisWare/driverlib\usb.c ****         //
1358:C:/StellarisWare/driverlib\usb.c ****         // Set the Write enable and the bit value for an OUT endpoint.
1359:C:/StellarisWare/driverlib\usb.c ****         //
1360:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRH1 + EP_OFFSET(ulEndpoint)) =
 1627              		.loc 1 1360 0
 1628 00b6 FA68     		ldr	r2, [r7, #12]
 1629 00b8 BB68     		ldr	r3, [r7, #8]
 1630 00ba D318     		adds	r3, r2, r3
 1631 00bc 03F58073 		add	r3, r3, #256
 1632 00c0 03F10303 		add	r3, r3, #3
 1633 00c4 1A46     		mov	r2, r3
1361:C:/StellarisWare/driverlib\usb.c ****             ((HWREGB(ulBase + USB_O_TXCSRH1 + EP_OFFSET(ulEndpoint)) &
 1634              		.loc 1 1361 0
 1635 00c6 F968     		ldr	r1, [r7, #12]
 1636 00c8 BB68     		ldr	r3, [r7, #8]
 1637 00ca CB18     		adds	r3, r1, r3
 1638 00cc 03F58073 		add	r3, r3, #256
 1639 00d0 03F10303 		add	r3, r3, #3
 1640 00d4 1B78     		ldrb	r3, [r3, #0]
 1641 00d6 DBB2     		uxtb	r3, r3
1360:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRH1 + EP_OFFSET(ulEndpoint)) =
 1642              		.loc 1 1360 0
 1643 00d8 23F00303 		bic	r3, r3, #3
 1644 00dc D9B2     		uxtb	r1, r3
 1645 00de 7B69     		ldr	r3, [r7, #20]
 1646 00e0 DBB2     		uxtb	r3, r3
 1647 00e2 0B43     		orrs	r3, r3, r1
 1648 00e4 DBB2     		uxtb	r3, r3
 1649 00e6 43F00203 		orr	r3, r3, #2
 1650 00ea DBB2     		uxtb	r3, r3
 1651 00ec 1370     		strb	r3, [r2, #0]
 1652              	.L58:
1362:C:/StellarisWare/driverlib\usb.c ****               ~(USB_TXCSRH1_DTWE | USB_TXCSRH1_DT)) |
1363:C:/StellarisWare/driverlib\usb.c ****              (ulDataToggle | USB_TXCSRH1_DTWE));
1364:C:/StellarisWare/driverlib\usb.c ****     }
1365:C:/StellarisWare/driverlib\usb.c **** }
 1653              		.loc 1 1365 0
 1654 00ee 07F11C07 		add	r7, r7, #28
 1655 00f2 BD46     		mov	sp, r7
 1656 00f4 80BC     		pop	{r7}
 1657 00f6 7047     		bx	lr
 1658              		.cfi_endproc
 1659              	.LFE20:
 1661              		.section	.text.USBEndpointDataToggleClear,"ax",%progbits
 1662              		.align	2
 1663              		.global	USBEndpointDataToggleClear
 1664              		.thumb
 1665              		.thumb_func
 1667              	USBEndpointDataToggleClear:
 1668              	.LFB21:
1366:C:/StellarisWare/driverlib\usb.c **** 
1367:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1368:C:/StellarisWare/driverlib\usb.c **** //
1369:C:/StellarisWare/driverlib\usb.c **** //! Sets the data toggle on an endpoint to zero.
1370:C:/StellarisWare/driverlib\usb.c **** //!
1371:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1372:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies the endpoint to reset the data toggle.
1373:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies whether to access the IN or OUT endpoint.
1374:C:/StellarisWare/driverlib\usb.c **** //!
1375:C:/StellarisWare/driverlib\usb.c **** //! This function causes the USB controller to clear the data toggle for an
1376:C:/StellarisWare/driverlib\usb.c **** //! endpoint.  This call is not valid for endpoint zero and can be made with
1377:C:/StellarisWare/driverlib\usb.c **** //! host or device controllers.
1378:C:/StellarisWare/driverlib\usb.c **** //!
1379:C:/StellarisWare/driverlib\usb.c **** //! The \e ulFlags parameter should be one of \b USB_EP_HOST_OUT,
1380:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_HOST_IN, \b USB_EP_DEV_OUT, or \b USB_EP_DEV_IN.
1381:C:/StellarisWare/driverlib\usb.c **** //!
1382:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1383:C:/StellarisWare/driverlib\usb.c **** //
1384:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1385:C:/StellarisWare/driverlib\usb.c **** void
1386:C:/StellarisWare/driverlib\usb.c **** USBEndpointDataToggleClear(unsigned long ulBase, unsigned long ulEndpoint,
1387:C:/StellarisWare/driverlib\usb.c ****                            unsigned long ulFlags)
1388:C:/StellarisWare/driverlib\usb.c **** {
 1669              		.loc 1 1388 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 16
 1672              		@ frame_needed = 1, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
 1674 0000 80B4     		push	{r7}
 1675              	.LCFI63:
 1676              		.cfi_def_cfa_offset 4
 1677              		.cfi_offset 7, -4
 1678 0002 85B0     		sub	sp, sp, #20
 1679              	.LCFI64:
 1680              		.cfi_def_cfa_offset 24
 1681 0004 00AF     		add	r7, sp, #0
 1682              	.LCFI65:
 1683              		.cfi_def_cfa_register 7
 1684 0006 F860     		str	r0, [r7, #12]
 1685 0008 B960     		str	r1, [r7, #8]
 1686 000a 7A60     		str	r2, [r7, #4]
1389:C:/StellarisWare/driverlib\usb.c ****     //
1390:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1391:C:/StellarisWare/driverlib\usb.c ****     //
1392:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1393:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
1394:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
1395:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
1396:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
1397:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
1398:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
1399:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
1400:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
1401:C:/StellarisWare/driverlib\usb.c **** 
1402:C:/StellarisWare/driverlib\usb.c ****     //
1403:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit or receive data toggle should be cleared.
1404:C:/StellarisWare/driverlib\usb.c ****     //
1405:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_EP_HOST_OUT | USB_EP_DEV_IN))
 1687              		.loc 1 1405 0
 1688 000c 7B68     		ldr	r3, [r7, #4]
 1689 000e 03F40053 		and	r3, r3, #8192
 1690 0012 002B     		cmp	r3, #0
 1691 0014 10D0     		beq	.L66
1406:C:/StellarisWare/driverlib\usb.c ****     {
1407:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1692              		.loc 1 1407 0
 1693 0016 FA68     		ldr	r2, [r7, #12]
 1694 0018 BB68     		ldr	r3, [r7, #8]
 1695 001a D318     		adds	r3, r2, r3
 1696 001c 03F58173 		add	r3, r3, #258
 1697 0020 F968     		ldr	r1, [r7, #12]
 1698 0022 BA68     		ldr	r2, [r7, #8]
 1699 0024 8A18     		adds	r2, r1, r2
 1700 0026 02F58172 		add	r2, r2, #258
 1701 002a 1278     		ldrb	r2, [r2, #0]
 1702 002c D2B2     		uxtb	r2, r2
 1703 002e 42F04002 		orr	r2, r2, #64
 1704 0032 D2B2     		uxtb	r2, r2
 1705 0034 1A70     		strb	r2, [r3, #0]
 1706 0036 0FE0     		b	.L65
 1707              	.L66:
1408:C:/StellarisWare/driverlib\usb.c ****             USB_TXCSRL1_CLRDT;
1409:C:/StellarisWare/driverlib\usb.c ****     }
1410:C:/StellarisWare/driverlib\usb.c ****     else
1411:C:/StellarisWare/driverlib\usb.c ****     {
1412:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1708              		.loc 1 1412 0
 1709 0038 FA68     		ldr	r2, [r7, #12]
 1710 003a BB68     		ldr	r3, [r7, #8]
 1711 003c D318     		adds	r3, r2, r3
 1712 003e 03F58373 		add	r3, r3, #262
 1713 0042 F968     		ldr	r1, [r7, #12]
 1714 0044 BA68     		ldr	r2, [r7, #8]
 1715 0046 8A18     		adds	r2, r1, r2
 1716 0048 02F58372 		add	r2, r2, #262
 1717 004c 1278     		ldrb	r2, [r2, #0]
 1718 004e D2B2     		uxtb	r2, r2
 1719 0050 62F07F02 		orn	r2, r2, #127
 1720 0054 D2B2     		uxtb	r2, r2
 1721 0056 1A70     		strb	r2, [r3, #0]
 1722              	.L65:
1413:C:/StellarisWare/driverlib\usb.c ****             USB_RXCSRL1_CLRDT;
1414:C:/StellarisWare/driverlib\usb.c ****     }
1415:C:/StellarisWare/driverlib\usb.c **** }
 1723              		.loc 1 1415 0
 1724 0058 07F11407 		add	r7, r7, #20
 1725 005c BD46     		mov	sp, r7
 1726 005e 80BC     		pop	{r7}
 1727 0060 7047     		bx	lr
 1728              		.cfi_endproc
 1729              	.LFE21:
 1731 0062 00BF     		.section	.text.USBDevEndpointStall,"ax",%progbits
 1732              		.align	2
 1733              		.global	USBDevEndpointStall
 1734              		.thumb
 1735              		.thumb_func
 1737              	USBDevEndpointStall:
 1738              	.LFB22:
1416:C:/StellarisWare/driverlib\usb.c **** 
1417:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1418:C:/StellarisWare/driverlib\usb.c **** //
1419:C:/StellarisWare/driverlib\usb.c **** //! Stalls the specified endpoint in device mode.
1420:C:/StellarisWare/driverlib\usb.c **** //!
1421:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1422:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies the endpoint to stall.
1423:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies whether to stall the IN or OUT endpoint.
1424:C:/StellarisWare/driverlib\usb.c **** //!
1425:C:/StellarisWare/driverlib\usb.c **** //! This function causes the endpoint number passed in to go into a stall
1426:C:/StellarisWare/driverlib\usb.c **** //! condition.  If the \e ulFlags parameter is \b USB_EP_DEV_IN, then the stall
1427:C:/StellarisWare/driverlib\usb.c **** //! is issued on the IN portion of this endpoint.  If the \e ulFlags parameter
1428:C:/StellarisWare/driverlib\usb.c **** //! is \b USB_EP_DEV_OUT, then the stall is issued on the OUT portion of this
1429:C:/StellarisWare/driverlib\usb.c **** //! endpoint.
1430:C:/StellarisWare/driverlib\usb.c **** //!
1431:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1432:C:/StellarisWare/driverlib\usb.c **** //!
1433:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1434:C:/StellarisWare/driverlib\usb.c **** //
1435:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1436:C:/StellarisWare/driverlib\usb.c **** void
1437:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointStall(unsigned long ulBase, unsigned long ulEndpoint,
1438:C:/StellarisWare/driverlib\usb.c ****                     unsigned long ulFlags)
1439:C:/StellarisWare/driverlib\usb.c **** {
 1739              		.loc 1 1439 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 16
 1742              		@ frame_needed = 1, uses_anonymous_args = 0
 1743              		@ link register save eliminated.
 1744 0000 80B4     		push	{r7}
 1745              	.LCFI66:
 1746              		.cfi_def_cfa_offset 4
 1747              		.cfi_offset 7, -4
 1748 0002 85B0     		sub	sp, sp, #20
 1749              	.LCFI67:
 1750              		.cfi_def_cfa_offset 24
 1751 0004 00AF     		add	r7, sp, #0
 1752              	.LCFI68:
 1753              		.cfi_def_cfa_register 7
 1754 0006 F860     		str	r0, [r7, #12]
 1755 0008 B960     		str	r1, [r7, #8]
 1756 000a 7A60     		str	r2, [r7, #4]
1440:C:/StellarisWare/driverlib\usb.c ****     //
1441:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1442:C:/StellarisWare/driverlib\usb.c ****     //
1443:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1444:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0)
1445:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1446:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1447:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1448:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1449:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1450:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1451:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1452:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1453:C:/StellarisWare/driverlib\usb.c **** 
1454:C:/StellarisWare/driverlib\usb.c ****     //
1455:C:/StellarisWare/driverlib\usb.c ****     // Determine how to stall this endpoint.
1456:C:/StellarisWare/driverlib\usb.c ****     //
1457:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 1757              		.loc 1 1457 0
 1758 000c BB68     		ldr	r3, [r7, #8]
 1759 000e 002B     		cmp	r3, #0
 1760 0010 0CD1     		bne	.L69
1458:C:/StellarisWare/driverlib\usb.c ****     {
1459:C:/StellarisWare/driverlib\usb.c ****         //
1460:C:/StellarisWare/driverlib\usb.c ****         // Perform a stall on endpoint zero.
1461:C:/StellarisWare/driverlib\usb.c ****         //
1462:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRL0) |=
 1761              		.loc 1 1462 0
 1762 0012 FB68     		ldr	r3, [r7, #12]
 1763 0014 03F58173 		add	r3, r3, #258
 1764 0018 FA68     		ldr	r2, [r7, #12]
 1765 001a 02F58172 		add	r2, r2, #258
 1766 001e 1278     		ldrb	r2, [r2, #0]
 1767 0020 D2B2     		uxtb	r2, r2
 1768 0022 42F06002 		orr	r2, r2, #96
 1769 0026 D2B2     		uxtb	r2, r2
 1770 0028 1A70     		strb	r2, [r3, #0]
 1771 002a 24E0     		b	.L68
 1772              	.L69:
1463:C:/StellarisWare/driverlib\usb.c ****             (USB_CSRL0_STALL | USB_CSRL0_RXRDYC);
1464:C:/StellarisWare/driverlib\usb.c ****     }
1465:C:/StellarisWare/driverlib\usb.c ****     else if(ulFlags == USB_EP_DEV_IN)
 1773              		.loc 1 1465 0
 1774 002c 7B68     		ldr	r3, [r7, #4]
 1775 002e B3F5005F 		cmp	r3, #8192
 1776 0032 10D1     		bne	.L71
1466:C:/StellarisWare/driverlib\usb.c ****     {
1467:C:/StellarisWare/driverlib\usb.c ****         //
1468:C:/StellarisWare/driverlib\usb.c ****         // Perform a stall on an IN endpoint.
1469:C:/StellarisWare/driverlib\usb.c ****         //
1470:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1777              		.loc 1 1470 0
 1778 0034 FA68     		ldr	r2, [r7, #12]
 1779 0036 BB68     		ldr	r3, [r7, #8]
 1780 0038 D318     		adds	r3, r2, r3
 1781 003a 03F58173 		add	r3, r3, #258
 1782 003e F968     		ldr	r1, [r7, #12]
 1783 0040 BA68     		ldr	r2, [r7, #8]
 1784 0042 8A18     		adds	r2, r1, r2
 1785 0044 02F58172 		add	r2, r2, #258
 1786 0048 1278     		ldrb	r2, [r2, #0]
 1787 004a D2B2     		uxtb	r2, r2
 1788 004c 42F01002 		orr	r2, r2, #16
 1789 0050 D2B2     		uxtb	r2, r2
 1790 0052 1A70     		strb	r2, [r3, #0]
 1791 0054 0FE0     		b	.L68
 1792              	.L71:
1471:C:/StellarisWare/driverlib\usb.c ****             USB_TXCSRL1_STALL;
1472:C:/StellarisWare/driverlib\usb.c ****     }
1473:C:/StellarisWare/driverlib\usb.c ****     else
1474:C:/StellarisWare/driverlib\usb.c ****     {
1475:C:/StellarisWare/driverlib\usb.c ****         //
1476:C:/StellarisWare/driverlib\usb.c ****         // Perform a stall on an OUT endpoint.
1477:C:/StellarisWare/driverlib\usb.c ****         //
1478:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1793              		.loc 1 1478 0
 1794 0056 FA68     		ldr	r2, [r7, #12]
 1795 0058 BB68     		ldr	r3, [r7, #8]
 1796 005a D318     		adds	r3, r2, r3
 1797 005c 03F58373 		add	r3, r3, #262
 1798 0060 F968     		ldr	r1, [r7, #12]
 1799 0062 BA68     		ldr	r2, [r7, #8]
 1800 0064 8A18     		adds	r2, r1, r2
 1801 0066 02F58372 		add	r2, r2, #262
 1802 006a 1278     		ldrb	r2, [r2, #0]
 1803 006c D2B2     		uxtb	r2, r2
 1804 006e 42F02002 		orr	r2, r2, #32
 1805 0072 D2B2     		uxtb	r2, r2
 1806 0074 1A70     		strb	r2, [r3, #0]
 1807              	.L68:
1479:C:/StellarisWare/driverlib\usb.c ****             USB_RXCSRL1_STALL;
1480:C:/StellarisWare/driverlib\usb.c ****     }
1481:C:/StellarisWare/driverlib\usb.c **** }
 1808              		.loc 1 1481 0
 1809 0076 07F11407 		add	r7, r7, #20
 1810 007a BD46     		mov	sp, r7
 1811 007c 80BC     		pop	{r7}
 1812 007e 7047     		bx	lr
 1813              		.cfi_endproc
 1814              	.LFE22:
 1816              		.section	.text.USBDevEndpointStallClear,"ax",%progbits
 1817              		.align	2
 1818              		.global	USBDevEndpointStallClear
 1819              		.thumb
 1820              		.thumb_func
 1822              	USBDevEndpointStallClear:
 1823              	.LFB23:
1482:C:/StellarisWare/driverlib\usb.c **** 
1483:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1484:C:/StellarisWare/driverlib\usb.c **** //
1485:C:/StellarisWare/driverlib\usb.c **** //! Clears the stall condition on the specified endpoint in device mode.
1486:C:/StellarisWare/driverlib\usb.c **** //!
1487:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1488:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies which endpoint to remove the stall condition.
1489:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies whether to remove the stall condition from the IN
1490:C:/StellarisWare/driverlib\usb.c **** //! or the OUT portion of this endpoint.
1491:C:/StellarisWare/driverlib\usb.c **** //!
1492:C:/StellarisWare/driverlib\usb.c **** //! This function causes the endpoint number passed in to exit the stall
1493:C:/StellarisWare/driverlib\usb.c **** //! condition.  If the \e ulFlags parameter is \b USB_EP_DEV_IN, then the stall
1494:C:/StellarisWare/driverlib\usb.c **** //! is cleared on the IN portion of this endpoint.  If the \e ulFlags parameter
1495:C:/StellarisWare/driverlib\usb.c **** //! is \b USB_EP_DEV_OUT, then the stall is cleared on the OUT portion of this
1496:C:/StellarisWare/driverlib\usb.c **** //! endpoint.
1497:C:/StellarisWare/driverlib\usb.c **** //!
1498:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1499:C:/StellarisWare/driverlib\usb.c **** //!
1500:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1501:C:/StellarisWare/driverlib\usb.c **** //
1502:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1503:C:/StellarisWare/driverlib\usb.c **** void
1504:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointStallClear(unsigned long ulBase, unsigned long ulEndpoint,
1505:C:/StellarisWare/driverlib\usb.c ****                          unsigned long ulFlags)
1506:C:/StellarisWare/driverlib\usb.c **** {
 1824              		.loc 1 1506 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 16
 1827              		@ frame_needed = 1, uses_anonymous_args = 0
 1828              		@ link register save eliminated.
 1829 0000 80B4     		push	{r7}
 1830              	.LCFI69:
 1831              		.cfi_def_cfa_offset 4
 1832              		.cfi_offset 7, -4
 1833 0002 85B0     		sub	sp, sp, #20
 1834              	.LCFI70:
 1835              		.cfi_def_cfa_offset 24
 1836 0004 00AF     		add	r7, sp, #0
 1837              	.LCFI71:
 1838              		.cfi_def_cfa_register 7
 1839 0006 F860     		str	r0, [r7, #12]
 1840 0008 B960     		str	r1, [r7, #8]
 1841 000a 7A60     		str	r2, [r7, #4]
1507:C:/StellarisWare/driverlib\usb.c ****     //
1508:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1509:C:/StellarisWare/driverlib\usb.c ****     //
1510:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1511:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1512:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1513:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1514:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1515:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1516:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1517:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1518:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1519:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0)
1520:C:/StellarisWare/driverlib\usb.c **** 
1521:C:/StellarisWare/driverlib\usb.c ****     //
1522:C:/StellarisWare/driverlib\usb.c ****     // Determine how to clear the stall on this endpoint.
1523:C:/StellarisWare/driverlib\usb.c ****     //
1524:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 1842              		.loc 1 1524 0
 1843 000c BB68     		ldr	r3, [r7, #8]
 1844 000e 002B     		cmp	r3, #0
 1845 0010 0CD1     		bne	.L73
1525:C:/StellarisWare/driverlib\usb.c ****     {
1526:C:/StellarisWare/driverlib\usb.c ****         //
1527:C:/StellarisWare/driverlib\usb.c ****         // Clear the stall on endpoint zero.
1528:C:/StellarisWare/driverlib\usb.c ****         //
1529:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRL0) &= ~USB_CSRL0_STALLED;
 1846              		.loc 1 1529 0
 1847 0012 FB68     		ldr	r3, [r7, #12]
 1848 0014 03F58173 		add	r3, r3, #258
 1849 0018 FA68     		ldr	r2, [r7, #12]
 1850 001a 02F58172 		add	r2, r2, #258
 1851 001e 1278     		ldrb	r2, [r2, #0]
 1852 0020 D2B2     		uxtb	r2, r2
 1853 0022 22F00402 		bic	r2, r2, #4
 1854 0026 D2B2     		uxtb	r2, r2
 1855 0028 1A70     		strb	r2, [r3, #0]
 1856 002a 44E0     		b	.L72
 1857              	.L73:
1530:C:/StellarisWare/driverlib\usb.c ****     }
1531:C:/StellarisWare/driverlib\usb.c ****     else if(ulFlags == USB_EP_DEV_IN)
 1858              		.loc 1 1531 0
 1859 002c 7B68     		ldr	r3, [r7, #4]
 1860 002e B3F5005F 		cmp	r3, #8192
 1861 0032 20D1     		bne	.L75
1532:C:/StellarisWare/driverlib\usb.c ****     {
1533:C:/StellarisWare/driverlib\usb.c ****         //
1534:C:/StellarisWare/driverlib\usb.c ****         // Clear the stall on an IN endpoint.
1535:C:/StellarisWare/driverlib\usb.c ****         //
1536:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1862              		.loc 1 1536 0
 1863 0034 FA68     		ldr	r2, [r7, #12]
 1864 0036 BB68     		ldr	r3, [r7, #8]
 1865 0038 D318     		adds	r3, r2, r3
 1866 003a 03F58173 		add	r3, r3, #258
 1867 003e F968     		ldr	r1, [r7, #12]
 1868 0040 BA68     		ldr	r2, [r7, #8]
 1869 0042 8A18     		adds	r2, r1, r2
 1870 0044 02F58172 		add	r2, r2, #258
 1871 0048 1278     		ldrb	r2, [r2, #0]
 1872 004a D2B2     		uxtb	r2, r2
 1873 004c 22F03002 		bic	r2, r2, #48
 1874 0050 D2B2     		uxtb	r2, r2
 1875 0052 1A70     		strb	r2, [r3, #0]
1537:C:/StellarisWare/driverlib\usb.c ****             ~(USB_TXCSRL1_STALL | USB_TXCSRL1_STALLED);
1538:C:/StellarisWare/driverlib\usb.c **** 
1539:C:/StellarisWare/driverlib\usb.c ****         //
1540:C:/StellarisWare/driverlib\usb.c ****         // Reset the data toggle.
1541:C:/StellarisWare/driverlib\usb.c ****         //
1542:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1876              		.loc 1 1542 0
 1877 0054 FA68     		ldr	r2, [r7, #12]
 1878 0056 BB68     		ldr	r3, [r7, #8]
 1879 0058 D318     		adds	r3, r2, r3
 1880 005a 03F58173 		add	r3, r3, #258
 1881 005e F968     		ldr	r1, [r7, #12]
 1882 0060 BA68     		ldr	r2, [r7, #8]
 1883 0062 8A18     		adds	r2, r1, r2
 1884 0064 02F58172 		add	r2, r2, #258
 1885 0068 1278     		ldrb	r2, [r2, #0]
 1886 006a D2B2     		uxtb	r2, r2
 1887 006c 42F04002 		orr	r2, r2, #64
 1888 0070 D2B2     		uxtb	r2, r2
 1889 0072 1A70     		strb	r2, [r3, #0]
 1890 0074 1FE0     		b	.L72
 1891              	.L75:
1543:C:/StellarisWare/driverlib\usb.c ****             USB_TXCSRL1_CLRDT;
1544:C:/StellarisWare/driverlib\usb.c ****     }
1545:C:/StellarisWare/driverlib\usb.c ****     else
1546:C:/StellarisWare/driverlib\usb.c ****     {
1547:C:/StellarisWare/driverlib\usb.c ****         //
1548:C:/StellarisWare/driverlib\usb.c ****         // Clear the stall on an OUT endpoint.
1549:C:/StellarisWare/driverlib\usb.c ****         //
1550:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 1892              		.loc 1 1550 0
 1893 0076 FA68     		ldr	r2, [r7, #12]
 1894 0078 BB68     		ldr	r3, [r7, #8]
 1895 007a D318     		adds	r3, r2, r3
 1896 007c 03F58373 		add	r3, r3, #262
 1897 0080 F968     		ldr	r1, [r7, #12]
 1898 0082 BA68     		ldr	r2, [r7, #8]
 1899 0084 8A18     		adds	r2, r1, r2
 1900 0086 02F58372 		add	r2, r2, #262
 1901 008a 1278     		ldrb	r2, [r2, #0]
 1902 008c D2B2     		uxtb	r2, r2
 1903 008e 22F06002 		bic	r2, r2, #96
 1904 0092 D2B2     		uxtb	r2, r2
 1905 0094 1A70     		strb	r2, [r3, #0]
1551:C:/StellarisWare/driverlib\usb.c ****             ~(USB_RXCSRL1_STALL | USB_RXCSRL1_STALLED);
1552:C:/StellarisWare/driverlib\usb.c **** 
1553:C:/StellarisWare/driverlib\usb.c ****         //
1554:C:/StellarisWare/driverlib\usb.c ****         // Reset the data toggle.
1555:C:/StellarisWare/driverlib\usb.c ****         //
1556:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 1906              		.loc 1 1556 0
 1907 0096 FA68     		ldr	r2, [r7, #12]
 1908 0098 BB68     		ldr	r3, [r7, #8]
 1909 009a D318     		adds	r3, r2, r3
 1910 009c 03F58373 		add	r3, r3, #262
 1911 00a0 F968     		ldr	r1, [r7, #12]
 1912 00a2 BA68     		ldr	r2, [r7, #8]
 1913 00a4 8A18     		adds	r2, r1, r2
 1914 00a6 02F58372 		add	r2, r2, #262
 1915 00aa 1278     		ldrb	r2, [r2, #0]
 1916 00ac D2B2     		uxtb	r2, r2
 1917 00ae 62F07F02 		orn	r2, r2, #127
 1918 00b2 D2B2     		uxtb	r2, r2
 1919 00b4 1A70     		strb	r2, [r3, #0]
 1920              	.L72:
1557:C:/StellarisWare/driverlib\usb.c ****             USB_RXCSRL1_CLRDT;
1558:C:/StellarisWare/driverlib\usb.c ****     }
1559:C:/StellarisWare/driverlib\usb.c **** }
 1921              		.loc 1 1559 0
 1922 00b6 07F11407 		add	r7, r7, #20
 1923 00ba BD46     		mov	sp, r7
 1924 00bc 80BC     		pop	{r7}
 1925 00be 7047     		bx	lr
 1926              		.cfi_endproc
 1927              	.LFE23:
 1929              		.section	.text.USBDevConnect,"ax",%progbits
 1930              		.align	2
 1931              		.global	USBDevConnect
 1932              		.thumb
 1933              		.thumb_func
 1935              	USBDevConnect:
 1936              	.LFB24:
1560:C:/StellarisWare/driverlib\usb.c **** 
1561:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1562:C:/StellarisWare/driverlib\usb.c **** //
1563:C:/StellarisWare/driverlib\usb.c **** //! Connects the USB controller to the bus in device mode.
1564:C:/StellarisWare/driverlib\usb.c **** //!
1565:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1566:C:/StellarisWare/driverlib\usb.c **** //!
1567:C:/StellarisWare/driverlib\usb.c **** //! This function causes the soft connect feature of the USB controller to
1568:C:/StellarisWare/driverlib\usb.c **** //! be enabled.  Call USBDevDisconnect() to remove the USB device from the bus.
1569:C:/StellarisWare/driverlib\usb.c **** //!
1570:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1571:C:/StellarisWare/driverlib\usb.c **** //!
1572:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1573:C:/StellarisWare/driverlib\usb.c **** //
1574:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1575:C:/StellarisWare/driverlib\usb.c **** void
1576:C:/StellarisWare/driverlib\usb.c **** USBDevConnect(unsigned long ulBase)
1577:C:/StellarisWare/driverlib\usb.c **** {
 1937              		.loc 1 1577 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 8
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942 0000 80B4     		push	{r7}
 1943              	.LCFI72:
 1944              		.cfi_def_cfa_offset 4
 1945              		.cfi_offset 7, -4
 1946 0002 83B0     		sub	sp, sp, #12
 1947              	.LCFI73:
 1948              		.cfi_def_cfa_offset 16
 1949 0004 00AF     		add	r7, sp, #0
 1950              	.LCFI74:
 1951              		.cfi_def_cfa_register 7
 1952 0006 7860     		str	r0, [r7, #4]
1578:C:/StellarisWare/driverlib\usb.c ****     //
1579:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1580:C:/StellarisWare/driverlib\usb.c ****     //
1581:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1582:C:/StellarisWare/driverlib\usb.c **** 
1583:C:/StellarisWare/driverlib\usb.c ****     //
1584:C:/StellarisWare/driverlib\usb.c ****     // Enable connection to the USB bus.
1585:C:/StellarisWare/driverlib\usb.c ****     //
1586:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_POWER) |= USB_POWER_SOFTCONN;
 1953              		.loc 1 1586 0
 1954 0008 7B68     		ldr	r3, [r7, #4]
 1955 000a 03F10103 		add	r3, r3, #1
 1956 000e 7A68     		ldr	r2, [r7, #4]
 1957 0010 02F10102 		add	r2, r2, #1
 1958 0014 1278     		ldrb	r2, [r2, #0]
 1959 0016 D2B2     		uxtb	r2, r2
 1960 0018 42F04002 		orr	r2, r2, #64
 1961 001c D2B2     		uxtb	r2, r2
 1962 001e 1A70     		strb	r2, [r3, #0]
1587:C:/StellarisWare/driverlib\usb.c **** }
 1963              		.loc 1 1587 0
 1964 0020 07F10C07 		add	r7, r7, #12
 1965 0024 BD46     		mov	sp, r7
 1966 0026 80BC     		pop	{r7}
 1967 0028 7047     		bx	lr
 1968              		.cfi_endproc
 1969              	.LFE24:
 1971 002a 00BF     		.section	.text.USBDevDisconnect,"ax",%progbits
 1972              		.align	2
 1973              		.global	USBDevDisconnect
 1974              		.thumb
 1975              		.thumb_func
 1977              	USBDevDisconnect:
 1978              	.LFB25:
1588:C:/StellarisWare/driverlib\usb.c **** 
1589:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1590:C:/StellarisWare/driverlib\usb.c **** //
1591:C:/StellarisWare/driverlib\usb.c **** //! Removes the USB controller from the bus in device mode.
1592:C:/StellarisWare/driverlib\usb.c **** //!
1593:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1594:C:/StellarisWare/driverlib\usb.c **** //!
1595:C:/StellarisWare/driverlib\usb.c **** //! This function causes the soft connect feature of the USB controller to
1596:C:/StellarisWare/driverlib\usb.c **** //! remove the device from the USB bus.  A call to USBDevConnect() is needed to
1597:C:/StellarisWare/driverlib\usb.c **** //! reconnect to the bus.
1598:C:/StellarisWare/driverlib\usb.c **** //!
1599:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1600:C:/StellarisWare/driverlib\usb.c **** //!
1601:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1602:C:/StellarisWare/driverlib\usb.c **** //
1603:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1604:C:/StellarisWare/driverlib\usb.c **** void
1605:C:/StellarisWare/driverlib\usb.c **** USBDevDisconnect(unsigned long ulBase)
1606:C:/StellarisWare/driverlib\usb.c **** {
 1979              		.loc 1 1606 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 8
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983              		@ link register save eliminated.
 1984 0000 80B4     		push	{r7}
 1985              	.LCFI75:
 1986              		.cfi_def_cfa_offset 4
 1987              		.cfi_offset 7, -4
 1988 0002 83B0     		sub	sp, sp, #12
 1989              	.LCFI76:
 1990              		.cfi_def_cfa_offset 16
 1991 0004 00AF     		add	r7, sp, #0
 1992              	.LCFI77:
 1993              		.cfi_def_cfa_register 7
 1994 0006 7860     		str	r0, [r7, #4]
1607:C:/StellarisWare/driverlib\usb.c ****     //
1608:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1609:C:/StellarisWare/driverlib\usb.c ****     //
1610:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1611:C:/StellarisWare/driverlib\usb.c **** 
1612:C:/StellarisWare/driverlib\usb.c ****     //
1613:C:/StellarisWare/driverlib\usb.c ****     // Disable connection to the USB bus.
1614:C:/StellarisWare/driverlib\usb.c ****     //
1615:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_POWER) &= (~USB_POWER_SOFTCONN);
 1995              		.loc 1 1615 0
 1996 0008 7B68     		ldr	r3, [r7, #4]
 1997 000a 03F10103 		add	r3, r3, #1
 1998 000e 7A68     		ldr	r2, [r7, #4]
 1999 0010 02F10102 		add	r2, r2, #1
 2000 0014 1278     		ldrb	r2, [r2, #0]
 2001 0016 D2B2     		uxtb	r2, r2
 2002 0018 22F04002 		bic	r2, r2, #64
 2003 001c D2B2     		uxtb	r2, r2
 2004 001e 1A70     		strb	r2, [r3, #0]
1616:C:/StellarisWare/driverlib\usb.c **** }
 2005              		.loc 1 1616 0
 2006 0020 07F10C07 		add	r7, r7, #12
 2007 0024 BD46     		mov	sp, r7
 2008 0026 80BC     		pop	{r7}
 2009 0028 7047     		bx	lr
 2010              		.cfi_endproc
 2011              	.LFE25:
 2013 002a 00BF     		.section	.text.USBDevAddrSet,"ax",%progbits
 2014              		.align	2
 2015              		.global	USBDevAddrSet
 2016              		.thumb
 2017              		.thumb_func
 2019              	USBDevAddrSet:
 2020              	.LFB26:
1617:C:/StellarisWare/driverlib\usb.c **** 
1618:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1619:C:/StellarisWare/driverlib\usb.c **** //
1620:C:/StellarisWare/driverlib\usb.c **** //! Sets the address in device mode.
1621:C:/StellarisWare/driverlib\usb.c **** //!
1622:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1623:C:/StellarisWare/driverlib\usb.c **** //! \param ulAddress is the address to use for a device.
1624:C:/StellarisWare/driverlib\usb.c **** //!
1625:C:/StellarisWare/driverlib\usb.c **** //! This function configures the device address on the USB bus.  This address
1626:C:/StellarisWare/driverlib\usb.c **** //! was likely received via a SET ADDRESS command from the host controller.
1627:C:/StellarisWare/driverlib\usb.c **** //!
1628:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1629:C:/StellarisWare/driverlib\usb.c **** //!
1630:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1631:C:/StellarisWare/driverlib\usb.c **** //
1632:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1633:C:/StellarisWare/driverlib\usb.c **** void
1634:C:/StellarisWare/driverlib\usb.c **** USBDevAddrSet(unsigned long ulBase, unsigned long ulAddress)
1635:C:/StellarisWare/driverlib\usb.c **** {
 2021              		.loc 1 1635 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 8
 2024              		@ frame_needed = 1, uses_anonymous_args = 0
 2025              		@ link register save eliminated.
 2026 0000 80B4     		push	{r7}
 2027              	.LCFI78:
 2028              		.cfi_def_cfa_offset 4
 2029              		.cfi_offset 7, -4
 2030 0002 83B0     		sub	sp, sp, #12
 2031              	.LCFI79:
 2032              		.cfi_def_cfa_offset 16
 2033 0004 00AF     		add	r7, sp, #0
 2034              	.LCFI80:
 2035              		.cfi_def_cfa_register 7
 2036 0006 7860     		str	r0, [r7, #4]
 2037 0008 3960     		str	r1, [r7, #0]
1636:C:/StellarisWare/driverlib\usb.c ****     //
1637:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1638:C:/StellarisWare/driverlib\usb.c ****     //
1639:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1640:C:/StellarisWare/driverlib\usb.c **** 
1641:C:/StellarisWare/driverlib\usb.c ****     //
1642:C:/StellarisWare/driverlib\usb.c ****     // Set the function address in the correct location.
1643:C:/StellarisWare/driverlib\usb.c ****     //
1644:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_FADDR) = (unsigned char)ulAddress;
 2038              		.loc 1 1644 0
 2039 000a 7B68     		ldr	r3, [r7, #4]
 2040 000c 3A68     		ldr	r2, [r7, #0]
 2041 000e D2B2     		uxtb	r2, r2
 2042 0010 1A70     		strb	r2, [r3, #0]
1645:C:/StellarisWare/driverlib\usb.c **** }
 2043              		.loc 1 1645 0
 2044 0012 07F10C07 		add	r7, r7, #12
 2045 0016 BD46     		mov	sp, r7
 2046 0018 80BC     		pop	{r7}
 2047 001a 7047     		bx	lr
 2048              		.cfi_endproc
 2049              	.LFE26:
 2051              		.section	.text.USBDevAddrGet,"ax",%progbits
 2052              		.align	2
 2053              		.global	USBDevAddrGet
 2054              		.thumb
 2055              		.thumb_func
 2057              	USBDevAddrGet:
 2058              	.LFB27:
1646:C:/StellarisWare/driverlib\usb.c **** 
1647:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1648:C:/StellarisWare/driverlib\usb.c **** //
1649:C:/StellarisWare/driverlib\usb.c **** //! Returns the current device address in device mode.
1650:C:/StellarisWare/driverlib\usb.c **** //!
1651:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1652:C:/StellarisWare/driverlib\usb.c **** //!
1653:C:/StellarisWare/driverlib\usb.c **** //! This function returns the current device address.  This address was set
1654:C:/StellarisWare/driverlib\usb.c **** //! by a call to USBDevAddrSet().
1655:C:/StellarisWare/driverlib\usb.c **** //!
1656:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
1657:C:/StellarisWare/driverlib\usb.c **** //!
1658:C:/StellarisWare/driverlib\usb.c **** //! \return The current device address.
1659:C:/StellarisWare/driverlib\usb.c **** //
1660:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1661:C:/StellarisWare/driverlib\usb.c **** unsigned long
1662:C:/StellarisWare/driverlib\usb.c **** USBDevAddrGet(unsigned long ulBase)
1663:C:/StellarisWare/driverlib\usb.c **** {
 2059              		.loc 1 1663 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063              		@ link register save eliminated.
 2064 0000 80B4     		push	{r7}
 2065              	.LCFI81:
 2066              		.cfi_def_cfa_offset 4
 2067              		.cfi_offset 7, -4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              	.LCFI82:
 2070              		.cfi_def_cfa_offset 16
 2071 0004 00AF     		add	r7, sp, #0
 2072              	.LCFI83:
 2073              		.cfi_def_cfa_register 7
 2074 0006 7860     		str	r0, [r7, #4]
1664:C:/StellarisWare/driverlib\usb.c ****     //
1665:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1666:C:/StellarisWare/driverlib\usb.c ****     //
1667:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1668:C:/StellarisWare/driverlib\usb.c **** 
1669:C:/StellarisWare/driverlib\usb.c ****     //
1670:C:/StellarisWare/driverlib\usb.c ****     // Return the function address.
1671:C:/StellarisWare/driverlib\usb.c ****     //
1672:C:/StellarisWare/driverlib\usb.c ****     return(HWREGB(ulBase + USB_O_FADDR));
 2075              		.loc 1 1672 0
 2076 0008 7B68     		ldr	r3, [r7, #4]
 2077 000a 1B78     		ldrb	r3, [r3, #0]
 2078 000c DBB2     		uxtb	r3, r3
1673:C:/StellarisWare/driverlib\usb.c **** }
 2079              		.loc 1 1673 0
 2080 000e 1846     		mov	r0, r3
 2081 0010 07F10C07 		add	r7, r7, #12
 2082 0014 BD46     		mov	sp, r7
 2083 0016 80BC     		pop	{r7}
 2084 0018 7047     		bx	lr
 2085              		.cfi_endproc
 2086              	.LFE27:
 2088 001a 00BF     		.section	.text.USBHostEndpointConfig,"ax",%progbits
 2089              		.align	2
 2090              		.global	USBHostEndpointConfig
 2091              		.thumb
 2092              		.thumb_func
 2094              	USBHostEndpointConfig:
 2095              	.LFB28:
1674:C:/StellarisWare/driverlib\usb.c **** 
1675:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1676:C:/StellarisWare/driverlib\usb.c **** //
1677:C:/StellarisWare/driverlib\usb.c **** //! Sets the base configuration for a host endpoint.
1678:C:/StellarisWare/driverlib\usb.c **** //!
1679:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1680:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
1681:C:/StellarisWare/driverlib\usb.c **** //! \param ulMaxPayload is the maximum payload for this endpoint.
1682:C:/StellarisWare/driverlib\usb.c **** //! \param ulNAKPollInterval is the either the NAK timeout limit or the polling
1683:C:/StellarisWare/driverlib\usb.c **** //! interval, depending on the type of endpoint.
1684:C:/StellarisWare/driverlib\usb.c **** //! \param ulTargetEndpoint is the endpoint that the host endpoint is
1685:C:/StellarisWare/driverlib\usb.c **** //! targeting.
1686:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags are used to configure other endpoint settings.
1687:C:/StellarisWare/driverlib\usb.c **** //!
1688:C:/StellarisWare/driverlib\usb.c **** //! This function sets the basic configuration for the transmit or receive
1689:C:/StellarisWare/driverlib\usb.c **** //! portion of an endpoint in host mode.  The \e ulFlags parameter determines
1690:C:/StellarisWare/driverlib\usb.c **** //! some of the configuration while the other parameters provide the rest.  The
1691:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter determines whether this is an IN endpoint
1692:C:/StellarisWare/driverlib\usb.c **** //! (\b USB_EP_HOST_IN or \b USB_EP_DEV_IN) or an OUT endpoint
1693:C:/StellarisWare/driverlib\usb.c **** //! (\b USB_EP_HOST_OUT or \b USB_EP_DEV_OUT), whether this is a Full speed
1694:C:/StellarisWare/driverlib\usb.c **** //! endpoint (\b USB_EP_SPEED_FULL) or a Low speed endpoint
1695:C:/StellarisWare/driverlib\usb.c **** //! (\b USB_EP_SPEED_LOW).
1696:C:/StellarisWare/driverlib\usb.c **** //!
1697:C:/StellarisWare/driverlib\usb.c **** //! The \b USB_EP_MODE_ flags control the type of the endpoint.
1698:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_CTRL is a control endpoint.
1699:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_ISOC is an isochronous endpoint.
1700:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_BULK is a bulk endpoint.
1701:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_INT is an interrupt endpoint.
1702:C:/StellarisWare/driverlib\usb.c **** //!
1703:C:/StellarisWare/driverlib\usb.c **** //! The \e ulNAKPollInterval parameter has different meanings based on the
1704:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_MODE value and whether or not this call is being made for
1705:C:/StellarisWare/driverlib\usb.c **** //! endpoint zero or another endpoint.  For endpoint zero or any Bulk
1706:C:/StellarisWare/driverlib\usb.c **** //! endpoints, this value always indicates the number of frames to allow a
1707:C:/StellarisWare/driverlib\usb.c **** //! device to NAK before considering it a timeout.  If this endpoint is an
1708:C:/StellarisWare/driverlib\usb.c **** //! isochronous or interrupt endpoint, this value is the polling interval for
1709:C:/StellarisWare/driverlib\usb.c **** //! this endpoint.
1710:C:/StellarisWare/driverlib\usb.c **** //!
1711:C:/StellarisWare/driverlib\usb.c **** //! For interrupt endpoints, the polling interval is simply the number of
1712:C:/StellarisWare/driverlib\usb.c **** //! frames between polling an interrupt endpoint.  For isochronous endpoints
1713:C:/StellarisWare/driverlib\usb.c **** //! this value represents a polling interval of 2 ^ (\e ulNAKPollInterval - 1)
1714:C:/StellarisWare/driverlib\usb.c **** //! frames.  When used as a NAK timeout, the \e ulNAKPollInterval value
1715:C:/StellarisWare/driverlib\usb.c **** //! specifies 2 ^ (\e ulNAKPollInterval - 1) frames before issuing a time out.
1716:C:/StellarisWare/driverlib\usb.c **** //! There are two special time out values that can be specified when setting
1717:C:/StellarisWare/driverlib\usb.c **** //! the \e ulNAKPollInterval value.  The first is \b MAX_NAK_LIMIT, which is
1718:C:/StellarisWare/driverlib\usb.c **** //! the maximum value that can be passed in this variable.  The other is
1719:C:/StellarisWare/driverlib\usb.c **** //! \b DISABLE_NAK_LIMIT, which indicates that there should be no limit on the
1720:C:/StellarisWare/driverlib\usb.c **** //! number of NAKs.
1721:C:/StellarisWare/driverlib\usb.c **** //!
1722:C:/StellarisWare/driverlib\usb.c **** //! The \b USB_EP_DMA_MODE_ flags enable the type of DMA used to access the
1723:C:/StellarisWare/driverlib\usb.c **** //! endpoint's data FIFOs.  The choice of the DMA mode depends on how the DMA
1724:C:/StellarisWare/driverlib\usb.c **** //! controller is configured and how it is being used.  See the ``Using USB
1725:C:/StellarisWare/driverlib\usb.c **** //! with the uDMA Controller'' section for more information on DMA
1726:C:/StellarisWare/driverlib\usb.c **** //! configuration.
1727:C:/StellarisWare/driverlib\usb.c **** //!
1728:C:/StellarisWare/driverlib\usb.c **** //! When configuring the OUT portion of an endpoint, the \b USB_EP_AUTO_SET bit
1729:C:/StellarisWare/driverlib\usb.c **** //! is specified to cause the transmission of data on the USB bus to start
1730:C:/StellarisWare/driverlib\usb.c **** //! as soon as the number of bytes specified by \e ulMaxPayload has been
1731:C:/StellarisWare/driverlib\usb.c **** //! written into the OUT FIFO for this endpoint.
1732:C:/StellarisWare/driverlib\usb.c **** //!
1733:C:/StellarisWare/driverlib\usb.c **** //! When configuring the IN portion of an endpoint, the \b USB_EP_AUTO_REQUEST
1734:C:/StellarisWare/driverlib\usb.c **** //! bit can be specified to trigger the request for more data once the FIFO has
1735:C:/StellarisWare/driverlib\usb.c **** //! been drained enough to fit \e ulMaxPayload bytes.  The \b USB_EP_AUTO_CLEAR
1736:C:/StellarisWare/driverlib\usb.c **** //! bit can be used to clear the data packet ready flag automatically once the
1737:C:/StellarisWare/driverlib\usb.c **** //! data has been read from the FIFO.  If this option is not used, this flag
1738:C:/StellarisWare/driverlib\usb.c **** //! must be manually cleared via a call to USBDevEndpointStatusClear() or
1739:C:/StellarisWare/driverlib\usb.c **** //! USBHostEndpointStatusClear().
1740:C:/StellarisWare/driverlib\usb.c **** //!
1741:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
1742:C:/StellarisWare/driverlib\usb.c **** //!
1743:C:/StellarisWare/driverlib\usb.c **** //! \return None.
1744:C:/StellarisWare/driverlib\usb.c **** //
1745:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1746:C:/StellarisWare/driverlib\usb.c **** void
1747:C:/StellarisWare/driverlib\usb.c **** USBHostEndpointConfig(unsigned long ulBase, unsigned long ulEndpoint,
1748:C:/StellarisWare/driverlib\usb.c ****                       unsigned long ulMaxPayload,
1749:C:/StellarisWare/driverlib\usb.c ****                       unsigned long ulNAKPollInterval,
1750:C:/StellarisWare/driverlib\usb.c ****                       unsigned long ulTargetEndpoint, unsigned long ulFlags)
1751:C:/StellarisWare/driverlib\usb.c **** {
 2096              		.loc 1 1751 0
 2097              		.cfi_startproc
 2098              		@ args = 8, pretend = 0, frame = 24
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101 0000 80B4     		push	{r7}
 2102              	.LCFI84:
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0002 87B0     		sub	sp, sp, #28
 2106              	.LCFI85:
 2107              		.cfi_def_cfa_offset 32
 2108 0004 00AF     		add	r7, sp, #0
 2109              	.LCFI86:
 2110              		.cfi_def_cfa_register 7
 2111 0006 F860     		str	r0, [r7, #12]
 2112 0008 B960     		str	r1, [r7, #8]
 2113 000a 7A60     		str	r2, [r7, #4]
 2114 000c 3B60     		str	r3, [r7, #0]
1752:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
1753:C:/StellarisWare/driverlib\usb.c **** 
1754:C:/StellarisWare/driverlib\usb.c ****     //
1755:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
1756:C:/StellarisWare/driverlib\usb.c ****     //
1757:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
1758:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
1759:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
1760:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
1761:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
1762:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
1763:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
1764:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
1765:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
1766:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulNAKPollInterval <= MAX_NAK_LIMIT);
1767:C:/StellarisWare/driverlib\usb.c **** 
1768:C:/StellarisWare/driverlib\usb.c ****     //
1769:C:/StellarisWare/driverlib\usb.c ****     // Endpoint zero is configured differently than the other endpoints, so see
1770:C:/StellarisWare/driverlib\usb.c ****     // if this is endpoint zero.
1771:C:/StellarisWare/driverlib\usb.c ****     //
1772:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 2115              		.loc 1 1772 0
 2116 000e BB68     		ldr	r3, [r7, #8]
 2117 0010 002B     		cmp	r3, #0
 2118 0012 17D1     		bne	.L81
1773:C:/StellarisWare/driverlib\usb.c ****     {
1774:C:/StellarisWare/driverlib\usb.c ****         //
1775:C:/StellarisWare/driverlib\usb.c ****         // Set the NAK timeout.
1776:C:/StellarisWare/driverlib\usb.c ****         //
1777:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_NAKLMT) = ulNAKPollInterval;
 2119              		.loc 1 1777 0
 2120 0014 FB68     		ldr	r3, [r7, #12]
 2121 0016 03F58473 		add	r3, r3, #264
 2122 001a 03F10303 		add	r3, r3, #3
 2123 001e 3A68     		ldr	r2, [r7, #0]
 2124 0020 D2B2     		uxtb	r2, r2
 2125 0022 1A70     		strb	r2, [r3, #0]
1778:C:/StellarisWare/driverlib\usb.c **** 
1779:C:/StellarisWare/driverlib\usb.c ****         //
1780:C:/StellarisWare/driverlib\usb.c ****         // Set the transfer type information.
1781:C:/StellarisWare/driverlib\usb.c ****         //
1782:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TYPE0) =
 2126              		.loc 1 1782 0
 2127 0024 FB68     		ldr	r3, [r7, #12]
 2128 0026 03F58573 		add	r3, r3, #266
 2129 002a 1A46     		mov	r2, r3
1783:C:/StellarisWare/driverlib\usb.c ****             ((ulFlags & USB_EP_SPEED_FULL) ? USB_TYPE0_SPEED_FULL :
 2130              		.loc 1 1783 0
 2131 002c 7B6A     		ldr	r3, [r7, #36]
 2132 002e 03F48053 		and	r3, r3, #4096
1782:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TYPE0) =
 2133              		.loc 1 1782 0
 2134 0032 002B     		cmp	r3, #0
 2135 0034 02D0     		beq	.L82
1782:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TYPE0) =
 2136              		.loc 1 1782 0 is_stmt 0 discriminator 1
 2137 0036 4FF08003 		mov	r3, #128
 2138 003a 01E0     		b	.L83
 2139              	.L82:
1782:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TYPE0) =
 2140              		.loc 1 1782 0 discriminator 2
 2141 003c 4FF0C003 		mov	r3, #192
 2142              	.L83:
1782:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TYPE0) =
 2143              		.loc 1 1782 0 discriminator 3
 2144 0040 1370     		strb	r3, [r2, #0]
 2145 0042 BDE0     		b	.L80
 2146              	.L81:
1784:C:/StellarisWare/driverlib\usb.c ****              USB_TYPE0_SPEED_LOW);
1785:C:/StellarisWare/driverlib\usb.c ****     }
1786:C:/StellarisWare/driverlib\usb.c ****     else
1787:C:/StellarisWare/driverlib\usb.c ****     {
1788:C:/StellarisWare/driverlib\usb.c ****         //
1789:C:/StellarisWare/driverlib\usb.c ****         // Start with the target endpoint.
1790:C:/StellarisWare/driverlib\usb.c ****         //
1791:C:/StellarisWare/driverlib\usb.c ****         ulRegister = ulTargetEndpoint;
 2147              		.loc 1 1791 0 is_stmt 1
 2148 0044 3B6A     		ldr	r3, [r7, #32]
 2149 0046 7B61     		str	r3, [r7, #20]
1792:C:/StellarisWare/driverlib\usb.c **** 
1793:C:/StellarisWare/driverlib\usb.c ****         //
1794:C:/StellarisWare/driverlib\usb.c ****         // Set the speed for the device using this endpoint.
1795:C:/StellarisWare/driverlib\usb.c ****         //
1796:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_SPEED_FULL)
 2150              		.loc 1 1796 0
 2151 0048 7B6A     		ldr	r3, [r7, #36]
 2152 004a 03F48053 		and	r3, r3, #4096
 2153 004e 002B     		cmp	r3, #0
 2154 0050 04D0     		beq	.L85
1797:C:/StellarisWare/driverlib\usb.c ****         {
1798:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXTYPE1_SPEED_FULL;
 2155              		.loc 1 1798 0
 2156 0052 7B69     		ldr	r3, [r7, #20]
 2157 0054 43F08003 		orr	r3, r3, #128
 2158 0058 7B61     		str	r3, [r7, #20]
 2159 005a 03E0     		b	.L86
 2160              	.L85:
1799:C:/StellarisWare/driverlib\usb.c ****         }
1800:C:/StellarisWare/driverlib\usb.c ****         else
1801:C:/StellarisWare/driverlib\usb.c ****         {
1802:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXTYPE1_SPEED_LOW;
 2161              		.loc 1 1802 0
 2162 005c 7B69     		ldr	r3, [r7, #20]
 2163 005e 43F0C003 		orr	r3, r3, #192
 2164 0062 7B61     		str	r3, [r7, #20]
 2165              	.L86:
1803:C:/StellarisWare/driverlib\usb.c ****         }
1804:C:/StellarisWare/driverlib\usb.c **** 
1805:C:/StellarisWare/driverlib\usb.c ****         //
1806:C:/StellarisWare/driverlib\usb.c ****         // Set the protocol for the device using this endpoint.
1807:C:/StellarisWare/driverlib\usb.c ****         //
1808:C:/StellarisWare/driverlib\usb.c ****         switch(ulFlags & USB_EP_MODE_MASK)
 2166              		.loc 1 1808 0
 2167 0064 7B6A     		ldr	r3, [r7, #36]
 2168 0066 03F44073 		and	r3, r3, #768
 2169 006a B3F5807F 		cmp	r3, #256
 2170 006e 0BD0     		beq	.L89
 2171 0070 B3F5807F 		cmp	r3, #256
 2172 0074 02D8     		bhi	.L92
 2173 0076 002B     		cmp	r3, #0
 2174 0078 0BD0     		beq	.L88
 2175 007a 14E0     		b	.L87
 2176              	.L92:
 2177 007c B3F5007F 		cmp	r3, #512
 2178 0080 0CD0     		beq	.L90
 2179 0082 B3F5407F 		cmp	r3, #768
1809:C:/StellarisWare/driverlib\usb.c ****         {
1810:C:/StellarisWare/driverlib\usb.c ****             //
1811:C:/StellarisWare/driverlib\usb.c ****             // The bulk protocol is being used.
1812:C:/StellarisWare/driverlib\usb.c ****             //
1813:C:/StellarisWare/driverlib\usb.c ****             case USB_EP_MODE_BULK:
1814:C:/StellarisWare/driverlib\usb.c ****             {
1815:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_BULK;
1816:C:/StellarisWare/driverlib\usb.c ****                 break;
1817:C:/StellarisWare/driverlib\usb.c ****             }
1818:C:/StellarisWare/driverlib\usb.c **** 
1819:C:/StellarisWare/driverlib\usb.c ****             //
1820:C:/StellarisWare/driverlib\usb.c ****             // The isochronous protocol is being used.
1821:C:/StellarisWare/driverlib\usb.c ****             //
1822:C:/StellarisWare/driverlib\usb.c ****             case USB_EP_MODE_ISOC:
1823:C:/StellarisWare/driverlib\usb.c ****             {
1824:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_ISOC;
1825:C:/StellarisWare/driverlib\usb.c ****                 break;
1826:C:/StellarisWare/driverlib\usb.c ****             }
1827:C:/StellarisWare/driverlib\usb.c **** 
1828:C:/StellarisWare/driverlib\usb.c ****             //
1829:C:/StellarisWare/driverlib\usb.c ****             // The interrupt protocol is being used.
1830:C:/StellarisWare/driverlib\usb.c ****             //
1831:C:/StellarisWare/driverlib\usb.c ****             case USB_EP_MODE_INT:
1832:C:/StellarisWare/driverlib\usb.c ****             {
1833:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_INT;
1834:C:/StellarisWare/driverlib\usb.c ****                 break;
1835:C:/StellarisWare/driverlib\usb.c ****             }
1836:C:/StellarisWare/driverlib\usb.c **** 
1837:C:/StellarisWare/driverlib\usb.c ****             //
1838:C:/StellarisWare/driverlib\usb.c ****             // The control protocol is being used.
1839:C:/StellarisWare/driverlib\usb.c ****             //
1840:C:/StellarisWare/driverlib\usb.c ****             case USB_EP_MODE_CTRL:
1841:C:/StellarisWare/driverlib\usb.c ****             {
1842:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_CTRL;
1843:C:/StellarisWare/driverlib\usb.c ****                 break;
 2180              		.loc 1 1843 0
 2181 0086 0EE0     		b	.L87
 2182              	.L89:
1815:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_BULK;
 2183              		.loc 1 1815 0
 2184 0088 7B69     		ldr	r3, [r7, #20]
 2185 008a 43F02003 		orr	r3, r3, #32
 2186 008e 7B61     		str	r3, [r7, #20]
1816:C:/StellarisWare/driverlib\usb.c ****                 break;
 2187              		.loc 1 1816 0
 2188 0090 09E0     		b	.L87
 2189              	.L88:
1824:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_ISOC;
 2190              		.loc 1 1824 0
 2191 0092 7B69     		ldr	r3, [r7, #20]
 2192 0094 43F01003 		orr	r3, r3, #16
 2193 0098 7B61     		str	r3, [r7, #20]
1825:C:/StellarisWare/driverlib\usb.c ****                 break;
 2194              		.loc 1 1825 0
 2195 009a 04E0     		b	.L87
 2196              	.L90:
1833:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXTYPE1_PROTO_INT;
 2197              		.loc 1 1833 0
 2198 009c 7B69     		ldr	r3, [r7, #20]
 2199 009e 43F03003 		orr	r3, r3, #48
 2200 00a2 7B61     		str	r3, [r7, #20]
1834:C:/StellarisWare/driverlib\usb.c ****                 break;
 2201              		.loc 1 1834 0
 2202 00a4 00BF     		nop
 2203              	.L87:
1844:C:/StellarisWare/driverlib\usb.c ****             }
1845:C:/StellarisWare/driverlib\usb.c ****         }
1846:C:/StellarisWare/driverlib\usb.c **** 
1847:C:/StellarisWare/driverlib\usb.c ****         //
1848:C:/StellarisWare/driverlib\usb.c ****         // See if the transmit or receive endpoint is being configured.
1849:C:/StellarisWare/driverlib\usb.c ****         //
1850:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_HOST_OUT)
 2204              		.loc 1 1850 0
 2205 00a6 7B6A     		ldr	r3, [r7, #36]
 2206 00a8 03F40053 		and	r3, r3, #8192
 2207 00ac 002B     		cmp	r3, #0
 2208 00ae 44D0     		beq	.L93
1851:C:/StellarisWare/driverlib\usb.c ****         {
1852:C:/StellarisWare/driverlib\usb.c ****             //
1853:C:/StellarisWare/driverlib\usb.c ****             // Set the transfer type information.
1854:C:/StellarisWare/driverlib\usb.c ****             //
1855:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXTYPE1) =
 2209              		.loc 1 1855 0
 2210 00b0 BA68     		ldr	r2, [r7, #8]
 2211 00b2 FB68     		ldr	r3, [r7, #12]
 2212 00b4 D318     		adds	r3, r2, r3
 2213 00b6 03F58573 		add	r3, r3, #266
 2214 00ba 7A69     		ldr	r2, [r7, #20]
 2215 00bc D2B2     		uxtb	r2, r2
 2216 00be 1A70     		strb	r2, [r3, #0]
1856:C:/StellarisWare/driverlib\usb.c ****                 ulRegister;
1857:C:/StellarisWare/driverlib\usb.c **** 
1858:C:/StellarisWare/driverlib\usb.c ****             //
1859:C:/StellarisWare/driverlib\usb.c ****             // Set the NAK timeout or polling interval.
1860:C:/StellarisWare/driverlib\usb.c ****             //
1861:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXINTERVAL1) =
 2217              		.loc 1 1861 0
 2218 00c0 BA68     		ldr	r2, [r7, #8]
 2219 00c2 FB68     		ldr	r3, [r7, #12]
 2220 00c4 D318     		adds	r3, r2, r3
 2221 00c6 03F58473 		add	r3, r3, #264
 2222 00ca 03F10303 		add	r3, r3, #3
 2223 00ce 3A68     		ldr	r2, [r7, #0]
 2224 00d0 D2B2     		uxtb	r2, r2
 2225 00d2 1A70     		strb	r2, [r3, #0]
1862:C:/StellarisWare/driverlib\usb.c ****                 ulNAKPollInterval;
1863:C:/StellarisWare/driverlib\usb.c **** 
1864:C:/StellarisWare/driverlib\usb.c ****             //
1865:C:/StellarisWare/driverlib\usb.c ****             // Set the Maximum Payload per transaction.
1866:C:/StellarisWare/driverlib\usb.c ****             //
1867:C:/StellarisWare/driverlib\usb.c ****             HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXMAXP1) =
 2226              		.loc 1 1867 0
 2227 00d4 BA68     		ldr	r2, [r7, #8]
 2228 00d6 FB68     		ldr	r3, [r7, #12]
 2229 00d8 D318     		adds	r3, r2, r3
 2230 00da 03F58073 		add	r3, r3, #256
 2231 00de 7A68     		ldr	r2, [r7, #4]
 2232 00e0 92B2     		uxth	r2, r2
 2233 00e2 1A80     		strh	r2, [r3, #0]	@ movhi
1868:C:/StellarisWare/driverlib\usb.c ****                 ulMaxPayload;
1869:C:/StellarisWare/driverlib\usb.c **** 
1870:C:/StellarisWare/driverlib\usb.c ****             //
1871:C:/StellarisWare/driverlib\usb.c ****             // Set the transmit control value to zero.
1872:C:/StellarisWare/driverlib\usb.c ****             //
1873:C:/StellarisWare/driverlib\usb.c ****             ulRegister = 0;
 2234              		.loc 1 1873 0
 2235 00e4 4FF00003 		mov	r3, #0
 2236 00e8 7B61     		str	r3, [r7, #20]
1874:C:/StellarisWare/driverlib\usb.c **** 
1875:C:/StellarisWare/driverlib\usb.c ****             //
1876:C:/StellarisWare/driverlib\usb.c ****             // Allow auto setting of TxPktRdy when max packet size has been
1877:C:/StellarisWare/driverlib\usb.c ****             // loaded into the FIFO.
1878:C:/StellarisWare/driverlib\usb.c ****             //
1879:C:/StellarisWare/driverlib\usb.c ****             if(ulFlags & USB_EP_AUTO_SET)
 2237              		.loc 1 1879 0
 2238 00ea 7B6A     		ldr	r3, [r7, #36]
 2239 00ec 03F00103 		and	r3, r3, #1
 2240 00f0 DBB2     		uxtb	r3, r3
 2241 00f2 002B     		cmp	r3, #0
 2242 00f4 03D0     		beq	.L94
1880:C:/StellarisWare/driverlib\usb.c ****             {
1881:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXCSRH1_AUTOSET;
 2243              		.loc 1 1881 0
 2244 00f6 7B69     		ldr	r3, [r7, #20]
 2245 00f8 43F08003 		orr	r3, r3, #128
 2246 00fc 7B61     		str	r3, [r7, #20]
 2247              	.L94:
1882:C:/StellarisWare/driverlib\usb.c ****             }
1883:C:/StellarisWare/driverlib\usb.c **** 
1884:C:/StellarisWare/driverlib\usb.c ****             //
1885:C:/StellarisWare/driverlib\usb.c ****             // Configure the DMA Mode.
1886:C:/StellarisWare/driverlib\usb.c ****             //
1887:C:/StellarisWare/driverlib\usb.c ****             if(ulFlags & USB_EP_DMA_MODE_1)
 2248              		.loc 1 1887 0
 2249 00fe 7B6A     		ldr	r3, [r7, #36]
 2250 0100 03F01003 		and	r3, r3, #16
 2251 0104 002B     		cmp	r3, #0
 2252 0106 04D0     		beq	.L95
1888:C:/StellarisWare/driverlib\usb.c ****             {
1889:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXCSRH1_DMAEN | USB_TXCSRH1_DMAMOD;
 2253              		.loc 1 1889 0
 2254 0108 7B69     		ldr	r3, [r7, #20]
 2255 010a 43F01403 		orr	r3, r3, #20
 2256 010e 7B61     		str	r3, [r7, #20]
 2257 0110 08E0     		b	.L96
 2258              	.L95:
1890:C:/StellarisWare/driverlib\usb.c ****             }
1891:C:/StellarisWare/driverlib\usb.c ****             else if(ulFlags & USB_EP_DMA_MODE_0)
 2259              		.loc 1 1891 0
 2260 0112 7B6A     		ldr	r3, [r7, #36]
 2261 0114 03F00803 		and	r3, r3, #8
 2262 0118 002B     		cmp	r3, #0
 2263 011a 03D0     		beq	.L96
1892:C:/StellarisWare/driverlib\usb.c ****             {
1893:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_TXCSRH1_DMAEN;
 2264              		.loc 1 1893 0
 2265 011c 7B69     		ldr	r3, [r7, #20]
 2266 011e 43F01003 		orr	r3, r3, #16
 2267 0122 7B61     		str	r3, [r7, #20]
 2268              	.L96:
1894:C:/StellarisWare/driverlib\usb.c ****             }
1895:C:/StellarisWare/driverlib\usb.c **** 
1896:C:/StellarisWare/driverlib\usb.c ****             //
1897:C:/StellarisWare/driverlib\usb.c ****             // Write out the transmit control value.
1898:C:/StellarisWare/driverlib\usb.c ****             //
1899:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
 2269              		.loc 1 1899 0
 2270 0124 BA68     		ldr	r2, [r7, #8]
 2271 0126 FB68     		ldr	r3, [r7, #12]
 2272 0128 D318     		adds	r3, r2, r3
 2273 012a 03F58073 		add	r3, r3, #256
 2274 012e 03F10303 		add	r3, r3, #3
1900:C:/StellarisWare/driverlib\usb.c ****                 (unsigned char)ulRegister;
 2275              		.loc 1 1900 0
 2276 0132 7A69     		ldr	r2, [r7, #20]
 2277 0134 D2B2     		uxtb	r2, r2
1899:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
 2278              		.loc 1 1899 0
 2279 0136 1A70     		strb	r2, [r3, #0]
 2280 0138 42E0     		b	.L80
 2281              	.L93:
1901:C:/StellarisWare/driverlib\usb.c ****         }
1902:C:/StellarisWare/driverlib\usb.c ****         else
1903:C:/StellarisWare/driverlib\usb.c ****         {
1904:C:/StellarisWare/driverlib\usb.c ****             //
1905:C:/StellarisWare/driverlib\usb.c ****             // Set the transfer type information.
1906:C:/StellarisWare/driverlib\usb.c ****             //
1907:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXTYPE1) =
 2282              		.loc 1 1907 0
 2283 013a BA68     		ldr	r2, [r7, #8]
 2284 013c FB68     		ldr	r3, [r7, #12]
 2285 013e D318     		adds	r3, r2, r3
 2286 0140 03F58673 		add	r3, r3, #268
 2287 0144 7A69     		ldr	r2, [r7, #20]
 2288 0146 D2B2     		uxtb	r2, r2
 2289 0148 1A70     		strb	r2, [r3, #0]
1908:C:/StellarisWare/driverlib\usb.c ****                 ulRegister;
1909:C:/StellarisWare/driverlib\usb.c **** 
1910:C:/StellarisWare/driverlib\usb.c ****             //
1911:C:/StellarisWare/driverlib\usb.c ****             // Set the NAK timeout or polling interval.
1912:C:/StellarisWare/driverlib\usb.c ****             //
1913:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXINTERVAL1) =
 2290              		.loc 1 1913 0
 2291 014a BA68     		ldr	r2, [r7, #8]
 2292 014c FB68     		ldr	r3, [r7, #12]
 2293 014e D318     		adds	r3, r2, r3
 2294 0150 03F58673 		add	r3, r3, #268
 2295 0154 03F10103 		add	r3, r3, #1
 2296 0158 3A68     		ldr	r2, [r7, #0]
 2297 015a D2B2     		uxtb	r2, r2
 2298 015c 1A70     		strb	r2, [r3, #0]
1914:C:/StellarisWare/driverlib\usb.c ****                 ulNAKPollInterval;
1915:C:/StellarisWare/driverlib\usb.c **** 
1916:C:/StellarisWare/driverlib\usb.c ****             //
1917:C:/StellarisWare/driverlib\usb.c ****             // Set the Maximum Payload per transaction.
1918:C:/StellarisWare/driverlib\usb.c ****             //
1919:C:/StellarisWare/driverlib\usb.c ****             HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXMAXP1) =
 2299              		.loc 1 1919 0
 2300 015e BA68     		ldr	r2, [r7, #8]
 2301 0160 FB68     		ldr	r3, [r7, #12]
 2302 0162 D318     		adds	r3, r2, r3
 2303 0164 03F58273 		add	r3, r3, #260
 2304 0168 7A68     		ldr	r2, [r7, #4]
 2305 016a 92B2     		uxth	r2, r2
 2306 016c 1A80     		strh	r2, [r3, #0]	@ movhi
1920:C:/StellarisWare/driverlib\usb.c ****                 ulMaxPayload;
1921:C:/StellarisWare/driverlib\usb.c **** 
1922:C:/StellarisWare/driverlib\usb.c ****             //
1923:C:/StellarisWare/driverlib\usb.c ****             // Set the receive control value to zero.
1924:C:/StellarisWare/driverlib\usb.c ****             //
1925:C:/StellarisWare/driverlib\usb.c ****             ulRegister = 0;
 2307              		.loc 1 1925 0
 2308 016e 4FF00003 		mov	r3, #0
 2309 0172 7B61     		str	r3, [r7, #20]
1926:C:/StellarisWare/driverlib\usb.c **** 
1927:C:/StellarisWare/driverlib\usb.c ****             //
1928:C:/StellarisWare/driverlib\usb.c ****             // Allow auto clearing of RxPktRdy when packet of size max packet
1929:C:/StellarisWare/driverlib\usb.c ****             // has been unloaded from the FIFO.
1930:C:/StellarisWare/driverlib\usb.c ****             //
1931:C:/StellarisWare/driverlib\usb.c ****             if(ulFlags & USB_EP_AUTO_CLEAR)
 2310              		.loc 1 1931 0
 2311 0174 7B6A     		ldr	r3, [r7, #36]
 2312 0176 03F00403 		and	r3, r3, #4
 2313 017a 002B     		cmp	r3, #0
 2314 017c 03D0     		beq	.L97
1932:C:/StellarisWare/driverlib\usb.c ****             {
1933:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_RXCSRH1_AUTOCL;
 2315              		.loc 1 1933 0
 2316 017e 7B69     		ldr	r3, [r7, #20]
 2317 0180 43F08003 		orr	r3, r3, #128
 2318 0184 7B61     		str	r3, [r7, #20]
 2319              	.L97:
1934:C:/StellarisWare/driverlib\usb.c ****             }
1935:C:/StellarisWare/driverlib\usb.c **** 
1936:C:/StellarisWare/driverlib\usb.c ****             //
1937:C:/StellarisWare/driverlib\usb.c ****             // Configure the DMA Mode.
1938:C:/StellarisWare/driverlib\usb.c ****             //
1939:C:/StellarisWare/driverlib\usb.c ****             if(ulFlags & USB_EP_DMA_MODE_1)
 2320              		.loc 1 1939 0
 2321 0186 7B6A     		ldr	r3, [r7, #36]
 2322 0188 03F01003 		and	r3, r3, #16
 2323 018c 002B     		cmp	r3, #0
 2324 018e 04D0     		beq	.L98
1940:C:/StellarisWare/driverlib\usb.c ****             {
1941:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_RXCSRH1_DMAEN | USB_RXCSRH1_DMAMOD;
 2325              		.loc 1 1941 0
 2326 0190 7B69     		ldr	r3, [r7, #20]
 2327 0192 43F02803 		orr	r3, r3, #40
 2328 0196 7B61     		str	r3, [r7, #20]
 2329 0198 08E0     		b	.L99
 2330              	.L98:
1942:C:/StellarisWare/driverlib\usb.c ****             }
1943:C:/StellarisWare/driverlib\usb.c ****             else if(ulFlags & USB_EP_DMA_MODE_0)
 2331              		.loc 1 1943 0
 2332 019a 7B6A     		ldr	r3, [r7, #36]
 2333 019c 03F00803 		and	r3, r3, #8
 2334 01a0 002B     		cmp	r3, #0
 2335 01a2 03D0     		beq	.L99
1944:C:/StellarisWare/driverlib\usb.c ****             {
1945:C:/StellarisWare/driverlib\usb.c ****                 ulRegister |= USB_RXCSRH1_DMAEN;
 2336              		.loc 1 1945 0
 2337 01a4 7B69     		ldr	r3, [r7, #20]
 2338 01a6 43F02003 		orr	r3, r3, #32
 2339 01aa 7B61     		str	r3, [r7, #20]
 2340              	.L99:
1946:C:/StellarisWare/driverlib\usb.c ****             }
1947:C:/StellarisWare/driverlib\usb.c **** 
1948:C:/StellarisWare/driverlib\usb.c ****             //
1949:C:/StellarisWare/driverlib\usb.c ****             // Write out the receive control value.
1950:C:/StellarisWare/driverlib\usb.c ****             //
1951:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
 2341              		.loc 1 1951 0
 2342 01ac BA68     		ldr	r2, [r7, #8]
 2343 01ae FB68     		ldr	r3, [r7, #12]
 2344 01b0 D318     		adds	r3, r2, r3
 2345 01b2 03F58273 		add	r3, r3, #260
 2346 01b6 03F10303 		add	r3, r3, #3
1952:C:/StellarisWare/driverlib\usb.c ****                 (unsigned char)ulRegister;
 2347              		.loc 1 1952 0
 2348 01ba 7A69     		ldr	r2, [r7, #20]
 2349 01bc D2B2     		uxtb	r2, r2
1951:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
 2350              		.loc 1 1951 0
 2351 01be 1A70     		strb	r2, [r3, #0]
 2352              	.L80:
1953:C:/StellarisWare/driverlib\usb.c ****         }
1954:C:/StellarisWare/driverlib\usb.c ****     }
1955:C:/StellarisWare/driverlib\usb.c **** }
 2353              		.loc 1 1955 0
 2354 01c0 07F11C07 		add	r7, r7, #28
 2355 01c4 BD46     		mov	sp, r7
 2356 01c6 80BC     		pop	{r7}
 2357 01c8 7047     		bx	lr
 2358              		.cfi_endproc
 2359              	.LFE28:
 2361 01ca 00BF     		.section	.text.USBDevEndpointConfigSet,"ax",%progbits
 2362              		.align	2
 2363              		.global	USBDevEndpointConfigSet
 2364              		.thumb
 2365              		.thumb_func
 2367              	USBDevEndpointConfigSet:
 2368              	.LFB29:
1956:C:/StellarisWare/driverlib\usb.c **** 
1957:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
1958:C:/StellarisWare/driverlib\usb.c **** //
1959:C:/StellarisWare/driverlib\usb.c **** //! Sets the configuration for an endpoint.
1960:C:/StellarisWare/driverlib\usb.c **** //!
1961:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
1962:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
1963:C:/StellarisWare/driverlib\usb.c **** //! \param ulMaxPacketSize is the maximum packet size for this endpoint.
1964:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags are used to configure other endpoint settings.
1965:C:/StellarisWare/driverlib\usb.c **** //!
1966:C:/StellarisWare/driverlib\usb.c **** //! This function sets the basic configuration for an endpoint in device mode.
1967:C:/StellarisWare/driverlib\usb.c **** //! Endpoint zero does not have a dynamic configuration, so this function
1968:C:/StellarisWare/driverlib\usb.c **** //! should not be called for endpoint zero.  The \e ulFlags parameter
1969:C:/StellarisWare/driverlib\usb.c **** //! determines some of the configuration while the other parameters provide the
1970:C:/StellarisWare/driverlib\usb.c **** //! rest.
1971:C:/StellarisWare/driverlib\usb.c **** //!
1972:C:/StellarisWare/driverlib\usb.c **** //! The \b USB_EP_MODE_ flags define what the type is for the given endpoint.
1973:C:/StellarisWare/driverlib\usb.c **** //!
1974:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_CTRL is a control endpoint.
1975:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_ISOC is an isochronous endpoint.
1976:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_BULK is a bulk endpoint.
1977:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_EP_MODE_INT is an interrupt endpoint.
1978:C:/StellarisWare/driverlib\usb.c **** //!
1979:C:/StellarisWare/driverlib\usb.c **** //! The \b USB_EP_DMA_MODE_ flags determine the type of DMA access to the
1980:C:/StellarisWare/driverlib\usb.c **** //! endpoint data FIFOs.  The choice of the DMA mode depends on how the DMA
1981:C:/StellarisWare/driverlib\usb.c **** //! controller is configured and how it is being used.  See the ``Using USB
1982:C:/StellarisWare/driverlib\usb.c **** //! with the uDMA Controller'' section for more information on DMA
1983:C:/StellarisWare/driverlib\usb.c **** //! configuration.
1984:C:/StellarisWare/driverlib\usb.c **** //!
1985:C:/StellarisWare/driverlib\usb.c **** //! When configuring an IN endpoint, the \b USB_EP_AUTO_SET bit can be
1986:C:/StellarisWare/driverlib\usb.c **** //! specified to cause the automatic transmission of data on the USB bus as
1987:C:/StellarisWare/driverlib\usb.c **** //! soon as \e ulMaxPacketSize bytes of data are written into the FIFO for
1988:C:/StellarisWare/driverlib\usb.c **** //! this endpoint.  This option is commonly used with DMA as no interaction is
1989:C:/StellarisWare/driverlib\usb.c **** //! required to start the transmission of data.
1990:C:/StellarisWare/driverlib\usb.c **** //!
1991:C:/StellarisWare/driverlib\usb.c **** //! When configuring an OUT endpoint, the \b USB_EP_AUTO_REQUEST bit is
1992:C:/StellarisWare/driverlib\usb.c **** //! specified to trigger the request for more data once the FIFO has been
1993:C:/StellarisWare/driverlib\usb.c **** //! drained enough to receive \e ulMaxPacketSize more bytes of data.  Also for
1994:C:/StellarisWare/driverlib\usb.c **** //! OUT endpoints, the \b USB_EP_AUTO_CLEAR bit can be used to clear the data
1995:C:/StellarisWare/driverlib\usb.c **** //! packet ready flag automatically once the data has been read from the FIFO.
1996:C:/StellarisWare/driverlib\usb.c **** //! If this option is not used, this flag must be manually cleared via a call
1997:C:/StellarisWare/driverlib\usb.c **** //! to USBDevEndpointStatusClear().  Both of these settings can be used to
1998:C:/StellarisWare/driverlib\usb.c **** //! remove the need for extra calls when using the controller in DMA mode.
1999:C:/StellarisWare/driverlib\usb.c **** //!
2000:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
2001:C:/StellarisWare/driverlib\usb.c **** //!
2002:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2003:C:/StellarisWare/driverlib\usb.c **** //
2004:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2005:C:/StellarisWare/driverlib\usb.c **** void
2006:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointConfigSet(unsigned long ulBase, unsigned long ulEndpoint,
2007:C:/StellarisWare/driverlib\usb.c ****                         unsigned long ulMaxPacketSize, unsigned long ulFlags)
2008:C:/StellarisWare/driverlib\usb.c **** {
 2369              		.loc 1 2008 0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 24
 2372              		@ frame_needed = 1, uses_anonymous_args = 0
 2373              		@ link register save eliminated.
 2374 0000 80B4     		push	{r7}
 2375              	.LCFI87:
 2376              		.cfi_def_cfa_offset 4
 2377              		.cfi_offset 7, -4
 2378 0002 87B0     		sub	sp, sp, #28
 2379              	.LCFI88:
 2380              		.cfi_def_cfa_offset 32
 2381 0004 00AF     		add	r7, sp, #0
 2382              	.LCFI89:
 2383              		.cfi_def_cfa_register 7
 2384 0006 F860     		str	r0, [r7, #12]
 2385 0008 B960     		str	r1, [r7, #8]
 2386 000a 7A60     		str	r2, [r7, #4]
 2387 000c 3B60     		str	r3, [r7, #0]
2009:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
2010:C:/StellarisWare/driverlib\usb.c **** 
2011:C:/StellarisWare/driverlib\usb.c ****     //
2012:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2013:C:/StellarisWare/driverlib\usb.c ****     //
2014:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2015:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
2016:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
2017:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
2018:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
2019:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
2020:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
2021:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
2022:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
2023:C:/StellarisWare/driverlib\usb.c **** 
2024:C:/StellarisWare/driverlib\usb.c ****     //
2025:C:/StellarisWare/driverlib\usb.c ****     // Determine if a transmit or receive endpoint is being configured.
2026:C:/StellarisWare/driverlib\usb.c ****     //
2027:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_DEV_IN)
 2388              		.loc 1 2027 0
 2389 000e 3B68     		ldr	r3, [r7, #0]
 2390 0010 03F40053 		and	r3, r3, #8192
 2391 0014 002B     		cmp	r3, #0
 2392 0016 43D0     		beq	.L101
2028:C:/StellarisWare/driverlib\usb.c ****     {
2029:C:/StellarisWare/driverlib\usb.c ****         //
2030:C:/StellarisWare/driverlib\usb.c ****         // Set the maximum packet size.
2031:C:/StellarisWare/driverlib\usb.c ****         //
2032:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXMAXP1) =
 2393              		.loc 1 2032 0
 2394 0018 BA68     		ldr	r2, [r7, #8]
 2395 001a FB68     		ldr	r3, [r7, #12]
 2396 001c D318     		adds	r3, r2, r3
 2397 001e 03F58073 		add	r3, r3, #256
 2398 0022 7A68     		ldr	r2, [r7, #4]
 2399 0024 92B2     		uxth	r2, r2
 2400 0026 1A80     		strh	r2, [r3, #0]	@ movhi
2033:C:/StellarisWare/driverlib\usb.c ****             ulMaxPacketSize;
2034:C:/StellarisWare/driverlib\usb.c **** 
2035:C:/StellarisWare/driverlib\usb.c ****         //
2036:C:/StellarisWare/driverlib\usb.c ****         // The transmit control value is zero unless options are enabled.
2037:C:/StellarisWare/driverlib\usb.c ****         //
2038:C:/StellarisWare/driverlib\usb.c ****         ulRegister = 0;
 2401              		.loc 1 2038 0
 2402 0028 4FF00003 		mov	r3, #0
 2403 002c 7B61     		str	r3, [r7, #20]
2039:C:/StellarisWare/driverlib\usb.c **** 
2040:C:/StellarisWare/driverlib\usb.c ****         //
2041:C:/StellarisWare/driverlib\usb.c ****         // Allow auto setting of TxPktRdy when max packet size has been loaded
2042:C:/StellarisWare/driverlib\usb.c ****         // into the FIFO.
2043:C:/StellarisWare/driverlib\usb.c ****         //
2044:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_AUTO_SET)
 2404              		.loc 1 2044 0
 2405 002e 3B68     		ldr	r3, [r7, #0]
 2406 0030 03F00103 		and	r3, r3, #1
 2407 0034 DBB2     		uxtb	r3, r3
 2408 0036 002B     		cmp	r3, #0
 2409 0038 03D0     		beq	.L102
2045:C:/StellarisWare/driverlib\usb.c ****         {
2046:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXCSRH1_AUTOSET;
 2410              		.loc 1 2046 0
 2411 003a 7B69     		ldr	r3, [r7, #20]
 2412 003c 43F08003 		orr	r3, r3, #128
 2413 0040 7B61     		str	r3, [r7, #20]
 2414              	.L102:
2047:C:/StellarisWare/driverlib\usb.c ****         }
2048:C:/StellarisWare/driverlib\usb.c **** 
2049:C:/StellarisWare/driverlib\usb.c ****         //
2050:C:/StellarisWare/driverlib\usb.c ****         // Configure the DMA mode.
2051:C:/StellarisWare/driverlib\usb.c ****         //
2052:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_DMA_MODE_1)
 2415              		.loc 1 2052 0
 2416 0042 3B68     		ldr	r3, [r7, #0]
 2417 0044 03F01003 		and	r3, r3, #16
 2418 0048 002B     		cmp	r3, #0
 2419 004a 04D0     		beq	.L103
2053:C:/StellarisWare/driverlib\usb.c ****         {
2054:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXCSRH1_DMAEN | USB_TXCSRH1_DMAMOD;
 2420              		.loc 1 2054 0
 2421 004c 7B69     		ldr	r3, [r7, #20]
 2422 004e 43F01403 		orr	r3, r3, #20
 2423 0052 7B61     		str	r3, [r7, #20]
 2424 0054 08E0     		b	.L104
 2425              	.L103:
2055:C:/StellarisWare/driverlib\usb.c ****         }
2056:C:/StellarisWare/driverlib\usb.c ****         else if(ulFlags & USB_EP_DMA_MODE_0)
 2426              		.loc 1 2056 0
 2427 0056 3B68     		ldr	r3, [r7, #0]
 2428 0058 03F00803 		and	r3, r3, #8
 2429 005c 002B     		cmp	r3, #0
 2430 005e 03D0     		beq	.L104
2057:C:/StellarisWare/driverlib\usb.c ****         {
2058:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXCSRH1_DMAEN;
 2431              		.loc 1 2058 0
 2432 0060 7B69     		ldr	r3, [r7, #20]
 2433 0062 43F01003 		orr	r3, r3, #16
 2434 0066 7B61     		str	r3, [r7, #20]
 2435              	.L104:
2059:C:/StellarisWare/driverlib\usb.c ****         }
2060:C:/StellarisWare/driverlib\usb.c **** 
2061:C:/StellarisWare/driverlib\usb.c ****         //
2062:C:/StellarisWare/driverlib\usb.c ****         // Enable isochronous mode if requested.
2063:C:/StellarisWare/driverlib\usb.c ****         //
2064:C:/StellarisWare/driverlib\usb.c ****         if((ulFlags & USB_EP_MODE_MASK) == USB_EP_MODE_ISOC)
 2436              		.loc 1 2064 0
 2437 0068 3B68     		ldr	r3, [r7, #0]
 2438 006a 03F44073 		and	r3, r3, #768
 2439 006e 002B     		cmp	r3, #0
 2440 0070 03D1     		bne	.L105
2065:C:/StellarisWare/driverlib\usb.c ****         {
2066:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_TXCSRH1_ISO;
 2441              		.loc 1 2066 0
 2442 0072 7B69     		ldr	r3, [r7, #20]
 2443 0074 43F04003 		orr	r3, r3, #64
 2444 0078 7B61     		str	r3, [r7, #20]
 2445              	.L105:
2067:C:/StellarisWare/driverlib\usb.c ****         }
2068:C:/StellarisWare/driverlib\usb.c **** 
2069:C:/StellarisWare/driverlib\usb.c ****         //
2070:C:/StellarisWare/driverlib\usb.c ****         // Write the transmit control value.
2071:C:/StellarisWare/driverlib\usb.c ****         //
2072:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
 2446              		.loc 1 2072 0
 2447 007a BA68     		ldr	r2, [r7, #8]
 2448 007c FB68     		ldr	r3, [r7, #12]
 2449 007e D318     		adds	r3, r2, r3
 2450 0080 03F58073 		add	r3, r3, #256
 2451 0084 03F10303 		add	r3, r3, #3
2073:C:/StellarisWare/driverlib\usb.c ****             (unsigned char)ulRegister;
 2452              		.loc 1 2073 0
 2453 0088 7A69     		ldr	r2, [r7, #20]
 2454 008a D2B2     		uxtb	r2, r2
2072:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) =
 2455              		.loc 1 2072 0
 2456 008c 1A70     		strb	r2, [r3, #0]
2074:C:/StellarisWare/driverlib\usb.c **** 
2075:C:/StellarisWare/driverlib\usb.c ****         //
2076:C:/StellarisWare/driverlib\usb.c ****         // Reset the Data toggle to zero.
2077:C:/StellarisWare/driverlib\usb.c ****         //
2078:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRL1) =
 2457              		.loc 1 2078 0
 2458 008e BA68     		ldr	r2, [r7, #8]
 2459 0090 FB68     		ldr	r3, [r7, #12]
 2460 0092 D318     		adds	r3, r2, r3
 2461 0094 03F58173 		add	r3, r3, #258
 2462 0098 4FF04002 		mov	r2, #64
 2463 009c 1A70     		strb	r2, [r3, #0]
 2464 009e 40E0     		b	.L100
 2465              	.L101:
2079:C:/StellarisWare/driverlib\usb.c ****             USB_TXCSRL1_CLRDT;
2080:C:/StellarisWare/driverlib\usb.c ****     }
2081:C:/StellarisWare/driverlib\usb.c ****     else
2082:C:/StellarisWare/driverlib\usb.c ****     {
2083:C:/StellarisWare/driverlib\usb.c ****         //
2084:C:/StellarisWare/driverlib\usb.c ****         // Set the MaxPacketSize.
2085:C:/StellarisWare/driverlib\usb.c ****         //
2086:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXMAXP1) =
 2466              		.loc 1 2086 0
 2467 00a0 BA68     		ldr	r2, [r7, #8]
 2468 00a2 FB68     		ldr	r3, [r7, #12]
 2469 00a4 D318     		adds	r3, r2, r3
 2470 00a6 03F58273 		add	r3, r3, #260
 2471 00aa 7A68     		ldr	r2, [r7, #4]
 2472 00ac 92B2     		uxth	r2, r2
 2473 00ae 1A80     		strh	r2, [r3, #0]	@ movhi
2087:C:/StellarisWare/driverlib\usb.c ****             ulMaxPacketSize;
2088:C:/StellarisWare/driverlib\usb.c **** 
2089:C:/StellarisWare/driverlib\usb.c ****         //
2090:C:/StellarisWare/driverlib\usb.c ****         // The receive control value is zero unless options are enabled.
2091:C:/StellarisWare/driverlib\usb.c ****         //
2092:C:/StellarisWare/driverlib\usb.c ****         ulRegister = 0;
 2474              		.loc 1 2092 0
 2475 00b0 4FF00003 		mov	r3, #0
 2476 00b4 7B61     		str	r3, [r7, #20]
2093:C:/StellarisWare/driverlib\usb.c **** 
2094:C:/StellarisWare/driverlib\usb.c ****         //
2095:C:/StellarisWare/driverlib\usb.c ****         // Allow auto clearing of RxPktRdy when packet of size max packet
2096:C:/StellarisWare/driverlib\usb.c ****         // has been unloaded from the FIFO.
2097:C:/StellarisWare/driverlib\usb.c ****         //
2098:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_AUTO_CLEAR)
 2477              		.loc 1 2098 0
 2478 00b6 3B68     		ldr	r3, [r7, #0]
 2479 00b8 03F00403 		and	r3, r3, #4
 2480 00bc 002B     		cmp	r3, #0
 2481 00be 02D0     		beq	.L107
2099:C:/StellarisWare/driverlib\usb.c ****         {
2100:C:/StellarisWare/driverlib\usb.c ****             ulRegister = USB_RXCSRH1_AUTOCL;
 2482              		.loc 1 2100 0
 2483 00c0 4FF08003 		mov	r3, #128
 2484 00c4 7B61     		str	r3, [r7, #20]
 2485              	.L107:
2101:C:/StellarisWare/driverlib\usb.c ****         }
2102:C:/StellarisWare/driverlib\usb.c **** 
2103:C:/StellarisWare/driverlib\usb.c ****         //
2104:C:/StellarisWare/driverlib\usb.c ****         // Configure the DMA mode.
2105:C:/StellarisWare/driverlib\usb.c ****         //
2106:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_DMA_MODE_1)
 2486              		.loc 1 2106 0
 2487 00c6 3B68     		ldr	r3, [r7, #0]
 2488 00c8 03F01003 		and	r3, r3, #16
 2489 00cc 002B     		cmp	r3, #0
 2490 00ce 04D0     		beq	.L108
2107:C:/StellarisWare/driverlib\usb.c ****         {
2108:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_RXCSRH1_DMAEN | USB_RXCSRH1_DMAMOD;
 2491              		.loc 1 2108 0
 2492 00d0 7B69     		ldr	r3, [r7, #20]
 2493 00d2 43F02803 		orr	r3, r3, #40
 2494 00d6 7B61     		str	r3, [r7, #20]
 2495 00d8 08E0     		b	.L109
 2496              	.L108:
2109:C:/StellarisWare/driverlib\usb.c ****         }
2110:C:/StellarisWare/driverlib\usb.c ****         else if(ulFlags & USB_EP_DMA_MODE_0)
 2497              		.loc 1 2110 0
 2498 00da 3B68     		ldr	r3, [r7, #0]
 2499 00dc 03F00803 		and	r3, r3, #8
 2500 00e0 002B     		cmp	r3, #0
 2501 00e2 03D0     		beq	.L109
2111:C:/StellarisWare/driverlib\usb.c ****         {
2112:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_RXCSRH1_DMAEN;
 2502              		.loc 1 2112 0
 2503 00e4 7B69     		ldr	r3, [r7, #20]
 2504 00e6 43F02003 		orr	r3, r3, #32
 2505 00ea 7B61     		str	r3, [r7, #20]
 2506              	.L109:
2113:C:/StellarisWare/driverlib\usb.c ****         }
2114:C:/StellarisWare/driverlib\usb.c **** 
2115:C:/StellarisWare/driverlib\usb.c ****         //
2116:C:/StellarisWare/driverlib\usb.c ****         // Enable isochronous mode if requested.
2117:C:/StellarisWare/driverlib\usb.c ****         //
2118:C:/StellarisWare/driverlib\usb.c ****         if((ulFlags & USB_EP_MODE_MASK) == USB_EP_MODE_ISOC)
 2507              		.loc 1 2118 0
 2508 00ec 3B68     		ldr	r3, [r7, #0]
 2509 00ee 03F44073 		and	r3, r3, #768
 2510 00f2 002B     		cmp	r3, #0
 2511 00f4 03D1     		bne	.L110
2119:C:/StellarisWare/driverlib\usb.c ****         {
2120:C:/StellarisWare/driverlib\usb.c ****             ulRegister |= USB_RXCSRH1_ISO;
 2512              		.loc 1 2120 0
 2513 00f6 7B69     		ldr	r3, [r7, #20]
 2514 00f8 43F04003 		orr	r3, r3, #64
 2515 00fc 7B61     		str	r3, [r7, #20]
 2516              	.L110:
2121:C:/StellarisWare/driverlib\usb.c ****         }
2122:C:/StellarisWare/driverlib\usb.c **** 
2123:C:/StellarisWare/driverlib\usb.c ****         //
2124:C:/StellarisWare/driverlib\usb.c ****         // Write the receive control value.
2125:C:/StellarisWare/driverlib\usb.c ****         //
2126:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
 2517              		.loc 1 2126 0
 2518 00fe BA68     		ldr	r2, [r7, #8]
 2519 0100 FB68     		ldr	r3, [r7, #12]
 2520 0102 D318     		adds	r3, r2, r3
 2521 0104 03F58273 		add	r3, r3, #260
 2522 0108 03F10303 		add	r3, r3, #3
2127:C:/StellarisWare/driverlib\usb.c ****             (unsigned char)ulRegister;
 2523              		.loc 1 2127 0
 2524 010c 7A69     		ldr	r2, [r7, #20]
 2525 010e D2B2     		uxtb	r2, r2
2126:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) =
 2526              		.loc 1 2126 0
 2527 0110 1A70     		strb	r2, [r3, #0]
2128:C:/StellarisWare/driverlib\usb.c **** 
2129:C:/StellarisWare/driverlib\usb.c ****         //
2130:C:/StellarisWare/driverlib\usb.c ****         // Reset the Data toggle to zero.
2131:C:/StellarisWare/driverlib\usb.c ****         //
2132:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1) =
 2528              		.loc 1 2132 0
 2529 0112 BA68     		ldr	r2, [r7, #8]
 2530 0114 FB68     		ldr	r3, [r7, #12]
 2531 0116 D318     		adds	r3, r2, r3
 2532 0118 03F58373 		add	r3, r3, #262
 2533 011c 4FF08002 		mov	r2, #128
 2534 0120 1A70     		strb	r2, [r3, #0]
 2535              	.L100:
2133:C:/StellarisWare/driverlib\usb.c ****             USB_RXCSRL1_CLRDT;
2134:C:/StellarisWare/driverlib\usb.c ****     }
2135:C:/StellarisWare/driverlib\usb.c **** }
 2536              		.loc 1 2135 0
 2537 0122 07F11C07 		add	r7, r7, #28
 2538 0126 BD46     		mov	sp, r7
 2539 0128 80BC     		pop	{r7}
 2540 012a 7047     		bx	lr
 2541              		.cfi_endproc
 2542              	.LFE29:
 2544              		.section	.text.USBDevEndpointConfigGet,"ax",%progbits
 2545              		.align	2
 2546              		.global	USBDevEndpointConfigGet
 2547              		.thumb
 2548              		.thumb_func
 2550              	USBDevEndpointConfigGet:
 2551              	.LFB30:
2136:C:/StellarisWare/driverlib\usb.c **** 
2137:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2138:C:/StellarisWare/driverlib\usb.c **** //
2139:C:/StellarisWare/driverlib\usb.c **** //! Gets the current configuration for an endpoint.
2140:C:/StellarisWare/driverlib\usb.c **** //!
2141:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2142:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2143:C:/StellarisWare/driverlib\usb.c **** //! \param pulMaxPacketSize is a pointer which is written with the maximum
2144:C:/StellarisWare/driverlib\usb.c **** //! packet size for this endpoint.
2145:C:/StellarisWare/driverlib\usb.c **** //! \param pulFlags is a pointer which is written with the current endpoint
2146:C:/StellarisWare/driverlib\usb.c **** //! settings.  On entry to the function, this pointer must contain either
2147:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_DEV_IN or \b USB_EP_DEV_OUT to indicate whether the IN or OUT
2148:C:/StellarisWare/driverlib\usb.c **** //! endpoint is to be queried.
2149:C:/StellarisWare/driverlib\usb.c **** //!
2150:C:/StellarisWare/driverlib\usb.c **** //! This function returns the basic configuration for an endpoint in device
2151:C:/StellarisWare/driverlib\usb.c **** //! mode. The values returned in \e *pulMaxPacketSize and \e *pulFlags are
2152:C:/StellarisWare/driverlib\usb.c **** //! equivalent to the \e ulMaxPacketSize and \e ulFlags previously passed to
2153:C:/StellarisWare/driverlib\usb.c **** //! USBDevEndpointConfigSet() for this endpoint.
2154:C:/StellarisWare/driverlib\usb.c **** //!
2155:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
2156:C:/StellarisWare/driverlib\usb.c **** //!
2157:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2158:C:/StellarisWare/driverlib\usb.c **** //
2159:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2160:C:/StellarisWare/driverlib\usb.c **** void
2161:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointConfigGet(unsigned long ulBase, unsigned long ulEndpoint,
2162:C:/StellarisWare/driverlib\usb.c ****                         unsigned long *pulMaxPacketSize,
2163:C:/StellarisWare/driverlib\usb.c ****                         unsigned long *pulFlags)
2164:C:/StellarisWare/driverlib\usb.c **** {
 2552              		.loc 1 2164 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 24
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557 0000 80B4     		push	{r7}
 2558              	.LCFI90:
 2559              		.cfi_def_cfa_offset 4
 2560              		.cfi_offset 7, -4
 2561 0002 87B0     		sub	sp, sp, #28
 2562              	.LCFI91:
 2563              		.cfi_def_cfa_offset 32
 2564 0004 00AF     		add	r7, sp, #0
 2565              	.LCFI92:
 2566              		.cfi_def_cfa_register 7
 2567 0006 F860     		str	r0, [r7, #12]
 2568 0008 B960     		str	r1, [r7, #8]
 2569 000a 7A60     		str	r2, [r7, #4]
 2570 000c 3B60     		str	r3, [r7, #0]
2165:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
2166:C:/StellarisWare/driverlib\usb.c **** 
2167:C:/StellarisWare/driverlib\usb.c ****     //
2168:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2169:C:/StellarisWare/driverlib\usb.c ****     //
2170:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2171:C:/StellarisWare/driverlib\usb.c ****     ASSERT(pulMaxPacketSize && pulFlags);
2172:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
2173:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
2174:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
2175:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
2176:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
2177:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
2178:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
2179:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
2180:C:/StellarisWare/driverlib\usb.c **** 
2181:C:/StellarisWare/driverlib\usb.c ****     //
2182:C:/StellarisWare/driverlib\usb.c ****     // Determine if a transmit or receive endpoint is being queried.
2183:C:/StellarisWare/driverlib\usb.c ****     //
2184:C:/StellarisWare/driverlib\usb.c ****     if(*pulFlags & USB_EP_DEV_IN)
 2571              		.loc 1 2184 0
 2572 000e 3B68     		ldr	r3, [r7, #0]
 2573 0010 1B68     		ldr	r3, [r3, #0]
 2574 0012 03F40053 		and	r3, r3, #8192
 2575 0016 002B     		cmp	r3, #0
 2576 0018 4AD0     		beq	.L112
2185:C:/StellarisWare/driverlib\usb.c ****     {
2186:C:/StellarisWare/driverlib\usb.c ****         //
2187:C:/StellarisWare/driverlib\usb.c ****         // Clear the flags other than the direction bit.
2188:C:/StellarisWare/driverlib\usb.c ****         //
2189:C:/StellarisWare/driverlib\usb.c ****         *pulFlags = USB_EP_DEV_IN;
 2577              		.loc 1 2189 0
 2578 001a 3B68     		ldr	r3, [r7, #0]
 2579 001c 4FF40052 		mov	r2, #8192
 2580 0020 1A60     		str	r2, [r3, #0]
2190:C:/StellarisWare/driverlib\usb.c **** 
2191:C:/StellarisWare/driverlib\usb.c ****         //
2192:C:/StellarisWare/driverlib\usb.c ****         // Get the maximum packet size.
2193:C:/StellarisWare/driverlib\usb.c ****         //
2194:C:/StellarisWare/driverlib\usb.c ****         *pulMaxPacketSize = (unsigned long)HWREGH(ulBase +
 2581              		.loc 1 2194 0
 2582 0022 BA68     		ldr	r2, [r7, #8]
 2583 0024 FB68     		ldr	r3, [r7, #12]
 2584 0026 D318     		adds	r3, r2, r3
 2585 0028 03F58073 		add	r3, r3, #256
 2586 002c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2587 002e 9BB2     		uxth	r3, r3
 2588 0030 1A46     		mov	r2, r3
 2589 0032 7B68     		ldr	r3, [r7, #4]
 2590 0034 1A60     		str	r2, [r3, #0]
2195:C:/StellarisWare/driverlib\usb.c ****                                                   EP_OFFSET(ulEndpoint) +
2196:C:/StellarisWare/driverlib\usb.c ****                                                   USB_O_TXMAXP1);
2197:C:/StellarisWare/driverlib\usb.c **** 
2198:C:/StellarisWare/driverlib\usb.c ****         //
2199:C:/StellarisWare/driverlib\usb.c ****         // Get the current transmit control register value.
2200:C:/StellarisWare/driverlib\usb.c ****         //
2201:C:/StellarisWare/driverlib\usb.c ****         ulRegister = (unsigned long)HWREGB(ulBase + EP_OFFSET(ulEndpoint) +
 2591              		.loc 1 2201 0
 2592 0036 BA68     		ldr	r2, [r7, #8]
 2593 0038 FB68     		ldr	r3, [r7, #12]
 2594 003a D318     		adds	r3, r2, r3
 2595 003c 03F58073 		add	r3, r3, #256
 2596 0040 03F10303 		add	r3, r3, #3
 2597 0044 1B78     		ldrb	r3, [r3, #0]
 2598 0046 DBB2     		uxtb	r3, r3
 2599 0048 7B61     		str	r3, [r7, #20]
2202:C:/StellarisWare/driverlib\usb.c ****                                            USB_O_TXCSRH1);
2203:C:/StellarisWare/driverlib\usb.c **** 
2204:C:/StellarisWare/driverlib\usb.c ****         //
2205:C:/StellarisWare/driverlib\usb.c ****         // Are we allowing auto setting of TxPktRdy when max packet size has
2206:C:/StellarisWare/driverlib\usb.c ****         // been loaded into the FIFO?
2207:C:/StellarisWare/driverlib\usb.c ****         //
2208:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_TXCSRH1_AUTOSET)
 2600              		.loc 1 2208 0
 2601 004a 7B69     		ldr	r3, [r7, #20]
 2602 004c 03F08003 		and	r3, r3, #128
 2603 0050 002B     		cmp	r3, #0
 2604 0052 05D0     		beq	.L113
2209:C:/StellarisWare/driverlib\usb.c ****         {
2210:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_AUTO_SET;
 2605              		.loc 1 2210 0
 2606 0054 3B68     		ldr	r3, [r7, #0]
 2607 0056 1B68     		ldr	r3, [r3, #0]
 2608 0058 43F00102 		orr	r2, r3, #1
 2609 005c 3B68     		ldr	r3, [r7, #0]
 2610 005e 1A60     		str	r2, [r3, #0]
 2611              	.L113:
2211:C:/StellarisWare/driverlib\usb.c ****         }
2212:C:/StellarisWare/driverlib\usb.c **** 
2213:C:/StellarisWare/driverlib\usb.c ****         //
2214:C:/StellarisWare/driverlib\usb.c ****         // Get the DMA mode.
2215:C:/StellarisWare/driverlib\usb.c ****         //
2216:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_TXCSRH1_DMAEN)
 2612              		.loc 1 2216 0
 2613 0060 7B69     		ldr	r3, [r7, #20]
 2614 0062 03F01003 		and	r3, r3, #16
 2615 0066 002B     		cmp	r3, #0
 2616 0068 11D0     		beq	.L114
2217:C:/StellarisWare/driverlib\usb.c ****         {
2218:C:/StellarisWare/driverlib\usb.c ****             if(ulRegister & USB_TXCSRH1_DMAMOD)
 2617              		.loc 1 2218 0
 2618 006a 7B69     		ldr	r3, [r7, #20]
 2619 006c 03F00403 		and	r3, r3, #4
 2620 0070 002B     		cmp	r3, #0
 2621 0072 06D0     		beq	.L115
2219:C:/StellarisWare/driverlib\usb.c ****             {
2220:C:/StellarisWare/driverlib\usb.c ****                 *pulFlags |= USB_EP_DMA_MODE_1;
 2622              		.loc 1 2220 0
 2623 0074 3B68     		ldr	r3, [r7, #0]
 2624 0076 1B68     		ldr	r3, [r3, #0]
 2625 0078 43F01002 		orr	r2, r3, #16
 2626 007c 3B68     		ldr	r3, [r7, #0]
 2627 007e 1A60     		str	r2, [r3, #0]
 2628 0080 05E0     		b	.L114
 2629              	.L115:
2221:C:/StellarisWare/driverlib\usb.c ****             }
2222:C:/StellarisWare/driverlib\usb.c ****             else
2223:C:/StellarisWare/driverlib\usb.c ****             {
2224:C:/StellarisWare/driverlib\usb.c ****                 *pulFlags |= USB_EP_DMA_MODE_0;
 2630              		.loc 1 2224 0
 2631 0082 3B68     		ldr	r3, [r7, #0]
 2632 0084 1B68     		ldr	r3, [r3, #0]
 2633 0086 43F00802 		orr	r2, r3, #8
 2634 008a 3B68     		ldr	r3, [r7, #0]
 2635 008c 1A60     		str	r2, [r3, #0]
 2636              	.L114:
2225:C:/StellarisWare/driverlib\usb.c ****             }
2226:C:/StellarisWare/driverlib\usb.c ****         }
2227:C:/StellarisWare/driverlib\usb.c **** 
2228:C:/StellarisWare/driverlib\usb.c ****         //
2229:C:/StellarisWare/driverlib\usb.c ****         // Are we in isochronous mode?
2230:C:/StellarisWare/driverlib\usb.c ****         //
2231:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_TXCSRH1_ISO)
 2637              		.loc 1 2231 0
 2638 008e 7B69     		ldr	r3, [r7, #20]
 2639 0090 03F04003 		and	r3, r3, #64
 2640 0094 002B     		cmp	r3, #0
 2641 0096 04D0     		beq	.L116
2232:C:/StellarisWare/driverlib\usb.c ****         {
2233:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_MODE_ISOC;
 2642              		.loc 1 2233 0
 2643 0098 3B68     		ldr	r3, [r7, #0]
 2644 009a 1A68     		ldr	r2, [r3, #0]
 2645 009c 3B68     		ldr	r3, [r7, #0]
 2646 009e 1A60     		str	r2, [r3, #0]
 2647 00a0 50E0     		b	.L111
 2648              	.L116:
2234:C:/StellarisWare/driverlib\usb.c ****         }
2235:C:/StellarisWare/driverlib\usb.c ****         else
2236:C:/StellarisWare/driverlib\usb.c ****         {
2237:C:/StellarisWare/driverlib\usb.c ****             //
2238:C:/StellarisWare/driverlib\usb.c ****             // The hardware doesn't differentiate between bulk, interrupt
2239:C:/StellarisWare/driverlib\usb.c ****             // and control mode for the endpoint so we just set something
2240:C:/StellarisWare/driverlib\usb.c ****             // that isn't isochronous.  This protocol ensures that anyone
2241:C:/StellarisWare/driverlib\usb.c ****             // modifying the returned flags in preparation for a call to
2242:C:/StellarisWare/driverlib\usb.c ****             // USBDevEndpointConfigSet do not see an unexpected mode change.
2243:C:/StellarisWare/driverlib\usb.c ****             // If they decode the returned mode, however, they may be in for
2244:C:/StellarisWare/driverlib\usb.c ****             // a surprise.
2245:C:/StellarisWare/driverlib\usb.c ****             //
2246:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_MODE_BULK;
 2649              		.loc 1 2246 0
 2650 00a2 3B68     		ldr	r3, [r7, #0]
 2651 00a4 1B68     		ldr	r3, [r3, #0]
 2652 00a6 43F48072 		orr	r2, r3, #256
 2653 00aa 3B68     		ldr	r3, [r7, #0]
 2654 00ac 1A60     		str	r2, [r3, #0]
 2655 00ae 49E0     		b	.L111
 2656              	.L112:
2247:C:/StellarisWare/driverlib\usb.c ****         }
2248:C:/StellarisWare/driverlib\usb.c ****     }
2249:C:/StellarisWare/driverlib\usb.c ****     else
2250:C:/StellarisWare/driverlib\usb.c ****     {
2251:C:/StellarisWare/driverlib\usb.c ****         //
2252:C:/StellarisWare/driverlib\usb.c ****         // Clear the flags other than the direction bit.
2253:C:/StellarisWare/driverlib\usb.c ****         //
2254:C:/StellarisWare/driverlib\usb.c ****         *pulFlags = USB_EP_DEV_OUT;
 2657              		.loc 1 2254 0
 2658 00b0 3B68     		ldr	r3, [r7, #0]
 2659 00b2 4FF00002 		mov	r2, #0
 2660 00b6 1A60     		str	r2, [r3, #0]
2255:C:/StellarisWare/driverlib\usb.c **** 
2256:C:/StellarisWare/driverlib\usb.c ****         //
2257:C:/StellarisWare/driverlib\usb.c ****         // Get the MaxPacketSize.
2258:C:/StellarisWare/driverlib\usb.c ****         //
2259:C:/StellarisWare/driverlib\usb.c ****         *pulMaxPacketSize = (unsigned long)HWREGH(ulBase +
 2661              		.loc 1 2259 0
 2662 00b8 BA68     		ldr	r2, [r7, #8]
 2663 00ba FB68     		ldr	r3, [r7, #12]
 2664 00bc D318     		adds	r3, r2, r3
 2665 00be 03F58273 		add	r3, r3, #260
 2666 00c2 1B88     		ldrh	r3, [r3, #0]	@ movhi
 2667 00c4 9BB2     		uxth	r3, r3
 2668 00c6 1A46     		mov	r2, r3
 2669 00c8 7B68     		ldr	r3, [r7, #4]
 2670 00ca 1A60     		str	r2, [r3, #0]
2260:C:/StellarisWare/driverlib\usb.c ****                                                   EP_OFFSET(ulEndpoint) +
2261:C:/StellarisWare/driverlib\usb.c ****                                                   USB_O_RXMAXP1);
2262:C:/StellarisWare/driverlib\usb.c **** 
2263:C:/StellarisWare/driverlib\usb.c ****         //
2264:C:/StellarisWare/driverlib\usb.c ****         // Get the current receive control register value.
2265:C:/StellarisWare/driverlib\usb.c ****         //
2266:C:/StellarisWare/driverlib\usb.c ****         ulRegister = (unsigned long)HWREGB(ulBase + EP_OFFSET(ulEndpoint) +
 2671              		.loc 1 2266 0
 2672 00cc BA68     		ldr	r2, [r7, #8]
 2673 00ce FB68     		ldr	r3, [r7, #12]
 2674 00d0 D318     		adds	r3, r2, r3
 2675 00d2 03F58273 		add	r3, r3, #260
 2676 00d6 03F10303 		add	r3, r3, #3
 2677 00da 1B78     		ldrb	r3, [r3, #0]
 2678 00dc DBB2     		uxtb	r3, r3
 2679 00de 7B61     		str	r3, [r7, #20]
2267:C:/StellarisWare/driverlib\usb.c ****                                            USB_O_RXCSRH1);
2268:C:/StellarisWare/driverlib\usb.c **** 
2269:C:/StellarisWare/driverlib\usb.c ****         //
2270:C:/StellarisWare/driverlib\usb.c ****         // Are we allowing auto clearing of RxPktRdy when packet of size max
2271:C:/StellarisWare/driverlib\usb.c ****         // packet has been unloaded from the FIFO?
2272:C:/StellarisWare/driverlib\usb.c ****         //
2273:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_RXCSRH1_AUTOCL)
 2680              		.loc 1 2273 0
 2681 00e0 7B69     		ldr	r3, [r7, #20]
 2682 00e2 03F08003 		and	r3, r3, #128
 2683 00e6 002B     		cmp	r3, #0
 2684 00e8 05D0     		beq	.L118
2274:C:/StellarisWare/driverlib\usb.c ****         {
2275:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_AUTO_CLEAR;
 2685              		.loc 1 2275 0
 2686 00ea 3B68     		ldr	r3, [r7, #0]
 2687 00ec 1B68     		ldr	r3, [r3, #0]
 2688 00ee 43F00402 		orr	r2, r3, #4
 2689 00f2 3B68     		ldr	r3, [r7, #0]
 2690 00f4 1A60     		str	r2, [r3, #0]
 2691              	.L118:
2276:C:/StellarisWare/driverlib\usb.c ****         }
2277:C:/StellarisWare/driverlib\usb.c **** 
2278:C:/StellarisWare/driverlib\usb.c ****         //
2279:C:/StellarisWare/driverlib\usb.c ****         // Get the DMA mode.
2280:C:/StellarisWare/driverlib\usb.c ****         //
2281:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_RXCSRH1_DMAEN)
 2692              		.loc 1 2281 0
 2693 00f6 7B69     		ldr	r3, [r7, #20]
 2694 00f8 03F02003 		and	r3, r3, #32
 2695 00fc 002B     		cmp	r3, #0
 2696 00fe 11D0     		beq	.L119
2282:C:/StellarisWare/driverlib\usb.c ****         {
2283:C:/StellarisWare/driverlib\usb.c ****             if(ulRegister & USB_RXCSRH1_DMAMOD)
 2697              		.loc 1 2283 0
 2698 0100 7B69     		ldr	r3, [r7, #20]
 2699 0102 03F00803 		and	r3, r3, #8
 2700 0106 002B     		cmp	r3, #0
 2701 0108 06D0     		beq	.L120
2284:C:/StellarisWare/driverlib\usb.c ****             {
2285:C:/StellarisWare/driverlib\usb.c ****                 *pulFlags |= USB_EP_DMA_MODE_1;
 2702              		.loc 1 2285 0
 2703 010a 3B68     		ldr	r3, [r7, #0]
 2704 010c 1B68     		ldr	r3, [r3, #0]
 2705 010e 43F01002 		orr	r2, r3, #16
 2706 0112 3B68     		ldr	r3, [r7, #0]
 2707 0114 1A60     		str	r2, [r3, #0]
 2708 0116 05E0     		b	.L119
 2709              	.L120:
2286:C:/StellarisWare/driverlib\usb.c ****             }
2287:C:/StellarisWare/driverlib\usb.c ****             else
2288:C:/StellarisWare/driverlib\usb.c ****             {
2289:C:/StellarisWare/driverlib\usb.c ****                 *pulFlags |= USB_EP_DMA_MODE_0;
 2710              		.loc 1 2289 0
 2711 0118 3B68     		ldr	r3, [r7, #0]
 2712 011a 1B68     		ldr	r3, [r3, #0]
 2713 011c 43F00802 		orr	r2, r3, #8
 2714 0120 3B68     		ldr	r3, [r7, #0]
 2715 0122 1A60     		str	r2, [r3, #0]
 2716              	.L119:
2290:C:/StellarisWare/driverlib\usb.c ****             }
2291:C:/StellarisWare/driverlib\usb.c ****         }
2292:C:/StellarisWare/driverlib\usb.c **** 
2293:C:/StellarisWare/driverlib\usb.c ****         //
2294:C:/StellarisWare/driverlib\usb.c ****         // Are we in isochronous mode?
2295:C:/StellarisWare/driverlib\usb.c ****         //
2296:C:/StellarisWare/driverlib\usb.c ****         if(ulRegister & USB_RXCSRH1_ISO)
 2717              		.loc 1 2296 0
 2718 0124 7B69     		ldr	r3, [r7, #20]
 2719 0126 03F04003 		and	r3, r3, #64
 2720 012a 002B     		cmp	r3, #0
 2721 012c 04D0     		beq	.L121
2297:C:/StellarisWare/driverlib\usb.c ****         {
2298:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_MODE_ISOC;
 2722              		.loc 1 2298 0
 2723 012e 3B68     		ldr	r3, [r7, #0]
 2724 0130 1A68     		ldr	r2, [r3, #0]
 2725 0132 3B68     		ldr	r3, [r7, #0]
 2726 0134 1A60     		str	r2, [r3, #0]
 2727 0136 05E0     		b	.L111
 2728              	.L121:
2299:C:/StellarisWare/driverlib\usb.c ****         }
2300:C:/StellarisWare/driverlib\usb.c ****         else
2301:C:/StellarisWare/driverlib\usb.c ****         {
2302:C:/StellarisWare/driverlib\usb.c ****             //
2303:C:/StellarisWare/driverlib\usb.c ****             // The hardware doesn't differentiate between bulk, interrupt
2304:C:/StellarisWare/driverlib\usb.c ****             // and control mode for the endpoint so we just set something
2305:C:/StellarisWare/driverlib\usb.c ****             // that isn't isochronous.  This protocol ensures that anyone
2306:C:/StellarisWare/driverlib\usb.c ****             // modifying the returned flags in preparation for a call to
2307:C:/StellarisWare/driverlib\usb.c ****             // USBDevEndpointConfigSet do not see an unexpected mode change.
2308:C:/StellarisWare/driverlib\usb.c ****             // If they decode the returned mode, however, they may be in for
2309:C:/StellarisWare/driverlib\usb.c ****             // a surprise.
2310:C:/StellarisWare/driverlib\usb.c ****             //
2311:C:/StellarisWare/driverlib\usb.c ****             *pulFlags |= USB_EP_MODE_BULK;
 2729              		.loc 1 2311 0
 2730 0138 3B68     		ldr	r3, [r7, #0]
 2731 013a 1B68     		ldr	r3, [r3, #0]
 2732 013c 43F48072 		orr	r2, r3, #256
 2733 0140 3B68     		ldr	r3, [r7, #0]
 2734 0142 1A60     		str	r2, [r3, #0]
 2735              	.L111:
2312:C:/StellarisWare/driverlib\usb.c ****         }
2313:C:/StellarisWare/driverlib\usb.c ****     }
2314:C:/StellarisWare/driverlib\usb.c **** }
 2736              		.loc 1 2314 0
 2737 0144 07F11C07 		add	r7, r7, #28
 2738 0148 BD46     		mov	sp, r7
 2739 014a 80BC     		pop	{r7}
 2740 014c 7047     		bx	lr
 2741              		.cfi_endproc
 2742              	.LFE30:
 2744 014e 00BF     		.section	.text.USBFIFOConfigSet,"ax",%progbits
 2745              		.align	2
 2746              		.global	USBFIFOConfigSet
 2747              		.thumb
 2748              		.thumb_func
 2750              	USBFIFOConfigSet:
 2751              	.LFB31:
2315:C:/StellarisWare/driverlib\usb.c **** 
2316:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2317:C:/StellarisWare/driverlib\usb.c **** //
2318:C:/StellarisWare/driverlib\usb.c **** //! Sets the FIFO configuration for an endpoint.
2319:C:/StellarisWare/driverlib\usb.c **** //!
2320:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2321:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2322:C:/StellarisWare/driverlib\usb.c **** //! \param ulFIFOAddress is the starting address for the FIFO.
2323:C:/StellarisWare/driverlib\usb.c **** //! \param ulFIFOSize is the size of the FIFO specified by one of the
2324:C:/StellarisWare/driverlib\usb.c **** //! USB_FIFO_SZ_ values.
2325:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies what information to set in the FIFO configuration.
2326:C:/StellarisWare/driverlib\usb.c **** //!
2327:C:/StellarisWare/driverlib\usb.c **** //! This function configures the starting FIFO RAM address and size of the FIFO
2328:C:/StellarisWare/driverlib\usb.c **** //! for a given endpoint.  Endpoint zero does not have a dynamically
2329:C:/StellarisWare/driverlib\usb.c **** //! configurable FIFO, so this function should not be called for endpoint zero.
2330:C:/StellarisWare/driverlib\usb.c **** //! The \e ulFIFOSize parameter should be one of the values in the
2331:C:/StellarisWare/driverlib\usb.c **** //! \b USB_FIFO_SZ_ values.  If the endpoint is going to use double buffering,
2332:C:/StellarisWare/driverlib\usb.c **** //! it should use the values with the \b _DB at the end of the value.  For
2333:C:/StellarisWare/driverlib\usb.c **** //! example, use \b USB_FIFO_SZ_16_DB to configure an endpoint to have a 16-
2334:C:/StellarisWare/driverlib\usb.c **** //! byte, double-buffered FIFO.  If a double-buffered FIFO is used, then the
2335:C:/StellarisWare/driverlib\usb.c **** //! actual size of the FIFO is twice the size indicated by the \e ulFIFOSize
2336:C:/StellarisWare/driverlib\usb.c **** //! parameter.  For example, the \b USB_FIFO_SZ_16_DB value uses 32 bytes of
2337:C:/StellarisWare/driverlib\usb.c **** //! the USB controller's FIFO memory.
2338:C:/StellarisWare/driverlib\usb.c **** //!
2339:C:/StellarisWare/driverlib\usb.c **** //! The \e ulFIFOAddress value should be a multiple of 8 bytes and directly
2340:C:/StellarisWare/driverlib\usb.c **** //! indicates the starting address in the USB controller's FIFO RAM.  For
2341:C:/StellarisWare/driverlib\usb.c **** //! example, a value of 64 indicates that the FIFO should start 64 bytes into
2342:C:/StellarisWare/driverlib\usb.c **** //! the USB controller's FIFO memory.  The \e ulFlags value specifies whether
2343:C:/StellarisWare/driverlib\usb.c **** //! the endpoint's OUT or IN FIFO should be configured.  If in host mode, use
2344:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_HOST_OUT or \b USB_EP_HOST_IN, and if in device mode, use
2345:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_DEV_OUT or \b USB_EP_DEV_IN.
2346:C:/StellarisWare/driverlib\usb.c **** //!
2347:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2348:C:/StellarisWare/driverlib\usb.c **** //
2349:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2350:C:/StellarisWare/driverlib\usb.c **** void
2351:C:/StellarisWare/driverlib\usb.c **** USBFIFOConfigSet(unsigned long ulBase, unsigned long ulEndpoint,
2352:C:/StellarisWare/driverlib\usb.c ****                  unsigned long ulFIFOAddress, unsigned long ulFIFOSize,
2353:C:/StellarisWare/driverlib\usb.c ****                  unsigned long ulFlags)
2354:C:/StellarisWare/driverlib\usb.c **** {
 2752              		.loc 1 2354 0
 2753              		.cfi_startproc
 2754              		@ args = 4, pretend = 0, frame = 16
 2755              		@ frame_needed = 1, uses_anonymous_args = 0
 2756 0000 80B5     		push	{r7, lr}
 2757              	.LCFI93:
 2758              		.cfi_def_cfa_offset 8
 2759              		.cfi_offset 14, -4
 2760              		.cfi_offset 7, -8
 2761 0002 86B0     		sub	sp, sp, #24
 2762              	.LCFI94:
 2763              		.cfi_def_cfa_offset 32
 2764 0004 02AF     		add	r7, sp, #8
 2765              	.LCFI95:
 2766              		.cfi_def_cfa 7, 24
 2767 0006 F860     		str	r0, [r7, #12]
 2768 0008 B960     		str	r1, [r7, #8]
 2769 000a 7A60     		str	r2, [r7, #4]
 2770 000c 3B60     		str	r3, [r7, #0]
2355:C:/StellarisWare/driverlib\usb.c ****     //
2356:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2357:C:/StellarisWare/driverlib\usb.c ****     //
2358:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2359:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
2360:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
2361:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
2362:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
2363:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
2364:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
2365:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
2366:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
2367:C:/StellarisWare/driverlib\usb.c **** 
2368:C:/StellarisWare/driverlib\usb.c ****     //
2369:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit or receive FIFO is being configured.
2370:C:/StellarisWare/driverlib\usb.c ****     //
2371:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_EP_HOST_OUT | USB_EP_DEV_IN))
 2771              		.loc 1 2371 0
 2772 000e BB69     		ldr	r3, [r7, #24]
 2773 0010 03F40053 		and	r3, r3, #8192
 2774 0014 002B     		cmp	r3, #0
 2775 0016 1CD0     		beq	.L123
2372:C:/StellarisWare/driverlib\usb.c ****     {
2373:C:/StellarisWare/driverlib\usb.c ****         //
2374:C:/StellarisWare/driverlib\usb.c ****         // Set the transmit FIFO location and size for this endpoint.
2375:C:/StellarisWare/driverlib\usb.c ****         //
2376:C:/StellarisWare/driverlib\usb.c ****         USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_TXFIFOSZ, ulFIFOSize, 1);
 2776              		.loc 1 2376 0
 2777 0018 BB68     		ldr	r3, [r7, #8]
 2778 001a 4FEA1313 		lsr	r3, r3, #4
 2779 001e 4FF00102 		mov	r2, #1
 2780 0022 0092     		str	r2, [sp, #0]
 2781 0024 F868     		ldr	r0, [r7, #12]
 2782 0026 1946     		mov	r1, r3
 2783 0028 4FF06202 		mov	r2, #98
 2784 002c 3B68     		ldr	r3, [r7, #0]
 2785 002e FFF7FEFF 		bl	USBIndexWrite
2377:C:/StellarisWare/driverlib\usb.c ****         USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_TXFIFOADD,
 2786              		.loc 1 2377 0
 2787 0032 BB68     		ldr	r3, [r7, #8]
 2788 0034 4FEA1312 		lsr	r2, r3, #4
 2789 0038 7B68     		ldr	r3, [r7, #4]
 2790 003a 4FEAD303 		lsr	r3, r3, #3
 2791 003e 4FF00201 		mov	r1, #2
 2792 0042 0091     		str	r1, [sp, #0]
 2793 0044 F868     		ldr	r0, [r7, #12]
 2794 0046 1146     		mov	r1, r2
 2795 0048 4FF06402 		mov	r2, #100
 2796 004c FFF7FEFF 		bl	USBIndexWrite
 2797 0050 1BE0     		b	.L122
 2798              	.L123:
2378:C:/StellarisWare/driverlib\usb.c ****                       ulFIFOAddress >> 3, 2);
2379:C:/StellarisWare/driverlib\usb.c ****     }
2380:C:/StellarisWare/driverlib\usb.c ****     else
2381:C:/StellarisWare/driverlib\usb.c ****     {
2382:C:/StellarisWare/driverlib\usb.c ****         //
2383:C:/StellarisWare/driverlib\usb.c ****         // Set the receive FIFO location and size for this endpoint.
2384:C:/StellarisWare/driverlib\usb.c ****         //
2385:C:/StellarisWare/driverlib\usb.c ****         USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOSZ, ulFIFOSize, 1);
 2799              		.loc 1 2385 0
 2800 0052 BB68     		ldr	r3, [r7, #8]
 2801 0054 4FEA1313 		lsr	r3, r3, #4
 2802 0058 4FF00102 		mov	r2, #1
 2803 005c 0092     		str	r2, [sp, #0]
 2804 005e F868     		ldr	r0, [r7, #12]
 2805 0060 1946     		mov	r1, r3
 2806 0062 4FF06302 		mov	r2, #99
 2807 0066 3B68     		ldr	r3, [r7, #0]
 2808 0068 FFF7FEFF 		bl	USBIndexWrite
2386:C:/StellarisWare/driverlib\usb.c ****         USBIndexWrite(ulBase, ulEndpoint >> 4, USB_O_RXFIFOADD,
 2809              		.loc 1 2386 0
 2810 006c BB68     		ldr	r3, [r7, #8]
 2811 006e 4FEA1312 		lsr	r2, r3, #4
 2812 0072 7B68     		ldr	r3, [r7, #4]
 2813 0074 4FEAD303 		lsr	r3, r3, #3
 2814 0078 4FF00201 		mov	r1, #2
 2815 007c 0091     		str	r1, [sp, #0]
 2816 007e F868     		ldr	r0, [r7, #12]
 2817 0080 1146     		mov	r1, r2
 2818 0082 4FF06602 		mov	r2, #102
 2819 0086 FFF7FEFF 		bl	USBIndexWrite
 2820              	.L122:
2387:C:/StellarisWare/driverlib\usb.c ****                       ulFIFOAddress >> 3, 2);
2388:C:/StellarisWare/driverlib\usb.c ****     }
2389:C:/StellarisWare/driverlib\usb.c **** }
 2821              		.loc 1 2389 0
 2822 008a 07F11007 		add	r7, r7, #16
 2823 008e BD46     		mov	sp, r7
 2824 0090 80BD     		pop	{r7, pc}
 2825              		.cfi_endproc
 2826              	.LFE31:
 2828 0092 00BF     		.section	.text.USBFIFOConfigGet,"ax",%progbits
 2829              		.align	2
 2830              		.global	USBFIFOConfigGet
 2831              		.thumb
 2832              		.thumb_func
 2834              	USBFIFOConfigGet:
 2835              	.LFB32:
2390:C:/StellarisWare/driverlib\usb.c **** 
2391:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2392:C:/StellarisWare/driverlib\usb.c **** //
2393:C:/StellarisWare/driverlib\usb.c **** //! Returns the FIFO configuration for an endpoint.
2394:C:/StellarisWare/driverlib\usb.c **** //!
2395:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2396:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2397:C:/StellarisWare/driverlib\usb.c **** //! \param pulFIFOAddress is the starting address for the FIFO.
2398:C:/StellarisWare/driverlib\usb.c **** //! \param pulFIFOSize is the size of the FIFO as specified by one of the
2399:C:/StellarisWare/driverlib\usb.c **** //! USB_FIFO_SZ_ values.
2400:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies what information to retrieve from the FIFO
2401:C:/StellarisWare/driverlib\usb.c **** //! configuration.
2402:C:/StellarisWare/driverlib\usb.c **** //!
2403:C:/StellarisWare/driverlib\usb.c **** //! This function returns the starting address and size of the FIFO for a
2404:C:/StellarisWare/driverlib\usb.c **** //! given endpoint.  Endpoint zero does not have a dynamically configurable
2405:C:/StellarisWare/driverlib\usb.c **** //! FIFO, so this function should not be called for endpoint zero.  The
2406:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter specifies whether the endpoint's OUT or IN FIFO should
2407:C:/StellarisWare/driverlib\usb.c **** //! be read.  If in host mode, the \e ulFlags parameter should be
2408:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_HOST_OUT or \b USB_EP_HOST_IN, and if in device mode, the
2409:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter should be either \b USB_EP_DEV_OUT or
2410:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_DEV_IN.
2411:C:/StellarisWare/driverlib\usb.c **** //!
2412:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2413:C:/StellarisWare/driverlib\usb.c **** //
2414:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2415:C:/StellarisWare/driverlib\usb.c **** void
2416:C:/StellarisWare/driverlib\usb.c **** USBFIFOConfigGet(unsigned long ulBase, unsigned long ulEndpoint,
2417:C:/StellarisWare/driverlib\usb.c ****                  unsigned long *pulFIFOAddress, unsigned long *pulFIFOSize,
2418:C:/StellarisWare/driverlib\usb.c ****                  unsigned long ulFlags)
2419:C:/StellarisWare/driverlib\usb.c **** {
 2836              		.loc 1 2419 0
 2837              		.cfi_startproc
 2838              		@ args = 4, pretend = 0, frame = 16
 2839              		@ frame_needed = 1, uses_anonymous_args = 0
 2840 0000 80B5     		push	{r7, lr}
 2841              	.LCFI96:
 2842              		.cfi_def_cfa_offset 8
 2843              		.cfi_offset 14, -4
 2844              		.cfi_offset 7, -8
 2845 0002 84B0     		sub	sp, sp, #16
 2846              	.LCFI97:
 2847              		.cfi_def_cfa_offset 24
 2848 0004 00AF     		add	r7, sp, #0
 2849              	.LCFI98:
 2850              		.cfi_def_cfa_register 7
 2851 0006 F860     		str	r0, [r7, #12]
 2852 0008 B960     		str	r1, [r7, #8]
 2853 000a 7A60     		str	r2, [r7, #4]
 2854 000c 3B60     		str	r3, [r7, #0]
2420:C:/StellarisWare/driverlib\usb.c ****     //
2421:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2422:C:/StellarisWare/driverlib\usb.c ****     //
2423:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2424:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
2425:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
2426:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
2427:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
2428:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
2429:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
2430:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
2431:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
2432:C:/StellarisWare/driverlib\usb.c **** 
2433:C:/StellarisWare/driverlib\usb.c ****     //
2434:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit or receive FIFO is being configured.
2435:C:/StellarisWare/driverlib\usb.c ****     //
2436:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & (USB_EP_HOST_OUT | USB_EP_DEV_IN))
 2855              		.loc 1 2436 0
 2856 000e BB69     		ldr	r3, [r7, #24]
 2857 0010 03F40053 		and	r3, r3, #8192
 2858 0014 002B     		cmp	r3, #0
 2859 0016 1ED0     		beq	.L126
2437:C:/StellarisWare/driverlib\usb.c ****     {
2438:C:/StellarisWare/driverlib\usb.c ****         //
2439:C:/StellarisWare/driverlib\usb.c ****         // Get the transmit FIFO location and size for this endpoint.
2440:C:/StellarisWare/driverlib\usb.c ****         //
2441:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOAddress = (USBIndexRead(ulBase, ulEndpoint >> 4,
 2860              		.loc 1 2441 0
 2861 0018 BB68     		ldr	r3, [r7, #8]
 2862 001a 4FEA1313 		lsr	r3, r3, #4
 2863 001e F868     		ldr	r0, [r7, #12]
 2864 0020 1946     		mov	r1, r3
 2865 0022 4FF06402 		mov	r2, #100
 2866 0026 4FF00203 		mov	r3, #2
 2867 002a FFF7FEFF 		bl	USBIndexRead
 2868 002e 0346     		mov	r3, r0
2442:C:/StellarisWare/driverlib\usb.c ****                                         (unsigned long)USB_O_TXFIFOADD,
2443:C:/StellarisWare/driverlib\usb.c ****                                         2)) << 3;
 2869              		.loc 1 2443 0
 2870 0030 4FEAC302 		lsl	r2, r3, #3
2441:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOAddress = (USBIndexRead(ulBase, ulEndpoint >> 4,
 2871              		.loc 1 2441 0
 2872 0034 7B68     		ldr	r3, [r7, #4]
 2873 0036 1A60     		str	r2, [r3, #0]
2444:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOSize = USBIndexRead(ulBase, ulEndpoint >> 4,
 2874              		.loc 1 2444 0
 2875 0038 BB68     		ldr	r3, [r7, #8]
 2876 003a 4FEA1313 		lsr	r3, r3, #4
 2877 003e F868     		ldr	r0, [r7, #12]
 2878 0040 1946     		mov	r1, r3
 2879 0042 4FF06202 		mov	r2, #98
 2880 0046 4FF00103 		mov	r3, #1
 2881 004a FFF7FEFF 		bl	USBIndexRead
 2882 004e 0246     		mov	r2, r0
 2883 0050 3B68     		ldr	r3, [r7, #0]
 2884 0052 1A60     		str	r2, [r3, #0]
 2885 0054 1DE0     		b	.L125
 2886              	.L126:
2445:C:/StellarisWare/driverlib\usb.c ****                                     (unsigned long)USB_O_TXFIFOSZ, 1);
2446:C:/StellarisWare/driverlib\usb.c **** 
2447:C:/StellarisWare/driverlib\usb.c ****     }
2448:C:/StellarisWare/driverlib\usb.c ****     else
2449:C:/StellarisWare/driverlib\usb.c ****     {
2450:C:/StellarisWare/driverlib\usb.c ****         //
2451:C:/StellarisWare/driverlib\usb.c ****         // Get the receive FIFO location and size for this endpoint.
2452:C:/StellarisWare/driverlib\usb.c ****         //
2453:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOAddress = (USBIndexRead(ulBase, ulEndpoint >> 4,
 2887              		.loc 1 2453 0
 2888 0056 BB68     		ldr	r3, [r7, #8]
 2889 0058 4FEA1313 		lsr	r3, r3, #4
 2890 005c F868     		ldr	r0, [r7, #12]
 2891 005e 1946     		mov	r1, r3
 2892 0060 4FF06602 		mov	r2, #102
 2893 0064 4FF00203 		mov	r3, #2
 2894 0068 FFF7FEFF 		bl	USBIndexRead
 2895 006c 0346     		mov	r3, r0
2454:C:/StellarisWare/driverlib\usb.c ****                                         (unsigned long)USB_O_RXFIFOADD,
2455:C:/StellarisWare/driverlib\usb.c ****                                         2)) << 3;
 2896              		.loc 1 2455 0
 2897 006e 4FEAC302 		lsl	r2, r3, #3
2453:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOAddress = (USBIndexRead(ulBase, ulEndpoint >> 4,
 2898              		.loc 1 2453 0
 2899 0072 7B68     		ldr	r3, [r7, #4]
 2900 0074 1A60     		str	r2, [r3, #0]
2456:C:/StellarisWare/driverlib\usb.c ****         *pulFIFOSize = USBIndexRead(ulBase, ulEndpoint >> 4,
 2901              		.loc 1 2456 0
 2902 0076 BB68     		ldr	r3, [r7, #8]
 2903 0078 4FEA1313 		lsr	r3, r3, #4
 2904 007c F868     		ldr	r0, [r7, #12]
 2905 007e 1946     		mov	r1, r3
 2906 0080 4FF06302 		mov	r2, #99
 2907 0084 4FF00103 		mov	r3, #1
 2908 0088 FFF7FEFF 		bl	USBIndexRead
 2909 008c 0246     		mov	r2, r0
 2910 008e 3B68     		ldr	r3, [r7, #0]
 2911 0090 1A60     		str	r2, [r3, #0]
 2912              	.L125:
2457:C:/StellarisWare/driverlib\usb.c ****                                     (unsigned long)USB_O_RXFIFOSZ, 1);
2458:C:/StellarisWare/driverlib\usb.c ****     }
2459:C:/StellarisWare/driverlib\usb.c **** }
 2913              		.loc 1 2459 0
 2914 0092 07F11007 		add	r7, r7, #16
 2915 0096 BD46     		mov	sp, r7
 2916 0098 80BD     		pop	{r7, pc}
 2917              		.cfi_endproc
 2918              	.LFE32:
 2920 009a 00BF     		.section	.text.USBEndpointDMAEnable,"ax",%progbits
 2921              		.align	2
 2922              		.global	USBEndpointDMAEnable
 2923              		.thumb
 2924              		.thumb_func
 2926              	USBEndpointDMAEnable:
 2927              	.LFB33:
2460:C:/StellarisWare/driverlib\usb.c **** 
2461:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2462:C:/StellarisWare/driverlib\usb.c **** //
2463:C:/StellarisWare/driverlib\usb.c **** //! Enable DMA on a given endpoint.
2464:C:/StellarisWare/driverlib\usb.c **** //!
2465:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2466:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2467:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which direction and what mode to use when enabling
2468:C:/StellarisWare/driverlib\usb.c **** //! DMA.
2469:C:/StellarisWare/driverlib\usb.c **** //!
2470:C:/StellarisWare/driverlib\usb.c **** //! This function enables DMA on a given endpoint and configures the mode
2471:C:/StellarisWare/driverlib\usb.c **** //! according to the values in the \e ulFlags parameter.  The \e ulFlags
2472:C:/StellarisWare/driverlib\usb.c **** //! parameter should have \b USB_EP_DEV_IN or \b USB_EP_DEV_OUT set.
2473:C:/StellarisWare/driverlib\usb.c **** //!
2474:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2475:C:/StellarisWare/driverlib\usb.c **** //
2476:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2477:C:/StellarisWare/driverlib\usb.c **** void
2478:C:/StellarisWare/driverlib\usb.c **** USBEndpointDMAEnable(unsigned long ulBase, unsigned long ulEndpoint,
2479:C:/StellarisWare/driverlib\usb.c ****                      unsigned long ulFlags)
2480:C:/StellarisWare/driverlib\usb.c **** {
 2928              		.loc 1 2480 0
 2929              		.cfi_startproc
 2930              		@ args = 0, pretend = 0, frame = 16
 2931              		@ frame_needed = 1, uses_anonymous_args = 0
 2932              		@ link register save eliminated.
 2933 0000 80B4     		push	{r7}
 2934              	.LCFI99:
 2935              		.cfi_def_cfa_offset 4
 2936              		.cfi_offset 7, -4
 2937 0002 85B0     		sub	sp, sp, #20
 2938              	.LCFI100:
 2939              		.cfi_def_cfa_offset 24
 2940 0004 00AF     		add	r7, sp, #0
 2941              	.LCFI101:
 2942              		.cfi_def_cfa_register 7
 2943 0006 F860     		str	r0, [r7, #12]
 2944 0008 B960     		str	r1, [r7, #8]
 2945 000a 7A60     		str	r2, [r7, #4]
2481:C:/StellarisWare/driverlib\usb.c ****     //
2482:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit DMA is being enabled.
2483:C:/StellarisWare/driverlib\usb.c ****     //
2484:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_DEV_IN)
 2946              		.loc 1 2484 0
 2947 000c 7B68     		ldr	r3, [r7, #4]
 2948 000e 03F40053 		and	r3, r3, #8192
 2949 0012 002B     		cmp	r3, #0
 2950 0014 15D0     		beq	.L129
2485:C:/StellarisWare/driverlib\usb.c ****     {
2486:C:/StellarisWare/driverlib\usb.c ****         //
2487:C:/StellarisWare/driverlib\usb.c ****         // Enable DMA on the transmit endpoint.
2488:C:/StellarisWare/driverlib\usb.c ****         //
2489:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) |=
 2951              		.loc 1 2489 0
 2952 0016 BA68     		ldr	r2, [r7, #8]
 2953 0018 FB68     		ldr	r3, [r7, #12]
 2954 001a D318     		adds	r3, r2, r3
 2955 001c 03F58073 		add	r3, r3, #256
 2956 0020 03F10303 		add	r3, r3, #3
 2957 0024 1A46     		mov	r2, r3
 2958 0026 B968     		ldr	r1, [r7, #8]
 2959 0028 FB68     		ldr	r3, [r7, #12]
 2960 002a CB18     		adds	r3, r1, r3
 2961 002c 03F58073 		add	r3, r3, #256
 2962 0030 03F10303 		add	r3, r3, #3
 2963 0034 1B78     		ldrb	r3, [r3, #0]
 2964 0036 DBB2     		uxtb	r3, r3
 2965 0038 43F01003 		orr	r3, r3, #16
 2966 003c DBB2     		uxtb	r3, r3
 2967 003e 1370     		strb	r3, [r2, #0]
 2968 0040 14E0     		b	.L128
 2969              	.L129:
2490:C:/StellarisWare/driverlib\usb.c ****             USB_TXCSRH1_DMAEN;
2491:C:/StellarisWare/driverlib\usb.c ****     }
2492:C:/StellarisWare/driverlib\usb.c ****     else
2493:C:/StellarisWare/driverlib\usb.c ****     {
2494:C:/StellarisWare/driverlib\usb.c ****         //
2495:C:/StellarisWare/driverlib\usb.c ****         // Enable DMA on the receive endpoint.
2496:C:/StellarisWare/driverlib\usb.c ****         //
2497:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) |=
 2970              		.loc 1 2497 0
 2971 0042 BA68     		ldr	r2, [r7, #8]
 2972 0044 FB68     		ldr	r3, [r7, #12]
 2973 0046 D318     		adds	r3, r2, r3
 2974 0048 03F58273 		add	r3, r3, #260
 2975 004c 03F10303 		add	r3, r3, #3
 2976 0050 1A46     		mov	r2, r3
 2977 0052 B968     		ldr	r1, [r7, #8]
 2978 0054 FB68     		ldr	r3, [r7, #12]
 2979 0056 CB18     		adds	r3, r1, r3
 2980 0058 03F58273 		add	r3, r3, #260
 2981 005c 03F10303 		add	r3, r3, #3
 2982 0060 1B78     		ldrb	r3, [r3, #0]
 2983 0062 DBB2     		uxtb	r3, r3
 2984 0064 43F02003 		orr	r3, r3, #32
 2985 0068 DBB2     		uxtb	r3, r3
 2986 006a 1370     		strb	r3, [r2, #0]
 2987              	.L128:
2498:C:/StellarisWare/driverlib\usb.c ****             USB_RXCSRH1_DMAEN;
2499:C:/StellarisWare/driverlib\usb.c ****     }
2500:C:/StellarisWare/driverlib\usb.c **** }
 2988              		.loc 1 2500 0
 2989 006c 07F11407 		add	r7, r7, #20
 2990 0070 BD46     		mov	sp, r7
 2991 0072 80BC     		pop	{r7}
 2992 0074 7047     		bx	lr
 2993              		.cfi_endproc
 2994              	.LFE33:
 2996 0076 00BF     		.section	.text.USBEndpointDMADisable,"ax",%progbits
 2997              		.align	2
 2998              		.global	USBEndpointDMADisable
 2999              		.thumb
 3000              		.thumb_func
 3002              	USBEndpointDMADisable:
 3003              	.LFB34:
2501:C:/StellarisWare/driverlib\usb.c **** 
2502:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2503:C:/StellarisWare/driverlib\usb.c **** //
2504:C:/StellarisWare/driverlib\usb.c **** //! Disable DMA on a given endpoint.
2505:C:/StellarisWare/driverlib\usb.c **** //!
2506:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2507:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2508:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies which direction to disable.
2509:C:/StellarisWare/driverlib\usb.c **** //!
2510:C:/StellarisWare/driverlib\usb.c **** //! This function disables DMA on a given endpoint to allow non-DMA USB
2511:C:/StellarisWare/driverlib\usb.c **** //! transactions to generate interrupts normally.  The ulFlags should be
2512:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_DEV_IN or \b USB_EP_DEV_OUT; all other bits are ignored.
2513:C:/StellarisWare/driverlib\usb.c **** //!
2514:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2515:C:/StellarisWare/driverlib\usb.c **** //
2516:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2517:C:/StellarisWare/driverlib\usb.c **** void
2518:C:/StellarisWare/driverlib\usb.c **** USBEndpointDMADisable(unsigned long ulBase, unsigned long ulEndpoint,
2519:C:/StellarisWare/driverlib\usb.c ****                       unsigned long ulFlags)
2520:C:/StellarisWare/driverlib\usb.c **** {
 3004              		.loc 1 2520 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 16
 3007              		@ frame_needed = 1, uses_anonymous_args = 0
 3008              		@ link register save eliminated.
 3009 0000 80B4     		push	{r7}
 3010              	.LCFI102:
 3011              		.cfi_def_cfa_offset 4
 3012              		.cfi_offset 7, -4
 3013 0002 85B0     		sub	sp, sp, #20
 3014              	.LCFI103:
 3015              		.cfi_def_cfa_offset 24
 3016 0004 00AF     		add	r7, sp, #0
 3017              	.LCFI104:
 3018              		.cfi_def_cfa_register 7
 3019 0006 F860     		str	r0, [r7, #12]
 3020 0008 B960     		str	r1, [r7, #8]
 3021 000a 7A60     		str	r2, [r7, #4]
2521:C:/StellarisWare/driverlib\usb.c ****     //
2522:C:/StellarisWare/driverlib\usb.c ****     // If this was a request to disable DMA on the IN portion of the endpoint
2523:C:/StellarisWare/driverlib\usb.c ****     // then handle it.
2524:C:/StellarisWare/driverlib\usb.c ****     //
2525:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_DEV_IN)
 3022              		.loc 1 2525 0
 3023 000c 7B68     		ldr	r3, [r7, #4]
 3024 000e 03F40053 		and	r3, r3, #8192
 3025 0012 002B     		cmp	r3, #0
 3026 0014 15D0     		beq	.L132
2526:C:/StellarisWare/driverlib\usb.c ****     {
2527:C:/StellarisWare/driverlib\usb.c ****         //
2528:C:/StellarisWare/driverlib\usb.c ****         // Just disable DMA leave the mode setting.
2529:C:/StellarisWare/driverlib\usb.c ****         //
2530:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRH1) &=
 3027              		.loc 1 2530 0
 3028 0016 BA68     		ldr	r2, [r7, #8]
 3029 0018 FB68     		ldr	r3, [r7, #12]
 3030 001a D318     		adds	r3, r2, r3
 3031 001c 03F58073 		add	r3, r3, #256
 3032 0020 03F10303 		add	r3, r3, #3
 3033 0024 1A46     		mov	r2, r3
 3034 0026 B968     		ldr	r1, [r7, #8]
 3035 0028 FB68     		ldr	r3, [r7, #12]
 3036 002a CB18     		adds	r3, r1, r3
 3037 002c 03F58073 		add	r3, r3, #256
 3038 0030 03F10303 		add	r3, r3, #3
 3039 0034 1B78     		ldrb	r3, [r3, #0]
 3040 0036 DBB2     		uxtb	r3, r3
 3041 0038 23F01003 		bic	r3, r3, #16
 3042 003c DBB2     		uxtb	r3, r3
 3043 003e 1370     		strb	r3, [r2, #0]
 3044 0040 14E0     		b	.L131
 3045              	.L132:
2531:C:/StellarisWare/driverlib\usb.c ****                ~USB_TXCSRH1_DMAEN;
2532:C:/StellarisWare/driverlib\usb.c ****     }
2533:C:/StellarisWare/driverlib\usb.c ****     else
2534:C:/StellarisWare/driverlib\usb.c ****     {
2535:C:/StellarisWare/driverlib\usb.c ****         //
2536:C:/StellarisWare/driverlib\usb.c ****         // Just disable DMA leave the mode setting.
2537:C:/StellarisWare/driverlib\usb.c ****         //
2538:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRH1) &=
 3046              		.loc 1 2538 0
 3047 0042 BA68     		ldr	r2, [r7, #8]
 3048 0044 FB68     		ldr	r3, [r7, #12]
 3049 0046 D318     		adds	r3, r2, r3
 3050 0048 03F58273 		add	r3, r3, #260
 3051 004c 03F10303 		add	r3, r3, #3
 3052 0050 1A46     		mov	r2, r3
 3053 0052 B968     		ldr	r1, [r7, #8]
 3054 0054 FB68     		ldr	r3, [r7, #12]
 3055 0056 CB18     		adds	r3, r1, r3
 3056 0058 03F58273 		add	r3, r3, #260
 3057 005c 03F10303 		add	r3, r3, #3
 3058 0060 1B78     		ldrb	r3, [r3, #0]
 3059 0062 DBB2     		uxtb	r3, r3
 3060 0064 23F02003 		bic	r3, r3, #32
 3061 0068 DBB2     		uxtb	r3, r3
 3062 006a 1370     		strb	r3, [r2, #0]
 3063              	.L131:
2539:C:/StellarisWare/driverlib\usb.c ****                ~USB_RXCSRH1_DMAEN;
2540:C:/StellarisWare/driverlib\usb.c ****     }
2541:C:/StellarisWare/driverlib\usb.c **** }
 3064              		.loc 1 2541 0
 3065 006c 07F11407 		add	r7, r7, #20
 3066 0070 BD46     		mov	sp, r7
 3067 0072 80BC     		pop	{r7}
 3068 0074 7047     		bx	lr
 3069              		.cfi_endproc
 3070              	.LFE34:
 3072 0076 00BF     		.section	.text.USBEndpointDataAvail,"ax",%progbits
 3073              		.align	2
 3074              		.global	USBEndpointDataAvail
 3075              		.thumb
 3076              		.thumb_func
 3078              	USBEndpointDataAvail:
 3079              	.LFB35:
2542:C:/StellarisWare/driverlib\usb.c **** 
2543:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2544:C:/StellarisWare/driverlib\usb.c **** //
2545:C:/StellarisWare/driverlib\usb.c **** //! Determine the number of bytes of data available in a given endpoint's FIFO.
2546:C:/StellarisWare/driverlib\usb.c **** //!
2547:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2548:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2549:C:/StellarisWare/driverlib\usb.c **** //!
2550:C:/StellarisWare/driverlib\usb.c **** //! This function returns the number of bytes of data currently available in
2551:C:/StellarisWare/driverlib\usb.c **** //! the FIFO for the given receive (OUT) endpoint.  It may be used prior to
2552:C:/StellarisWare/driverlib\usb.c **** //! calling USBEndpointDataGet() to determine the size of buffer required to
2553:C:/StellarisWare/driverlib\usb.c **** //! hold the newly-received packet.
2554:C:/StellarisWare/driverlib\usb.c **** //!
2555:C:/StellarisWare/driverlib\usb.c **** //! \return This call returns the number of bytes available in a given endpoint
2556:C:/StellarisWare/driverlib\usb.c **** //! FIFO.
2557:C:/StellarisWare/driverlib\usb.c **** //
2558:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2559:C:/StellarisWare/driverlib\usb.c **** unsigned long
2560:C:/StellarisWare/driverlib\usb.c **** USBEndpointDataAvail(unsigned long ulBase, unsigned long ulEndpoint)
2561:C:/StellarisWare/driverlib\usb.c **** {
 3080              		.loc 1 2561 0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 16
 3083              		@ frame_needed = 1, uses_anonymous_args = 0
 3084              		@ link register save eliminated.
 3085 0000 80B4     		push	{r7}
 3086              	.LCFI105:
 3087              		.cfi_def_cfa_offset 4
 3088              		.cfi_offset 7, -4
 3089 0002 85B0     		sub	sp, sp, #20
 3090              	.LCFI106:
 3091              		.cfi_def_cfa_offset 24
 3092 0004 00AF     		add	r7, sp, #0
 3093              	.LCFI107:
 3094              		.cfi_def_cfa_register 7
 3095 0006 7860     		str	r0, [r7, #4]
 3096 0008 3960     		str	r1, [r7, #0]
2562:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
2563:C:/StellarisWare/driverlib\usb.c **** 
2564:C:/StellarisWare/driverlib\usb.c ****     //
2565:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2566:C:/StellarisWare/driverlib\usb.c ****     //
2567:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2568:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2569:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2570:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2571:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2572:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2573:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2574:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2575:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2576:C:/StellarisWare/driverlib\usb.c **** 
2577:C:/StellarisWare/driverlib\usb.c ****     //
2578:C:/StellarisWare/driverlib\usb.c ****     // Get the address of the receive status register to use, based on the
2579:C:/StellarisWare/driverlib\usb.c ****     // endpoint.
2580:C:/StellarisWare/driverlib\usb.c ****     //
2581:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3097              		.loc 1 2581 0
 3098 000a 3B68     		ldr	r3, [r7, #0]
 3099 000c 002B     		cmp	r3, #0
 3100 000e 03D1     		bne	.L135
2582:C:/StellarisWare/driverlib\usb.c ****     {
2583:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_CSRL0;
 3101              		.loc 1 2583 0
 3102 0010 4FF48173 		mov	r3, #258
 3103 0014 FB60     		str	r3, [r7, #12]
 3104 0016 03E0     		b	.L136
 3105              	.L135:
2584:C:/StellarisWare/driverlib\usb.c ****     }
2585:C:/StellarisWare/driverlib\usb.c ****     else
2586:C:/StellarisWare/driverlib\usb.c ****     {
2587:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint);
 3106              		.loc 1 2587 0
 3107 0018 3B68     		ldr	r3, [r7, #0]
 3108 001a 03F58373 		add	r3, r3, #262
 3109 001e FB60     		str	r3, [r7, #12]
 3110              	.L136:
2588:C:/StellarisWare/driverlib\usb.c ****     }
2589:C:/StellarisWare/driverlib\usb.c **** 
2590:C:/StellarisWare/driverlib\usb.c ****     //
2591:C:/StellarisWare/driverlib\usb.c ****     // Is there a packet ready in the FIFO?
2592:C:/StellarisWare/driverlib\usb.c ****     //
2593:C:/StellarisWare/driverlib\usb.c ****     if((HWREGH(ulBase + ulRegister) & USB_CSRL0_RXRDY) == 0)
 3111              		.loc 1 2593 0
 3112 0020 7A68     		ldr	r2, [r7, #4]
 3113 0022 FB68     		ldr	r3, [r7, #12]
 3114 0024 D318     		adds	r3, r2, r3
 3115 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3116 0028 9BB2     		uxth	r3, r3
 3117 002a 03F00103 		and	r3, r3, #1
 3118 002e 002B     		cmp	r3, #0
 3119 0030 02D1     		bne	.L137
2594:C:/StellarisWare/driverlib\usb.c ****     {
2595:C:/StellarisWare/driverlib\usb.c ****         return(0);
 3120              		.loc 1 2595 0
 3121 0032 4FF00003 		mov	r3, #0
 3122 0036 06E0     		b	.L138
 3123              	.L137:
2596:C:/StellarisWare/driverlib\usb.c ****     }
2597:C:/StellarisWare/driverlib\usb.c **** 
2598:C:/StellarisWare/driverlib\usb.c ****     //
2599:C:/StellarisWare/driverlib\usb.c ****     // Return the byte count in the FIFO.
2600:C:/StellarisWare/driverlib\usb.c ****     //
2601:C:/StellarisWare/driverlib\usb.c ****     return(HWREGH(ulBase + USB_O_COUNT0 + ulEndpoint));
 3124              		.loc 1 2601 0
 3125 0038 7A68     		ldr	r2, [r7, #4]
 3126 003a 3B68     		ldr	r3, [r7, #0]
 3127 003c D318     		adds	r3, r2, r3
 3128 003e 03F58473 		add	r3, r3, #264
 3129 0042 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3130 0044 9BB2     		uxth	r3, r3
 3131              	.L138:
2602:C:/StellarisWare/driverlib\usb.c **** }
 3132              		.loc 1 2602 0
 3133 0046 1846     		mov	r0, r3
 3134 0048 07F11407 		add	r7, r7, #20
 3135 004c BD46     		mov	sp, r7
 3136 004e 80BC     		pop	{r7}
 3137 0050 7047     		bx	lr
 3138              		.cfi_endproc
 3139              	.LFE35:
 3141 0052 00BF     		.section	.text.USBEndpointDataGet,"ax",%progbits
 3142              		.align	2
 3143              		.global	USBEndpointDataGet
 3144              		.thumb
 3145              		.thumb_func
 3147              	USBEndpointDataGet:
 3148              	.LFB36:
2603:C:/StellarisWare/driverlib\usb.c **** 
2604:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2605:C:/StellarisWare/driverlib\usb.c **** //
2606:C:/StellarisWare/driverlib\usb.c **** //! Retrieves data from the given endpoint's FIFO.
2607:C:/StellarisWare/driverlib\usb.c **** //!
2608:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2609:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2610:C:/StellarisWare/driverlib\usb.c **** //! \param pucData is a pointer to the data area used to return the data from
2611:C:/StellarisWare/driverlib\usb.c **** //! the FIFO.
2612:C:/StellarisWare/driverlib\usb.c **** //! \param pulSize is initially the size of the buffer passed into this call
2613:C:/StellarisWare/driverlib\usb.c **** //! via the \e pucData parameter.  It is set to the amount of data returned in
2614:C:/StellarisWare/driverlib\usb.c **** //! the buffer.
2615:C:/StellarisWare/driverlib\usb.c **** //!
2616:C:/StellarisWare/driverlib\usb.c **** //! This function returns the data from the FIFO for the given endpoint.
2617:C:/StellarisWare/driverlib\usb.c **** //! The \e pulSize parameter should indicate the size of the buffer passed in
2618:C:/StellarisWare/driverlib\usb.c **** //! the \e pulData parameter.  The data in the \e pulSize parameter is changed
2619:C:/StellarisWare/driverlib\usb.c **** //! to match the amount of data returned in the \e pucData parameter.  If a
2620:C:/StellarisWare/driverlib\usb.c **** //! zero-byte packet is received, this call does not return an error but
2621:C:/StellarisWare/driverlib\usb.c **** //! instead just returns a zero in the \e pulSize parameter.  The only error
2622:C:/StellarisWare/driverlib\usb.c **** //! case occurs when there is no data packet available.
2623:C:/StellarisWare/driverlib\usb.c **** //!
2624:C:/StellarisWare/driverlib\usb.c **** //! \return This call returns 0, or -1 if no packet was received.
2625:C:/StellarisWare/driverlib\usb.c **** //
2626:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2627:C:/StellarisWare/driverlib\usb.c **** long
2628:C:/StellarisWare/driverlib\usb.c **** USBEndpointDataGet(unsigned long ulBase, unsigned long ulEndpoint,
2629:C:/StellarisWare/driverlib\usb.c ****                    unsigned char *pucData, unsigned long *pulSize)
2630:C:/StellarisWare/driverlib\usb.c **** {
 3149              		.loc 1 2630 0
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 32
 3152              		@ frame_needed = 1, uses_anonymous_args = 0
 3153              		@ link register save eliminated.
 3154 0000 80B4     		push	{r7}
 3155              	.LCFI108:
 3156              		.cfi_def_cfa_offset 4
 3157              		.cfi_offset 7, -4
 3158 0002 89B0     		sub	sp, sp, #36
 3159              	.LCFI109:
 3160              		.cfi_def_cfa_offset 40
 3161 0004 00AF     		add	r7, sp, #0
 3162              	.LCFI110:
 3163              		.cfi_def_cfa_register 7
 3164 0006 F860     		str	r0, [r7, #12]
 3165 0008 B960     		str	r1, [r7, #8]
 3166 000a 7A60     		str	r2, [r7, #4]
 3167 000c 3B60     		str	r3, [r7, #0]
2631:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister, ulByteCount, ulFIFO;
2632:C:/StellarisWare/driverlib\usb.c **** 
2633:C:/StellarisWare/driverlib\usb.c ****     //
2634:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2635:C:/StellarisWare/driverlib\usb.c ****     //
2636:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2637:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2638:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2639:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2640:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2641:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2642:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2643:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2644:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2645:C:/StellarisWare/driverlib\usb.c **** 
2646:C:/StellarisWare/driverlib\usb.c ****     //
2647:C:/StellarisWare/driverlib\usb.c ****     // Get the address of the receive status register to use, based on the
2648:C:/StellarisWare/driverlib\usb.c ****     // endpoint.
2649:C:/StellarisWare/driverlib\usb.c ****     //
2650:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3168              		.loc 1 2650 0
 3169 000e BB68     		ldr	r3, [r7, #8]
 3170 0010 002B     		cmp	r3, #0
 3171 0012 03D1     		bne	.L140
2651:C:/StellarisWare/driverlib\usb.c ****     {
2652:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_CSRL0;
 3172              		.loc 1 2652 0
 3173 0014 4FF48173 		mov	r3, #258
 3174 0018 FB61     		str	r3, [r7, #28]
 3175 001a 03E0     		b	.L141
 3176              	.L140:
2653:C:/StellarisWare/driverlib\usb.c ****     }
2654:C:/StellarisWare/driverlib\usb.c ****     else
2655:C:/StellarisWare/driverlib\usb.c ****     {
2656:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint);
 3177              		.loc 1 2656 0
 3178 001c BB68     		ldr	r3, [r7, #8]
 3179 001e 03F58373 		add	r3, r3, #262
 3180 0022 FB61     		str	r3, [r7, #28]
 3181              	.L141:
2657:C:/StellarisWare/driverlib\usb.c ****     }
2658:C:/StellarisWare/driverlib\usb.c **** 
2659:C:/StellarisWare/driverlib\usb.c ****     //
2660:C:/StellarisWare/driverlib\usb.c ****     // Don't allow reading of data if the RxPktRdy bit is not set.
2661:C:/StellarisWare/driverlib\usb.c ****     //
2662:C:/StellarisWare/driverlib\usb.c ****     if((HWREGH(ulBase + ulRegister) & USB_CSRL0_RXRDY) == 0)
 3182              		.loc 1 2662 0
 3183 0024 FA68     		ldr	r2, [r7, #12]
 3184 0026 FB69     		ldr	r3, [r7, #28]
 3185 0028 D318     		adds	r3, r2, r3
 3186 002a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3187 002c 9BB2     		uxth	r3, r3
 3188 002e 03F00103 		and	r3, r3, #1
 3189 0032 002B     		cmp	r3, #0
 3190 0034 06D1     		bne	.L142
2663:C:/StellarisWare/driverlib\usb.c ****     {
2664:C:/StellarisWare/driverlib\usb.c ****         //
2665:C:/StellarisWare/driverlib\usb.c ****         // Can't read the data because none is available.
2666:C:/StellarisWare/driverlib\usb.c ****         //
2667:C:/StellarisWare/driverlib\usb.c ****         *pulSize = 0;
 3191              		.loc 1 2667 0
 3192 0036 3B68     		ldr	r3, [r7, #0]
 3193 0038 4FF00002 		mov	r2, #0
 3194 003c 1A60     		str	r2, [r3, #0]
2668:C:/StellarisWare/driverlib\usb.c **** 
2669:C:/StellarisWare/driverlib\usb.c ****         //
2670:C:/StellarisWare/driverlib\usb.c ****         // Return a failure since there is no data to read.
2671:C:/StellarisWare/driverlib\usb.c ****         //
2672:C:/StellarisWare/driverlib\usb.c ****         return(-1);
 3195              		.loc 1 2672 0
 3196 003e 4FF0FF33 		mov	r3, #-1
 3197 0042 2CE0     		b	.L143
 3198              	.L142:
2673:C:/StellarisWare/driverlib\usb.c ****     }
2674:C:/StellarisWare/driverlib\usb.c **** 
2675:C:/StellarisWare/driverlib\usb.c ****     //
2676:C:/StellarisWare/driverlib\usb.c ****     // Get the byte count in the FIFO.
2677:C:/StellarisWare/driverlib\usb.c ****     //
2678:C:/StellarisWare/driverlib\usb.c ****     ulByteCount = HWREGH(ulBase + USB_O_COUNT0 + ulEndpoint);
 3199              		.loc 1 2678 0
 3200 0044 FA68     		ldr	r2, [r7, #12]
 3201 0046 BB68     		ldr	r3, [r7, #8]
 3202 0048 D318     		adds	r3, r2, r3
 3203 004a 03F58473 		add	r3, r3, #264
 3204 004e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 3205 0050 9BB2     		uxth	r3, r3
 3206 0052 BB61     		str	r3, [r7, #24]
2679:C:/StellarisWare/driverlib\usb.c **** 
2680:C:/StellarisWare/driverlib\usb.c ****     //
2681:C:/StellarisWare/driverlib\usb.c ****     // Determine how many bytes we will actually copy.
2682:C:/StellarisWare/driverlib\usb.c ****     //
2683:C:/StellarisWare/driverlib\usb.c ****     ulByteCount = (ulByteCount < *pulSize) ? ulByteCount : *pulSize;
 3207              		.loc 1 2683 0
 3208 0054 3B68     		ldr	r3, [r7, #0]
 3209 0056 1B68     		ldr	r3, [r3, #0]
 3210 0058 BA69     		ldr	r2, [r7, #24]
 3211 005a 9A42     		cmp	r2, r3
 3212 005c 38BF     		it	cc
 3213 005e 1346     		movcc	r3, r2
 3214 0060 BB61     		str	r3, [r7, #24]
2684:C:/StellarisWare/driverlib\usb.c **** 
2685:C:/StellarisWare/driverlib\usb.c ****     //
2686:C:/StellarisWare/driverlib\usb.c ****     // Return the number of bytes we are going to read.
2687:C:/StellarisWare/driverlib\usb.c ****     //
2688:C:/StellarisWare/driverlib\usb.c ****     *pulSize = ulByteCount;
 3215              		.loc 1 2688 0
 3216 0062 3B68     		ldr	r3, [r7, #0]
 3217 0064 BA69     		ldr	r2, [r7, #24]
 3218 0066 1A60     		str	r2, [r3, #0]
2689:C:/StellarisWare/driverlib\usb.c **** 
2690:C:/StellarisWare/driverlib\usb.c ****     //
2691:C:/StellarisWare/driverlib\usb.c ****     // Calculate the FIFO address.
2692:C:/StellarisWare/driverlib\usb.c ****     //
2693:C:/StellarisWare/driverlib\usb.c ****     ulFIFO = ulBase + USB_O_FIFO0 + (ulEndpoint >> 2);
 3219              		.loc 1 2693 0
 3220 0068 BB68     		ldr	r3, [r7, #8]
 3221 006a 4FEA9302 		lsr	r2, r3, #2
 3222 006e FB68     		ldr	r3, [r7, #12]
 3223 0070 D318     		adds	r3, r2, r3
 3224 0072 03F12003 		add	r3, r3, #32
 3225 0076 7B61     		str	r3, [r7, #20]
2694:C:/StellarisWare/driverlib\usb.c **** 
2695:C:/StellarisWare/driverlib\usb.c ****     //
2696:C:/StellarisWare/driverlib\usb.c ****     // Read the data out of the FIFO.
2697:C:/StellarisWare/driverlib\usb.c ****     //
2698:C:/StellarisWare/driverlib\usb.c ****     for(; ulByteCount > 0; ulByteCount--)
 3226              		.loc 1 2698 0
 3227 0078 0CE0     		b	.L144
 3228              	.L145:
2699:C:/StellarisWare/driverlib\usb.c ****     {
2700:C:/StellarisWare/driverlib\usb.c ****         //
2701:C:/StellarisWare/driverlib\usb.c ****         // Read a byte at a time from the FIFO.
2702:C:/StellarisWare/driverlib\usb.c ****         //
2703:C:/StellarisWare/driverlib\usb.c ****         *pucData++ = HWREGB(ulFIFO);
 3229              		.loc 1 2703 0 discriminator 2
 3230 007a 7B69     		ldr	r3, [r7, #20]
 3231 007c 1B78     		ldrb	r3, [r3, #0]
 3232 007e DAB2     		uxtb	r2, r3
 3233 0080 7B68     		ldr	r3, [r7, #4]
 3234 0082 1A70     		strb	r2, [r3, #0]
 3235 0084 7B68     		ldr	r3, [r7, #4]
 3236 0086 03F10103 		add	r3, r3, #1
 3237 008a 7B60     		str	r3, [r7, #4]
2698:C:/StellarisWare/driverlib\usb.c ****     for(; ulByteCount > 0; ulByteCount--)
 3238              		.loc 1 2698 0 discriminator 2
 3239 008c BB69     		ldr	r3, [r7, #24]
 3240 008e 03F1FF33 		add	r3, r3, #-1
 3241 0092 BB61     		str	r3, [r7, #24]
 3242              	.L144:
2698:C:/StellarisWare/driverlib\usb.c ****     for(; ulByteCount > 0; ulByteCount--)
 3243              		.loc 1 2698 0 is_stmt 0 discriminator 1
 3244 0094 BB69     		ldr	r3, [r7, #24]
 3245 0096 002B     		cmp	r3, #0
 3246 0098 EFD1     		bne	.L145
2704:C:/StellarisWare/driverlib\usb.c ****     }
2705:C:/StellarisWare/driverlib\usb.c **** 
2706:C:/StellarisWare/driverlib\usb.c ****     //
2707:C:/StellarisWare/driverlib\usb.c ****     // Success.
2708:C:/StellarisWare/driverlib\usb.c ****     //
2709:C:/StellarisWare/driverlib\usb.c ****     return(0);
 3247              		.loc 1 2709 0 is_stmt 1
 3248 009a 4FF00003 		mov	r3, #0
 3249              	.L143:
2710:C:/StellarisWare/driverlib\usb.c **** }
 3250              		.loc 1 2710 0
 3251 009e 1846     		mov	r0, r3
 3252 00a0 07F12407 		add	r7, r7, #36
 3253 00a4 BD46     		mov	sp, r7
 3254 00a6 80BC     		pop	{r7}
 3255 00a8 7047     		bx	lr
 3256              		.cfi_endproc
 3257              	.LFE36:
 3259 00aa 00BF     		.section	.text.USBDevEndpointDataAck,"ax",%progbits
 3260              		.align	2
 3261              		.global	USBDevEndpointDataAck
 3262              		.thumb
 3263              		.thumb_func
 3265              	USBDevEndpointDataAck:
 3266              	.LFB37:
2711:C:/StellarisWare/driverlib\usb.c **** 
2712:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2713:C:/StellarisWare/driverlib\usb.c **** //
2714:C:/StellarisWare/driverlib\usb.c **** //! Acknowledge that data was read from the given endpoint's FIFO in device
2715:C:/StellarisWare/driverlib\usb.c **** //! mode.
2716:C:/StellarisWare/driverlib\usb.c **** //!
2717:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2718:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2719:C:/StellarisWare/driverlib\usb.c **** //! \param bIsLastPacket indicates if this packet is the last one.
2720:C:/StellarisWare/driverlib\usb.c **** //!
2721:C:/StellarisWare/driverlib\usb.c **** //! This function acknowledges that the data was read from the endpoint's FIFO.
2722:C:/StellarisWare/driverlib\usb.c **** //! The \e bIsLastPacket parameter is set to a \b true value if this is the
2723:C:/StellarisWare/driverlib\usb.c **** //! last in a series of data packets on endpoint zero.  The \e bIsLastPacket
2724:C:/StellarisWare/driverlib\usb.c **** //! parameter is not used for endpoints other than endpoint zero.  This call
2725:C:/StellarisWare/driverlib\usb.c **** //! can be used if processing is required between reading the data and
2726:C:/StellarisWare/driverlib\usb.c **** //! acknowledging that the data has been read.
2727:C:/StellarisWare/driverlib\usb.c **** //!
2728:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in device mode.
2729:C:/StellarisWare/driverlib\usb.c **** //!
2730:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2731:C:/StellarisWare/driverlib\usb.c **** //
2732:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2733:C:/StellarisWare/driverlib\usb.c **** void
2734:C:/StellarisWare/driverlib\usb.c **** USBDevEndpointDataAck(unsigned long ulBase, unsigned long ulEndpoint,
2735:C:/StellarisWare/driverlib\usb.c ****                       tBoolean bIsLastPacket)
2736:C:/StellarisWare/driverlib\usb.c **** {
 3267              		.loc 1 2736 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 16
 3270              		@ frame_needed = 1, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
 3272 0000 80B4     		push	{r7}
 3273              	.LCFI111:
 3274              		.cfi_def_cfa_offset 4
 3275              		.cfi_offset 7, -4
 3276 0002 85B0     		sub	sp, sp, #20
 3277              	.LCFI112:
 3278              		.cfi_def_cfa_offset 24
 3279 0004 00AF     		add	r7, sp, #0
 3280              	.LCFI113:
 3281              		.cfi_def_cfa_register 7
 3282 0006 F860     		str	r0, [r7, #12]
 3283 0008 B960     		str	r1, [r7, #8]
 3284 000a 1346     		mov	r3, r2
 3285 000c FB71     		strb	r3, [r7, #7]
2737:C:/StellarisWare/driverlib\usb.c ****     //
2738:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2739:C:/StellarisWare/driverlib\usb.c ****     //
2740:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2741:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2742:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2743:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2744:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2745:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2746:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2747:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2748:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2749:C:/StellarisWare/driverlib\usb.c **** 
2750:C:/StellarisWare/driverlib\usb.c ****     //
2751:C:/StellarisWare/driverlib\usb.c ****     // Determine which endpoint is being acked.
2752:C:/StellarisWare/driverlib\usb.c ****     //
2753:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3286              		.loc 1 2753 0
 3287 000e BB68     		ldr	r3, [r7, #8]
 3288 0010 002B     		cmp	r3, #0
 3289 0012 0DD1     		bne	.L147
2754:C:/StellarisWare/driverlib\usb.c ****     {
2755:C:/StellarisWare/driverlib\usb.c ****         //
2756:C:/StellarisWare/driverlib\usb.c ****         // Clear RxPktRdy, and optionally DataEnd, on endpoint zero.
2757:C:/StellarisWare/driverlib\usb.c ****         //
2758:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRL0) =
 3290              		.loc 1 2758 0
 3291 0014 FB68     		ldr	r3, [r7, #12]
 3292 0016 03F58173 		add	r3, r3, #258
 3293 001a 1A46     		mov	r2, r3
 3294 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3295 001e 002B     		cmp	r3, #0
 3296 0020 02D0     		beq	.L148
 3297              		.loc 1 2758 0 is_stmt 0 discriminator 1
 3298 0022 4FF04803 		mov	r3, #72
 3299 0026 01E0     		b	.L149
 3300              	.L148:
 3301              		.loc 1 2758 0 discriminator 2
 3302 0028 4FF04003 		mov	r3, #64
 3303              	.L149:
 3304              		.loc 1 2758 0 discriminator 3
 3305 002c 1370     		strb	r3, [r2, #0]
 3306 002e 0FE0     		b	.L146
 3307              	.L147:
2759:C:/StellarisWare/driverlib\usb.c ****             USB_CSRL0_RXRDYC | (bIsLastPacket ? USB_CSRL0_DATAEND : 0);
2760:C:/StellarisWare/driverlib\usb.c ****     }
2761:C:/StellarisWare/driverlib\usb.c ****     else
2762:C:/StellarisWare/driverlib\usb.c ****     {
2763:C:/StellarisWare/driverlib\usb.c ****         //
2764:C:/StellarisWare/driverlib\usb.c ****         // Clear RxPktRdy on all other endpoints.
2765:C:/StellarisWare/driverlib\usb.c ****         //
2766:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 3308              		.loc 1 2766 0 is_stmt 1
 3309 0030 FA68     		ldr	r2, [r7, #12]
 3310 0032 BB68     		ldr	r3, [r7, #8]
 3311 0034 D318     		adds	r3, r2, r3
 3312 0036 03F58373 		add	r3, r3, #262
 3313 003a F968     		ldr	r1, [r7, #12]
 3314 003c BA68     		ldr	r2, [r7, #8]
 3315 003e 8A18     		adds	r2, r1, r2
 3316 0040 02F58372 		add	r2, r2, #262
 3317 0044 1278     		ldrb	r2, [r2, #0]
 3318 0046 D2B2     		uxtb	r2, r2
 3319 0048 22F00102 		bic	r2, r2, #1
 3320 004c D2B2     		uxtb	r2, r2
 3321 004e 1A70     		strb	r2, [r3, #0]
 3322              	.L146:
2767:C:/StellarisWare/driverlib\usb.c ****             ~(USB_RXCSRL1_RXRDY);
2768:C:/StellarisWare/driverlib\usb.c ****     }
2769:C:/StellarisWare/driverlib\usb.c **** }
 3323              		.loc 1 2769 0
 3324 0050 07F11407 		add	r7, r7, #20
 3325 0054 BD46     		mov	sp, r7
 3326 0056 80BC     		pop	{r7}
 3327 0058 7047     		bx	lr
 3328              		.cfi_endproc
 3329              	.LFE37:
 3331 005a 00BF     		.section	.text.USBHostEndpointDataAck,"ax",%progbits
 3332              		.align	2
 3333              		.global	USBHostEndpointDataAck
 3334              		.thumb
 3335              		.thumb_func
 3337              	USBHostEndpointDataAck:
 3338              	.LFB38:
2770:C:/StellarisWare/driverlib\usb.c **** 
2771:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2772:C:/StellarisWare/driverlib\usb.c **** //
2773:C:/StellarisWare/driverlib\usb.c **** //! Acknowledge that data was read from the given endpoint's FIFO in host
2774:C:/StellarisWare/driverlib\usb.c **** //! mode.
2775:C:/StellarisWare/driverlib\usb.c **** //!
2776:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2777:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2778:C:/StellarisWare/driverlib\usb.c **** //!
2779:C:/StellarisWare/driverlib\usb.c **** //! This function acknowledges that the data was read from the endpoint's FIFO.
2780:C:/StellarisWare/driverlib\usb.c **** //! This call is used if processing is required between reading the data and
2781:C:/StellarisWare/driverlib\usb.c **** //! acknowledging that the data has been read.
2782:C:/StellarisWare/driverlib\usb.c **** //!
2783:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
2784:C:/StellarisWare/driverlib\usb.c **** //!
2785:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2786:C:/StellarisWare/driverlib\usb.c **** //
2787:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2788:C:/StellarisWare/driverlib\usb.c **** void
2789:C:/StellarisWare/driverlib\usb.c **** USBHostEndpointDataAck(unsigned long ulBase, unsigned long ulEndpoint)
2790:C:/StellarisWare/driverlib\usb.c **** {
 3339              		.loc 1 2790 0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 8
 3342              		@ frame_needed = 1, uses_anonymous_args = 0
 3343              		@ link register save eliminated.
 3344 0000 80B4     		push	{r7}
 3345              	.LCFI114:
 3346              		.cfi_def_cfa_offset 4
 3347              		.cfi_offset 7, -4
 3348 0002 83B0     		sub	sp, sp, #12
 3349              	.LCFI115:
 3350              		.cfi_def_cfa_offset 16
 3351 0004 00AF     		add	r7, sp, #0
 3352              	.LCFI116:
 3353              		.cfi_def_cfa_register 7
 3354 0006 7860     		str	r0, [r7, #4]
 3355 0008 3960     		str	r1, [r7, #0]
2791:C:/StellarisWare/driverlib\usb.c ****     //
2792:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2793:C:/StellarisWare/driverlib\usb.c ****     //
2794:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2795:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2796:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2797:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2798:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2799:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2800:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2801:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2802:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2803:C:/StellarisWare/driverlib\usb.c **** 
2804:C:/StellarisWare/driverlib\usb.c ****     //
2805:C:/StellarisWare/driverlib\usb.c ****     // Clear RxPktRdy.
2806:C:/StellarisWare/driverlib\usb.c ****     //
2807:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3356              		.loc 1 2807 0
 3357 000a 3B68     		ldr	r3, [r7, #0]
 3358 000c 002B     		cmp	r3, #0
 3359 000e 0CD1     		bne	.L152
2808:C:/StellarisWare/driverlib\usb.c ****     {
2809:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_CSRL0) &= ~USB_CSRL0_RXRDY;
 3360              		.loc 1 2809 0
 3361 0010 7B68     		ldr	r3, [r7, #4]
 3362 0012 03F58173 		add	r3, r3, #258
 3363 0016 7A68     		ldr	r2, [r7, #4]
 3364 0018 02F58172 		add	r2, r2, #258
 3365 001c 1278     		ldrb	r2, [r2, #0]
 3366 001e D2B2     		uxtb	r2, r2
 3367 0020 22F00102 		bic	r2, r2, #1
 3368 0024 D2B2     		uxtb	r2, r2
 3369 0026 1A70     		strb	r2, [r3, #0]
 3370 0028 0FE0     		b	.L151
 3371              	.L152:
2810:C:/StellarisWare/driverlib\usb.c ****     }
2811:C:/StellarisWare/driverlib\usb.c ****     else
2812:C:/StellarisWare/driverlib\usb.c ****     {
2813:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
 3372              		.loc 1 2813 0
 3373 002a 7A68     		ldr	r2, [r7, #4]
 3374 002c 3B68     		ldr	r3, [r7, #0]
 3375 002e D318     		adds	r3, r2, r3
 3376 0030 03F58373 		add	r3, r3, #262
 3377 0034 7968     		ldr	r1, [r7, #4]
 3378 0036 3A68     		ldr	r2, [r7, #0]
 3379 0038 8A18     		adds	r2, r1, r2
 3380 003a 02F58372 		add	r2, r2, #262
 3381 003e 1278     		ldrb	r2, [r2, #0]
 3382 0040 D2B2     		uxtb	r2, r2
 3383 0042 22F00102 		bic	r2, r2, #1
 3384 0046 D2B2     		uxtb	r2, r2
 3385 0048 1A70     		strb	r2, [r3, #0]
 3386              	.L151:
2814:C:/StellarisWare/driverlib\usb.c ****             ~(USB_RXCSRL1_RXRDY);
2815:C:/StellarisWare/driverlib\usb.c ****     }
2816:C:/StellarisWare/driverlib\usb.c **** }
 3387              		.loc 1 2816 0
 3388 004a 07F10C07 		add	r7, r7, #12
 3389 004e BD46     		mov	sp, r7
 3390 0050 80BC     		pop	{r7}
 3391 0052 7047     		bx	lr
 3392              		.cfi_endproc
 3393              	.LFE38:
 3395              		.section	.text.USBEndpointDataPut,"ax",%progbits
 3396              		.align	2
 3397              		.global	USBEndpointDataPut
 3398              		.thumb
 3399              		.thumb_func
 3401              	USBEndpointDataPut:
 3402              	.LFB39:
2817:C:/StellarisWare/driverlib\usb.c **** 
2818:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2819:C:/StellarisWare/driverlib\usb.c **** //
2820:C:/StellarisWare/driverlib\usb.c **** //! Puts data into the given endpoint's FIFO.
2821:C:/StellarisWare/driverlib\usb.c **** //!
2822:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2823:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2824:C:/StellarisWare/driverlib\usb.c **** //! \param pucData is a pointer to the data area used as the source for the
2825:C:/StellarisWare/driverlib\usb.c **** //! data to put into the FIFO.
2826:C:/StellarisWare/driverlib\usb.c **** //! \param ulSize is the amount of data to put into the FIFO.
2827:C:/StellarisWare/driverlib\usb.c **** //!
2828:C:/StellarisWare/driverlib\usb.c **** //! This function puts the data from the \e pucData parameter into the FIFO
2829:C:/StellarisWare/driverlib\usb.c **** //! for this endpoint.  If a packet is already pending for transmission, then
2830:C:/StellarisWare/driverlib\usb.c **** //! this call does not put any of the data into the FIFO and returns -1. Care
2831:C:/StellarisWare/driverlib\usb.c **** //! should be taken to not write more data than can fit into the FIFO
2832:C:/StellarisWare/driverlib\usb.c **** //! allocated by the call to USBFIFOConfigSet().
2833:C:/StellarisWare/driverlib\usb.c **** //!
2834:C:/StellarisWare/driverlib\usb.c **** //! \return This call returns 0 on success, or -1 to indicate that the FIFO
2835:C:/StellarisWare/driverlib\usb.c **** //! is in use and cannot be written.
2836:C:/StellarisWare/driverlib\usb.c **** //
2837:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2838:C:/StellarisWare/driverlib\usb.c **** long
2839:C:/StellarisWare/driverlib\usb.c **** USBEndpointDataPut(unsigned long ulBase, unsigned long ulEndpoint,
2840:C:/StellarisWare/driverlib\usb.c ****                    unsigned char *pucData, unsigned long ulSize)
2841:C:/StellarisWare/driverlib\usb.c **** {
 3403              		.loc 1 2841 0
 3404              		.cfi_startproc
 3405              		@ args = 0, pretend = 0, frame = 24
 3406              		@ frame_needed = 1, uses_anonymous_args = 0
 3407              		@ link register save eliminated.
 3408 0000 80B4     		push	{r7}
 3409              	.LCFI117:
 3410              		.cfi_def_cfa_offset 4
 3411              		.cfi_offset 7, -4
 3412 0002 87B0     		sub	sp, sp, #28
 3413              	.LCFI118:
 3414              		.cfi_def_cfa_offset 32
 3415 0004 00AF     		add	r7, sp, #0
 3416              	.LCFI119:
 3417              		.cfi_def_cfa_register 7
 3418 0006 F860     		str	r0, [r7, #12]
 3419 0008 B960     		str	r1, [r7, #8]
 3420 000a 7A60     		str	r2, [r7, #4]
 3421 000c 3B60     		str	r3, [r7, #0]
2842:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulFIFO;
2843:C:/StellarisWare/driverlib\usb.c ****     unsigned char ucTxPktRdy;
2844:C:/StellarisWare/driverlib\usb.c **** 
2845:C:/StellarisWare/driverlib\usb.c ****     //
2846:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2847:C:/StellarisWare/driverlib\usb.c ****     //
2848:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2849:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2850:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2851:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2852:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2853:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2854:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2855:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2856:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2857:C:/StellarisWare/driverlib\usb.c **** 
2858:C:/StellarisWare/driverlib\usb.c ****     //
2859:C:/StellarisWare/driverlib\usb.c ****     // Get the bit position of TxPktRdy based on the endpoint.
2860:C:/StellarisWare/driverlib\usb.c ****     //
2861:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3422              		.loc 1 2861 0
 3423 000e BB68     		ldr	r3, [r7, #8]
 3424 0010 002B     		cmp	r3, #0
 3425 0012 03D1     		bne	.L155
2862:C:/StellarisWare/driverlib\usb.c ****     {
2863:C:/StellarisWare/driverlib\usb.c ****         ucTxPktRdy = USB_CSRL0_TXRDY;
 3426              		.loc 1 2863 0
 3427 0014 4FF00203 		mov	r3, #2
 3428 0018 FB75     		strb	r3, [r7, #23]
 3429 001a 02E0     		b	.L156
 3430              	.L155:
2864:C:/StellarisWare/driverlib\usb.c ****     }
2865:C:/StellarisWare/driverlib\usb.c ****     else
2866:C:/StellarisWare/driverlib\usb.c ****     {
2867:C:/StellarisWare/driverlib\usb.c ****         ucTxPktRdy = USB_TXCSRL1_TXRDY;
 3431              		.loc 1 2867 0
 3432 001c 4FF00103 		mov	r3, #1
 3433 0020 FB75     		strb	r3, [r7, #23]
 3434              	.L156:
2868:C:/StellarisWare/driverlib\usb.c ****     }
2869:C:/StellarisWare/driverlib\usb.c **** 
2870:C:/StellarisWare/driverlib\usb.c ****     //
2871:C:/StellarisWare/driverlib\usb.c ****     // Don't allow transmit of data if the TxPktRdy bit is already set.
2872:C:/StellarisWare/driverlib\usb.c ****     //
2873:C:/StellarisWare/driverlib\usb.c ****     if(HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) & ucTxPktRdy)
 3435              		.loc 1 2873 0
 3436 0022 FA68     		ldr	r2, [r7, #12]
 3437 0024 BB68     		ldr	r3, [r7, #8]
 3438 0026 D318     		adds	r3, r2, r3
 3439 0028 03F58173 		add	r3, r3, #258
 3440 002c 1B78     		ldrb	r3, [r3, #0]
 3441 002e DAB2     		uxtb	r2, r3
 3442 0030 FB7D     		ldrb	r3, [r7, #23]
 3443 0032 1340     		ands	r3, r3, r2
 3444 0034 DBB2     		uxtb	r3, r3
 3445 0036 002B     		cmp	r3, #0
 3446 0038 02D0     		beq	.L157
2874:C:/StellarisWare/driverlib\usb.c ****     {
2875:C:/StellarisWare/driverlib\usb.c ****         return(-1);
 3447              		.loc 1 2875 0
 3448 003a 4FF0FF33 		mov	r3, #-1
 3449 003e 19E0     		b	.L158
 3450              	.L157:
2876:C:/StellarisWare/driverlib\usb.c ****     }
2877:C:/StellarisWare/driverlib\usb.c **** 
2878:C:/StellarisWare/driverlib\usb.c ****     //
2879:C:/StellarisWare/driverlib\usb.c ****     // Calculate the FIFO address.
2880:C:/StellarisWare/driverlib\usb.c ****     //
2881:C:/StellarisWare/driverlib\usb.c ****     ulFIFO = ulBase + USB_O_FIFO0 + (ulEndpoint >> 2);
 3451              		.loc 1 2881 0
 3452 0040 BB68     		ldr	r3, [r7, #8]
 3453 0042 4FEA9302 		lsr	r2, r3, #2
 3454 0046 FB68     		ldr	r3, [r7, #12]
 3455 0048 D318     		adds	r3, r2, r3
 3456 004a 03F12003 		add	r3, r3, #32
 3457 004e 3B61     		str	r3, [r7, #16]
2882:C:/StellarisWare/driverlib\usb.c **** 
2883:C:/StellarisWare/driverlib\usb.c ****     //
2884:C:/StellarisWare/driverlib\usb.c ****     // Write the data to the FIFO.
2885:C:/StellarisWare/driverlib\usb.c ****     //
2886:C:/StellarisWare/driverlib\usb.c ****     for(; ulSize > 0; ulSize--)
 3458              		.loc 1 2886 0
 3459 0050 0BE0     		b	.L159
 3460              	.L160:
2887:C:/StellarisWare/driverlib\usb.c ****     {
2888:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulFIFO) = *pucData++;
 3461              		.loc 1 2888 0 discriminator 2
 3462 0052 3B69     		ldr	r3, [r7, #16]
 3463 0054 7A68     		ldr	r2, [r7, #4]
 3464 0056 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3465 0058 1A70     		strb	r2, [r3, #0]
 3466 005a 7B68     		ldr	r3, [r7, #4]
 3467 005c 03F10103 		add	r3, r3, #1
 3468 0060 7B60     		str	r3, [r7, #4]
2886:C:/StellarisWare/driverlib\usb.c ****     for(; ulSize > 0; ulSize--)
 3469              		.loc 1 2886 0 discriminator 2
 3470 0062 3B68     		ldr	r3, [r7, #0]
 3471 0064 03F1FF33 		add	r3, r3, #-1
 3472 0068 3B60     		str	r3, [r7, #0]
 3473              	.L159:
2886:C:/StellarisWare/driverlib\usb.c ****     for(; ulSize > 0; ulSize--)
 3474              		.loc 1 2886 0 is_stmt 0 discriminator 1
 3475 006a 3B68     		ldr	r3, [r7, #0]
 3476 006c 002B     		cmp	r3, #0
 3477 006e F0D1     		bne	.L160
2889:C:/StellarisWare/driverlib\usb.c ****     }
2890:C:/StellarisWare/driverlib\usb.c **** 
2891:C:/StellarisWare/driverlib\usb.c ****     //
2892:C:/StellarisWare/driverlib\usb.c ****     // Success.
2893:C:/StellarisWare/driverlib\usb.c ****     //
2894:C:/StellarisWare/driverlib\usb.c ****     return(0);
 3478              		.loc 1 2894 0 is_stmt 1
 3479 0070 4FF00003 		mov	r3, #0
 3480              	.L158:
2895:C:/StellarisWare/driverlib\usb.c **** }
 3481              		.loc 1 2895 0
 3482 0074 1846     		mov	r0, r3
 3483 0076 07F11C07 		add	r7, r7, #28
 3484 007a BD46     		mov	sp, r7
 3485 007c 80BC     		pop	{r7}
 3486 007e 7047     		bx	lr
 3487              		.cfi_endproc
 3488              	.LFE39:
 3490              		.section	.text.USBEndpointDataSend,"ax",%progbits
 3491              		.align	2
 3492              		.global	USBEndpointDataSend
 3493              		.thumb
 3494              		.thumb_func
 3496              	USBEndpointDataSend:
 3497              	.LFB40:
2896:C:/StellarisWare/driverlib\usb.c **** 
2897:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2898:C:/StellarisWare/driverlib\usb.c **** //
2899:C:/StellarisWare/driverlib\usb.c **** //! Starts the transfer of data from an endpoint's FIFO.
2900:C:/StellarisWare/driverlib\usb.c **** //!
2901:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2902:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2903:C:/StellarisWare/driverlib\usb.c **** //! \param ulTransType is set to indicate what type of data is being sent.
2904:C:/StellarisWare/driverlib\usb.c **** //!
2905:C:/StellarisWare/driverlib\usb.c **** //! This function starts the transfer of data from the FIFO for a given
2906:C:/StellarisWare/driverlib\usb.c **** //! endpoint.  This function should be called if the \b USB_EP_AUTO_SET bit was
2907:C:/StellarisWare/driverlib\usb.c **** //! not enabled for the endpoint.  Setting the \e ulTransType parameter allows
2908:C:/StellarisWare/driverlib\usb.c **** //! the appropriate signaling on the USB bus for the type of transaction being
2909:C:/StellarisWare/driverlib\usb.c **** //! requested.  The \e ulTransType parameter should be one of the following:
2910:C:/StellarisWare/driverlib\usb.c **** //!
2911:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_TRANS_OUT for OUT transaction on any endpoint in host mode.
2912:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_TRANS_IN for IN transaction on any endpoint in device mode.
2913:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_TRANS_IN_LAST for the last IN transaction on endpoint zero in a
2914:C:/StellarisWare/driverlib\usb.c **** //!   sequence of IN transactions.
2915:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_TRANS_SETUP for setup transactions on endpoint zero.
2916:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_TRANS_STATUS for status results on endpoint zero.
2917:C:/StellarisWare/driverlib\usb.c **** //!
2918:C:/StellarisWare/driverlib\usb.c **** //! \return This call returns 0 on success, or -1 if a transmission is already
2919:C:/StellarisWare/driverlib\usb.c **** //! in progress.
2920:C:/StellarisWare/driverlib\usb.c **** //
2921:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2922:C:/StellarisWare/driverlib\usb.c **** long
2923:C:/StellarisWare/driverlib\usb.c **** USBEndpointDataSend(unsigned long ulBase, unsigned long ulEndpoint,
2924:C:/StellarisWare/driverlib\usb.c ****                     unsigned long ulTransType)
2925:C:/StellarisWare/driverlib\usb.c **** {
 3498              		.loc 1 2925 0
 3499              		.cfi_startproc
 3500              		@ args = 0, pretend = 0, frame = 24
 3501              		@ frame_needed = 1, uses_anonymous_args = 0
 3502              		@ link register save eliminated.
 3503 0000 80B4     		push	{r7}
 3504              	.LCFI120:
 3505              		.cfi_def_cfa_offset 4
 3506              		.cfi_offset 7, -4
 3507 0002 87B0     		sub	sp, sp, #28
 3508              	.LCFI121:
 3509              		.cfi_def_cfa_offset 32
 3510 0004 00AF     		add	r7, sp, #0
 3511              	.LCFI122:
 3512              		.cfi_def_cfa_register 7
 3513 0006 F860     		str	r0, [r7, #12]
 3514 0008 B960     		str	r1, [r7, #8]
 3515 000a 7A60     		str	r2, [r7, #4]
2926:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulTxPktRdy;
2927:C:/StellarisWare/driverlib\usb.c **** 
2928:C:/StellarisWare/driverlib\usb.c ****     //
2929:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2930:C:/StellarisWare/driverlib\usb.c ****     //
2931:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2932:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2933:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2934:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2935:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
2936:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
2937:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
2938:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
2939:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
2940:C:/StellarisWare/driverlib\usb.c **** 
2941:C:/StellarisWare/driverlib\usb.c ****     //
2942:C:/StellarisWare/driverlib\usb.c ****     // Get the bit position of TxPktRdy based on the endpoint.
2943:C:/StellarisWare/driverlib\usb.c ****     //
2944:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3516              		.loc 1 2944 0
 3517 000c BB68     		ldr	r3, [r7, #8]
 3518 000e 002B     		cmp	r3, #0
 3519 0010 03D1     		bne	.L162
2945:C:/StellarisWare/driverlib\usb.c ****     {
2946:C:/StellarisWare/driverlib\usb.c ****         ulTxPktRdy = ulTransType & 0xff;
 3520              		.loc 1 2946 0
 3521 0012 7B68     		ldr	r3, [r7, #4]
 3522 0014 DBB2     		uxtb	r3, r3
 3523 0016 7B61     		str	r3, [r7, #20]
 3524 0018 04E0     		b	.L163
 3525              	.L162:
2947:C:/StellarisWare/driverlib\usb.c ****     }
2948:C:/StellarisWare/driverlib\usb.c ****     else
2949:C:/StellarisWare/driverlib\usb.c ****     {
2950:C:/StellarisWare/driverlib\usb.c ****         ulTxPktRdy = (ulTransType >> 8) & 0xff;
 3526              		.loc 1 2950 0
 3527 001a 7B68     		ldr	r3, [r7, #4]
 3528 001c 4FEA1323 		lsr	r3, r3, #8
 3529 0020 DBB2     		uxtb	r3, r3
 3530 0022 7B61     		str	r3, [r7, #20]
 3531              	.L163:
2951:C:/StellarisWare/driverlib\usb.c ****     }
2952:C:/StellarisWare/driverlib\usb.c **** 
2953:C:/StellarisWare/driverlib\usb.c ****     //
2954:C:/StellarisWare/driverlib\usb.c ****     // Don't allow transmit of data if the TxPktRdy bit is already set.
2955:C:/StellarisWare/driverlib\usb.c ****     //
2956:C:/StellarisWare/driverlib\usb.c ****     if(HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) & USB_CSRL0_TXRDY)
 3532              		.loc 1 2956 0
 3533 0024 FA68     		ldr	r2, [r7, #12]
 3534 0026 BB68     		ldr	r3, [r7, #8]
 3535 0028 D318     		adds	r3, r2, r3
 3536 002a 03F58173 		add	r3, r3, #258
 3537 002e 1B78     		ldrb	r3, [r3, #0]
 3538 0030 DBB2     		uxtb	r3, r3
 3539 0032 03F00203 		and	r3, r3, #2
 3540 0036 002B     		cmp	r3, #0
 3541 0038 02D0     		beq	.L164
2957:C:/StellarisWare/driverlib\usb.c ****     {
2958:C:/StellarisWare/driverlib\usb.c ****         return(-1);
 3542              		.loc 1 2958 0
 3543 003a 4FF0FF33 		mov	r3, #-1
 3544 003e 09E0     		b	.L165
 3545              	.L164:
2959:C:/StellarisWare/driverlib\usb.c ****     }
2960:C:/StellarisWare/driverlib\usb.c **** 
2961:C:/StellarisWare/driverlib\usb.c ****     //
2962:C:/StellarisWare/driverlib\usb.c ****     // Set TxPktRdy in order to send the data.
2963:C:/StellarisWare/driverlib\usb.c ****     //
2964:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) = ulTxPktRdy;
 3546              		.loc 1 2964 0
 3547 0040 FA68     		ldr	r2, [r7, #12]
 3548 0042 BB68     		ldr	r3, [r7, #8]
 3549 0044 D318     		adds	r3, r2, r3
 3550 0046 03F58173 		add	r3, r3, #258
 3551 004a 7A69     		ldr	r2, [r7, #20]
 3552 004c D2B2     		uxtb	r2, r2
 3553 004e 1A70     		strb	r2, [r3, #0]
2965:C:/StellarisWare/driverlib\usb.c **** 
2966:C:/StellarisWare/driverlib\usb.c ****     //
2967:C:/StellarisWare/driverlib\usb.c ****     // Success.
2968:C:/StellarisWare/driverlib\usb.c ****     //
2969:C:/StellarisWare/driverlib\usb.c ****     return(0);
 3554              		.loc 1 2969 0
 3555 0050 4FF00003 		mov	r3, #0
 3556              	.L165:
2970:C:/StellarisWare/driverlib\usb.c **** }
 3557              		.loc 1 2970 0
 3558 0054 1846     		mov	r0, r3
 3559 0056 07F11C07 		add	r7, r7, #28
 3560 005a BD46     		mov	sp, r7
 3561 005c 80BC     		pop	{r7}
 3562 005e 7047     		bx	lr
 3563              		.cfi_endproc
 3564              	.LFE40:
 3566              		.section	.text.USBFIFOFlush,"ax",%progbits
 3567              		.align	2
 3568              		.global	USBFIFOFlush
 3569              		.thumb
 3570              		.thumb_func
 3572              	USBFIFOFlush:
 3573              	.LFB41:
2971:C:/StellarisWare/driverlib\usb.c **** 
2972:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2973:C:/StellarisWare/driverlib\usb.c **** //
2974:C:/StellarisWare/driverlib\usb.c **** //! Forces a flush of an endpoint's FIFO.
2975:C:/StellarisWare/driverlib\usb.c **** //!
2976:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
2977:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
2978:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies if the IN or OUT endpoint should be accessed.
2979:C:/StellarisWare/driverlib\usb.c **** //!
2980:C:/StellarisWare/driverlib\usb.c **** //! This function forces the USB controller to flush out the data in the FIFO.
2981:C:/StellarisWare/driverlib\usb.c **** //! The function can be called with either host or device controllers and
2982:C:/StellarisWare/driverlib\usb.c **** //! requires the \e ulFlags parameter be one of \b USB_EP_HOST_OUT,
2983:C:/StellarisWare/driverlib\usb.c **** //! \b USB_EP_HOST_IN, \b USB_EP_DEV_OUT, or \b USB_EP_DEV_IN.
2984:C:/StellarisWare/driverlib\usb.c **** //!
2985:C:/StellarisWare/driverlib\usb.c **** //! \return None.
2986:C:/StellarisWare/driverlib\usb.c **** //
2987:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
2988:C:/StellarisWare/driverlib\usb.c **** void
2989:C:/StellarisWare/driverlib\usb.c **** USBFIFOFlush(unsigned long ulBase, unsigned long ulEndpoint,
2990:C:/StellarisWare/driverlib\usb.c ****              unsigned long ulFlags)
2991:C:/StellarisWare/driverlib\usb.c **** {
 3574              		.loc 1 2991 0
 3575              		.cfi_startproc
 3576              		@ args = 0, pretend = 0, frame = 16
 3577              		@ frame_needed = 1, uses_anonymous_args = 0
 3578              		@ link register save eliminated.
 3579 0000 80B4     		push	{r7}
 3580              	.LCFI123:
 3581              		.cfi_def_cfa_offset 4
 3582              		.cfi_offset 7, -4
 3583 0002 85B0     		sub	sp, sp, #20
 3584              	.LCFI124:
 3585              		.cfi_def_cfa_offset 24
 3586 0004 00AF     		add	r7, sp, #0
 3587              	.LCFI125:
 3588              		.cfi_def_cfa_register 7
 3589 0006 F860     		str	r0, [r7, #12]
 3590 0008 B960     		str	r1, [r7, #8]
 3591 000a 7A60     		str	r2, [r7, #4]
2992:C:/StellarisWare/driverlib\usb.c ****     //
2993:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
2994:C:/StellarisWare/driverlib\usb.c ****     //
2995:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
2996:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
2997:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
2998:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
2999:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3000:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3001:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3002:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3003:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3004:C:/StellarisWare/driverlib\usb.c **** 
3005:C:/StellarisWare/driverlib\usb.c ****     //
3006:C:/StellarisWare/driverlib\usb.c ****     // Endpoint zero has a different register set for FIFO flushing.
3007:C:/StellarisWare/driverlib\usb.c ****     //
3008:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3592              		.loc 1 3008 0
 3593 000c BB68     		ldr	r3, [r7, #8]
 3594 000e 002B     		cmp	r3, #0
 3595 0010 11D1     		bne	.L167
3009:C:/StellarisWare/driverlib\usb.c ****     {
3010:C:/StellarisWare/driverlib\usb.c ****         //
3011:C:/StellarisWare/driverlib\usb.c ****         // Nothing in the FIFO if neither of these bits are set.
3012:C:/StellarisWare/driverlib\usb.c ****         //
3013:C:/StellarisWare/driverlib\usb.c ****         if((HWREGB(ulBase + USB_O_CSRL0) &
 3596              		.loc 1 3013 0
 3597 0012 FB68     		ldr	r3, [r7, #12]
 3598 0014 03F58173 		add	r3, r3, #258
 3599 0018 1B78     		ldrb	r3, [r3, #0]
 3600 001a DBB2     		uxtb	r3, r3
 3601 001c 03F00303 		and	r3, r3, #3
 3602 0020 002B     		cmp	r3, #0
 3603 0022 46D0     		beq	.L166
3014:C:/StellarisWare/driverlib\usb.c ****             (USB_CSRL0_RXRDY | USB_CSRL0_TXRDY)) != 0)
3015:C:/StellarisWare/driverlib\usb.c ****         {
3016:C:/StellarisWare/driverlib\usb.c ****             //
3017:C:/StellarisWare/driverlib\usb.c ****             // Hit the Flush FIFO bit.
3018:C:/StellarisWare/driverlib\usb.c ****             //
3019:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_CSRH0) = USB_CSRH0_FLUSH;
 3604              		.loc 1 3019 0
 3605 0024 FB68     		ldr	r3, [r7, #12]
 3606 0026 03F58073 		add	r3, r3, #256
 3607 002a 03F10303 		add	r3, r3, #3
 3608 002e 4FF00102 		mov	r2, #1
 3609 0032 1A70     		strb	r2, [r3, #0]
 3610 0034 3DE0     		b	.L166
 3611              	.L167:
3020:C:/StellarisWare/driverlib\usb.c ****         }
3021:C:/StellarisWare/driverlib\usb.c ****     }
3022:C:/StellarisWare/driverlib\usb.c ****     else
3023:C:/StellarisWare/driverlib\usb.c ****     {
3024:C:/StellarisWare/driverlib\usb.c ****         //
3025:C:/StellarisWare/driverlib\usb.c ****         // Only reset the IN or OUT FIFO.
3026:C:/StellarisWare/driverlib\usb.c ****         //
3027:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & (USB_EP_HOST_OUT | USB_EP_DEV_IN))
 3612              		.loc 1 3027 0
 3613 0036 7B68     		ldr	r3, [r7, #4]
 3614 0038 03F40053 		and	r3, r3, #8192
 3615 003c 002B     		cmp	r3, #0
 3616 003e 1CD0     		beq	.L169
3028:C:/StellarisWare/driverlib\usb.c ****         {
3029:C:/StellarisWare/driverlib\usb.c ****             //
3030:C:/StellarisWare/driverlib\usb.c ****             // Make sure the FIFO is not empty.
3031:C:/StellarisWare/driverlib\usb.c ****             //
3032:C:/StellarisWare/driverlib\usb.c ****             if(HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) &
 3617              		.loc 1 3032 0
 3618 0040 FA68     		ldr	r2, [r7, #12]
 3619 0042 BB68     		ldr	r3, [r7, #8]
 3620 0044 D318     		adds	r3, r2, r3
 3621 0046 03F58173 		add	r3, r3, #258
 3622 004a 1B78     		ldrb	r3, [r3, #0]
 3623 004c DBB2     		uxtb	r3, r3
 3624 004e 03F00103 		and	r3, r3, #1
 3625 0052 DBB2     		uxtb	r3, r3
 3626 0054 002B     		cmp	r3, #0
 3627 0056 2CD0     		beq	.L166
3033:C:/StellarisWare/driverlib\usb.c ****                USB_TXCSRL1_TXRDY)
3034:C:/StellarisWare/driverlib\usb.c ****             {
3035:C:/StellarisWare/driverlib\usb.c ****                 //
3036:C:/StellarisWare/driverlib\usb.c ****                 // Hit the Flush FIFO bit.
3037:C:/StellarisWare/driverlib\usb.c ****                 //
3038:C:/StellarisWare/driverlib\usb.c ****                 HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 3628              		.loc 1 3038 0
 3629 0058 FA68     		ldr	r2, [r7, #12]
 3630 005a BB68     		ldr	r3, [r7, #8]
 3631 005c D318     		adds	r3, r2, r3
 3632 005e 03F58173 		add	r3, r3, #258
 3633 0062 F968     		ldr	r1, [r7, #12]
 3634 0064 BA68     		ldr	r2, [r7, #8]
 3635 0066 8A18     		adds	r2, r1, r2
 3636 0068 02F58172 		add	r2, r2, #258
 3637 006c 1278     		ldrb	r2, [r2, #0]
 3638 006e D2B2     		uxtb	r2, r2
 3639 0070 42F00802 		orr	r2, r2, #8
 3640 0074 D2B2     		uxtb	r2, r2
 3641 0076 1A70     		strb	r2, [r3, #0]
 3642 0078 1BE0     		b	.L166
 3643              	.L169:
3039:C:/StellarisWare/driverlib\usb.c ****                     USB_TXCSRL1_FLUSH;
3040:C:/StellarisWare/driverlib\usb.c ****             }
3041:C:/StellarisWare/driverlib\usb.c ****         }
3042:C:/StellarisWare/driverlib\usb.c ****         else
3043:C:/StellarisWare/driverlib\usb.c ****         {
3044:C:/StellarisWare/driverlib\usb.c ****             //
3045:C:/StellarisWare/driverlib\usb.c ****             // Make sure that the FIFO is not empty.
3046:C:/StellarisWare/driverlib\usb.c ****             //
3047:C:/StellarisWare/driverlib\usb.c ****             if(HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &
 3644              		.loc 1 3047 0
 3645 007a FA68     		ldr	r2, [r7, #12]
 3646 007c BB68     		ldr	r3, [r7, #8]
 3647 007e D318     		adds	r3, r2, r3
 3648 0080 03F58373 		add	r3, r3, #262
 3649 0084 1B78     		ldrb	r3, [r3, #0]
 3650 0086 DBB2     		uxtb	r3, r3
 3651 0088 03F00103 		and	r3, r3, #1
 3652 008c DBB2     		uxtb	r3, r3
 3653 008e 002B     		cmp	r3, #0
 3654 0090 0FD0     		beq	.L166
3048:C:/StellarisWare/driverlib\usb.c ****                USB_RXCSRL1_RXRDY)
3049:C:/StellarisWare/driverlib\usb.c ****             {
3050:C:/StellarisWare/driverlib\usb.c ****                 //
3051:C:/StellarisWare/driverlib\usb.c ****                 // Hit the Flush FIFO bit.
3052:C:/StellarisWare/driverlib\usb.c ****                 //
3053:C:/StellarisWare/driverlib\usb.c ****                 HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
 3655              		.loc 1 3053 0
 3656 0092 FA68     		ldr	r2, [r7, #12]
 3657 0094 BB68     		ldr	r3, [r7, #8]
 3658 0096 D318     		adds	r3, r2, r3
 3659 0098 03F58373 		add	r3, r3, #262
 3660 009c F968     		ldr	r1, [r7, #12]
 3661 009e BA68     		ldr	r2, [r7, #8]
 3662 00a0 8A18     		adds	r2, r1, r2
 3663 00a2 02F58372 		add	r2, r2, #262
 3664 00a6 1278     		ldrb	r2, [r2, #0]
 3665 00a8 D2B2     		uxtb	r2, r2
 3666 00aa 42F01002 		orr	r2, r2, #16
 3667 00ae D2B2     		uxtb	r2, r2
 3668 00b0 1A70     		strb	r2, [r3, #0]
 3669              	.L166:
3054:C:/StellarisWare/driverlib\usb.c ****                     USB_RXCSRL1_FLUSH;
3055:C:/StellarisWare/driverlib\usb.c ****             }
3056:C:/StellarisWare/driverlib\usb.c ****         }
3057:C:/StellarisWare/driverlib\usb.c ****     }
3058:C:/StellarisWare/driverlib\usb.c **** }
 3670              		.loc 1 3058 0
 3671 00b2 07F11407 		add	r7, r7, #20
 3672 00b6 BD46     		mov	sp, r7
 3673 00b8 80BC     		pop	{r7}
 3674 00ba 7047     		bx	lr
 3675              		.cfi_endproc
 3676              	.LFE41:
 3678              		.section	.text.USBHostRequestIN,"ax",%progbits
 3679              		.align	2
 3680              		.global	USBHostRequestIN
 3681              		.thumb
 3682              		.thumb_func
 3684              	USBHostRequestIN:
 3685              	.LFB42:
3059:C:/StellarisWare/driverlib\usb.c **** 
3060:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3061:C:/StellarisWare/driverlib\usb.c **** //
3062:C:/StellarisWare/driverlib\usb.c **** //! Schedules a request for an IN transaction on an endpoint in host mode.
3063:C:/StellarisWare/driverlib\usb.c **** //!
3064:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3065:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3066:C:/StellarisWare/driverlib\usb.c **** //!
3067:C:/StellarisWare/driverlib\usb.c **** //! This function schedules a request for an IN transaction.  When the USB
3068:C:/StellarisWare/driverlib\usb.c **** //! device being communicated with responds with the data, the data can be
3069:C:/StellarisWare/driverlib\usb.c **** //! retrieved by calling USBEndpointDataGet() or via a DMA transfer.
3070:C:/StellarisWare/driverlib\usb.c **** //!
3071:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode and only for IN
3072:C:/StellarisWare/driverlib\usb.c **** //! endpoints.
3073:C:/StellarisWare/driverlib\usb.c **** //!
3074:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3075:C:/StellarisWare/driverlib\usb.c **** //
3076:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3077:C:/StellarisWare/driverlib\usb.c **** void
3078:C:/StellarisWare/driverlib\usb.c **** USBHostRequestIN(unsigned long ulBase, unsigned long ulEndpoint)
3079:C:/StellarisWare/driverlib\usb.c **** {
 3686              		.loc 1 3079 0
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 16
 3689              		@ frame_needed = 1, uses_anonymous_args = 0
 3690              		@ link register save eliminated.
 3691 0000 80B4     		push	{r7}
 3692              	.LCFI126:
 3693              		.cfi_def_cfa_offset 4
 3694              		.cfi_offset 7, -4
 3695 0002 85B0     		sub	sp, sp, #20
 3696              	.LCFI127:
 3697              		.cfi_def_cfa_offset 24
 3698 0004 00AF     		add	r7, sp, #0
 3699              	.LCFI128:
 3700              		.cfi_def_cfa_register 7
 3701 0006 7860     		str	r0, [r7, #4]
 3702 0008 3960     		str	r1, [r7, #0]
3080:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
3081:C:/StellarisWare/driverlib\usb.c **** 
3082:C:/StellarisWare/driverlib\usb.c ****     //
3083:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3084:C:/StellarisWare/driverlib\usb.c ****     //
3085:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3086:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3087:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3088:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3089:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3090:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3091:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3092:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3093:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3094:C:/StellarisWare/driverlib\usb.c **** 
3095:C:/StellarisWare/driverlib\usb.c ****     //
3096:C:/StellarisWare/driverlib\usb.c ****     // Endpoint zero uses a different offset than the other endpoints.
3097:C:/StellarisWare/driverlib\usb.c ****     //
3098:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3703              		.loc 1 3098 0
 3704 000a 3B68     		ldr	r3, [r7, #0]
 3705 000c 002B     		cmp	r3, #0
 3706 000e 03D1     		bne	.L171
3099:C:/StellarisWare/driverlib\usb.c ****     {
3100:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_CSRL0;
 3707              		.loc 1 3100 0
 3708 0010 4FF48173 		mov	r3, #258
 3709 0014 FB60     		str	r3, [r7, #12]
 3710 0016 03E0     		b	.L172
 3711              	.L171:
3101:C:/StellarisWare/driverlib\usb.c ****     }
3102:C:/StellarisWare/driverlib\usb.c ****     else
3103:C:/StellarisWare/driverlib\usb.c ****     {
3104:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint);
 3712              		.loc 1 3104 0
 3713 0018 3B68     		ldr	r3, [r7, #0]
 3714 001a 03F58373 		add	r3, r3, #262
 3715 001e FB60     		str	r3, [r7, #12]
 3716              	.L172:
3105:C:/StellarisWare/driverlib\usb.c ****     }
3106:C:/StellarisWare/driverlib\usb.c **** 
3107:C:/StellarisWare/driverlib\usb.c ****     //
3108:C:/StellarisWare/driverlib\usb.c ****     // Set the request for an IN transaction.
3109:C:/StellarisWare/driverlib\usb.c ****     //
3110:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + ulRegister) = USB_RXCSRL1_REQPKT;
 3717              		.loc 1 3110 0
 3718 0020 7A68     		ldr	r2, [r7, #4]
 3719 0022 FB68     		ldr	r3, [r7, #12]
 3720 0024 D318     		adds	r3, r2, r3
 3721 0026 4FF02002 		mov	r2, #32
 3722 002a 1A70     		strb	r2, [r3, #0]
3111:C:/StellarisWare/driverlib\usb.c **** }
 3723              		.loc 1 3111 0
 3724 002c 07F11407 		add	r7, r7, #20
 3725 0030 BD46     		mov	sp, r7
 3726 0032 80BC     		pop	{r7}
 3727 0034 7047     		bx	lr
 3728              		.cfi_endproc
 3729              	.LFE42:
 3731 0036 00BF     		.section	.text.USBHostRequestINClear,"ax",%progbits
 3732              		.align	2
 3733              		.global	USBHostRequestINClear
 3734              		.thumb
 3735              		.thumb_func
 3737              	USBHostRequestINClear:
 3738              	.LFB43:
3112:C:/StellarisWare/driverlib\usb.c **** 
3113:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3114:C:/StellarisWare/driverlib\usb.c **** //
3115:C:/StellarisWare/driverlib\usb.c **** //! Clears a scheduled IN transaction for an endpoint in host mode.
3116:C:/StellarisWare/driverlib\usb.c **** //!
3117:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3118:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3119:C:/StellarisWare/driverlib\usb.c **** //!
3120:C:/StellarisWare/driverlib\usb.c **** //! This function clears a previously scheduled IN transaction if it is
3121:C:/StellarisWare/driverlib\usb.c **** //! still pending.  This function should be used to safely disable any
3122:C:/StellarisWare/driverlib\usb.c **** //! scheduled IN transactions if the endpoint specified by \e ulEndpoint
3123:C:/StellarisWare/driverlib\usb.c **** //! is reconfigured for communications with other devices.
3124:C:/StellarisWare/driverlib\usb.c **** //!
3125:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode and only for IN
3126:C:/StellarisWare/driverlib\usb.c **** //! endpoints.
3127:C:/StellarisWare/driverlib\usb.c **** //!
3128:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3129:C:/StellarisWare/driverlib\usb.c **** //
3130:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3131:C:/StellarisWare/driverlib\usb.c **** void
3132:C:/StellarisWare/driverlib\usb.c **** USBHostRequestINClear(unsigned long ulBase, unsigned long ulEndpoint)
3133:C:/StellarisWare/driverlib\usb.c **** {
 3739              		.loc 1 3133 0
 3740              		.cfi_startproc
 3741              		@ args = 0, pretend = 0, frame = 16
 3742              		@ frame_needed = 1, uses_anonymous_args = 0
 3743              		@ link register save eliminated.
 3744 0000 80B4     		push	{r7}
 3745              	.LCFI129:
 3746              		.cfi_def_cfa_offset 4
 3747              		.cfi_offset 7, -4
 3748 0002 85B0     		sub	sp, sp, #20
 3749              	.LCFI130:
 3750              		.cfi_def_cfa_offset 24
 3751 0004 00AF     		add	r7, sp, #0
 3752              	.LCFI131:
 3753              		.cfi_def_cfa_register 7
 3754 0006 7860     		str	r0, [r7, #4]
 3755 0008 3960     		str	r1, [r7, #0]
3134:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulRegister;
3135:C:/StellarisWare/driverlib\usb.c **** 
3136:C:/StellarisWare/driverlib\usb.c ****     //
3137:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3138:C:/StellarisWare/driverlib\usb.c ****     //
3139:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3140:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3141:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3142:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3143:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3144:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3145:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3146:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3147:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3148:C:/StellarisWare/driverlib\usb.c **** 
3149:C:/StellarisWare/driverlib\usb.c ****     //
3150:C:/StellarisWare/driverlib\usb.c ****     // Endpoint zero uses a different offset than the other endpoints.
3151:C:/StellarisWare/driverlib\usb.c ****     //
3152:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 3756              		.loc 1 3152 0
 3757 000a 3B68     		ldr	r3, [r7, #0]
 3758 000c 002B     		cmp	r3, #0
 3759 000e 03D1     		bne	.L174
3153:C:/StellarisWare/driverlib\usb.c ****     {
3154:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_CSRL0;
 3760              		.loc 1 3154 0
 3761 0010 4FF48173 		mov	r3, #258
 3762 0014 FB60     		str	r3, [r7, #12]
 3763 0016 03E0     		b	.L175
 3764              	.L174:
3155:C:/StellarisWare/driverlib\usb.c ****     }
3156:C:/StellarisWare/driverlib\usb.c ****     else
3157:C:/StellarisWare/driverlib\usb.c ****     {
3158:C:/StellarisWare/driverlib\usb.c ****         ulRegister = USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint);
 3765              		.loc 1 3158 0
 3766 0018 3B68     		ldr	r3, [r7, #0]
 3767 001a 03F58373 		add	r3, r3, #262
 3768 001e FB60     		str	r3, [r7, #12]
 3769              	.L175:
3159:C:/StellarisWare/driverlib\usb.c ****     }
3160:C:/StellarisWare/driverlib\usb.c **** 
3161:C:/StellarisWare/driverlib\usb.c ****     //
3162:C:/StellarisWare/driverlib\usb.c ****     // Clear the request for an IN transaction.
3163:C:/StellarisWare/driverlib\usb.c ****     //
3164:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + ulRegister) &= ~USB_RXCSRL1_REQPKT;
 3770              		.loc 1 3164 0
 3771 0020 7A68     		ldr	r2, [r7, #4]
 3772 0022 FB68     		ldr	r3, [r7, #12]
 3773 0024 D318     		adds	r3, r2, r3
 3774 0026 7968     		ldr	r1, [r7, #4]
 3775 0028 FA68     		ldr	r2, [r7, #12]
 3776 002a 8A18     		adds	r2, r1, r2
 3777 002c 1278     		ldrb	r2, [r2, #0]
 3778 002e D2B2     		uxtb	r2, r2
 3779 0030 22F02002 		bic	r2, r2, #32
 3780 0034 D2B2     		uxtb	r2, r2
 3781 0036 1A70     		strb	r2, [r3, #0]
3165:C:/StellarisWare/driverlib\usb.c **** }
 3782              		.loc 1 3165 0
 3783 0038 07F11407 		add	r7, r7, #20
 3784 003c BD46     		mov	sp, r7
 3785 003e 80BC     		pop	{r7}
 3786 0040 7047     		bx	lr
 3787              		.cfi_endproc
 3788              	.LFE43:
 3790 0042 00BF     		.section	.text.USBHostRequestStatus,"ax",%progbits
 3791              		.align	2
 3792              		.global	USBHostRequestStatus
 3793              		.thumb
 3794              		.thumb_func
 3796              	USBHostRequestStatus:
 3797              	.LFB44:
3166:C:/StellarisWare/driverlib\usb.c **** 
3167:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3168:C:/StellarisWare/driverlib\usb.c **** //
3169:C:/StellarisWare/driverlib\usb.c **** //! Issues a request for a status IN transaction on endpoint zero.
3170:C:/StellarisWare/driverlib\usb.c **** //!
3171:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3172:C:/StellarisWare/driverlib\usb.c **** //!
3173:C:/StellarisWare/driverlib\usb.c **** //! This function is used to cause a request for a status IN transaction from
3174:C:/StellarisWare/driverlib\usb.c **** //! a device on endpoint zero.  This function can only be used with endpoint
3175:C:/StellarisWare/driverlib\usb.c **** //! zero as that is the only control endpoint that supports this ability.  This
3176:C:/StellarisWare/driverlib\usb.c **** //! function is used to complete the last phase of a control transaction to a
3177:C:/StellarisWare/driverlib\usb.c **** //! device and an interrupt is signaled when the status packet has been
3178:C:/StellarisWare/driverlib\usb.c **** //! received.
3179:C:/StellarisWare/driverlib\usb.c **** //!
3180:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3181:C:/StellarisWare/driverlib\usb.c **** //
3182:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3183:C:/StellarisWare/driverlib\usb.c **** void
3184:C:/StellarisWare/driverlib\usb.c **** USBHostRequestStatus(unsigned long ulBase)
3185:C:/StellarisWare/driverlib\usb.c **** {
 3798              		.loc 1 3185 0
 3799              		.cfi_startproc
 3800              		@ args = 0, pretend = 0, frame = 8
 3801              		@ frame_needed = 1, uses_anonymous_args = 0
 3802              		@ link register save eliminated.
 3803 0000 80B4     		push	{r7}
 3804              	.LCFI132:
 3805              		.cfi_def_cfa_offset 4
 3806              		.cfi_offset 7, -4
 3807 0002 83B0     		sub	sp, sp, #12
 3808              	.LCFI133:
 3809              		.cfi_def_cfa_offset 16
 3810 0004 00AF     		add	r7, sp, #0
 3811              	.LCFI134:
 3812              		.cfi_def_cfa_register 7
 3813 0006 7860     		str	r0, [r7, #4]
3186:C:/StellarisWare/driverlib\usb.c ****     //
3187:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3188:C:/StellarisWare/driverlib\usb.c ****     //
3189:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3190:C:/StellarisWare/driverlib\usb.c **** 
3191:C:/StellarisWare/driverlib\usb.c ****     //
3192:C:/StellarisWare/driverlib\usb.c ****     // Set the request for a status IN transaction.
3193:C:/StellarisWare/driverlib\usb.c ****     //
3194:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_CSRL0) = USB_CSRL0_REQPKT | USB_CSRL0_STATUS;
 3814              		.loc 1 3194 0
 3815 0008 7B68     		ldr	r3, [r7, #4]
 3816 000a 03F58173 		add	r3, r3, #258
 3817 000e 4FF06002 		mov	r2, #96
 3818 0012 1A70     		strb	r2, [r3, #0]
3195:C:/StellarisWare/driverlib\usb.c **** }
 3819              		.loc 1 3195 0
 3820 0014 07F10C07 		add	r7, r7, #12
 3821 0018 BD46     		mov	sp, r7
 3822 001a 80BC     		pop	{r7}
 3823 001c 7047     		bx	lr
 3824              		.cfi_endproc
 3825              	.LFE44:
 3827 001e 00BF     		.section	.text.USBHostAddrSet,"ax",%progbits
 3828              		.align	2
 3829              		.global	USBHostAddrSet
 3830              		.thumb
 3831              		.thumb_func
 3833              	USBHostAddrSet:
 3834              	.LFB45:
3196:C:/StellarisWare/driverlib\usb.c **** 
3197:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3198:C:/StellarisWare/driverlib\usb.c **** //
3199:C:/StellarisWare/driverlib\usb.c **** //! Sets the functional address for the device that is connected to an
3200:C:/StellarisWare/driverlib\usb.c **** //! endpoint in host mode.
3201:C:/StellarisWare/driverlib\usb.c **** //!
3202:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3203:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3204:C:/StellarisWare/driverlib\usb.c **** //! \param ulAddr is the functional address for the controller to use for this
3205:C:/StellarisWare/driverlib\usb.c **** //! endpoint.
3206:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags determines if this is an IN or an OUT endpoint.
3207:C:/StellarisWare/driverlib\usb.c **** //!
3208:C:/StellarisWare/driverlib\usb.c **** //! This function configures the functional address for a device that is using
3209:C:/StellarisWare/driverlib\usb.c **** //! this endpoint for communication.  This \e ulAddr parameter is the address
3210:C:/StellarisWare/driverlib\usb.c **** //! of the target device that this endpoint is communicating with.  The
3211:C:/StellarisWare/driverlib\usb.c **** //! \e ulFlags parameter indicates if the IN or OUT endpoint should be set.
3212:C:/StellarisWare/driverlib\usb.c **** //!
3213:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3214:C:/StellarisWare/driverlib\usb.c **** //!
3215:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3216:C:/StellarisWare/driverlib\usb.c **** //
3217:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3218:C:/StellarisWare/driverlib\usb.c **** void
3219:C:/StellarisWare/driverlib\usb.c **** USBHostAddrSet(unsigned long ulBase, unsigned long ulEndpoint,
3220:C:/StellarisWare/driverlib\usb.c ****                unsigned long ulAddr, unsigned long ulFlags)
3221:C:/StellarisWare/driverlib\usb.c **** {
 3835              		.loc 1 3221 0
 3836              		.cfi_startproc
 3837              		@ args = 0, pretend = 0, frame = 16
 3838              		@ frame_needed = 1, uses_anonymous_args = 0
 3839              		@ link register save eliminated.
 3840 0000 80B4     		push	{r7}
 3841              	.LCFI135:
 3842              		.cfi_def_cfa_offset 4
 3843              		.cfi_offset 7, -4
 3844 0002 85B0     		sub	sp, sp, #20
 3845              	.LCFI136:
 3846              		.cfi_def_cfa_offset 24
 3847 0004 00AF     		add	r7, sp, #0
 3848              	.LCFI137:
 3849              		.cfi_def_cfa_register 7
 3850 0006 F860     		str	r0, [r7, #12]
 3851 0008 B960     		str	r1, [r7, #8]
 3852 000a 7A60     		str	r2, [r7, #4]
 3853 000c 3B60     		str	r3, [r7, #0]
3222:C:/StellarisWare/driverlib\usb.c ****     //
3223:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3224:C:/StellarisWare/driverlib\usb.c ****     //
3225:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3226:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3227:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3228:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3229:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3230:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3231:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3232:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3233:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3234:C:/StellarisWare/driverlib\usb.c **** 
3235:C:/StellarisWare/driverlib\usb.c ****     //
3236:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit or receive address should be set.
3237:C:/StellarisWare/driverlib\usb.c ****     //
3238:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_HOST_OUT)
 3854              		.loc 1 3238 0
 3855 000e 3B68     		ldr	r3, [r7, #0]
 3856 0010 03F40053 		and	r3, r3, #8192
 3857 0014 002B     		cmp	r3, #0
 3858 0016 0AD0     		beq	.L178
3239:C:/StellarisWare/driverlib\usb.c ****     {
3240:C:/StellarisWare/driverlib\usb.c ****         //
3241:C:/StellarisWare/driverlib\usb.c ****         // Set the transmit address.
3242:C:/StellarisWare/driverlib\usb.c ****         //
3243:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXFUNCADDR0 + (ulEndpoint >> 1)) = ulAddr;
 3859              		.loc 1 3243 0
 3860 0018 BB68     		ldr	r3, [r7, #8]
 3861 001a 4FEA5302 		lsr	r2, r3, #1
 3862 001e FB68     		ldr	r3, [r7, #12]
 3863 0020 D318     		adds	r3, r2, r3
 3864 0022 03F18003 		add	r3, r3, #128
 3865 0026 7A68     		ldr	r2, [r7, #4]
 3866 0028 D2B2     		uxtb	r2, r2
 3867 002a 1A70     		strb	r2, [r3, #0]
 3868 002c 09E0     		b	.L177
 3869              	.L178:
3244:C:/StellarisWare/driverlib\usb.c ****     }
3245:C:/StellarisWare/driverlib\usb.c ****     else
3246:C:/StellarisWare/driverlib\usb.c ****     {
3247:C:/StellarisWare/driverlib\usb.c ****         //
3248:C:/StellarisWare/driverlib\usb.c ****         // Set the receive address.
3249:C:/StellarisWare/driverlib\usb.c ****         //
3250:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_TXFUNCADDR0 + 4 + (ulEndpoint >> 1)) = ulAddr;
 3870              		.loc 1 3250 0
 3871 002e BB68     		ldr	r3, [r7, #8]
 3872 0030 4FEA5302 		lsr	r2, r3, #1
 3873 0034 FB68     		ldr	r3, [r7, #12]
 3874 0036 D318     		adds	r3, r2, r3
 3875 0038 03F18403 		add	r3, r3, #132
 3876 003c 7A68     		ldr	r2, [r7, #4]
 3877 003e D2B2     		uxtb	r2, r2
 3878 0040 1A70     		strb	r2, [r3, #0]
 3879              	.L177:
3251:C:/StellarisWare/driverlib\usb.c ****     }
3252:C:/StellarisWare/driverlib\usb.c **** }
 3880              		.loc 1 3252 0
 3881 0042 07F11407 		add	r7, r7, #20
 3882 0046 BD46     		mov	sp, r7
 3883 0048 80BC     		pop	{r7}
 3884 004a 7047     		bx	lr
 3885              		.cfi_endproc
 3886              	.LFE45:
 3888              		.section	.text.USBHostAddrGet,"ax",%progbits
 3889              		.align	2
 3890              		.global	USBHostAddrGet
 3891              		.thumb
 3892              		.thumb_func
 3894              	USBHostAddrGet:
 3895              	.LFB46:
3253:C:/StellarisWare/driverlib\usb.c **** 
3254:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3255:C:/StellarisWare/driverlib\usb.c **** //
3256:C:/StellarisWare/driverlib\usb.c **** //! Gets the current functional device address for an endpoint.
3257:C:/StellarisWare/driverlib\usb.c **** //!
3258:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3259:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3260:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags determines if this is an IN or an OUT endpoint.
3261:C:/StellarisWare/driverlib\usb.c **** //!
3262:C:/StellarisWare/driverlib\usb.c **** //! This function returns the current functional address that an endpoint is
3263:C:/StellarisWare/driverlib\usb.c **** //! using to communicate with a device.  The \e ulFlags parameter determines if
3264:C:/StellarisWare/driverlib\usb.c **** //! the IN or OUT endpoint's device address is returned.
3265:C:/StellarisWare/driverlib\usb.c **** //!
3266:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3267:C:/StellarisWare/driverlib\usb.c **** //!
3268:C:/StellarisWare/driverlib\usb.c **** //! \return Returns the current function address being used by an endpoint.
3269:C:/StellarisWare/driverlib\usb.c **** //
3270:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3271:C:/StellarisWare/driverlib\usb.c **** unsigned long
3272:C:/StellarisWare/driverlib\usb.c **** USBHostAddrGet(unsigned long ulBase, unsigned long ulEndpoint,
3273:C:/StellarisWare/driverlib\usb.c ****                unsigned long ulFlags)
3274:C:/StellarisWare/driverlib\usb.c **** {
 3896              		.loc 1 3274 0
 3897              		.cfi_startproc
 3898              		@ args = 0, pretend = 0, frame = 16
 3899              		@ frame_needed = 1, uses_anonymous_args = 0
 3900              		@ link register save eliminated.
 3901 0000 80B4     		push	{r7}
 3902              	.LCFI138:
 3903              		.cfi_def_cfa_offset 4
 3904              		.cfi_offset 7, -4
 3905 0002 85B0     		sub	sp, sp, #20
 3906              	.LCFI139:
 3907              		.cfi_def_cfa_offset 24
 3908 0004 00AF     		add	r7, sp, #0
 3909              	.LCFI140:
 3910              		.cfi_def_cfa_register 7
 3911 0006 F860     		str	r0, [r7, #12]
 3912 0008 B960     		str	r1, [r7, #8]
 3913 000a 7A60     		str	r2, [r7, #4]
3275:C:/StellarisWare/driverlib\usb.c ****     //
3276:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3277:C:/StellarisWare/driverlib\usb.c ****     //
3278:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3279:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3280:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3281:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3282:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3283:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3284:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3285:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3286:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3287:C:/StellarisWare/driverlib\usb.c **** 
3288:C:/StellarisWare/driverlib\usb.c ****     //
3289:C:/StellarisWare/driverlib\usb.c ****     // See if the transmit or receive address should be returned.
3290:C:/StellarisWare/driverlib\usb.c ****     //
3291:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_HOST_OUT)
 3914              		.loc 1 3291 0
 3915 000c 7B68     		ldr	r3, [r7, #4]
 3916 000e 03F40053 		and	r3, r3, #8192
 3917 0012 002B     		cmp	r3, #0
 3918 0014 09D0     		beq	.L181
3292:C:/StellarisWare/driverlib\usb.c ****     {
3293:C:/StellarisWare/driverlib\usb.c ****         //
3294:C:/StellarisWare/driverlib\usb.c ****         // Return this endpoint's transmit address.
3295:C:/StellarisWare/driverlib\usb.c ****         //
3296:C:/StellarisWare/driverlib\usb.c ****         return(HWREGB(ulBase + USB_O_TXFUNCADDR0 + (ulEndpoint >> 1)));
 3919              		.loc 1 3296 0
 3920 0016 BB68     		ldr	r3, [r7, #8]
 3921 0018 4FEA5302 		lsr	r2, r3, #1
 3922 001c FB68     		ldr	r3, [r7, #12]
 3923 001e D318     		adds	r3, r2, r3
 3924 0020 03F18003 		add	r3, r3, #128
 3925 0024 1B78     		ldrb	r3, [r3, #0]
 3926 0026 DBB2     		uxtb	r3, r3
 3927 0028 08E0     		b	.L182
 3928              	.L181:
3297:C:/StellarisWare/driverlib\usb.c ****     }
3298:C:/StellarisWare/driverlib\usb.c ****     else
3299:C:/StellarisWare/driverlib\usb.c ****     {
3300:C:/StellarisWare/driverlib\usb.c ****         //
3301:C:/StellarisWare/driverlib\usb.c ****         // Return this endpoint's receive address.
3302:C:/StellarisWare/driverlib\usb.c ****         //
3303:C:/StellarisWare/driverlib\usb.c ****         return(HWREGB(ulBase + USB_O_TXFUNCADDR0 + 4 + (ulEndpoint >> 1)));
 3929              		.loc 1 3303 0
 3930 002a BB68     		ldr	r3, [r7, #8]
 3931 002c 4FEA5302 		lsr	r2, r3, #1
 3932 0030 FB68     		ldr	r3, [r7, #12]
 3933 0032 D318     		adds	r3, r2, r3
 3934 0034 03F18403 		add	r3, r3, #132
 3935 0038 1B78     		ldrb	r3, [r3, #0]
 3936 003a DBB2     		uxtb	r3, r3
 3937              	.L182:
3304:C:/StellarisWare/driverlib\usb.c ****     }
3305:C:/StellarisWare/driverlib\usb.c **** }
 3938              		.loc 1 3305 0
 3939 003c 1846     		mov	r0, r3
 3940 003e 07F11407 		add	r7, r7, #20
 3941 0042 BD46     		mov	sp, r7
 3942 0044 80BC     		pop	{r7}
 3943 0046 7047     		bx	lr
 3944              		.cfi_endproc
 3945              	.LFE46:
 3947              		.section	.text.USBHostHubAddrSet,"ax",%progbits
 3948              		.align	2
 3949              		.global	USBHostHubAddrSet
 3950              		.thumb
 3951              		.thumb_func
 3953              	USBHostHubAddrSet:
 3954              	.LFB47:
3306:C:/StellarisWare/driverlib\usb.c **** 
3307:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3308:C:/StellarisWare/driverlib\usb.c **** //
3309:C:/StellarisWare/driverlib\usb.c **** //! Sets the hub address for the device that is connected to an endpoint.
3310:C:/StellarisWare/driverlib\usb.c **** //!
3311:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3312:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3313:C:/StellarisWare/driverlib\usb.c **** //! \param ulAddr is the hub address and port for the device using this
3314:C:/StellarisWare/driverlib\usb.c **** //!  endpoint.  The hub address must be defined in bits 8 through 15 with the
3315:C:/StellarisWare/driverlib\usb.c **** //!  port number in bits 0 through 6.
3316:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags determines if this is an IN or an OUT endpoint.
3317:C:/StellarisWare/driverlib\usb.c **** //!
3318:C:/StellarisWare/driverlib\usb.c **** //! This function configures the hub address for a device that is using this
3319:C:/StellarisWare/driverlib\usb.c **** //! endpoint for communication.  The \e ulFlags parameter determines if the
3320:C:/StellarisWare/driverlib\usb.c **** //! device address for the IN or the OUT endpoint is configured by this call
3321:C:/StellarisWare/driverlib\usb.c **** //! and sets the speed of the downstream device.  Valid values are one of \b
3322:C:/StellarisWare/driverlib\usb.c **** //! USB_EP_HOST_OUT or \b USB_EP_HOST_IN optionally ORed with \b
3323:C:/StellarisWare/driverlib\usb.c **** //! USB_EP_SPEED_LOW.
3324:C:/StellarisWare/driverlib\usb.c **** //!
3325:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3326:C:/StellarisWare/driverlib\usb.c **** //!
3327:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3328:C:/StellarisWare/driverlib\usb.c **** //
3329:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3330:C:/StellarisWare/driverlib\usb.c **** void
3331:C:/StellarisWare/driverlib\usb.c **** USBHostHubAddrSet(unsigned long ulBase, unsigned long ulEndpoint,
3332:C:/StellarisWare/driverlib\usb.c ****                   unsigned long ulAddr, unsigned long ulFlags)
3333:C:/StellarisWare/driverlib\usb.c **** {
 3955              		.loc 1 3333 0
 3956              		.cfi_startproc
 3957              		@ args = 0, pretend = 0, frame = 16
 3958              		@ frame_needed = 1, uses_anonymous_args = 0
 3959              		@ link register save eliminated.
 3960 0000 80B4     		push	{r7}
 3961              	.LCFI141:
 3962              		.cfi_def_cfa_offset 4
 3963              		.cfi_offset 7, -4
 3964 0002 85B0     		sub	sp, sp, #20
 3965              	.LCFI142:
 3966              		.cfi_def_cfa_offset 24
 3967 0004 00AF     		add	r7, sp, #0
 3968              	.LCFI143:
 3969              		.cfi_def_cfa_register 7
 3970 0006 F860     		str	r0, [r7, #12]
 3971 0008 B960     		str	r1, [r7, #8]
 3972 000a 7A60     		str	r2, [r7, #4]
 3973 000c 3B60     		str	r3, [r7, #0]
3334:C:/StellarisWare/driverlib\usb.c ****     //
3335:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3336:C:/StellarisWare/driverlib\usb.c ****     //
3337:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3338:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3339:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3340:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3341:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3342:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3343:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3344:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3345:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3346:C:/StellarisWare/driverlib\usb.c **** 
3347:C:/StellarisWare/driverlib\usb.c ****     //
3348:C:/StellarisWare/driverlib\usb.c ****     // See if the hub transmit or receive address is being set.
3349:C:/StellarisWare/driverlib\usb.c ****     //
3350:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_HOST_OUT)
 3974              		.loc 1 3350 0
 3975 000e 3B68     		ldr	r3, [r7, #0]
 3976 0010 03F40053 		and	r3, r3, #8192
 3977 0014 002B     		cmp	r3, #0
 3978 0016 0AD0     		beq	.L184
3351:C:/StellarisWare/driverlib\usb.c ****     {
3352:C:/StellarisWare/driverlib\usb.c ****         //
3353:C:/StellarisWare/driverlib\usb.c ****         // Set the hub transmit address and port number for this endpoint.
3354:C:/StellarisWare/driverlib\usb.c ****         //
3355:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_TXHUBADDR0 + (ulEndpoint >> 1)) = ulAddr;
 3979              		.loc 1 3355 0
 3980 0018 BB68     		ldr	r3, [r7, #8]
 3981 001a 4FEA5302 		lsr	r2, r3, #1
 3982 001e FB68     		ldr	r3, [r7, #12]
 3983 0020 D318     		adds	r3, r2, r3
 3984 0022 03F18203 		add	r3, r3, #130
 3985 0026 7A68     		ldr	r2, [r7, #4]
 3986 0028 92B2     		uxth	r2, r2
 3987 002a 1A80     		strh	r2, [r3, #0]	@ movhi
 3988 002c 09E0     		b	.L185
 3989              	.L184:
3356:C:/StellarisWare/driverlib\usb.c ****     }
3357:C:/StellarisWare/driverlib\usb.c ****     else
3358:C:/StellarisWare/driverlib\usb.c ****     {
3359:C:/StellarisWare/driverlib\usb.c ****         //
3360:C:/StellarisWare/driverlib\usb.c ****         // Set the hub receive address and port number for this endpoint.
3361:C:/StellarisWare/driverlib\usb.c ****         //
3362:C:/StellarisWare/driverlib\usb.c ****         HWREGH(ulBase + USB_O_TXHUBADDR0 + 4 + (ulEndpoint >> 1)) = ulAddr;
 3990              		.loc 1 3362 0
 3991 002e BB68     		ldr	r3, [r7, #8]
 3992 0030 4FEA5302 		lsr	r2, r3, #1
 3993 0034 FB68     		ldr	r3, [r7, #12]
 3994 0036 D318     		adds	r3, r2, r3
 3995 0038 03F18603 		add	r3, r3, #134
 3996 003c 7A68     		ldr	r2, [r7, #4]
 3997 003e 92B2     		uxth	r2, r2
 3998 0040 1A80     		strh	r2, [r3, #0]	@ movhi
 3999              	.L185:
3363:C:/StellarisWare/driverlib\usb.c ****     }
3364:C:/StellarisWare/driverlib\usb.c **** 
3365:C:/StellarisWare/driverlib\usb.c ****     //
3366:C:/StellarisWare/driverlib\usb.c ****     // Set the speed of communication for endpoint 0.  This configuration is
3367:C:/StellarisWare/driverlib\usb.c ****     // done here because it changes on a transaction-by-transaction basis for
3368:C:/StellarisWare/driverlib\usb.c ****     // EP0.  For other endpoints, this is set in USBHostEndpointConfig().
3369:C:/StellarisWare/driverlib\usb.c ****     //
3370:C:/StellarisWare/driverlib\usb.c ****     if(ulEndpoint == USB_EP_0)
 4000              		.loc 1 3370 0
 4001 0042 BB68     		ldr	r3, [r7, #8]
 4002 0044 002B     		cmp	r3, #0
 4003 0046 11D1     		bne	.L183
3371:C:/StellarisWare/driverlib\usb.c ****     {
3372:C:/StellarisWare/driverlib\usb.c ****         if(ulFlags & USB_EP_SPEED_FULL)
 4004              		.loc 1 3372 0
 4005 0048 3B68     		ldr	r3, [r7, #0]
 4006 004a 03F48053 		and	r3, r3, #4096
 4007 004e 002B     		cmp	r3, #0
 4008 0050 06D0     		beq	.L187
3373:C:/StellarisWare/driverlib\usb.c ****         {
3374:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_TYPE0) = USB_TYPE0_SPEED_FULL;
 4009              		.loc 1 3374 0
 4010 0052 FB68     		ldr	r3, [r7, #12]
 4011 0054 03F58573 		add	r3, r3, #266
 4012 0058 4FF08002 		mov	r2, #128
 4013 005c 1A70     		strb	r2, [r3, #0]
 4014 005e 05E0     		b	.L183
 4015              	.L187:
3375:C:/StellarisWare/driverlib\usb.c ****         }
3376:C:/StellarisWare/driverlib\usb.c ****         else
3377:C:/StellarisWare/driverlib\usb.c ****         {
3378:C:/StellarisWare/driverlib\usb.c ****             HWREGB(ulBase + USB_O_TYPE0) = USB_TYPE0_SPEED_LOW;
 4016              		.loc 1 3378 0
 4017 0060 FB68     		ldr	r3, [r7, #12]
 4018 0062 03F58573 		add	r3, r3, #266
 4019 0066 4FF0C002 		mov	r2, #192
 4020 006a 1A70     		strb	r2, [r3, #0]
 4021              	.L183:
3379:C:/StellarisWare/driverlib\usb.c ****         }
3380:C:/StellarisWare/driverlib\usb.c ****     }
3381:C:/StellarisWare/driverlib\usb.c **** }
 4022              		.loc 1 3381 0
 4023 006c 07F11407 		add	r7, r7, #20
 4024 0070 BD46     		mov	sp, r7
 4025 0072 80BC     		pop	{r7}
 4026 0074 7047     		bx	lr
 4027              		.cfi_endproc
 4028              	.LFE47:
 4030 0076 00BF     		.section	.text.USBHostHubAddrGet,"ax",%progbits
 4031              		.align	2
 4032              		.global	USBHostHubAddrGet
 4033              		.thumb
 4034              		.thumb_func
 4036              	USBHostHubAddrGet:
 4037              	.LFB48:
3382:C:/StellarisWare/driverlib\usb.c **** 
3383:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3384:C:/StellarisWare/driverlib\usb.c **** //
3385:C:/StellarisWare/driverlib\usb.c **** //! Gets the current device hub address for this endpoint.
3386:C:/StellarisWare/driverlib\usb.c **** //!
3387:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3388:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint is the endpoint to access.
3389:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags determines if this is an IN or an OUT endpoint.
3390:C:/StellarisWare/driverlib\usb.c **** //!
3391:C:/StellarisWare/driverlib\usb.c **** //! This function returns the current hub address that an endpoint is using
3392:C:/StellarisWare/driverlib\usb.c **** //! to communicate with a device.  The \e ulFlags parameter determines if the
3393:C:/StellarisWare/driverlib\usb.c **** //! device address for the IN or OUT endpoint is returned.
3394:C:/StellarisWare/driverlib\usb.c **** //!
3395:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3396:C:/StellarisWare/driverlib\usb.c **** //!
3397:C:/StellarisWare/driverlib\usb.c **** //! \return This function returns the current hub address being used by an
3398:C:/StellarisWare/driverlib\usb.c **** //! endpoint.
3399:C:/StellarisWare/driverlib\usb.c **** //
3400:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3401:C:/StellarisWare/driverlib\usb.c **** unsigned long
3402:C:/StellarisWare/driverlib\usb.c **** USBHostHubAddrGet(unsigned long ulBase, unsigned long ulEndpoint,
3403:C:/StellarisWare/driverlib\usb.c ****                   unsigned long ulFlags)
3404:C:/StellarisWare/driverlib\usb.c **** {
 4038              		.loc 1 3404 0
 4039              		.cfi_startproc
 4040              		@ args = 0, pretend = 0, frame = 16
 4041              		@ frame_needed = 1, uses_anonymous_args = 0
 4042              		@ link register save eliminated.
 4043 0000 80B4     		push	{r7}
 4044              	.LCFI144:
 4045              		.cfi_def_cfa_offset 4
 4046              		.cfi_offset 7, -4
 4047 0002 85B0     		sub	sp, sp, #20
 4048              	.LCFI145:
 4049              		.cfi_def_cfa_offset 24
 4050 0004 00AF     		add	r7, sp, #0
 4051              	.LCFI146:
 4052              		.cfi_def_cfa_register 7
 4053 0006 F860     		str	r0, [r7, #12]
 4054 0008 B960     		str	r1, [r7, #8]
 4055 000a 7A60     		str	r2, [r7, #4]
3405:C:/StellarisWare/driverlib\usb.c ****     //
3406:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3407:C:/StellarisWare/driverlib\usb.c ****     //
3408:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3409:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
3410:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_2) || (ulEndpoint == USB_EP_3) ||
3411:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_4) || (ulEndpoint == USB_EP_5) ||
3412:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
3413:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
3414:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
3415:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
3416:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
3417:C:/StellarisWare/driverlib\usb.c **** 
3418:C:/StellarisWare/driverlib\usb.c ****     //
3419:C:/StellarisWare/driverlib\usb.c ****     // See if the hub transmit or receive address should be returned.
3420:C:/StellarisWare/driverlib\usb.c ****     //
3421:C:/StellarisWare/driverlib\usb.c ****     if(ulFlags & USB_EP_HOST_OUT)
 4056              		.loc 1 3421 0
 4057 000c 7B68     		ldr	r3, [r7, #4]
 4058 000e 03F40053 		and	r3, r3, #8192
 4059 0012 002B     		cmp	r3, #0
 4060 0014 09D0     		beq	.L189
3422:C:/StellarisWare/driverlib\usb.c ****     {
3423:C:/StellarisWare/driverlib\usb.c ****         //
3424:C:/StellarisWare/driverlib\usb.c ****         // Return the hub transmit address for this endpoint.
3425:C:/StellarisWare/driverlib\usb.c ****         //
3426:C:/StellarisWare/driverlib\usb.c ****         return(HWREGB(ulBase + USB_O_TXHUBADDR0 + (ulEndpoint >> 1)));
 4061              		.loc 1 3426 0
 4062 0016 BB68     		ldr	r3, [r7, #8]
 4063 0018 4FEA5302 		lsr	r2, r3, #1
 4064 001c FB68     		ldr	r3, [r7, #12]
 4065 001e D318     		adds	r3, r2, r3
 4066 0020 03F18203 		add	r3, r3, #130
 4067 0024 1B78     		ldrb	r3, [r3, #0]
 4068 0026 DBB2     		uxtb	r3, r3
 4069 0028 08E0     		b	.L190
 4070              	.L189:
3427:C:/StellarisWare/driverlib\usb.c ****     }
3428:C:/StellarisWare/driverlib\usb.c ****     else
3429:C:/StellarisWare/driverlib\usb.c ****     {
3430:C:/StellarisWare/driverlib\usb.c ****         //
3431:C:/StellarisWare/driverlib\usb.c ****         // Return the hub receive address for this endpoint.
3432:C:/StellarisWare/driverlib\usb.c ****         //
3433:C:/StellarisWare/driverlib\usb.c ****         return(HWREGB(ulBase + USB_O_TXHUBADDR0 + 4 + (ulEndpoint >> 1)));
 4071              		.loc 1 3433 0
 4072 002a BB68     		ldr	r3, [r7, #8]
 4073 002c 4FEA5302 		lsr	r2, r3, #1
 4074 0030 FB68     		ldr	r3, [r7, #12]
 4075 0032 D318     		adds	r3, r2, r3
 4076 0034 03F18603 		add	r3, r3, #134
 4077 0038 1B78     		ldrb	r3, [r3, #0]
 4078 003a DBB2     		uxtb	r3, r3
 4079              	.L190:
3434:C:/StellarisWare/driverlib\usb.c ****     }
3435:C:/StellarisWare/driverlib\usb.c **** }
 4080              		.loc 1 3435 0
 4081 003c 1846     		mov	r0, r3
 4082 003e 07F11407 		add	r7, r7, #20
 4083 0042 BD46     		mov	sp, r7
 4084 0044 80BC     		pop	{r7}
 4085 0046 7047     		bx	lr
 4086              		.cfi_endproc
 4087              	.LFE48:
 4089              		.section	.text.USBHostPwrConfig,"ax",%progbits
 4090              		.align	2
 4091              		.global	USBHostPwrConfig
 4092              		.thumb
 4093              		.thumb_func
 4095              	USBHostPwrConfig:
 4096              	.LFB49:
3436:C:/StellarisWare/driverlib\usb.c **** 
3437:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3438:C:/StellarisWare/driverlib\usb.c **** //
3439:C:/StellarisWare/driverlib\usb.c **** //! Sets the configuration for USB power fault.
3440:C:/StellarisWare/driverlib\usb.c **** //!
3441:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3442:C:/StellarisWare/driverlib\usb.c **** //! \param ulFlags specifies the configuration of the power fault.
3443:C:/StellarisWare/driverlib\usb.c **** //!
3444:C:/StellarisWare/driverlib\usb.c **** //! This function controls how the USB controller uses its external power
3445:C:/StellarisWare/driverlib\usb.c **** //! control pins (USBnPFLT and USBnEPEN).  The flags specify the power
3446:C:/StellarisWare/driverlib\usb.c **** //! fault level sensitivity, the power fault action, and the power enable level
3447:C:/StellarisWare/driverlib\usb.c **** //! and source.
3448:C:/StellarisWare/driverlib\usb.c **** //!
3449:C:/StellarisWare/driverlib\usb.c **** //! One of the following can be selected as the power fault level sensitivity:
3450:C:/StellarisWare/driverlib\usb.c **** //!
3451:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_LOW - An external power fault is indicated by the pin
3452:C:/StellarisWare/driverlib\usb.c **** //!                            being driven low.
3453:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_HIGH - An external power fault is indicated by the pin
3454:C:/StellarisWare/driverlib\usb.c **** //!                             being driven high.
3455:C:/StellarisWare/driverlib\usb.c **** //!
3456:C:/StellarisWare/driverlib\usb.c **** //! One of the following can be selected as the power fault action:
3457:C:/StellarisWare/driverlib\usb.c **** //!
3458:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_EP_NONE - No automatic action when power fault
3459:C:/StellarisWare/driverlib\usb.c **** //!   detected.
3460:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_EP_TRI - Automatically tri-state the USBnEPEN pin on a
3461:C:/StellarisWare/driverlib\usb.c **** //!                               power fault.
3462:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_EP_LOW - Automatically drive USBnEPEN pin low on a
3463:C:/StellarisWare/driverlib\usb.c **** //!                               power fault.
3464:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWRFLT_EP_HIGH - Automatically drive USBnEPEN pin high on a
3465:C:/StellarisWare/driverlib\usb.c **** //!                                power fault.
3466:C:/StellarisWare/driverlib\usb.c **** //!
3467:C:/StellarisWare/driverlib\usb.c **** //! One of the following can be selected as the power enable level and source:
3468:C:/StellarisWare/driverlib\usb.c **** //!
3469:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_MAN_LOW - USBnEPEN is driven low by the USB controller
3470:C:/StellarisWare/driverlib\usb.c **** //!                               when USBHostPwrEnable() is called.
3471:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_MAN_HIGH - USBnEPEN is driven high by the USB
3472:C:/StellarisWare/driverlib\usb.c **** //!                                controller when USBHostPwrEnable() is
3473:C:/StellarisWare/driverlib\usb.c **** //!                                called.
3474:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_AUTOLOW - USBnEPEN is driven low by the USB controller
3475:C:/StellarisWare/driverlib\usb.c **** //!                               automatically if USBOTGSessionRequest() has
3476:C:/StellarisWare/driverlib\usb.c **** //!                               enabled a session.
3477:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_AUTOHIGH - USBnEPEN is driven high by the USB
3478:C:/StellarisWare/driverlib\usb.c **** //!                                controller automatically if
3479:C:/StellarisWare/driverlib\usb.c **** //!                                USBOTGSessionRequest() has enabled a
3480:C:/StellarisWare/driverlib\usb.c **** //!                                session.
3481:C:/StellarisWare/driverlib\usb.c **** //!
3482:C:/StellarisWare/driverlib\usb.c **** //! On devices that support the VBUS glitch filter, the
3483:C:/StellarisWare/driverlib\usb.c **** //! \b USB_HOST_PWREN_FILTER can be added to ignore small, short drops in VBUS
3484:C:/StellarisWare/driverlib\usb.c **** //! level caused by high power consumption.  This feature is mainly used to
3485:C:/StellarisWare/driverlib\usb.c **** //! avoid causing VBUS errors caused by devices with high in-rush current.
3486:C:/StellarisWare/driverlib\usb.c **** //!
3487:C:/StellarisWare/driverlib\usb.c **** //! \note The following values have been deprecated and should no longer be
3488:C:/StellarisWare/driverlib\usb.c **** //!       used.
3489:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_LOW - Automatically drive USBnEPEN low when power is
3490:C:/StellarisWare/driverlib\usb.c **** //!                           enabled.
3491:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_HIGH - Automatically drive USBnEPEN high when power is
3492:C:/StellarisWare/driverlib\usb.c **** //!                            enabled.
3493:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_VBLOW - Automatically drive USBnEPEN low when power is
3494:C:/StellarisWare/driverlib\usb.c **** //!                             enabled.
3495:C:/StellarisWare/driverlib\usb.c **** //! - \b USB_HOST_PWREN_VBHIGH - Automatically drive USBnEPEN high when power
3496:C:/StellarisWare/driverlib\usb.c **** //!                              is enabled.
3497:C:/StellarisWare/driverlib\usb.c **** //!
3498:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called on microcontrollers that support
3499:C:/StellarisWare/driverlib\usb.c **** //! host mode or OTG operation.
3500:C:/StellarisWare/driverlib\usb.c **** //!
3501:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3502:C:/StellarisWare/driverlib\usb.c **** //
3503:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3504:C:/StellarisWare/driverlib\usb.c **** void
3505:C:/StellarisWare/driverlib\usb.c **** USBHostPwrConfig(unsigned long ulBase, unsigned long ulFlags)
3506:C:/StellarisWare/driverlib\usb.c **** {
 4097              		.loc 1 3506 0
 4098              		.cfi_startproc
 4099              		@ args = 0, pretend = 0, frame = 8
 4100              		@ frame_needed = 1, uses_anonymous_args = 0
 4101              		@ link register save eliminated.
 4102 0000 80B4     		push	{r7}
 4103              	.LCFI147:
 4104              		.cfi_def_cfa_offset 4
 4105              		.cfi_offset 7, -4
 4106 0002 83B0     		sub	sp, sp, #12
 4107              	.LCFI148:
 4108              		.cfi_def_cfa_offset 16
 4109 0004 00AF     		add	r7, sp, #0
 4110              	.LCFI149:
 4111              		.cfi_def_cfa_register 7
 4112 0006 7860     		str	r0, [r7, #4]
 4113 0008 3960     		str	r1, [r7, #0]
3507:C:/StellarisWare/driverlib\usb.c ****     //
3508:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3509:C:/StellarisWare/driverlib\usb.c ****     //
3510:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3511:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulFlags & ~(USB_HOST_PWREN_FILTER | USB_EPC_PFLTACT_M |
3512:C:/StellarisWare/driverlib\usb.c ****                         USB_EPC_PFLTAEN | USB_EPC_PFLTSEN_HIGH |
3513:C:/StellarisWare/driverlib\usb.c ****                         USB_EPC_EPEN_M)) == 0);
3514:C:/StellarisWare/driverlib\usb.c **** 
3515:C:/StellarisWare/driverlib\usb.c ****     //
3516:C:/StellarisWare/driverlib\usb.c ****     // If requested, enable VBUS droop detection on parts that support this
3517:C:/StellarisWare/driverlib\usb.c ****     // feature.
3518:C:/StellarisWare/driverlib\usb.c ****     //
3519:C:/StellarisWare/driverlib\usb.c ****     HWREG(ulBase + USB_O_VDC) = ulFlags >> 16;
 4114              		.loc 1 3519 0
 4115 000a 7B68     		ldr	r3, [r7, #4]
 4116 000c 03F58663 		add	r3, r3, #1072
 4117 0010 3A68     		ldr	r2, [r7, #0]
 4118 0012 4FEA1242 		lsr	r2, r2, #16
 4119 0016 1A60     		str	r2, [r3, #0]
3520:C:/StellarisWare/driverlib\usb.c **** 
3521:C:/StellarisWare/driverlib\usb.c ****     //
3522:C:/StellarisWare/driverlib\usb.c ****     // Set the power fault configuration as specified.  This configuration
3523:C:/StellarisWare/driverlib\usb.c ****     // does not change whether fault detection is enabled or not.
3524:C:/StellarisWare/driverlib\usb.c ****     //
3525:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) =
 4120              		.loc 1 3525 0
 4121 0018 7B68     		ldr	r3, [r7, #4]
 4122 001a 03F58063 		add	r3, r3, #1024
 4123 001e 1A46     		mov	r2, r3
3526:C:/StellarisWare/driverlib\usb.c ****         (ulFlags | (HWREGH(ulBase + USB_O_EPC) &
 4124              		.loc 1 3526 0
 4125 0020 7B68     		ldr	r3, [r7, #4]
 4126 0022 03F58063 		add	r3, r3, #1024
 4127 0026 1B88     		ldrh	r3, [r3, #0]	@ movhi
 4128 0028 9BB2     		uxth	r3, r3
3525:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) =
 4129              		.loc 1 3525 0
 4130 002a 23F45873 		bic	r3, r3, #864
 4131 002e 23F00303 		bic	r3, r3, #3
 4132 0032 99B2     		uxth	r1, r3
 4133 0034 3B68     		ldr	r3, [r7, #0]
 4134 0036 9BB2     		uxth	r3, r3
 4135 0038 0B43     		orrs	r3, r3, r1
 4136 003a 9BB2     		uxth	r3, r3
 4137 003c 1380     		strh	r3, [r2, #0]	@ movhi
3527:C:/StellarisWare/driverlib\usb.c ****                     ~(USB_EPC_PFLTACT_M | USB_EPC_PFLTAEN |
3528:C:/StellarisWare/driverlib\usb.c ****                       USB_EPC_PFLTSEN_HIGH | USB_EPC_EPEN_M)));
3529:C:/StellarisWare/driverlib\usb.c **** }
 4138              		.loc 1 3529 0
 4139 003e 07F10C07 		add	r7, r7, #12
 4140 0042 BD46     		mov	sp, r7
 4141 0044 80BC     		pop	{r7}
 4142 0046 7047     		bx	lr
 4143              		.cfi_endproc
 4144              	.LFE49:
 4146              		.section	.text.USBHostPwrFaultEnable,"ax",%progbits
 4147              		.align	2
 4148              		.global	USBHostPwrFaultEnable
 4149              		.thumb
 4150              		.thumb_func
 4152              	USBHostPwrFaultEnable:
 4153              	.LFB50:
3530:C:/StellarisWare/driverlib\usb.c **** 
3531:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3532:C:/StellarisWare/driverlib\usb.c **** //
3533:C:/StellarisWare/driverlib\usb.c **** //! Enables power fault detection.
3534:C:/StellarisWare/driverlib\usb.c **** //!
3535:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3536:C:/StellarisWare/driverlib\usb.c **** //!
3537:C:/StellarisWare/driverlib\usb.c **** //! This function enables power fault detection in the USB controller.  If the
3538:C:/StellarisWare/driverlib\usb.c **** //! USBnPFLT pin is not in use, this function should not be used.
3539:C:/StellarisWare/driverlib\usb.c **** //!
3540:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3541:C:/StellarisWare/driverlib\usb.c **** //!
3542:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3543:C:/StellarisWare/driverlib\usb.c **** //
3544:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3545:C:/StellarisWare/driverlib\usb.c **** void
3546:C:/StellarisWare/driverlib\usb.c **** USBHostPwrFaultEnable(unsigned long ulBase)
3547:C:/StellarisWare/driverlib\usb.c **** {
 4154              		.loc 1 3547 0
 4155              		.cfi_startproc
 4156              		@ args = 0, pretend = 0, frame = 8
 4157              		@ frame_needed = 1, uses_anonymous_args = 0
 4158              		@ link register save eliminated.
 4159 0000 80B4     		push	{r7}
 4160              	.LCFI150:
 4161              		.cfi_def_cfa_offset 4
 4162              		.cfi_offset 7, -4
 4163 0002 83B0     		sub	sp, sp, #12
 4164              	.LCFI151:
 4165              		.cfi_def_cfa_offset 16
 4166 0004 00AF     		add	r7, sp, #0
 4167              	.LCFI152:
 4168              		.cfi_def_cfa_register 7
 4169 0006 7860     		str	r0, [r7, #4]
3548:C:/StellarisWare/driverlib\usb.c ****     //
3549:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3550:C:/StellarisWare/driverlib\usb.c ****     //
3551:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3552:C:/StellarisWare/driverlib\usb.c **** 
3553:C:/StellarisWare/driverlib\usb.c ****     //
3554:C:/StellarisWare/driverlib\usb.c ****     // Enable power fault input.
3555:C:/StellarisWare/driverlib\usb.c ****     //
3556:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) |= USB_EPC_PFLTEN;
 4170              		.loc 1 3556 0
 4171 0008 7B68     		ldr	r3, [r7, #4]
 4172 000a 03F58063 		add	r3, r3, #1024
 4173 000e 7A68     		ldr	r2, [r7, #4]
 4174 0010 02F58062 		add	r2, r2, #1024
 4175 0014 1288     		ldrh	r2, [r2, #0]	@ movhi
 4176 0016 92B2     		uxth	r2, r2
 4177 0018 42F01002 		orr	r2, r2, #16
 4178 001c 92B2     		uxth	r2, r2
 4179 001e 1A80     		strh	r2, [r3, #0]	@ movhi
3557:C:/StellarisWare/driverlib\usb.c **** }
 4180              		.loc 1 3557 0
 4181 0020 07F10C07 		add	r7, r7, #12
 4182 0024 BD46     		mov	sp, r7
 4183 0026 80BC     		pop	{r7}
 4184 0028 7047     		bx	lr
 4185              		.cfi_endproc
 4186              	.LFE50:
 4188 002a 00BF     		.section	.text.USBHostPwrFaultDisable,"ax",%progbits
 4189              		.align	2
 4190              		.global	USBHostPwrFaultDisable
 4191              		.thumb
 4192              		.thumb_func
 4194              	USBHostPwrFaultDisable:
 4195              	.LFB51:
3558:C:/StellarisWare/driverlib\usb.c **** 
3559:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3560:C:/StellarisWare/driverlib\usb.c **** //
3561:C:/StellarisWare/driverlib\usb.c **** //! Disables power fault detection.
3562:C:/StellarisWare/driverlib\usb.c **** //!
3563:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3564:C:/StellarisWare/driverlib\usb.c **** //!
3565:C:/StellarisWare/driverlib\usb.c **** //! This function disables power fault detection in the USB controller.
3566:C:/StellarisWare/driverlib\usb.c **** //!
3567:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3568:C:/StellarisWare/driverlib\usb.c **** //!
3569:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3570:C:/StellarisWare/driverlib\usb.c **** //
3571:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3572:C:/StellarisWare/driverlib\usb.c **** void
3573:C:/StellarisWare/driverlib\usb.c **** USBHostPwrFaultDisable(unsigned long ulBase)
3574:C:/StellarisWare/driverlib\usb.c **** {
 4196              		.loc 1 3574 0
 4197              		.cfi_startproc
 4198              		@ args = 0, pretend = 0, frame = 8
 4199              		@ frame_needed = 1, uses_anonymous_args = 0
 4200              		@ link register save eliminated.
 4201 0000 80B4     		push	{r7}
 4202              	.LCFI153:
 4203              		.cfi_def_cfa_offset 4
 4204              		.cfi_offset 7, -4
 4205 0002 83B0     		sub	sp, sp, #12
 4206              	.LCFI154:
 4207              		.cfi_def_cfa_offset 16
 4208 0004 00AF     		add	r7, sp, #0
 4209              	.LCFI155:
 4210              		.cfi_def_cfa_register 7
 4211 0006 7860     		str	r0, [r7, #4]
3575:C:/StellarisWare/driverlib\usb.c ****     //
3576:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3577:C:/StellarisWare/driverlib\usb.c ****     //
3578:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3579:C:/StellarisWare/driverlib\usb.c **** 
3580:C:/StellarisWare/driverlib\usb.c ****     //
3581:C:/StellarisWare/driverlib\usb.c ****     // Enable power fault input.
3582:C:/StellarisWare/driverlib\usb.c ****     //
3583:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) &= ~USB_EPC_PFLTEN;
 4212              		.loc 1 3583 0
 4213 0008 7B68     		ldr	r3, [r7, #4]
 4214 000a 03F58063 		add	r3, r3, #1024
 4215 000e 7A68     		ldr	r2, [r7, #4]
 4216 0010 02F58062 		add	r2, r2, #1024
 4217 0014 1288     		ldrh	r2, [r2, #0]	@ movhi
 4218 0016 92B2     		uxth	r2, r2
 4219 0018 22F01002 		bic	r2, r2, #16
 4220 001c 92B2     		uxth	r2, r2
 4221 001e 1A80     		strh	r2, [r3, #0]	@ movhi
3584:C:/StellarisWare/driverlib\usb.c **** }
 4222              		.loc 1 3584 0
 4223 0020 07F10C07 		add	r7, r7, #12
 4224 0024 BD46     		mov	sp, r7
 4225 0026 80BC     		pop	{r7}
 4226 0028 7047     		bx	lr
 4227              		.cfi_endproc
 4228              	.LFE51:
 4230 002a 00BF     		.section	.text.USBHostPwrEnable,"ax",%progbits
 4231              		.align	2
 4232              		.global	USBHostPwrEnable
 4233              		.thumb
 4234              		.thumb_func
 4236              	USBHostPwrEnable:
 4237              	.LFB52:
3585:C:/StellarisWare/driverlib\usb.c **** 
3586:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3587:C:/StellarisWare/driverlib\usb.c **** //
3588:C:/StellarisWare/driverlib\usb.c **** //! Enables the external power pin.
3589:C:/StellarisWare/driverlib\usb.c **** //!
3590:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3591:C:/StellarisWare/driverlib\usb.c **** //!
3592:C:/StellarisWare/driverlib\usb.c **** //! This function enables the USBnEPEN signal, which enables an external power
3593:C:/StellarisWare/driverlib\usb.c **** //! supply in host mode operation.
3594:C:/StellarisWare/driverlib\usb.c **** //!
3595:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3596:C:/StellarisWare/driverlib\usb.c **** //!
3597:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3598:C:/StellarisWare/driverlib\usb.c **** //
3599:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3600:C:/StellarisWare/driverlib\usb.c **** void
3601:C:/StellarisWare/driverlib\usb.c **** USBHostPwrEnable(unsigned long ulBase)
3602:C:/StellarisWare/driverlib\usb.c **** {
 4238              		.loc 1 3602 0
 4239              		.cfi_startproc
 4240              		@ args = 0, pretend = 0, frame = 8
 4241              		@ frame_needed = 1, uses_anonymous_args = 0
 4242              		@ link register save eliminated.
 4243 0000 80B4     		push	{r7}
 4244              	.LCFI156:
 4245              		.cfi_def_cfa_offset 4
 4246              		.cfi_offset 7, -4
 4247 0002 83B0     		sub	sp, sp, #12
 4248              	.LCFI157:
 4249              		.cfi_def_cfa_offset 16
 4250 0004 00AF     		add	r7, sp, #0
 4251              	.LCFI158:
 4252              		.cfi_def_cfa_register 7
 4253 0006 7860     		str	r0, [r7, #4]
3603:C:/StellarisWare/driverlib\usb.c ****     //
3604:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3605:C:/StellarisWare/driverlib\usb.c ****     //
3606:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3607:C:/StellarisWare/driverlib\usb.c **** 
3608:C:/StellarisWare/driverlib\usb.c ****     //
3609:C:/StellarisWare/driverlib\usb.c ****     // Enable the external power supply enable signal.
3610:C:/StellarisWare/driverlib\usb.c ****     //
3611:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) |= USB_EPC_EPENDE;
 4254              		.loc 1 3611 0
 4255 0008 7B68     		ldr	r3, [r7, #4]
 4256 000a 03F58063 		add	r3, r3, #1024
 4257 000e 7A68     		ldr	r2, [r7, #4]
 4258 0010 02F58062 		add	r2, r2, #1024
 4259 0014 1288     		ldrh	r2, [r2, #0]	@ movhi
 4260 0016 92B2     		uxth	r2, r2
 4261 0018 42F00402 		orr	r2, r2, #4
 4262 001c 92B2     		uxth	r2, r2
 4263 001e 1A80     		strh	r2, [r3, #0]	@ movhi
3612:C:/StellarisWare/driverlib\usb.c **** }
 4264              		.loc 1 3612 0
 4265 0020 07F10C07 		add	r7, r7, #12
 4266 0024 BD46     		mov	sp, r7
 4267 0026 80BC     		pop	{r7}
 4268 0028 7047     		bx	lr
 4269              		.cfi_endproc
 4270              	.LFE52:
 4272 002a 00BF     		.section	.text.USBHostPwrDisable,"ax",%progbits
 4273              		.align	2
 4274              		.global	USBHostPwrDisable
 4275              		.thumb
 4276              		.thumb_func
 4278              	USBHostPwrDisable:
 4279              	.LFB53:
3613:C:/StellarisWare/driverlib\usb.c **** 
3614:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3615:C:/StellarisWare/driverlib\usb.c **** //
3616:C:/StellarisWare/driverlib\usb.c **** //! Disables the external power pin.
3617:C:/StellarisWare/driverlib\usb.c **** //!
3618:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3619:C:/StellarisWare/driverlib\usb.c **** //!
3620:C:/StellarisWare/driverlib\usb.c **** //! This function disables the USBnEPEN signal, which disables an external
3621:C:/StellarisWare/driverlib\usb.c **** //! power supply in host mode operation.
3622:C:/StellarisWare/driverlib\usb.c **** //!
3623:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called in host mode.
3624:C:/StellarisWare/driverlib\usb.c **** //!
3625:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3626:C:/StellarisWare/driverlib\usb.c **** //
3627:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3628:C:/StellarisWare/driverlib\usb.c **** void
3629:C:/StellarisWare/driverlib\usb.c **** USBHostPwrDisable(unsigned long ulBase)
3630:C:/StellarisWare/driverlib\usb.c **** {
 4280              		.loc 1 3630 0
 4281              		.cfi_startproc
 4282              		@ args = 0, pretend = 0, frame = 8
 4283              		@ frame_needed = 1, uses_anonymous_args = 0
 4284              		@ link register save eliminated.
 4285 0000 80B4     		push	{r7}
 4286              	.LCFI159:
 4287              		.cfi_def_cfa_offset 4
 4288              		.cfi_offset 7, -4
 4289 0002 83B0     		sub	sp, sp, #12
 4290              	.LCFI160:
 4291              		.cfi_def_cfa_offset 16
 4292 0004 00AF     		add	r7, sp, #0
 4293              	.LCFI161:
 4294              		.cfi_def_cfa_register 7
 4295 0006 7860     		str	r0, [r7, #4]
3631:C:/StellarisWare/driverlib\usb.c ****     //
3632:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3633:C:/StellarisWare/driverlib\usb.c ****     //
3634:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3635:C:/StellarisWare/driverlib\usb.c **** 
3636:C:/StellarisWare/driverlib\usb.c ****     //
3637:C:/StellarisWare/driverlib\usb.c ****     // Disable the external power supply enable signal.
3638:C:/StellarisWare/driverlib\usb.c ****     //
3639:C:/StellarisWare/driverlib\usb.c ****     HWREGH(ulBase + USB_O_EPC) &= ~USB_EPC_EPENDE;
 4296              		.loc 1 3639 0
 4297 0008 7B68     		ldr	r3, [r7, #4]
 4298 000a 03F58063 		add	r3, r3, #1024
 4299 000e 7A68     		ldr	r2, [r7, #4]
 4300 0010 02F58062 		add	r2, r2, #1024
 4301 0014 1288     		ldrh	r2, [r2, #0]	@ movhi
 4302 0016 92B2     		uxth	r2, r2
 4303 0018 22F00402 		bic	r2, r2, #4
 4304 001c 92B2     		uxth	r2, r2
 4305 001e 1A80     		strh	r2, [r3, #0]	@ movhi
3640:C:/StellarisWare/driverlib\usb.c **** }
 4306              		.loc 1 3640 0
 4307 0020 07F10C07 		add	r7, r7, #12
 4308 0024 BD46     		mov	sp, r7
 4309 0026 80BC     		pop	{r7}
 4310 0028 7047     		bx	lr
 4311              		.cfi_endproc
 4312              	.LFE53:
 4314 002a 00BF     		.section	.text.USBFrameNumberGet,"ax",%progbits
 4315              		.align	2
 4316              		.global	USBFrameNumberGet
 4317              		.thumb
 4318              		.thumb_func
 4320              	USBFrameNumberGet:
 4321              	.LFB54:
3641:C:/StellarisWare/driverlib\usb.c **** 
3642:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3643:C:/StellarisWare/driverlib\usb.c **** //
3644:C:/StellarisWare/driverlib\usb.c **** //! Get the current frame number.
3645:C:/StellarisWare/driverlib\usb.c **** //!
3646:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3647:C:/StellarisWare/driverlib\usb.c **** //!
3648:C:/StellarisWare/driverlib\usb.c **** //! This function returns the last frame number received.
3649:C:/StellarisWare/driverlib\usb.c **** //!
3650:C:/StellarisWare/driverlib\usb.c **** //! \return The last frame number received.
3651:C:/StellarisWare/driverlib\usb.c **** //
3652:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3653:C:/StellarisWare/driverlib\usb.c **** unsigned long
3654:C:/StellarisWare/driverlib\usb.c **** USBFrameNumberGet(unsigned long ulBase)
3655:C:/StellarisWare/driverlib\usb.c **** {
 4322              		.loc 1 3655 0
 4323              		.cfi_startproc
 4324              		@ args = 0, pretend = 0, frame = 8
 4325              		@ frame_needed = 1, uses_anonymous_args = 0
 4326              		@ link register save eliminated.
 4327 0000 80B4     		push	{r7}
 4328              	.LCFI162:
 4329              		.cfi_def_cfa_offset 4
 4330              		.cfi_offset 7, -4
 4331 0002 83B0     		sub	sp, sp, #12
 4332              	.LCFI163:
 4333              		.cfi_def_cfa_offset 16
 4334 0004 00AF     		add	r7, sp, #0
 4335              	.LCFI164:
 4336              		.cfi_def_cfa_register 7
 4337 0006 7860     		str	r0, [r7, #4]
3656:C:/StellarisWare/driverlib\usb.c ****     //
3657:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3658:C:/StellarisWare/driverlib\usb.c ****     //
3659:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3660:C:/StellarisWare/driverlib\usb.c **** 
3661:C:/StellarisWare/driverlib\usb.c ****     //
3662:C:/StellarisWare/driverlib\usb.c ****     // Return the most recent frame number.
3663:C:/StellarisWare/driverlib\usb.c ****     //
3664:C:/StellarisWare/driverlib\usb.c ****     return(HWREGH(ulBase + USB_O_FRAME));
 4338              		.loc 1 3664 0
 4339 0008 7B68     		ldr	r3, [r7, #4]
 4340 000a 03F10C03 		add	r3, r3, #12
 4341 000e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 4342 0010 9BB2     		uxth	r3, r3
3665:C:/StellarisWare/driverlib\usb.c **** }
 4343              		.loc 1 3665 0
 4344 0012 1846     		mov	r0, r3
 4345 0014 07F10C07 		add	r7, r7, #12
 4346 0018 BD46     		mov	sp, r7
 4347 001a 80BC     		pop	{r7}
 4348 001c 7047     		bx	lr
 4349              		.cfi_endproc
 4350              	.LFE54:
 4352 001e 00BF     		.section	.text.USBOTGSessionRequest,"ax",%progbits
 4353              		.align	2
 4354              		.global	USBOTGSessionRequest
 4355              		.thumb
 4356              		.thumb_func
 4358              	USBOTGSessionRequest:
 4359              	.LFB55:
3666:C:/StellarisWare/driverlib\usb.c **** 
3667:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3668:C:/StellarisWare/driverlib\usb.c **** //
3669:C:/StellarisWare/driverlib\usb.c **** //! Starts or ends a session.
3670:C:/StellarisWare/driverlib\usb.c **** //!
3671:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3672:C:/StellarisWare/driverlib\usb.c **** //! \param bStart specifies if this call starts or ends a session.
3673:C:/StellarisWare/driverlib\usb.c **** //!
3674:C:/StellarisWare/driverlib\usb.c **** //! This function is used in OTG mode to start a session request or end a
3675:C:/StellarisWare/driverlib\usb.c **** //! session.  If the \e bStart parameter is set to \b true, then this function
3676:C:/StellarisWare/driverlib\usb.c **** //! starts a session and if it is \b false it ends a session.
3677:C:/StellarisWare/driverlib\usb.c **** //!
3678:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3679:C:/StellarisWare/driverlib\usb.c **** //
3680:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3681:C:/StellarisWare/driverlib\usb.c **** void
3682:C:/StellarisWare/driverlib\usb.c **** USBOTGSessionRequest(unsigned long ulBase, tBoolean bStart)
3683:C:/StellarisWare/driverlib\usb.c **** {
 4360              		.loc 1 3683 0
 4361              		.cfi_startproc
 4362              		@ args = 0, pretend = 0, frame = 8
 4363              		@ frame_needed = 1, uses_anonymous_args = 0
 4364              		@ link register save eliminated.
 4365 0000 80B4     		push	{r7}
 4366              	.LCFI165:
 4367              		.cfi_def_cfa_offset 4
 4368              		.cfi_offset 7, -4
 4369 0002 83B0     		sub	sp, sp, #12
 4370              	.LCFI166:
 4371              		.cfi_def_cfa_offset 16
 4372 0004 00AF     		add	r7, sp, #0
 4373              	.LCFI167:
 4374              		.cfi_def_cfa_register 7
 4375 0006 7860     		str	r0, [r7, #4]
 4376 0008 0B46     		mov	r3, r1
 4377 000a FB70     		strb	r3, [r7, #3]
3684:C:/StellarisWare/driverlib\usb.c ****     //
3685:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3686:C:/StellarisWare/driverlib\usb.c ****     //
3687:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3688:C:/StellarisWare/driverlib\usb.c **** 
3689:C:/StellarisWare/driverlib\usb.c ****     //
3690:C:/StellarisWare/driverlib\usb.c ****     // Start or end the session as directed.
3691:C:/StellarisWare/driverlib\usb.c ****     //
3692:C:/StellarisWare/driverlib\usb.c ****     if(bStart)
 4378              		.loc 1 3692 0
 4379 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4380 000e 002B     		cmp	r3, #0
 4381 0010 0CD0     		beq	.L198
3693:C:/StellarisWare/driverlib\usb.c ****     {
3694:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_DEVCTL) |= USB_DEVCTL_SESSION;
 4382              		.loc 1 3694 0
 4383 0012 7B68     		ldr	r3, [r7, #4]
 4384 0014 03F16003 		add	r3, r3, #96
 4385 0018 7A68     		ldr	r2, [r7, #4]
 4386 001a 02F16002 		add	r2, r2, #96
 4387 001e 1278     		ldrb	r2, [r2, #0]
 4388 0020 D2B2     		uxtb	r2, r2
 4389 0022 42F00102 		orr	r2, r2, #1
 4390 0026 D2B2     		uxtb	r2, r2
 4391 0028 1A70     		strb	r2, [r3, #0]
 4392 002a 0BE0     		b	.L197
 4393              	.L198:
3695:C:/StellarisWare/driverlib\usb.c ****     }
3696:C:/StellarisWare/driverlib\usb.c ****     else
3697:C:/StellarisWare/driverlib\usb.c ****     {
3698:C:/StellarisWare/driverlib\usb.c ****         HWREGB(ulBase + USB_O_DEVCTL) &= ~USB_DEVCTL_SESSION;
 4394              		.loc 1 3698 0
 4395 002c 7B68     		ldr	r3, [r7, #4]
 4396 002e 03F16003 		add	r3, r3, #96
 4397 0032 7A68     		ldr	r2, [r7, #4]
 4398 0034 02F16002 		add	r2, r2, #96
 4399 0038 1278     		ldrb	r2, [r2, #0]
 4400 003a D2B2     		uxtb	r2, r2
 4401 003c 22F00102 		bic	r2, r2, #1
 4402 0040 D2B2     		uxtb	r2, r2
 4403 0042 1A70     		strb	r2, [r3, #0]
 4404              	.L197:
3699:C:/StellarisWare/driverlib\usb.c ****     }
3700:C:/StellarisWare/driverlib\usb.c **** }
 4405              		.loc 1 3700 0
 4406 0044 07F10C07 		add	r7, r7, #12
 4407 0048 BD46     		mov	sp, r7
 4408 004a 80BC     		pop	{r7}
 4409 004c 7047     		bx	lr
 4410              		.cfi_endproc
 4411              	.LFE55:
 4413 004e 00BF     		.section	.text.USBFIFOAddrGet,"ax",%progbits
 4414              		.align	2
 4415              		.global	USBFIFOAddrGet
 4416              		.thumb
 4417              		.thumb_func
 4419              	USBFIFOAddrGet:
 4420              	.LFB56:
3701:C:/StellarisWare/driverlib\usb.c **** 
3702:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3703:C:/StellarisWare/driverlib\usb.c **** //
3704:C:/StellarisWare/driverlib\usb.c **** //! Returns the absolute FIFO address for a given endpoint.
3705:C:/StellarisWare/driverlib\usb.c **** //!
3706:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3707:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies which endpoint's FIFO address to return.
3708:C:/StellarisWare/driverlib\usb.c **** //!
3709:C:/StellarisWare/driverlib\usb.c **** //! This function returns the actual physical address of the FIFO.  This
3710:C:/StellarisWare/driverlib\usb.c **** //! address is needed when the USB is going to be used with the uDMA
3711:C:/StellarisWare/driverlib\usb.c **** //! controller and the source or destination address must be set to the
3712:C:/StellarisWare/driverlib\usb.c **** //! physical FIFO address for a given endpoint.
3713:C:/StellarisWare/driverlib\usb.c **** //!
3714:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3715:C:/StellarisWare/driverlib\usb.c **** //
3716:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3717:C:/StellarisWare/driverlib\usb.c **** unsigned long
3718:C:/StellarisWare/driverlib\usb.c **** USBFIFOAddrGet(unsigned long ulBase, unsigned long ulEndpoint)
3719:C:/StellarisWare/driverlib\usb.c **** {
 4421              		.loc 1 3719 0
 4422              		.cfi_startproc
 4423              		@ args = 0, pretend = 0, frame = 8
 4424              		@ frame_needed = 1, uses_anonymous_args = 0
 4425              		@ link register save eliminated.
 4426 0000 80B4     		push	{r7}
 4427              	.LCFI168:
 4428              		.cfi_def_cfa_offset 4
 4429              		.cfi_offset 7, -4
 4430 0002 83B0     		sub	sp, sp, #12
 4431              	.LCFI169:
 4432              		.cfi_def_cfa_offset 16
 4433 0004 00AF     		add	r7, sp, #0
 4434              	.LCFI170:
 4435              		.cfi_def_cfa_register 7
 4436 0006 7860     		str	r0, [r7, #4]
 4437 0008 3960     		str	r1, [r7, #0]
3720:C:/StellarisWare/driverlib\usb.c ****     //
3721:C:/StellarisWare/driverlib\usb.c ****     // Return the FIFO address for this endpoint.
3722:C:/StellarisWare/driverlib\usb.c ****     //
3723:C:/StellarisWare/driverlib\usb.c ****     return(ulBase + USB_O_FIFO0 + (ulEndpoint >> 2));
 4438              		.loc 1 3723 0
 4439 000a 3B68     		ldr	r3, [r7, #0]
 4440 000c 4FEA9302 		lsr	r2, r3, #2
 4441 0010 7B68     		ldr	r3, [r7, #4]
 4442 0012 D318     		adds	r3, r2, r3
 4443 0014 03F12003 		add	r3, r3, #32
3724:C:/StellarisWare/driverlib\usb.c **** }
 4444              		.loc 1 3724 0
 4445 0018 1846     		mov	r0, r3
 4446 001a 07F10C07 		add	r7, r7, #12
 4447 001e BD46     		mov	sp, r7
 4448 0020 80BC     		pop	{r7}
 4449 0022 7047     		bx	lr
 4450              		.cfi_endproc
 4451              	.LFE56:
 4453              		.section	.text.USBModeGet,"ax",%progbits
 4454              		.align	2
 4455              		.global	USBModeGet
 4456              		.thumb
 4457              		.thumb_func
 4459              	USBModeGet:
 4460              	.LFB57:
3725:C:/StellarisWare/driverlib\usb.c **** 
3726:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3727:C:/StellarisWare/driverlib\usb.c **** //
3728:C:/StellarisWare/driverlib\usb.c **** //! Returns the current operating mode of the controller.
3729:C:/StellarisWare/driverlib\usb.c **** //!
3730:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3731:C:/StellarisWare/driverlib\usb.c **** //!
3732:C:/StellarisWare/driverlib\usb.c **** //! This function returns the current operating mode on USB controllers with
3733:C:/StellarisWare/driverlib\usb.c **** //! OTG or Dual mode functionality.
3734:C:/StellarisWare/driverlib\usb.c **** //!
3735:C:/StellarisWare/driverlib\usb.c **** //! For OTG controllers:
3736:C:/StellarisWare/driverlib\usb.c **** //!
3737:C:/StellarisWare/driverlib\usb.c **** //! The function returns one of the following values on OTG controllers:
3738:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_ASIDE_HOST, \b USB_OTG_MODE_ASIDE_DEV,
3739:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_BSIDE_HOST, \b USB_OTG_MODE_BSIDE_DEV,
3740:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_NONE.
3741:C:/StellarisWare/driverlib\usb.c **** //!
3742:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_ASIDE_HOST indicates that the controller is in host mode
3743:C:/StellarisWare/driverlib\usb.c **** //! on the A-side of the cable.
3744:C:/StellarisWare/driverlib\usb.c **** //!
3745:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_ASIDE_DEV indicates that the controller is in device mode
3746:C:/StellarisWare/driverlib\usb.c **** //! on the A-side of the cable.
3747:C:/StellarisWare/driverlib\usb.c **** //!
3748:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_BSIDE_HOST indicates that the controller is in host mode
3749:C:/StellarisWare/driverlib\usb.c **** //! on the B-side of the cable.
3750:C:/StellarisWare/driverlib\usb.c **** //!
3751:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_BSIDE_DEV indicates that the controller is in device mode
3752:C:/StellarisWare/driverlib\usb.c **** //! on the B-side of the cable.  If an OTG session request is started with no
3753:C:/StellarisWare/driverlib\usb.c **** //! cable in place, this mode is the default.
3754:C:/StellarisWare/driverlib\usb.c **** //!
3755:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_NONE indicates that the controller is not attempting to
3756:C:/StellarisWare/driverlib\usb.c **** //! determine its role in the system.
3757:C:/StellarisWare/driverlib\usb.c **** //!
3758:C:/StellarisWare/driverlib\usb.c **** //! For Dual Mode controllers:
3759:C:/StellarisWare/driverlib\usb.c **** //!
3760:C:/StellarisWare/driverlib\usb.c **** //! The function returns one of the following values:
3761:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_HOST, \b USB_DUAL_MODE_DEVICE, or
3762:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_NONE.
3763:C:/StellarisWare/driverlib\usb.c **** //!
3764:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_HOST indicates that the controller is acting as a host.
3765:C:/StellarisWare/driverlib\usb.c **** //!
3766:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_DEVICE indicates that the controller acting as a device.
3767:C:/StellarisWare/driverlib\usb.c **** //!
3768:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_NONE indicates that the controller is not active as
3769:C:/StellarisWare/driverlib\usb.c **** //! either a host or device.
3770:C:/StellarisWare/driverlib\usb.c **** //!
3771:C:/StellarisWare/driverlib\usb.c **** //! \return Returns \b USB_OTG_MODE_ASIDE_HOST, \b USB_OTG_MODE_ASIDE_DEV,
3772:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_BSIDE_HOST, \b USB_OTG_MODE_BSIDE_DEV,
3773:C:/StellarisWare/driverlib\usb.c **** //! \b USB_OTG_MODE_NONE, \b USB_DUAL_MODE_HOST, \b USB_DUAL_MODE_DEVICE, or
3774:C:/StellarisWare/driverlib\usb.c **** //! \b USB_DUAL_MODE_NONE.
3775:C:/StellarisWare/driverlib\usb.c **** //
3776:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3777:C:/StellarisWare/driverlib\usb.c **** unsigned long
3778:C:/StellarisWare/driverlib\usb.c **** USBModeGet(unsigned long ulBase)
3779:C:/StellarisWare/driverlib\usb.c **** {
 4461              		.loc 1 3779 0
 4462              		.cfi_startproc
 4463              		@ args = 0, pretend = 0, frame = 8
 4464              		@ frame_needed = 1, uses_anonymous_args = 0
 4465              		@ link register save eliminated.
 4466 0000 80B4     		push	{r7}
 4467              	.LCFI171:
 4468              		.cfi_def_cfa_offset 4
 4469              		.cfi_offset 7, -4
 4470 0002 83B0     		sub	sp, sp, #12
 4471              	.LCFI172:
 4472              		.cfi_def_cfa_offset 16
 4473 0004 00AF     		add	r7, sp, #0
 4474              	.LCFI173:
 4475              		.cfi_def_cfa_register 7
 4476 0006 7860     		str	r0, [r7, #4]
3780:C:/StellarisWare/driverlib\usb.c ****     //
3781:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3782:C:/StellarisWare/driverlib\usb.c ****     //
3783:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3784:C:/StellarisWare/driverlib\usb.c **** 
3785:C:/StellarisWare/driverlib\usb.c ****     //
3786:C:/StellarisWare/driverlib\usb.c ****     // Checks the current mode in the USB_O_DEVCTL and returns the current
3787:C:/StellarisWare/driverlib\usb.c ****     // mode.
3788:C:/StellarisWare/driverlib\usb.c ****     //
3789:C:/StellarisWare/driverlib\usb.c ****     // USB_OTG_MODE_ASIDE_HOST:  USB_DEVCTL_HOST | USB_DEVCTL_SESSION
3790:C:/StellarisWare/driverlib\usb.c ****     // USB_OTG_MODE_ASIDE_DEV:   USB_DEVCTL_SESSION
3791:C:/StellarisWare/driverlib\usb.c ****     // USB_OTG_MODE_BSIDE_HOST:  USB_DEVCTL_DEV | USB_DEVCTL_SESSION |
3792:C:/StellarisWare/driverlib\usb.c ****     //                           USB_DEVCTL_HOST
3793:C:/StellarisWare/driverlib\usb.c ****     // USB_OTG_MODE_BSIDE_DEV:   USB_DEVCTL_DEV | USB_DEVCTL_SESSION
3794:C:/StellarisWare/driverlib\usb.c ****     // USB_OTG_MODE_NONE:        USB_DEVCTL_DEV
3795:C:/StellarisWare/driverlib\usb.c ****     //
3796:C:/StellarisWare/driverlib\usb.c ****     return(HWREGB(ulBase + USB_O_DEVCTL) &
 4477              		.loc 1 3796 0
 4478 0008 7B68     		ldr	r3, [r7, #4]
 4479 000a 03F16003 		add	r3, r3, #96
 4480 000e 1B78     		ldrb	r3, [r3, #0]
 4481 0010 DBB2     		uxtb	r3, r3
 4482 0012 03F09D03 		and	r3, r3, #157
3797:C:/StellarisWare/driverlib\usb.c ****            (USB_DEVCTL_DEV | USB_DEVCTL_HOST | USB_DEVCTL_SESSION |
3798:C:/StellarisWare/driverlib\usb.c ****             USB_DEVCTL_VBUS_M));
3799:C:/StellarisWare/driverlib\usb.c **** }
 4483              		.loc 1 3799 0
 4484 0016 1846     		mov	r0, r3
 4485 0018 07F10C07 		add	r7, r7, #12
 4486 001c BD46     		mov	sp, r7
 4487 001e 80BC     		pop	{r7}
 4488 0020 7047     		bx	lr
 4489              		.cfi_endproc
 4490              	.LFE57:
 4492 0022 00BF     		.section	.text.USBEndpointDMAChannel,"ax",%progbits
 4493              		.align	2
 4494              		.global	USBEndpointDMAChannel
 4495              		.thumb
 4496              		.thumb_func
 4498              	USBEndpointDMAChannel:
 4499              	.LFB58:
3800:C:/StellarisWare/driverlib\usb.c **** 
3801:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3802:C:/StellarisWare/driverlib\usb.c **** //
3803:C:/StellarisWare/driverlib\usb.c **** //! Sets the DMA channel to use for a given endpoint.
3804:C:/StellarisWare/driverlib\usb.c **** //!
3805:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3806:C:/StellarisWare/driverlib\usb.c **** //! \param ulEndpoint specifies which endpoint's FIFO address to return.
3807:C:/StellarisWare/driverlib\usb.c **** //! \param ulChannel specifies which DMA channel to use for which endpoint.
3808:C:/StellarisWare/driverlib\usb.c **** //!
3809:C:/StellarisWare/driverlib\usb.c **** //! This function is used to configure which DMA channel to use with a given
3810:C:/StellarisWare/driverlib\usb.c **** //! endpoint.  Receive DMA channels can only be used with receive endpoints
3811:C:/StellarisWare/driverlib\usb.c **** //! and transmit DMA channels can only be used with transmit endpoints.  As a
3812:C:/StellarisWare/driverlib\usb.c **** //! result, the 3 receive and 3 transmit DMA channels can be mapped to any
3813:C:/StellarisWare/driverlib\usb.c **** //! endpoint other than 0.  The values that should be passed into the
3814:C:/StellarisWare/driverlib\usb.c **** //! \e ulChannel value are the UDMA_CHANNEL_USBEP* values defined in udma.h.
3815:C:/StellarisWare/driverlib\usb.c **** //!
3816:C:/StellarisWare/driverlib\usb.c **** //! \note This function only has an effect on microcontrollers that have the
3817:C:/StellarisWare/driverlib\usb.c **** //! ability to change the DMA channel for an endpoint.  Calling this function
3818:C:/StellarisWare/driverlib\usb.c **** //! on other devices has no effect.
3819:C:/StellarisWare/driverlib\usb.c **** //!
3820:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3821:C:/StellarisWare/driverlib\usb.c **** //!
3822:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3823:C:/StellarisWare/driverlib\usb.c **** void
3824:C:/StellarisWare/driverlib\usb.c **** USBEndpointDMAChannel(unsigned long ulBase, unsigned long ulEndpoint,
3825:C:/StellarisWare/driverlib\usb.c ****                       unsigned long ulChannel)
3826:C:/StellarisWare/driverlib\usb.c **** {
 4500              		.loc 1 3826 0
 4501              		.cfi_startproc
 4502              		@ args = 0, pretend = 0, frame = 24
 4503              		@ frame_needed = 1, uses_anonymous_args = 0
 4504              		@ link register save eliminated.
 4505 0000 80B4     		push	{r7}
 4506              	.LCFI174:
 4507              		.cfi_def_cfa_offset 4
 4508              		.cfi_offset 7, -4
 4509 0002 87B0     		sub	sp, sp, #28
 4510              	.LCFI175:
 4511              		.cfi_def_cfa_offset 32
 4512 0004 00AF     		add	r7, sp, #0
 4513              	.LCFI176:
 4514              		.cfi_def_cfa_register 7
 4515 0006 F860     		str	r0, [r7, #12]
 4516 0008 B960     		str	r1, [r7, #8]
 4517 000a 7A60     		str	r2, [r7, #4]
3827:C:/StellarisWare/driverlib\usb.c ****     unsigned long ulMask;
3828:C:/StellarisWare/driverlib\usb.c **** 
3829:C:/StellarisWare/driverlib\usb.c ****     //
3830:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3831:C:/StellarisWare/driverlib\usb.c ****     //
3832:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3833:C:/StellarisWare/driverlib\usb.c ****     ASSERT((ulEndpoint == USB_EP_1) || (ulEndpoint == USB_EP_2) ||
3834:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_3) || (ulEndpoint == USB_EP_4) ||
3835:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_5) || (ulEndpoint == USB_EP_6) ||
3836:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_7) || (ulEndpoint == USB_EP_8) ||
3837:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_9) || (ulEndpoint == USB_EP_10) ||
3838:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_11) || (ulEndpoint == USB_EP_12) ||
3839:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_13) || (ulEndpoint == USB_EP_14) ||
3840:C:/StellarisWare/driverlib\usb.c ****            (ulEndpoint == USB_EP_15));
3841:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulChannel <= UDMA_CHANNEL_USBEP3TX);
3842:C:/StellarisWare/driverlib\usb.c **** 
3843:C:/StellarisWare/driverlib\usb.c ****     //
3844:C:/StellarisWare/driverlib\usb.c ****     // The input select mask must be shifted into the correct position
3845:C:/StellarisWare/driverlib\usb.c ****     // based on the channel.
3846:C:/StellarisWare/driverlib\usb.c ****     //
3847:C:/StellarisWare/driverlib\usb.c ****     ulMask = 0xf << (ulChannel * 4);
 4518              		.loc 1 3847 0
 4519 000c 7B68     		ldr	r3, [r7, #4]
 4520 000e 4FEA8303 		lsl	r3, r3, #2
 4521 0012 4FF00F02 		mov	r2, #15
 4522 0016 02FA03F3 		lsl	r3, r2, r3
 4523 001a 7B61     		str	r3, [r7, #20]
3848:C:/StellarisWare/driverlib\usb.c **** 
3849:C:/StellarisWare/driverlib\usb.c ****     //
3850:C:/StellarisWare/driverlib\usb.c ****     // Clear out the current selection for the channel.
3851:C:/StellarisWare/driverlib\usb.c ****     //
3852:C:/StellarisWare/driverlib\usb.c ****     ulMask = HWREG(ulBase + USB_O_DMASEL) & (~ulMask);
 4524              		.loc 1 3852 0
 4525 001c FB68     		ldr	r3, [r7, #12]
 4526 001e 03F58A63 		add	r3, r3, #1104
 4527 0022 1A68     		ldr	r2, [r3, #0]
 4528 0024 7B69     		ldr	r3, [r7, #20]
 4529 0026 6FEA0303 		mvn	r3, r3
 4530 002a 1340     		ands	r3, r3, r2
 4531 002c 7B61     		str	r3, [r7, #20]
3853:C:/StellarisWare/driverlib\usb.c **** 
3854:C:/StellarisWare/driverlib\usb.c ****     //
3855:C:/StellarisWare/driverlib\usb.c ****     // The input select is now shifted into the correct position based on the
3856:C:/StellarisWare/driverlib\usb.c ****     // channel.
3857:C:/StellarisWare/driverlib\usb.c ****     //
3858:C:/StellarisWare/driverlib\usb.c ****     ulMask |= (USB_EP_TO_INDEX(ulEndpoint)) << (ulChannel * 4);
 4532              		.loc 1 3858 0
 4533 002e BB68     		ldr	r3, [r7, #8]
 4534 0030 4FEA1312 		lsr	r2, r3, #4
 4535 0034 7B68     		ldr	r3, [r7, #4]
 4536 0036 4FEA8303 		lsl	r3, r3, #2
 4537 003a 02FA03F3 		lsl	r3, r2, r3
 4538 003e 7A69     		ldr	r2, [r7, #20]
 4539 0040 1343     		orrs	r3, r3, r2
 4540 0042 7B61     		str	r3, [r7, #20]
3859:C:/StellarisWare/driverlib\usb.c **** 
3860:C:/StellarisWare/driverlib\usb.c ****     //
3861:C:/StellarisWare/driverlib\usb.c ****     // Write the value out to the register.
3862:C:/StellarisWare/driverlib\usb.c ****     //
3863:C:/StellarisWare/driverlib\usb.c ****     HWREG(ulBase + USB_O_DMASEL) = ulMask;
 4541              		.loc 1 3863 0
 4542 0044 FB68     		ldr	r3, [r7, #12]
 4543 0046 03F58A63 		add	r3, r3, #1104
 4544 004a 7A69     		ldr	r2, [r7, #20]
 4545 004c 1A60     		str	r2, [r3, #0]
3864:C:/StellarisWare/driverlib\usb.c **** }
 4546              		.loc 1 3864 0
 4547 004e 07F11C07 		add	r7, r7, #28
 4548 0052 BD46     		mov	sp, r7
 4549 0054 80BC     		pop	{r7}
 4550 0056 7047     		bx	lr
 4551              		.cfi_endproc
 4552              	.LFE58:
 4554              		.section	.text.USBHostMode,"ax",%progbits
 4555              		.align	2
 4556              		.global	USBHostMode
 4557              		.thumb
 4558              		.thumb_func
 4560              	USBHostMode:
 4561              	.LFB59:
3865:C:/StellarisWare/driverlib\usb.c **** 
3866:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3867:C:/StellarisWare/driverlib\usb.c **** //
3868:C:/StellarisWare/driverlib\usb.c **** //! Change the mode of the USB controller to host.
3869:C:/StellarisWare/driverlib\usb.c **** //!
3870:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3871:C:/StellarisWare/driverlib\usb.c **** //!
3872:C:/StellarisWare/driverlib\usb.c **** //! This function changes the mode of the USB controller to host mode.
3873:C:/StellarisWare/driverlib\usb.c **** //!
3874:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called on microcontrollers that support
3875:C:/StellarisWare/driverlib\usb.c **** //! OTG operation and have the DEVMODOTG bit in the USBGPCS register.
3876:C:/StellarisWare/driverlib\usb.c **** //!
3877:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3878:C:/StellarisWare/driverlib\usb.c **** //
3879:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3880:C:/StellarisWare/driverlib\usb.c **** void
3881:C:/StellarisWare/driverlib\usb.c **** USBHostMode(unsigned long ulBase)
3882:C:/StellarisWare/driverlib\usb.c **** {
 4562              		.loc 1 3882 0
 4563              		.cfi_startproc
 4564              		@ args = 0, pretend = 0, frame = 8
 4565              		@ frame_needed = 1, uses_anonymous_args = 0
 4566              		@ link register save eliminated.
 4567 0000 80B4     		push	{r7}
 4568              	.LCFI177:
 4569              		.cfi_def_cfa_offset 4
 4570              		.cfi_offset 7, -4
 4571 0002 83B0     		sub	sp, sp, #12
 4572              	.LCFI178:
 4573              		.cfi_def_cfa_offset 16
 4574 0004 00AF     		add	r7, sp, #0
 4575              	.LCFI179:
 4576              		.cfi_def_cfa_register 7
 4577 0006 7860     		str	r0, [r7, #4]
3883:C:/StellarisWare/driverlib\usb.c ****     //
3884:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3885:C:/StellarisWare/driverlib\usb.c ****     //
3886:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3887:C:/StellarisWare/driverlib\usb.c **** 
3888:C:/StellarisWare/driverlib\usb.c ****     //
3889:C:/StellarisWare/driverlib\usb.c ****     // Force mode in OTG parts that support forcing USB controller mode.
3890:C:/StellarisWare/driverlib\usb.c ****     // This bit is not writable in USB controllers that do not support
3891:C:/StellarisWare/driverlib\usb.c ****     // forcing the mode.  Not setting the USB_GPCS_DEVMOD bit makes this a
3892:C:/StellarisWare/driverlib\usb.c ****     // force of host mode.
3893:C:/StellarisWare/driverlib\usb.c ****     //
3894:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_GPCS) = USB_GPCS_DEVMODOTG;
 4578              		.loc 1 3894 0
 4579 0008 7B68     		ldr	r3, [r7, #4]
 4580 000a 03F58263 		add	r3, r3, #1040
 4581 000e 03F10C03 		add	r3, r3, #12
 4582 0012 4FF00202 		mov	r2, #2
 4583 0016 1A70     		strb	r2, [r3, #0]
3895:C:/StellarisWare/driverlib\usb.c **** }
 4584              		.loc 1 3895 0
 4585 0018 07F10C07 		add	r7, r7, #12
 4586 001c BD46     		mov	sp, r7
 4587 001e 80BC     		pop	{r7}
 4588 0020 7047     		bx	lr
 4589              		.cfi_endproc
 4590              	.LFE59:
 4592 0022 00BF     		.section	.text.USBDevMode,"ax",%progbits
 4593              		.align	2
 4594              		.global	USBDevMode
 4595              		.thumb
 4596              		.thumb_func
 4598              	USBDevMode:
 4599              	.LFB60:
3896:C:/StellarisWare/driverlib\usb.c **** 
3897:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3898:C:/StellarisWare/driverlib\usb.c **** //
3899:C:/StellarisWare/driverlib\usb.c **** //! Change the mode of the USB controller to device.
3900:C:/StellarisWare/driverlib\usb.c **** //!
3901:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3902:C:/StellarisWare/driverlib\usb.c **** //!
3903:C:/StellarisWare/driverlib\usb.c **** //! This function changes the mode of the USB controller to device mode.
3904:C:/StellarisWare/driverlib\usb.c **** //!
3905:C:/StellarisWare/driverlib\usb.c **** //! \note This function should only be called on microcontrollers that support
3906:C:/StellarisWare/driverlib\usb.c **** //! OTG operation and have the DEVMODOTG bit in the USBGPCS register.
3907:C:/StellarisWare/driverlib\usb.c **** //!
3908:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3909:C:/StellarisWare/driverlib\usb.c **** //
3910:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3911:C:/StellarisWare/driverlib\usb.c **** void
3912:C:/StellarisWare/driverlib\usb.c **** USBDevMode(unsigned long ulBase)
3913:C:/StellarisWare/driverlib\usb.c **** {
 4600              		.loc 1 3913 0
 4601              		.cfi_startproc
 4602              		@ args = 0, pretend = 0, frame = 8
 4603              		@ frame_needed = 1, uses_anonymous_args = 0
 4604              		@ link register save eliminated.
 4605 0000 80B4     		push	{r7}
 4606              	.LCFI180:
 4607              		.cfi_def_cfa_offset 4
 4608              		.cfi_offset 7, -4
 4609 0002 83B0     		sub	sp, sp, #12
 4610              	.LCFI181:
 4611              		.cfi_def_cfa_offset 16
 4612 0004 00AF     		add	r7, sp, #0
 4613              	.LCFI182:
 4614              		.cfi_def_cfa_register 7
 4615 0006 7860     		str	r0, [r7, #4]
3914:C:/StellarisWare/driverlib\usb.c ****     //
3915:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3916:C:/StellarisWare/driverlib\usb.c ****     //
3917:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3918:C:/StellarisWare/driverlib\usb.c **** 
3919:C:/StellarisWare/driverlib\usb.c ****     //
3920:C:/StellarisWare/driverlib\usb.c ****     // Set the USB controller mode to device.
3921:C:/StellarisWare/driverlib\usb.c ****     //
3922:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_GPCS) = USB_GPCS_DEVMODOTG | USB_GPCS_DEVMOD;
 4616              		.loc 1 3922 0
 4617 0008 7B68     		ldr	r3, [r7, #4]
 4618 000a 03F58263 		add	r3, r3, #1040
 4619 000e 03F10C03 		add	r3, r3, #12
 4620 0012 4FF00302 		mov	r2, #3
 4621 0016 1A70     		strb	r2, [r3, #0]
3923:C:/StellarisWare/driverlib\usb.c **** }
 4622              		.loc 1 3923 0
 4623 0018 07F10C07 		add	r7, r7, #12
 4624 001c BD46     		mov	sp, r7
 4625 001e 80BC     		pop	{r7}
 4626 0020 7047     		bx	lr
 4627              		.cfi_endproc
 4628              	.LFE60:
 4630 0022 00BF     		.section	.text.USBOTGMode,"ax",%progbits
 4631              		.align	2
 4632              		.global	USBOTGMode
 4633              		.thumb
 4634              		.thumb_func
 4636              	USBOTGMode:
 4637              	.LFB61:
3924:C:/StellarisWare/driverlib\usb.c **** 
3925:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3926:C:/StellarisWare/driverlib\usb.c **** //
3927:C:/StellarisWare/driverlib\usb.c **** //! Change the mode of the USB controller to OTG.
3928:C:/StellarisWare/driverlib\usb.c **** //!
3929:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3930:C:/StellarisWare/driverlib\usb.c **** //!
3931:C:/StellarisWare/driverlib\usb.c **** //! This function changes the mode of the USB controller to OTG mode.  This
3932:C:/StellarisWare/driverlib\usb.c **** //! function is only valid on microcontrollers that have the OTG capabilities.
3933:C:/StellarisWare/driverlib\usb.c **** //!
3934:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3935:C:/StellarisWare/driverlib\usb.c **** //
3936:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3937:C:/StellarisWare/driverlib\usb.c **** void
3938:C:/StellarisWare/driverlib\usb.c **** USBOTGMode(unsigned long ulBase)
3939:C:/StellarisWare/driverlib\usb.c **** {
 4638              		.loc 1 3939 0
 4639              		.cfi_startproc
 4640              		@ args = 0, pretend = 0, frame = 8
 4641              		@ frame_needed = 1, uses_anonymous_args = 0
 4642              		@ link register save eliminated.
 4643 0000 80B4     		push	{r7}
 4644              	.LCFI183:
 4645              		.cfi_def_cfa_offset 4
 4646              		.cfi_offset 7, -4
 4647 0002 83B0     		sub	sp, sp, #12
 4648              	.LCFI184:
 4649              		.cfi_def_cfa_offset 16
 4650 0004 00AF     		add	r7, sp, #0
 4651              	.LCFI185:
 4652              		.cfi_def_cfa_register 7
 4653 0006 7860     		str	r0, [r7, #4]
3940:C:/StellarisWare/driverlib\usb.c ****     //
3941:C:/StellarisWare/driverlib\usb.c ****     // Check the arguments.
3942:C:/StellarisWare/driverlib\usb.c ****     //
3943:C:/StellarisWare/driverlib\usb.c ****     ASSERT(ulBase == USB0_BASE);
3944:C:/StellarisWare/driverlib\usb.c **** 
3945:C:/StellarisWare/driverlib\usb.c ****     //
3946:C:/StellarisWare/driverlib\usb.c ****     // Disable the override of the USB controller mode when running on an OTG
3947:C:/StellarisWare/driverlib\usb.c ****     // device.
3948:C:/StellarisWare/driverlib\usb.c ****     //
3949:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_GPCS) = 0;
 4654              		.loc 1 3949 0
 4655 0008 7B68     		ldr	r3, [r7, #4]
 4656 000a 03F58263 		add	r3, r3, #1040
 4657 000e 03F10C03 		add	r3, r3, #12
 4658 0012 4FF00002 		mov	r2, #0
 4659 0016 1A70     		strb	r2, [r3, #0]
3950:C:/StellarisWare/driverlib\usb.c **** }
 4660              		.loc 1 3950 0
 4661 0018 07F10C07 		add	r7, r7, #12
 4662 001c BD46     		mov	sp, r7
 4663 001e 80BC     		pop	{r7}
 4664 0020 7047     		bx	lr
 4665              		.cfi_endproc
 4666              	.LFE61:
 4668 0022 00BF     		.section	.text.USBPHYPowerOff,"ax",%progbits
 4669              		.align	2
 4670              		.global	USBPHYPowerOff
 4671              		.thumb
 4672              		.thumb_func
 4674              	USBPHYPowerOff:
 4675              	.LFB62:
3951:C:/StellarisWare/driverlib\usb.c **** 
3952:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3953:C:/StellarisWare/driverlib\usb.c **** //
3954:C:/StellarisWare/driverlib\usb.c **** //! Powers off the USB PHY.
3955:C:/StellarisWare/driverlib\usb.c **** //!
3956:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3957:C:/StellarisWare/driverlib\usb.c **** //!
3958:C:/StellarisWare/driverlib\usb.c **** //! This function powers off the USB PHY, reducing the current consuption
3959:C:/StellarisWare/driverlib\usb.c **** //! of the device.  While in the powered-off state, the USB controller is
3960:C:/StellarisWare/driverlib\usb.c **** //! unable to operate.
3961:C:/StellarisWare/driverlib\usb.c **** //!
3962:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3963:C:/StellarisWare/driverlib\usb.c **** //
3964:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3965:C:/StellarisWare/driverlib\usb.c **** void
3966:C:/StellarisWare/driverlib\usb.c **** USBPHYPowerOff(unsigned long ulBase)
3967:C:/StellarisWare/driverlib\usb.c **** {
 4676              		.loc 1 3967 0
 4677              		.cfi_startproc
 4678              		@ args = 0, pretend = 0, frame = 8
 4679              		@ frame_needed = 1, uses_anonymous_args = 0
 4680              		@ link register save eliminated.
 4681 0000 80B4     		push	{r7}
 4682              	.LCFI186:
 4683              		.cfi_def_cfa_offset 4
 4684              		.cfi_offset 7, -4
 4685 0002 83B0     		sub	sp, sp, #12
 4686              	.LCFI187:
 4687              		.cfi_def_cfa_offset 16
 4688 0004 00AF     		add	r7, sp, #0
 4689              	.LCFI188:
 4690              		.cfi_def_cfa_register 7
 4691 0006 7860     		str	r0, [r7, #4]
3968:C:/StellarisWare/driverlib\usb.c ****     //
3969:C:/StellarisWare/driverlib\usb.c ****     // Set the PWRDNPHY bit in the PHY, putting it into its low power mode.
3970:C:/StellarisWare/driverlib\usb.c ****     //
3971:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_POWER) |= USB_POWER_PWRDNPHY;
 4692              		.loc 1 3971 0
 4693 0008 7B68     		ldr	r3, [r7, #4]
 4694 000a 03F10103 		add	r3, r3, #1
 4695 000e 7A68     		ldr	r2, [r7, #4]
 4696 0010 02F10102 		add	r2, r2, #1
 4697 0014 1278     		ldrb	r2, [r2, #0]
 4698 0016 D2B2     		uxtb	r2, r2
 4699 0018 42F00102 		orr	r2, r2, #1
 4700 001c D2B2     		uxtb	r2, r2
 4701 001e 1A70     		strb	r2, [r3, #0]
3972:C:/StellarisWare/driverlib\usb.c **** }
 4702              		.loc 1 3972 0
 4703 0020 07F10C07 		add	r7, r7, #12
 4704 0024 BD46     		mov	sp, r7
 4705 0026 80BC     		pop	{r7}
 4706 0028 7047     		bx	lr
 4707              		.cfi_endproc
 4708              	.LFE62:
 4710 002a 00BF     		.section	.text.USBPHYPowerOn,"ax",%progbits
 4711              		.align	2
 4712              		.global	USBPHYPowerOn
 4713              		.thumb
 4714              		.thumb_func
 4716              	USBPHYPowerOn:
 4717              	.LFB63:
3973:C:/StellarisWare/driverlib\usb.c **** 
3974:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3975:C:/StellarisWare/driverlib\usb.c **** //
3976:C:/StellarisWare/driverlib\usb.c **** //! Powers on the USB PHY.
3977:C:/StellarisWare/driverlib\usb.c **** //!
3978:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
3979:C:/StellarisWare/driverlib\usb.c **** //!
3980:C:/StellarisWare/driverlib\usb.c **** //! This function powers on the USB PHY, enabling it return to normal
3981:C:/StellarisWare/driverlib\usb.c **** //! operation.  By default, the PHY is powered on, so this function should
3982:C:/StellarisWare/driverlib\usb.c **** //! only be called if USBPHYPowerOff() has previously been called.
3983:C:/StellarisWare/driverlib\usb.c **** //!
3984:C:/StellarisWare/driverlib\usb.c **** //! \return None.
3985:C:/StellarisWare/driverlib\usb.c **** //
3986:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3987:C:/StellarisWare/driverlib\usb.c **** void
3988:C:/StellarisWare/driverlib\usb.c **** USBPHYPowerOn(unsigned long ulBase)
3989:C:/StellarisWare/driverlib\usb.c **** {
 4718              		.loc 1 3989 0
 4719              		.cfi_startproc
 4720              		@ args = 0, pretend = 0, frame = 8
 4721              		@ frame_needed = 1, uses_anonymous_args = 0
 4722              		@ link register save eliminated.
 4723 0000 80B4     		push	{r7}
 4724              	.LCFI189:
 4725              		.cfi_def_cfa_offset 4
 4726              		.cfi_offset 7, -4
 4727 0002 83B0     		sub	sp, sp, #12
 4728              	.LCFI190:
 4729              		.cfi_def_cfa_offset 16
 4730 0004 00AF     		add	r7, sp, #0
 4731              	.LCFI191:
 4732              		.cfi_def_cfa_register 7
 4733 0006 7860     		str	r0, [r7, #4]
3990:C:/StellarisWare/driverlib\usb.c ****     //
3991:C:/StellarisWare/driverlib\usb.c ****     // Clear the PWRDNPHY bit in the PHY, putting it into normal operating
3992:C:/StellarisWare/driverlib\usb.c ****     // mode.
3993:C:/StellarisWare/driverlib\usb.c ****     //
3994:C:/StellarisWare/driverlib\usb.c ****     HWREGB(ulBase + USB_O_POWER) &= ~USB_POWER_PWRDNPHY;
 4734              		.loc 1 3994 0
 4735 0008 7B68     		ldr	r3, [r7, #4]
 4736 000a 03F10103 		add	r3, r3, #1
 4737 000e 7A68     		ldr	r2, [r7, #4]
 4738 0010 02F10102 		add	r2, r2, #1
 4739 0014 1278     		ldrb	r2, [r2, #0]
 4740 0016 D2B2     		uxtb	r2, r2
 4741 0018 22F00102 		bic	r2, r2, #1
 4742 001c D2B2     		uxtb	r2, r2
 4743 001e 1A70     		strb	r2, [r3, #0]
3995:C:/StellarisWare/driverlib\usb.c **** }
 4744              		.loc 1 3995 0
 4745 0020 07F10C07 		add	r7, r7, #12
 4746 0024 BD46     		mov	sp, r7
 4747 0026 80BC     		pop	{r7}
 4748 0028 7047     		bx	lr
 4749              		.cfi_endproc
 4750              	.LFE63:
 4752 002a 00BF     		.section	.text.USBNumEndpointsGet,"ax",%progbits
 4753              		.align	2
 4754              		.global	USBNumEndpointsGet
 4755              		.thumb
 4756              		.thumb_func
 4758              	USBNumEndpointsGet:
 4759              	.LFB64:
3996:C:/StellarisWare/driverlib\usb.c **** 
3997:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
3998:C:/StellarisWare/driverlib\usb.c **** //
3999:C:/StellarisWare/driverlib\usb.c **** //! Returns the number of USB endpoint pairs on the device.
4000:C:/StellarisWare/driverlib\usb.c **** //!
4001:C:/StellarisWare/driverlib\usb.c **** //! \param ulBase specifies the USB module base address.
4002:C:/StellarisWare/driverlib\usb.c **** //!
4003:C:/StellarisWare/driverlib\usb.c **** //! This function returns the number of endpoint pairs supported by the USB
4004:C:/StellarisWare/driverlib\usb.c **** //! controller corresponding to the passed base address.  The value returned is
4005:C:/StellarisWare/driverlib\usb.c **** //! the number of IN or OUT endpoints available and does not include endpoint 0
4006:C:/StellarisWare/driverlib\usb.c **** //! (the control endpoint).  For example, if 15 is returned, there are 15 IN
4007:C:/StellarisWare/driverlib\usb.c **** //! and 15 OUT endpoints available in addition to endpoint 0.
4008:C:/StellarisWare/driverlib\usb.c **** //!
4009:C:/StellarisWare/driverlib\usb.c **** //! \return Returns the number of IN or OUT endpoints available.
4010:C:/StellarisWare/driverlib\usb.c **** //
4011:C:/StellarisWare/driverlib\usb.c **** //*****************************************************************************
4012:C:/StellarisWare/driverlib\usb.c **** unsigned long
4013:C:/StellarisWare/driverlib\usb.c **** USBNumEndpointsGet(unsigned long ulBase)
4014:C:/StellarisWare/driverlib\usb.c **** {
 4760              		.loc 1 4014 0
 4761              		.cfi_startproc
 4762              		@ args = 0, pretend = 0, frame = 8
 4763              		@ frame_needed = 1, uses_anonymous_args = 0
 4764              		@ link register save eliminated.
 4765 0000 80B4     		push	{r7}
 4766              	.LCFI192:
 4767              		.cfi_def_cfa_offset 4
 4768              		.cfi_offset 7, -4
 4769 0002 83B0     		sub	sp, sp, #12
 4770              	.LCFI193:
 4771              		.cfi_def_cfa_offset 16
 4772 0004 00AF     		add	r7, sp, #0
 4773              	.LCFI194:
 4774              		.cfi_def_cfa_register 7
 4775 0006 7860     		str	r0, [r7, #4]
4015:C:/StellarisWare/driverlib\usb.c ****     if(CLASS_IS_SANDSTORM || CLASS_IS_FURY)
 4776              		.loc 1 4015 0
 4777 0008 4FF46043 		mov	r3, #57344
 4778 000c C4F20F03 		movt	r3, 16399
 4779 0010 1B68     		ldr	r3, [r3, #0]
 4780 0012 03F0E043 		and	r3, r3, #1879048192
 4781 0016 002B     		cmp	r3, #0
 4782 0018 1CD0     		beq	.L209
 4783              		.loc 1 4015 0 is_stmt 0 discriminator 1
 4784 001a 4FF46043 		mov	r3, #57344
 4785 001e C4F20F03 		movt	r3, 16399
 4786 0022 1A68     		ldr	r2, [r3, #0]
 4787 0024 4FF00003 		mov	r3, #0
 4788 0028 C7F2FF03 		movt	r3, 28927
 4789 002c 1340     		ands	r3, r3, r2
 4790 002e B3F1805F 		cmp	r3, #268435456
 4791 0032 0FD0     		beq	.L209
 4792 0034 4FF46043 		mov	r3, #57344
 4793 0038 C4F20F03 		movt	r3, 16399
 4794 003c 1A68     		ldr	r2, [r3, #0]
 4795 003e 4FF00003 		mov	r3, #0
 4796 0042 C7F2FF03 		movt	r3, 28927
 4797 0046 1340     		ands	r3, r3, r2
 4798 0048 4FF00002 		mov	r2, #0
 4799 004c C1F20102 		movt	r2, 4097
 4800 0050 9342     		cmp	r3, r2
 4801 0052 02D1     		bne	.L210
 4802              	.L209:
4016:C:/StellarisWare/driverlib\usb.c ****     {
4017:C:/StellarisWare/driverlib\usb.c ****         //
4018:C:/StellarisWare/driverlib\usb.c ****         // These part families do not support USB.
4019:C:/StellarisWare/driverlib\usb.c ****         //
4020:C:/StellarisWare/driverlib\usb.c ****         return(0);
 4803              		.loc 1 4020 0 is_stmt 1
 4804 0054 4FF00003 		mov	r3, #0
 4805 0058 4AE0     		b	.L211
 4806              	.L210:
4021:C:/StellarisWare/driverlib\usb.c ****     }
4022:C:/StellarisWare/driverlib\usb.c ****     else if(CLASS_IS_DUSTDEVIL)
 4807              		.loc 1 4022 0
 4808 005a 4FF46043 		mov	r3, #57344
 4809 005e C4F20F03 		movt	r3, 16399
 4810 0062 1A68     		ldr	r2, [r3, #0]
 4811 0064 4FF00003 		mov	r3, #0
 4812 0068 C7F2FF03 		movt	r3, 28927
 4813 006c 1340     		ands	r3, r3, r2
 4814 006e 4FF00002 		mov	r2, #0
 4815 0072 C1F20302 		movt	r2, 4099
 4816 0076 9342     		cmp	r3, r2
 4817 0078 02D1     		bne	.L212
4023:C:/StellarisWare/driverlib\usb.c ****     {
4024:C:/StellarisWare/driverlib\usb.c ****         //
4025:C:/StellarisWare/driverlib\usb.c ****         // DustDevil class devices support 3 endpoint pairs.
4026:C:/StellarisWare/driverlib\usb.c ****         //
4027:C:/StellarisWare/driverlib\usb.c ****         return(3);
 4818              		.loc 1 4027 0
 4819 007a 4FF00303 		mov	r3, #3
 4820 007e 37E0     		b	.L211
 4821              	.L212:
4028:C:/StellarisWare/driverlib\usb.c ****     }
4029:C:/StellarisWare/driverlib\usb.c ****     else if(CLASS_IS_TEMPEST || CLASS_IS_FIRESTORM)
 4822              		.loc 1 4029 0
 4823 0080 4FF46043 		mov	r3, #57344
 4824 0084 C4F20F03 		movt	r3, 16399
 4825 0088 1A68     		ldr	r2, [r3, #0]
 4826 008a 4FF00003 		mov	r3, #0
 4827 008e C7F2FF03 		movt	r3, 28927
 4828 0092 1340     		ands	r3, r3, r2
 4829 0094 4FF00002 		mov	r2, #0
 4830 0098 C1F20402 		movt	r2, 4100
 4831 009c 9342     		cmp	r3, r2
 4832 009e 0FD0     		beq	.L213
 4833              		.loc 1 4029 0 is_stmt 0 discriminator 1
 4834 00a0 4FF46043 		mov	r3, #57344
 4835 00a4 C4F20F03 		movt	r3, 16399
 4836 00a8 1A68     		ldr	r2, [r3, #0]
 4837 00aa 4FF00003 		mov	r3, #0
 4838 00ae C7F2FF03 		movt	r3, 28927
 4839 00b2 1340     		ands	r3, r3, r2
 4840 00b4 4FF00002 		mov	r2, #0
 4841 00b8 C1F20602 		movt	r2, 4102
 4842 00bc 9342     		cmp	r3, r2
 4843 00be 02D1     		bne	.L214
 4844              	.L213:
4030:C:/StellarisWare/driverlib\usb.c ****     {
4031:C:/StellarisWare/driverlib\usb.c ****         //
4032:C:/StellarisWare/driverlib\usb.c ****         // Tempest and Firestorm class devices support 15 endpoint pairs.
4033:C:/StellarisWare/driverlib\usb.c ****         //
4034:C:/StellarisWare/driverlib\usb.c ****         return(15);
 4845              		.loc 1 4034 0 is_stmt 1
 4846 00c0 4FF00F03 		mov	r3, #15
 4847 00c4 14E0     		b	.L211
 4848              	.L214:
4035:C:/StellarisWare/driverlib\usb.c ****     }
4036:C:/StellarisWare/driverlib\usb.c ****     else if(CLASS_IS_BLIZZARD)
 4849              		.loc 1 4036 0
 4850 00c6 4FF46043 		mov	r3, #57344
 4851 00ca C4F20F03 		movt	r3, 16399
 4852 00ce 1A68     		ldr	r2, [r3, #0]
 4853 00d0 4FF00003 		mov	r3, #0
 4854 00d4 C7F2FF03 		movt	r3, 28927
 4855 00d8 1340     		ands	r3, r3, r2
 4856 00da 4FF00002 		mov	r2, #0
 4857 00de C1F20502 		movt	r2, 4101
 4858 00e2 9342     		cmp	r3, r2
 4859 00e4 02D1     		bne	.L215
4037:C:/StellarisWare/driverlib\usb.c ****     {
4038:C:/StellarisWare/driverlib\usb.c ****         //
4039:C:/StellarisWare/driverlib\usb.c ****         // Blizzard class devices support 7 endpoint pairs.
4040:C:/StellarisWare/driverlib\usb.c ****         //
4041:C:/StellarisWare/driverlib\usb.c ****         return(7);
 4860              		.loc 1 4041 0
 4861 00e6 4FF00703 		mov	r3, #7
 4862 00ea 01E0     		b	.L211
 4863              	.L215:
4042:C:/StellarisWare/driverlib\usb.c ****     }
4043:C:/StellarisWare/driverlib\usb.c ****     else
4044:C:/StellarisWare/driverlib\usb.c ****     {
4045:C:/StellarisWare/driverlib\usb.c ****         //
4046:C:/StellarisWare/driverlib\usb.c ****         // The device class is not recognized so default to assuming no USB
4047:C:/StellarisWare/driverlib\usb.c ****         // support.
4048:C:/StellarisWare/driverlib\usb.c ****         //
4049:C:/StellarisWare/driverlib\usb.c ****         return(0);
 4864              		.loc 1 4049 0
 4865 00ec 4FF00003 		mov	r3, #0
 4866              	.L211:
4050:C:/StellarisWare/driverlib\usb.c ****     }
4051:C:/StellarisWare/driverlib\usb.c **** }
 4867              		.loc 1 4051 0
 4868 00f0 1846     		mov	r0, r3
 4869 00f2 07F10C07 		add	r7, r7, #12
 4870 00f6 BD46     		mov	sp, r7
 4871 00f8 80BC     		pop	{r7}
 4872 00fa 7047     		bx	lr
 4873              		.cfi_endproc
 4874              	.LFE64:
 4876              		.text
 4877              	.Letext0:
 4878              		.file 2 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:19     .text.USBIndexWrite:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:23     .text.USBIndexWrite:00000000 USBIndexWrite
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:93     .text.USBIndexRead:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:97     .text.USBIndexRead:00000000 USBIndexRead
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:166    .text.USBHostSuspend:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:171    .text.USBHostSuspend:00000000 USBHostSuspend
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:208    .text.USBHostReset:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:213    .text.USBHostReset:00000000 USBHostReset
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:269    .text.USBHostResume:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:274    .text.USBHostResume:00000000 USBHostResume
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:330    .text.USBHostSpeedGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:335    .text.USBHostSpeedGet:00000000 USBHostSpeedGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:390    .text.USBIntStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:395    .text.USBIntStatus:00000000 USBIntStatus
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:497    .text.USBIntDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:502    .text.USBIntDisable:00000000 USBIntDisable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:621    .text.USBIntEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:626    .text.USBIntEnable:00000000 USBIntEnable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:739    .text.USBIntDisableControl:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:744    .text.USBIntDisableControl:00000000 USBIntDisableControl
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:814    .text.USBIntEnableControl:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:819    .text.USBIntEnableControl:00000000 USBIntEnableControl
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:887    .text.USBIntStatusControl:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:892    .text.USBIntStatusControl:00000000 USBIntStatusControl
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:976    .text.USBIntDisableEndpoint:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:981    .text.USBIntDisableEndpoint:00000000 USBIntDisableEndpoint
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1043   .text.USBIntEnableEndpoint:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1048   .text.USBIntEnableEndpoint:00000000 USBIntEnableEndpoint
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1106   .text.USBIntStatusEndpoint:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1111   .text.USBIntStatusEndpoint:00000000 USBIntStatusEndpoint
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1156   .text.USBIntRegister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1161   .text.USBIntRegister:00000000 USBIntRegister
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1195   .text.USBIntUnregister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1200   .text.USBIntUnregister:00000000 USBIntUnregister
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1232   .text.USBEndpointStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1237   .text.USBEndpointStatus:00000000 USBEndpointStatus
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1287   .text.USBHostEndpointStatusClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1292   .text.USBHostEndpointStatusClear:00000000 USBHostEndpointStatusClear
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1381   .text.USBDevEndpointStatusClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1386   .text.USBDevEndpointStatusClear:00000000 USBDevEndpointStatusClear
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1513   .text.USBHostEndpointDataToggle:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1518   .text.USBHostEndpointDataToggle:00000000 USBHostEndpointDataToggle
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1662   .text.USBEndpointDataToggleClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1667   .text.USBEndpointDataToggleClear:00000000 USBEndpointDataToggleClear
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1732   .text.USBDevEndpointStall:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1737   .text.USBDevEndpointStall:00000000 USBDevEndpointStall
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1817   .text.USBDevEndpointStallClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1822   .text.USBDevEndpointStallClear:00000000 USBDevEndpointStallClear
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1930   .text.USBDevConnect:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1935   .text.USBDevConnect:00000000 USBDevConnect
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1972   .text.USBDevDisconnect:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:1977   .text.USBDevDisconnect:00000000 USBDevDisconnect
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2014   .text.USBDevAddrSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2019   .text.USBDevAddrSet:00000000 USBDevAddrSet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2052   .text.USBDevAddrGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2057   .text.USBDevAddrGet:00000000 USBDevAddrGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2089   .text.USBHostEndpointConfig:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2094   .text.USBHostEndpointConfig:00000000 USBHostEndpointConfig
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2362   .text.USBDevEndpointConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2367   .text.USBDevEndpointConfigSet:00000000 USBDevEndpointConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2545   .text.USBDevEndpointConfigGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2550   .text.USBDevEndpointConfigGet:00000000 USBDevEndpointConfigGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2745   .text.USBFIFOConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2750   .text.USBFIFOConfigSet:00000000 USBFIFOConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2829   .text.USBFIFOConfigGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2834   .text.USBFIFOConfigGet:00000000 USBFIFOConfigGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2921   .text.USBEndpointDMAEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2926   .text.USBEndpointDMAEnable:00000000 USBEndpointDMAEnable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:2997   .text.USBEndpointDMADisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3002   .text.USBEndpointDMADisable:00000000 USBEndpointDMADisable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3073   .text.USBEndpointDataAvail:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3078   .text.USBEndpointDataAvail:00000000 USBEndpointDataAvail
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3142   .text.USBEndpointDataGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3147   .text.USBEndpointDataGet:00000000 USBEndpointDataGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3260   .text.USBDevEndpointDataAck:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3265   .text.USBDevEndpointDataAck:00000000 USBDevEndpointDataAck
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3332   .text.USBHostEndpointDataAck:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3337   .text.USBHostEndpointDataAck:00000000 USBHostEndpointDataAck
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3396   .text.USBEndpointDataPut:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3401   .text.USBEndpointDataPut:00000000 USBEndpointDataPut
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3491   .text.USBEndpointDataSend:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3496   .text.USBEndpointDataSend:00000000 USBEndpointDataSend
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3567   .text.USBFIFOFlush:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3572   .text.USBFIFOFlush:00000000 USBFIFOFlush
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3679   .text.USBHostRequestIN:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3684   .text.USBHostRequestIN:00000000 USBHostRequestIN
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3732   .text.USBHostRequestINClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3737   .text.USBHostRequestINClear:00000000 USBHostRequestINClear
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3791   .text.USBHostRequestStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3796   .text.USBHostRequestStatus:00000000 USBHostRequestStatus
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3828   .text.USBHostAddrSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3833   .text.USBHostAddrSet:00000000 USBHostAddrSet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3889   .text.USBHostAddrGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3894   .text.USBHostAddrGet:00000000 USBHostAddrGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3948   .text.USBHostHubAddrSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:3953   .text.USBHostHubAddrSet:00000000 USBHostHubAddrSet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4031   .text.USBHostHubAddrGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4036   .text.USBHostHubAddrGet:00000000 USBHostHubAddrGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4090   .text.USBHostPwrConfig:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4095   .text.USBHostPwrConfig:00000000 USBHostPwrConfig
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4147   .text.USBHostPwrFaultEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4152   .text.USBHostPwrFaultEnable:00000000 USBHostPwrFaultEnable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4189   .text.USBHostPwrFaultDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4194   .text.USBHostPwrFaultDisable:00000000 USBHostPwrFaultDisable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4231   .text.USBHostPwrEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4236   .text.USBHostPwrEnable:00000000 USBHostPwrEnable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4273   .text.USBHostPwrDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4278   .text.USBHostPwrDisable:00000000 USBHostPwrDisable
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4315   .text.USBFrameNumberGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4320   .text.USBFrameNumberGet:00000000 USBFrameNumberGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4353   .text.USBOTGSessionRequest:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4358   .text.USBOTGSessionRequest:00000000 USBOTGSessionRequest
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4414   .text.USBFIFOAddrGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4419   .text.USBFIFOAddrGet:00000000 USBFIFOAddrGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4454   .text.USBModeGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4459   .text.USBModeGet:00000000 USBModeGet
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4493   .text.USBEndpointDMAChannel:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4498   .text.USBEndpointDMAChannel:00000000 USBEndpointDMAChannel
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4555   .text.USBHostMode:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4560   .text.USBHostMode:00000000 USBHostMode
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4593   .text.USBDevMode:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4598   .text.USBDevMode:00000000 USBDevMode
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4631   .text.USBOTGMode:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4636   .text.USBOTGMode:00000000 USBOTGMode
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4669   .text.USBPHYPowerOff:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4674   .text.USBPHYPowerOff:00000000 USBPHYPowerOff
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4711   .text.USBPHYPowerOn:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4716   .text.USBPHYPowerOn:00000000 USBPHYPowerOn
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4753   .text.USBNumEndpointsGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccXsEkg2.s:4758   .text.USBNumEndpointsGet:00000000 USBNumEndpointsGet
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
