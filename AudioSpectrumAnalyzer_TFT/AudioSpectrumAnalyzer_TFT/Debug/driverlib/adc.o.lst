   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	g_pucOversampleFactor:
  21 0000 000000   		.space	3
  22 0003 00       		.section	.text.ADCIntRegister,"ax",%progbits
  23              		.align	2
  24              		.global	ADCIntRegister
  25              		.thumb
  26              		.thumb_func
  28              	ADCIntRegister:
  29              	.LFB0:
  30              		.file 1 "C:/StellarisWare/driverlib/adc.c"
   1:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
   2:C:/StellarisWare/driverlib\adc.c **** //
   3:C:/StellarisWare/driverlib\adc.c **** // adc.c - Driver for the ADC.
   4:C:/StellarisWare/driverlib\adc.c **** //
   5:C:/StellarisWare/driverlib\adc.c **** // Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/driverlib\adc.c **** // Software License Agreement
   7:C:/StellarisWare/driverlib\adc.c **** // 
   8:C:/StellarisWare/driverlib\adc.c **** //   Redistribution and use in source and binary forms, with or without
   9:C:/StellarisWare/driverlib\adc.c **** //   modification, are permitted provided that the following conditions
  10:C:/StellarisWare/driverlib\adc.c **** //   are met:
  11:C:/StellarisWare/driverlib\adc.c **** // 
  12:C:/StellarisWare/driverlib\adc.c **** //   Redistributions of source code must retain the above copyright
  13:C:/StellarisWare/driverlib\adc.c **** //   notice, this list of conditions and the following disclaimer.
  14:C:/StellarisWare/driverlib\adc.c **** // 
  15:C:/StellarisWare/driverlib\adc.c **** //   Redistributions in binary form must reproduce the above copyright
  16:C:/StellarisWare/driverlib\adc.c **** //   notice, this list of conditions and the following disclaimer in the
  17:C:/StellarisWare/driverlib\adc.c **** //   documentation and/or other materials provided with the  
  18:C:/StellarisWare/driverlib\adc.c **** //   distribution.
  19:C:/StellarisWare/driverlib\adc.c **** // 
  20:C:/StellarisWare/driverlib\adc.c **** //   Neither the name of Texas Instruments Incorporated nor the names of
  21:C:/StellarisWare/driverlib\adc.c **** //   its contributors may be used to endorse or promote products derived
  22:C:/StellarisWare/driverlib\adc.c **** //   from this software without specific prior written permission.
  23:C:/StellarisWare/driverlib\adc.c **** // 
  24:C:/StellarisWare/driverlib\adc.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:C:/StellarisWare/driverlib\adc.c **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:C:/StellarisWare/driverlib\adc.c **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:C:/StellarisWare/driverlib\adc.c **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:C:/StellarisWare/driverlib\adc.c **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:C:/StellarisWare/driverlib\adc.c **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:C:/StellarisWare/driverlib\adc.c **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:C:/StellarisWare/driverlib\adc.c **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:C:/StellarisWare/driverlib\adc.c **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:C:/StellarisWare/driverlib\adc.c **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:C:/StellarisWare/driverlib\adc.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/StellarisWare/driverlib\adc.c **** // 
  36:C:/StellarisWare/driverlib\adc.c **** // This is part of revision 9107 of the Stellaris Peripheral Driver Library.
  37:C:/StellarisWare/driverlib\adc.c **** //
  38:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  39:C:/StellarisWare/driverlib\adc.c **** 
  40:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  41:C:/StellarisWare/driverlib\adc.c **** //
  42:C:/StellarisWare/driverlib\adc.c **** //! \addtogroup adc_api
  43:C:/StellarisWare/driverlib\adc.c **** //! @{
  44:C:/StellarisWare/driverlib\adc.c **** //
  45:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  46:C:/StellarisWare/driverlib\adc.c **** 
  47:C:/StellarisWare/driverlib\adc.c **** #include "inc/hw_adc.h"
  48:C:/StellarisWare/driverlib\adc.c **** #include "inc/hw_ints.h"
  49:C:/StellarisWare/driverlib\adc.c **** #include "inc/hw_memmap.h"
  50:C:/StellarisWare/driverlib\adc.c **** #include "inc/hw_types.h"
  51:C:/StellarisWare/driverlib\adc.c **** #include "inc/hw_sysctl.h"
  52:C:/StellarisWare/driverlib\adc.c **** #include "driverlib/adc.h"
  53:C:/StellarisWare/driverlib\adc.c **** #include "driverlib/debug.h"
  54:C:/StellarisWare/driverlib\adc.c **** #include "driverlib/interrupt.h"
  55:C:/StellarisWare/driverlib\adc.c **** 
  56:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  57:C:/StellarisWare/driverlib\adc.c **** //
  58:C:/StellarisWare/driverlib\adc.c **** // These defines are used by the ADC driver to simplify access to the ADC
  59:C:/StellarisWare/driverlib\adc.c **** // sequencer's registers.
  60:C:/StellarisWare/driverlib\adc.c **** //
  61:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  62:C:/StellarisWare/driverlib\adc.c **** #define ADC_SEQ                 (ADC_O_SSMUX0)
  63:C:/StellarisWare/driverlib\adc.c **** #define ADC_SEQ_STEP            (ADC_O_SSMUX1 - ADC_O_SSMUX0)
  64:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSMUX               (ADC_O_SSMUX0 - ADC_O_SSMUX0)
  65:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSEMUX              (ADC_O_SSEMUX0 - ADC_O_SSMUX0)
  66:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSCTL               (ADC_O_SSCTL0 - ADC_O_SSMUX0)
  67:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSFIFO              (ADC_O_SSFIFO0 - ADC_O_SSMUX0)
  68:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSFSTAT             (ADC_O_SSFSTAT0 - ADC_O_SSMUX0)
  69:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSOP                (ADC_O_SSOP0 - ADC_O_SSMUX0)
  70:C:/StellarisWare/driverlib\adc.c **** #define ADC_SSDC                (ADC_O_SSDC0 - ADC_O_SSMUX0)
  71:C:/StellarisWare/driverlib\adc.c **** 
  72:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  73:C:/StellarisWare/driverlib\adc.c **** //
  74:C:/StellarisWare/driverlib\adc.c **** // The currently configured software oversampling factor for each of the ADC
  75:C:/StellarisWare/driverlib\adc.c **** // sequencers.
  76:C:/StellarisWare/driverlib\adc.c **** //
  77:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  78:C:/StellarisWare/driverlib\adc.c **** static unsigned char g_pucOversampleFactor[3];
  79:C:/StellarisWare/driverlib\adc.c **** 
  80:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
  81:C:/StellarisWare/driverlib\adc.c **** //
  82:C:/StellarisWare/driverlib\adc.c **** //! Registers an interrupt handler for an ADC interrupt.
  83:C:/StellarisWare/driverlib\adc.c **** //!
  84:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
  85:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
  86:C:/StellarisWare/driverlib\adc.c **** //! \param pfnHandler is a pointer to the function to be called when the
  87:C:/StellarisWare/driverlib\adc.c **** //! ADC sample sequence interrupt occurs.
  88:C:/StellarisWare/driverlib\adc.c **** //!
  89:C:/StellarisWare/driverlib\adc.c **** //! This function sets the handler to be called when a sample sequence
  90:C:/StellarisWare/driverlib\adc.c **** //! interrupt occurs.  This function enables the global interrupt in the
  91:C:/StellarisWare/driverlib\adc.c **** //! interrupt controller; the sequence interrupt must be enabled with
  92:C:/StellarisWare/driverlib\adc.c **** //! ADCIntEnable().  It is the interrupt handler's responsibility to clear the
  93:C:/StellarisWare/driverlib\adc.c **** //! interrupt source via ADCIntClear().
  94:C:/StellarisWare/driverlib\adc.c **** //!
  95:C:/StellarisWare/driverlib\adc.c **** //! \sa IntRegister() for important information about registering interrupt
  96:C:/StellarisWare/driverlib\adc.c **** //! handlers.
  97:C:/StellarisWare/driverlib\adc.c **** //!
  98:C:/StellarisWare/driverlib\adc.c **** //! \return None.
  99:C:/StellarisWare/driverlib\adc.c **** //
 100:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 101:C:/StellarisWare/driverlib\adc.c **** void
 102:C:/StellarisWare/driverlib\adc.c **** ADCIntRegister(unsigned long ulBase, unsigned long ulSequenceNum,
 103:C:/StellarisWare/driverlib\adc.c ****                void (*pfnHandler)(void))
 104:C:/StellarisWare/driverlib\adc.c **** {
  31              		.loc 1 104 0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 24
  34              		@ frame_needed = 1, uses_anonymous_args = 0
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 14, -4
  39              		.cfi_offset 7, -8
  40 0002 86B0     		sub	sp, sp, #24
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
  43 0004 00AF     		add	r7, sp, #0
  44              	.LCFI2:
  45              		.cfi_def_cfa_register 7
  46 0006 F860     		str	r0, [r7, #12]
  47 0008 B960     		str	r1, [r7, #8]
  48 000a 7A60     		str	r2, [r7, #4]
 105:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulInt;
 106:C:/StellarisWare/driverlib\adc.c **** 
 107:C:/StellarisWare/driverlib\adc.c ****     //
 108:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 109:C:/StellarisWare/driverlib\adc.c ****     //
 110:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 111:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 112:C:/StellarisWare/driverlib\adc.c **** 
 113:C:/StellarisWare/driverlib\adc.c ****     //
 114:C:/StellarisWare/driverlib\adc.c ****     // Determine the interrupt to register based on the sequence number.
 115:C:/StellarisWare/driverlib\adc.c ****     //
 116:C:/StellarisWare/driverlib\adc.c ****     ulInt = ((ulBase == ADC0_BASE) ? (INT_ADC0SS0 + ulSequenceNum) :
  49              		.loc 1 116 0
  50 000c FA68     		ldr	r2, [r7, #12]
  51 000e 4FF40043 		mov	r3, #32768
  52 0012 C4F20303 		movt	r3, 16387
  53 0016 9A42     		cmp	r2, r3
  54 0018 03D1     		bne	.L2
  55              		.loc 1 116 0 is_stmt 0 discriminator 1
  56 001a BB68     		ldr	r3, [r7, #8]
  57 001c 03F11E03 		add	r3, r3, #30
  58 0020 02E0     		b	.L3
  59              	.L2:
  60              		.loc 1 116 0 discriminator 2
  61 0022 BB68     		ldr	r3, [r7, #8]
  62 0024 03F14003 		add	r3, r3, #64
  63              	.L3:
  64              		.loc 1 116 0 discriminator 3
  65 0028 7B61     		str	r3, [r7, #20]
 117:C:/StellarisWare/driverlib\adc.c ****              (INT_ADC1SS0 + ulSequenceNum));
 118:C:/StellarisWare/driverlib\adc.c **** 
 119:C:/StellarisWare/driverlib\adc.c ****     //
 120:C:/StellarisWare/driverlib\adc.c ****     // Register the interrupt handler.
 121:C:/StellarisWare/driverlib\adc.c ****     //
 122:C:/StellarisWare/driverlib\adc.c ****     IntRegister(ulInt, pfnHandler);
  66              		.loc 1 122 0 is_stmt 1 discriminator 3
  67 002a 7869     		ldr	r0, [r7, #20]
  68 002c 7968     		ldr	r1, [r7, #4]
  69 002e FFF7FEFF 		bl	IntRegister
 123:C:/StellarisWare/driverlib\adc.c **** 
 124:C:/StellarisWare/driverlib\adc.c ****     //
 125:C:/StellarisWare/driverlib\adc.c ****     // Enable the timer interrupt.
 126:C:/StellarisWare/driverlib\adc.c ****     //
 127:C:/StellarisWare/driverlib\adc.c ****     IntEnable(ulInt);
  70              		.loc 1 127 0 discriminator 3
  71 0032 7869     		ldr	r0, [r7, #20]
  72 0034 FFF7FEFF 		bl	IntEnable
 128:C:/StellarisWare/driverlib\adc.c **** }
  73              		.loc 1 128 0 discriminator 3
  74 0038 07F11807 		add	r7, r7, #24
  75 003c BD46     		mov	sp, r7
  76 003e 80BD     		pop	{r7, pc}
  77              		.cfi_endproc
  78              	.LFE0:
  80              		.section	.text.ADCIntUnregister,"ax",%progbits
  81              		.align	2
  82              		.global	ADCIntUnregister
  83              		.thumb
  84              		.thumb_func
  86              	ADCIntUnregister:
  87              	.LFB1:
 129:C:/StellarisWare/driverlib\adc.c **** 
 130:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 131:C:/StellarisWare/driverlib\adc.c **** //
 132:C:/StellarisWare/driverlib\adc.c **** //! Unregisters the interrupt handler for an ADC interrupt.
 133:C:/StellarisWare/driverlib\adc.c **** //!
 134:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 135:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 136:C:/StellarisWare/driverlib\adc.c **** //!
 137:C:/StellarisWare/driverlib\adc.c **** //! This function unregisters the interrupt handler.  This function disables
 138:C:/StellarisWare/driverlib\adc.c **** //! the global interrupt in the interrupt controller; the sequence interrupt
 139:C:/StellarisWare/driverlib\adc.c **** //! must be disabled via ADCIntDisable().
 140:C:/StellarisWare/driverlib\adc.c **** //!
 141:C:/StellarisWare/driverlib\adc.c **** //! \sa IntRegister() for important information about registering interrupt
 142:C:/StellarisWare/driverlib\adc.c **** //! handlers.
 143:C:/StellarisWare/driverlib\adc.c **** //!
 144:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 145:C:/StellarisWare/driverlib\adc.c **** //
 146:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 147:C:/StellarisWare/driverlib\adc.c **** void
 148:C:/StellarisWare/driverlib\adc.c **** ADCIntUnregister(unsigned long ulBase, unsigned long ulSequenceNum)
 149:C:/StellarisWare/driverlib\adc.c **** {
  88              		.loc 1 149 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 16
  91              		@ frame_needed = 1, uses_anonymous_args = 0
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI3:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 14, -4
  96              		.cfi_offset 7, -8
  97 0002 84B0     		sub	sp, sp, #16
  98              	.LCFI4:
  99              		.cfi_def_cfa_offset 24
 100 0004 00AF     		add	r7, sp, #0
 101              	.LCFI5:
 102              		.cfi_def_cfa_register 7
 103 0006 7860     		str	r0, [r7, #4]
 104 0008 3960     		str	r1, [r7, #0]
 150:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulInt;
 151:C:/StellarisWare/driverlib\adc.c **** 
 152:C:/StellarisWare/driverlib\adc.c ****     //
 153:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 154:C:/StellarisWare/driverlib\adc.c ****     //
 155:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 156:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 157:C:/StellarisWare/driverlib\adc.c **** 
 158:C:/StellarisWare/driverlib\adc.c ****     //
 159:C:/StellarisWare/driverlib\adc.c ****     // Determine the interrupt to unregister based on the sequence number.
 160:C:/StellarisWare/driverlib\adc.c ****     //
 161:C:/StellarisWare/driverlib\adc.c ****     ulInt = ((ulBase == ADC0_BASE) ? (INT_ADC0SS0 + ulSequenceNum) :
 105              		.loc 1 161 0
 106 000a 7A68     		ldr	r2, [r7, #4]
 107 000c 4FF40043 		mov	r3, #32768
 108 0010 C4F20303 		movt	r3, 16387
 109 0014 9A42     		cmp	r2, r3
 110 0016 03D1     		bne	.L5
 111              		.loc 1 161 0 is_stmt 0 discriminator 1
 112 0018 3B68     		ldr	r3, [r7, #0]
 113 001a 03F11E03 		add	r3, r3, #30
 114 001e 02E0     		b	.L6
 115              	.L5:
 116              		.loc 1 161 0 discriminator 2
 117 0020 3B68     		ldr	r3, [r7, #0]
 118 0022 03F14003 		add	r3, r3, #64
 119              	.L6:
 120              		.loc 1 161 0 discriminator 3
 121 0026 FB60     		str	r3, [r7, #12]
 162:C:/StellarisWare/driverlib\adc.c ****              (INT_ADC1SS0 + ulSequenceNum));
 163:C:/StellarisWare/driverlib\adc.c **** 
 164:C:/StellarisWare/driverlib\adc.c ****     //
 165:C:/StellarisWare/driverlib\adc.c ****     // Disable the interrupt.
 166:C:/StellarisWare/driverlib\adc.c ****     //
 167:C:/StellarisWare/driverlib\adc.c ****     IntDisable(ulInt);
 122              		.loc 1 167 0 is_stmt 1 discriminator 3
 123 0028 F868     		ldr	r0, [r7, #12]
 124 002a FFF7FEFF 		bl	IntDisable
 168:C:/StellarisWare/driverlib\adc.c **** 
 169:C:/StellarisWare/driverlib\adc.c ****     //
 170:C:/StellarisWare/driverlib\adc.c ****     // Unregister the interrupt handler.
 171:C:/StellarisWare/driverlib\adc.c ****     //
 172:C:/StellarisWare/driverlib\adc.c ****     IntUnregister(ulInt);
 125              		.loc 1 172 0 discriminator 3
 126 002e F868     		ldr	r0, [r7, #12]
 127 0030 FFF7FEFF 		bl	IntUnregister
 173:C:/StellarisWare/driverlib\adc.c **** }
 128              		.loc 1 173 0 discriminator 3
 129 0034 07F11007 		add	r7, r7, #16
 130 0038 BD46     		mov	sp, r7
 131 003a 80BD     		pop	{r7, pc}
 132              		.cfi_endproc
 133              	.LFE1:
 135              		.section	.text.ADCIntDisable,"ax",%progbits
 136              		.align	2
 137              		.global	ADCIntDisable
 138              		.thumb
 139              		.thumb_func
 141              	ADCIntDisable:
 142              	.LFB2:
 174:C:/StellarisWare/driverlib\adc.c **** 
 175:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 176:C:/StellarisWare/driverlib\adc.c **** //
 177:C:/StellarisWare/driverlib\adc.c **** //! Disables a sample sequence interrupt.
 178:C:/StellarisWare/driverlib\adc.c **** //!
 179:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 180:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 181:C:/StellarisWare/driverlib\adc.c **** //!
 182:C:/StellarisWare/driverlib\adc.c **** //! This function disables the requested sample sequence interrupt.
 183:C:/StellarisWare/driverlib\adc.c **** //!
 184:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 185:C:/StellarisWare/driverlib\adc.c **** //
 186:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 187:C:/StellarisWare/driverlib\adc.c **** void
 188:C:/StellarisWare/driverlib\adc.c **** ADCIntDisable(unsigned long ulBase, unsigned long ulSequenceNum)
 189:C:/StellarisWare/driverlib\adc.c **** {
 143              		.loc 1 189 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 8
 146              		@ frame_needed = 1, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148 0000 80B4     		push	{r7}
 149              	.LCFI6:
 150              		.cfi_def_cfa_offset 4
 151              		.cfi_offset 7, -4
 152 0002 83B0     		sub	sp, sp, #12
 153              	.LCFI7:
 154              		.cfi_def_cfa_offset 16
 155 0004 00AF     		add	r7, sp, #0
 156              	.LCFI8:
 157              		.cfi_def_cfa_register 7
 158 0006 7860     		str	r0, [r7, #4]
 159 0008 3960     		str	r1, [r7, #0]
 190:C:/StellarisWare/driverlib\adc.c ****     //
 191:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 192:C:/StellarisWare/driverlib\adc.c ****     //
 193:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 194:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 195:C:/StellarisWare/driverlib\adc.c **** 
 196:C:/StellarisWare/driverlib\adc.c ****     //
 197:C:/StellarisWare/driverlib\adc.c ****     // Disable this sample sequence interrupt.
 198:C:/StellarisWare/driverlib\adc.c ****     //
 199:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_IM) &= ~(1 << ulSequenceNum);
 160              		.loc 1 199 0
 161 000a 7B68     		ldr	r3, [r7, #4]
 162 000c 03F10803 		add	r3, r3, #8
 163 0010 7A68     		ldr	r2, [r7, #4]
 164 0012 02F10802 		add	r2, r2, #8
 165 0016 1168     		ldr	r1, [r2, #0]
 166 0018 3A68     		ldr	r2, [r7, #0]
 167 001a 4FF00100 		mov	r0, #1
 168 001e 00FA02F2 		lsl	r2, r0, r2
 169 0022 6FEA0202 		mvn	r2, r2
 170 0026 0A40     		ands	r2, r2, r1
 171 0028 1A60     		str	r2, [r3, #0]
 200:C:/StellarisWare/driverlib\adc.c **** }
 172              		.loc 1 200 0
 173 002a 07F10C07 		add	r7, r7, #12
 174 002e BD46     		mov	sp, r7
 175 0030 80BC     		pop	{r7}
 176 0032 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE2:
 180              		.section	.text.ADCIntEnable,"ax",%progbits
 181              		.align	2
 182              		.global	ADCIntEnable
 183              		.thumb
 184              		.thumb_func
 186              	ADCIntEnable:
 187              	.LFB3:
 201:C:/StellarisWare/driverlib\adc.c **** 
 202:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 203:C:/StellarisWare/driverlib\adc.c **** //
 204:C:/StellarisWare/driverlib\adc.c **** //! Enables a sample sequence interrupt.
 205:C:/StellarisWare/driverlib\adc.c **** //!
 206:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 207:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 208:C:/StellarisWare/driverlib\adc.c **** //!
 209:C:/StellarisWare/driverlib\adc.c **** //! This function enables the requested sample sequence interrupt.  Any
 210:C:/StellarisWare/driverlib\adc.c **** //! outstanding interrupts are cleared before enabling the sample sequence
 211:C:/StellarisWare/driverlib\adc.c **** //! interrupt.
 212:C:/StellarisWare/driverlib\adc.c **** //!
 213:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 214:C:/StellarisWare/driverlib\adc.c **** //
 215:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 216:C:/StellarisWare/driverlib\adc.c **** void
 217:C:/StellarisWare/driverlib\adc.c **** ADCIntEnable(unsigned long ulBase, unsigned long ulSequenceNum)
 218:C:/StellarisWare/driverlib\adc.c **** {
 188              		.loc 1 218 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI9:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI10:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI11:
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 204 0008 3960     		str	r1, [r7, #0]
 219:C:/StellarisWare/driverlib\adc.c ****     //
 220:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 221:C:/StellarisWare/driverlib\adc.c ****     //
 222:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 223:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 224:C:/StellarisWare/driverlib\adc.c **** 
 225:C:/StellarisWare/driverlib\adc.c ****     //
 226:C:/StellarisWare/driverlib\adc.c ****     // Clear any outstanding interrupts on this sample sequence.
 227:C:/StellarisWare/driverlib\adc.c ****     //
 228:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_ISC) = 1 << ulSequenceNum;
 205              		.loc 1 228 0
 206 000a 7B68     		ldr	r3, [r7, #4]
 207 000c 03F10C03 		add	r3, r3, #12
 208 0010 3A68     		ldr	r2, [r7, #0]
 209 0012 4FF00101 		mov	r1, #1
 210 0016 01FA02F2 		lsl	r2, r1, r2
 211 001a 1A60     		str	r2, [r3, #0]
 229:C:/StellarisWare/driverlib\adc.c **** 
 230:C:/StellarisWare/driverlib\adc.c ****     //
 231:C:/StellarisWare/driverlib\adc.c ****     // Enable this sample sequence interrupt.
 232:C:/StellarisWare/driverlib\adc.c ****     //
 233:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_IM) |= 1 << ulSequenceNum;
 212              		.loc 1 233 0
 213 001c 7B68     		ldr	r3, [r7, #4]
 214 001e 03F10803 		add	r3, r3, #8
 215 0022 7A68     		ldr	r2, [r7, #4]
 216 0024 02F10802 		add	r2, r2, #8
 217 0028 1168     		ldr	r1, [r2, #0]
 218 002a 3A68     		ldr	r2, [r7, #0]
 219 002c 4FF00100 		mov	r0, #1
 220 0030 00FA02F2 		lsl	r2, r0, r2
 221 0034 0A43     		orrs	r2, r2, r1
 222 0036 1A60     		str	r2, [r3, #0]
 234:C:/StellarisWare/driverlib\adc.c **** }
 223              		.loc 1 234 0
 224 0038 07F10C07 		add	r7, r7, #12
 225 003c BD46     		mov	sp, r7
 226 003e 80BC     		pop	{r7}
 227 0040 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE3:
 231 0042 00BF     		.section	.text.ADCIntStatus,"ax",%progbits
 232              		.align	2
 233              		.global	ADCIntStatus
 234              		.thumb
 235              		.thumb_func
 237              	ADCIntStatus:
 238              	.LFB4:
 235:C:/StellarisWare/driverlib\adc.c **** 
 236:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 237:C:/StellarisWare/driverlib\adc.c **** //
 238:C:/StellarisWare/driverlib\adc.c **** //! Gets the current interrupt status.
 239:C:/StellarisWare/driverlib\adc.c **** //!
 240:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 241:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 242:C:/StellarisWare/driverlib\adc.c **** //! \param bMasked is false if the raw interrupt status is required and true if
 243:C:/StellarisWare/driverlib\adc.c **** //! the masked interrupt status is required.
 244:C:/StellarisWare/driverlib\adc.c **** //!
 245:C:/StellarisWare/driverlib\adc.c **** //! This function returns the interrupt status for the specified sample
 246:C:/StellarisWare/driverlib\adc.c **** //! sequence. Either the raw interrupt status or the status of interrupts that
 247:C:/StellarisWare/driverlib\adc.c **** //! are allowed to reflect to the processor can be returned.
 248:C:/StellarisWare/driverlib\adc.c **** //!
 249:C:/StellarisWare/driverlib\adc.c **** //! \return The current raw or masked interrupt status.
 250:C:/StellarisWare/driverlib\adc.c **** //
 251:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 252:C:/StellarisWare/driverlib\adc.c **** unsigned long
 253:C:/StellarisWare/driverlib\adc.c **** ADCIntStatus(unsigned long ulBase, unsigned long ulSequenceNum,
 254:C:/StellarisWare/driverlib\adc.c ****              tBoolean bMasked)
 255:C:/StellarisWare/driverlib\adc.c **** {
 239              		.loc 1 255 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 0000 80B4     		push	{r7}
 245              	.LCFI12:
 246              		.cfi_def_cfa_offset 4
 247              		.cfi_offset 7, -4
 248 0002 87B0     		sub	sp, sp, #28
 249              	.LCFI13:
 250              		.cfi_def_cfa_offset 32
 251 0004 00AF     		add	r7, sp, #0
 252              	.LCFI14:
 253              		.cfi_def_cfa_register 7
 254 0006 F860     		str	r0, [r7, #12]
 255 0008 B960     		str	r1, [r7, #8]
 256 000a 1346     		mov	r3, r2
 257 000c FB71     		strb	r3, [r7, #7]
 256:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulTemp;
 257:C:/StellarisWare/driverlib\adc.c **** 
 258:C:/StellarisWare/driverlib\adc.c ****     //
 259:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 260:C:/StellarisWare/driverlib\adc.c ****     //
 261:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 262:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 263:C:/StellarisWare/driverlib\adc.c **** 
 264:C:/StellarisWare/driverlib\adc.c ****     //
 265:C:/StellarisWare/driverlib\adc.c ****     // Return either the interrupt status or the raw interrupt status as
 266:C:/StellarisWare/driverlib\adc.c ****     // requested.
 267:C:/StellarisWare/driverlib\adc.c ****     //
 268:C:/StellarisWare/driverlib\adc.c ****     if(bMasked)
 258              		.loc 1 268 0
 259 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 260 0010 002B     		cmp	r3, #0
 261 0012 0BD0     		beq	.L10
 269:C:/StellarisWare/driverlib\adc.c ****     {
 270:C:/StellarisWare/driverlib\adc.c ****         ulTemp = HWREG(ulBase + ADC_O_ISC) & (0x10001 << ulSequenceNum);
 262              		.loc 1 270 0
 263 0014 FB68     		ldr	r3, [r7, #12]
 264 0016 03F10C03 		add	r3, r3, #12
 265 001a 1A68     		ldr	r2, [r3, #0]
 266 001c BB68     		ldr	r3, [r7, #8]
 267 001e 4FF00111 		mov	r1, #65537
 268 0022 01FA03F3 		lsl	r3, r1, r3
 269 0026 1340     		ands	r3, r3, r2
 270 0028 7B61     		str	r3, [r7, #20]
 271 002a 1FE0     		b	.L11
 272              	.L10:
 271:C:/StellarisWare/driverlib\adc.c ****     }
 272:C:/StellarisWare/driverlib\adc.c ****     else
 273:C:/StellarisWare/driverlib\adc.c ****     {
 274:C:/StellarisWare/driverlib\adc.c ****         ulTemp = HWREG(ulBase + ADC_O_RIS) & (0x10000 | (1 << ulSequenceNum));
 273              		.loc 1 274 0
 274 002c FB68     		ldr	r3, [r7, #12]
 275 002e 03F10403 		add	r3, r3, #4
 276 0032 1A68     		ldr	r2, [r3, #0]
 277 0034 BB68     		ldr	r3, [r7, #8]
 278 0036 4FF00101 		mov	r1, #1
 279 003a 01FA03F3 		lsl	r3, r1, r3
 280 003e 43F48033 		orr	r3, r3, #65536
 281 0042 1340     		ands	r3, r3, r2
 282 0044 7B61     		str	r3, [r7, #20]
 275:C:/StellarisWare/driverlib\adc.c **** 
 276:C:/StellarisWare/driverlib\adc.c ****         //
 277:C:/StellarisWare/driverlib\adc.c ****         // If the digital comparator status bit is set, reflect it to the
 278:C:/StellarisWare/driverlib\adc.c ****         // appropriate sequence bit.
 279:C:/StellarisWare/driverlib\adc.c ****         //
 280:C:/StellarisWare/driverlib\adc.c ****         if(ulTemp & 0x10000)
 283              		.loc 1 280 0
 284 0046 7B69     		ldr	r3, [r7, #20]
 285 0048 03F48033 		and	r3, r3, #65536
 286 004c 002B     		cmp	r3, #0
 287 004e 0DD0     		beq	.L11
 281:C:/StellarisWare/driverlib\adc.c ****         {
 282:C:/StellarisWare/driverlib\adc.c ****             ulTemp |= 0xF0000;
 288              		.loc 1 282 0
 289 0050 7B69     		ldr	r3, [r7, #20]
 290 0052 43F47023 		orr	r3, r3, #983040
 291 0056 7B61     		str	r3, [r7, #20]
 283:C:/StellarisWare/driverlib\adc.c ****             ulTemp &= ~(0x10000 << ulSequenceNum);
 292              		.loc 1 283 0
 293 0058 BB68     		ldr	r3, [r7, #8]
 294 005a 4FF48032 		mov	r2, #65536
 295 005e 02FA03F3 		lsl	r3, r2, r3
 296 0062 6FEA0303 		mvn	r3, r3
 297 0066 7A69     		ldr	r2, [r7, #20]
 298 0068 1340     		ands	r3, r3, r2
 299 006a 7B61     		str	r3, [r7, #20]
 300              	.L11:
 284:C:/StellarisWare/driverlib\adc.c ****         }
 285:C:/StellarisWare/driverlib\adc.c ****     }
 286:C:/StellarisWare/driverlib\adc.c **** 
 287:C:/StellarisWare/driverlib\adc.c ****     //
 288:C:/StellarisWare/driverlib\adc.c ****     // Return the interrupt status
 289:C:/StellarisWare/driverlib\adc.c ****     //
 290:C:/StellarisWare/driverlib\adc.c ****     return(ulTemp);
 301              		.loc 1 290 0
 302 006c 7B69     		ldr	r3, [r7, #20]
 291:C:/StellarisWare/driverlib\adc.c **** }
 303              		.loc 1 291 0
 304 006e 1846     		mov	r0, r3
 305 0070 07F11C07 		add	r7, r7, #28
 306 0074 BD46     		mov	sp, r7
 307 0076 80BC     		pop	{r7}
 308 0078 7047     		bx	lr
 309              		.cfi_endproc
 310              	.LFE4:
 312 007a 00BF     		.section	.text.ADCIntClear,"ax",%progbits
 313              		.align	2
 314              		.global	ADCIntClear
 315              		.thumb
 316              		.thumb_func
 318              	ADCIntClear:
 319              	.LFB5:
 292:C:/StellarisWare/driverlib\adc.c **** 
 293:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 294:C:/StellarisWare/driverlib\adc.c **** //
 295:C:/StellarisWare/driverlib\adc.c **** //! Clears sample sequence interrupt source.
 296:C:/StellarisWare/driverlib\adc.c **** //!
 297:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 298:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 299:C:/StellarisWare/driverlib\adc.c **** //!
 300:C:/StellarisWare/driverlib\adc.c **** //! The specified sample sequence interrupt is cleared, so that it no longer
 301:C:/StellarisWare/driverlib\adc.c **** //! asserts.  This function must be called in the interrupt handler to keep
 302:C:/StellarisWare/driverlib\adc.c **** //! the interrupt from being triggered again immediately upon exit.
 303:C:/StellarisWare/driverlib\adc.c **** //!
 304:C:/StellarisWare/driverlib\adc.c **** //! \note Because there is a write buffer in the Cortex-M processor, it may
 305:C:/StellarisWare/driverlib\adc.c **** //! take several clock cycles before the interrupt source is actually cleared.
 306:C:/StellarisWare/driverlib\adc.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
 307:C:/StellarisWare/driverlib\adc.c **** //! the interrupt handler (as opposed to the very last action) to avoid
 308:C:/StellarisWare/driverlib\adc.c **** //! returning from the interrupt handler before the interrupt source is
 309:C:/StellarisWare/driverlib\adc.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
 310:C:/StellarisWare/driverlib\adc.c **** //! being immediately reentered (because the interrupt controller still sees
 311:C:/StellarisWare/driverlib\adc.c **** //! the interrupt source asserted).
 312:C:/StellarisWare/driverlib\adc.c **** //!
 313:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 314:C:/StellarisWare/driverlib\adc.c **** //
 315:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 316:C:/StellarisWare/driverlib\adc.c **** void
 317:C:/StellarisWare/driverlib\adc.c **** ADCIntClear(unsigned long ulBase, unsigned long ulSequenceNum)
 318:C:/StellarisWare/driverlib\adc.c **** {
 320              		.loc 1 318 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 8
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325 0000 80B4     		push	{r7}
 326              	.LCFI15:
 327              		.cfi_def_cfa_offset 4
 328              		.cfi_offset 7, -4
 329 0002 83B0     		sub	sp, sp, #12
 330              	.LCFI16:
 331              		.cfi_def_cfa_offset 16
 332 0004 00AF     		add	r7, sp, #0
 333              	.LCFI17:
 334              		.cfi_def_cfa_register 7
 335 0006 7860     		str	r0, [r7, #4]
 336 0008 3960     		str	r1, [r7, #0]
 319:C:/StellarisWare/driverlib\adc.c ****     //
 320:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 321:C:/StellarisWare/driverlib\adc.c ****     //
 322:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 323:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 324:C:/StellarisWare/driverlib\adc.c **** 
 325:C:/StellarisWare/driverlib\adc.c ****     //
 326:C:/StellarisWare/driverlib\adc.c ****     // Clear the interrupt.
 327:C:/StellarisWare/driverlib\adc.c ****     //
 328:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_ISC) = 1 << ulSequenceNum;
 337              		.loc 1 328 0
 338 000a 7B68     		ldr	r3, [r7, #4]
 339 000c 03F10C03 		add	r3, r3, #12
 340 0010 3A68     		ldr	r2, [r7, #0]
 341 0012 4FF00101 		mov	r1, #1
 342 0016 01FA02F2 		lsl	r2, r1, r2
 343 001a 1A60     		str	r2, [r3, #0]
 329:C:/StellarisWare/driverlib\adc.c **** }
 344              		.loc 1 329 0
 345 001c 07F10C07 		add	r7, r7, #12
 346 0020 BD46     		mov	sp, r7
 347 0022 80BC     		pop	{r7}
 348 0024 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE5:
 352 0026 00BF     		.section	.text.ADCSequenceEnable,"ax",%progbits
 353              		.align	2
 354              		.global	ADCSequenceEnable
 355              		.thumb
 356              		.thumb_func
 358              	ADCSequenceEnable:
 359              	.LFB6:
 330:C:/StellarisWare/driverlib\adc.c **** 
 331:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 332:C:/StellarisWare/driverlib\adc.c **** //
 333:C:/StellarisWare/driverlib\adc.c **** //! Enables a sample sequence.
 334:C:/StellarisWare/driverlib\adc.c **** //!
 335:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 336:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 337:C:/StellarisWare/driverlib\adc.c **** //!
 338:C:/StellarisWare/driverlib\adc.c **** //! Allows the specified sample sequence to be captured when its trigger is
 339:C:/StellarisWare/driverlib\adc.c **** //! detected.  A sample sequence must be configured before it is enabled.
 340:C:/StellarisWare/driverlib\adc.c **** //!
 341:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 342:C:/StellarisWare/driverlib\adc.c **** //
 343:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 344:C:/StellarisWare/driverlib\adc.c **** void
 345:C:/StellarisWare/driverlib\adc.c **** ADCSequenceEnable(unsigned long ulBase, unsigned long ulSequenceNum)
 346:C:/StellarisWare/driverlib\adc.c **** {
 360              		.loc 1 346 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0000 80B4     		push	{r7}
 366              	.LCFI18:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 0002 83B0     		sub	sp, sp, #12
 370              	.LCFI19:
 371              		.cfi_def_cfa_offset 16
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI20:
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
 376 0008 3960     		str	r1, [r7, #0]
 347:C:/StellarisWare/driverlib\adc.c ****     //
 348:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 349:C:/StellarisWare/driverlib\adc.c ****     //
 350:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 351:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 352:C:/StellarisWare/driverlib\adc.c **** 
 353:C:/StellarisWare/driverlib\adc.c ****     //
 354:C:/StellarisWare/driverlib\adc.c ****     // Enable the specified sequence.
 355:C:/StellarisWare/driverlib\adc.c ****     //
 356:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_ACTSS) |= 1 << ulSequenceNum;
 377              		.loc 1 356 0
 378 000a 7B68     		ldr	r3, [r7, #4]
 379 000c 7A68     		ldr	r2, [r7, #4]
 380 000e 1168     		ldr	r1, [r2, #0]
 381 0010 3A68     		ldr	r2, [r7, #0]
 382 0012 4FF00100 		mov	r0, #1
 383 0016 00FA02F2 		lsl	r2, r0, r2
 384 001a 0A43     		orrs	r2, r2, r1
 385 001c 1A60     		str	r2, [r3, #0]
 357:C:/StellarisWare/driverlib\adc.c **** }
 386              		.loc 1 357 0
 387 001e 07F10C07 		add	r7, r7, #12
 388 0022 BD46     		mov	sp, r7
 389 0024 80BC     		pop	{r7}
 390 0026 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE6:
 394              		.section	.text.ADCSequenceDisable,"ax",%progbits
 395              		.align	2
 396              		.global	ADCSequenceDisable
 397              		.thumb
 398              		.thumb_func
 400              	ADCSequenceDisable:
 401              	.LFB7:
 358:C:/StellarisWare/driverlib\adc.c **** 
 359:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 360:C:/StellarisWare/driverlib\adc.c **** //
 361:C:/StellarisWare/driverlib\adc.c **** //! Disables a sample sequence.
 362:C:/StellarisWare/driverlib\adc.c **** //!
 363:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 364:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 365:C:/StellarisWare/driverlib\adc.c **** //!
 366:C:/StellarisWare/driverlib\adc.c **** //! Prevents the specified sample sequence from being captured when its trigger
 367:C:/StellarisWare/driverlib\adc.c **** //! is detected.  A sample sequence should be disabled before it is configured.
 368:C:/StellarisWare/driverlib\adc.c **** //!
 369:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 370:C:/StellarisWare/driverlib\adc.c **** //
 371:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 372:C:/StellarisWare/driverlib\adc.c **** void
 373:C:/StellarisWare/driverlib\adc.c **** ADCSequenceDisable(unsigned long ulBase, unsigned long ulSequenceNum)
 374:C:/StellarisWare/driverlib\adc.c **** {
 402              		.loc 1 374 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406              		@ link register save eliminated.
 407 0000 80B4     		push	{r7}
 408              	.LCFI21:
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 0002 83B0     		sub	sp, sp, #12
 412              	.LCFI22:
 413              		.cfi_def_cfa_offset 16
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI23:
 416              		.cfi_def_cfa_register 7
 417 0006 7860     		str	r0, [r7, #4]
 418 0008 3960     		str	r1, [r7, #0]
 375:C:/StellarisWare/driverlib\adc.c ****     //
 376:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 377:C:/StellarisWare/driverlib\adc.c ****     //
 378:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 379:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 380:C:/StellarisWare/driverlib\adc.c **** 
 381:C:/StellarisWare/driverlib\adc.c ****     //
 382:C:/StellarisWare/driverlib\adc.c ****     // Disable the specified sequences.
 383:C:/StellarisWare/driverlib\adc.c ****     //
 384:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_ACTSS) &= ~(1 << ulSequenceNum);
 419              		.loc 1 384 0
 420 000a 7B68     		ldr	r3, [r7, #4]
 421 000c 7A68     		ldr	r2, [r7, #4]
 422 000e 1168     		ldr	r1, [r2, #0]
 423 0010 3A68     		ldr	r2, [r7, #0]
 424 0012 4FF00100 		mov	r0, #1
 425 0016 00FA02F2 		lsl	r2, r0, r2
 426 001a 6FEA0202 		mvn	r2, r2
 427 001e 0A40     		ands	r2, r2, r1
 428 0020 1A60     		str	r2, [r3, #0]
 385:C:/StellarisWare/driverlib\adc.c **** }
 429              		.loc 1 385 0
 430 0022 07F10C07 		add	r7, r7, #12
 431 0026 BD46     		mov	sp, r7
 432 0028 80BC     		pop	{r7}
 433 002a 7047     		bx	lr
 434              		.cfi_endproc
 435              	.LFE7:
 437              		.section	.text.ADCSequenceConfigure,"ax",%progbits
 438              		.align	2
 439              		.global	ADCSequenceConfigure
 440              		.thumb
 441              		.thumb_func
 443              	ADCSequenceConfigure:
 444              	.LFB8:
 386:C:/StellarisWare/driverlib\adc.c **** 
 387:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 388:C:/StellarisWare/driverlib\adc.c **** //
 389:C:/StellarisWare/driverlib\adc.c **** //! Configures the trigger source and priority of a sample sequence.
 390:C:/StellarisWare/driverlib\adc.c **** //!
 391:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 392:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 393:C:/StellarisWare/driverlib\adc.c **** //! \param ulTrigger is the trigger source that initiates the sample sequence;
 394:C:/StellarisWare/driverlib\adc.c **** //! must be one of the \b ADC_TRIGGER_* values.
 395:C:/StellarisWare/driverlib\adc.c **** //! \param ulPriority is the relative priority of the sample sequence with
 396:C:/StellarisWare/driverlib\adc.c **** //! respect to the other sample sequences.
 397:C:/StellarisWare/driverlib\adc.c **** //!
 398:C:/StellarisWare/driverlib\adc.c **** //! This function configures the initiation criteria for a sample sequence.
 399:C:/StellarisWare/driverlib\adc.c **** //! Valid sample sequencers range from zero to three; sequencer zero captures
 400:C:/StellarisWare/driverlib\adc.c **** //! up to eight samples, sequencers one and two capture up to four samples,
 401:C:/StellarisWare/driverlib\adc.c **** //! and sequencer three captures a single sample.  The trigger condition and
 402:C:/StellarisWare/driverlib\adc.c **** //! priority (with respect to other sample sequencer execution) are set.
 403:C:/StellarisWare/driverlib\adc.c **** //!
 404:C:/StellarisWare/driverlib\adc.c **** //! The \e ulTrigger parameter can take on the following values:
 405:C:/StellarisWare/driverlib\adc.c **** //!
 406:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_PROCESSOR - A trigger generated by the processor, via the
 407:C:/StellarisWare/driverlib\adc.c **** //!                              ADCProcessorTrigger() function.
 408:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_COMP0 - A trigger generated by the first analog
 409:C:/StellarisWare/driverlib\adc.c **** //!                          comparator; configured with ComparatorConfigure().
 410:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_COMP1 - A trigger generated by the second analog
 411:C:/StellarisWare/driverlib\adc.c **** //!                          comparator; configured with ComparatorConfigure().
 412:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_COMP2 - A trigger generated by the third analog
 413:C:/StellarisWare/driverlib\adc.c **** //!                          comparator; configured with ComparatorConfigure().
 414:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_EXTERNAL - A trigger generated by an input from the Port
 415:C:/StellarisWare/driverlib\adc.c **** //!                             B4 pin. Note that some microcontrollers can
 416:C:/StellarisWare/driverlib\adc.c **** //!                             select from any GPIO using the
 417:C:/StellarisWare/driverlib\adc.c **** //!                             GPIOADCTriggerEnable() function.
 418:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_TIMER - A trigger generated by a timer; configured with
 419:C:/StellarisWare/driverlib\adc.c **** //!                          TimerControlTrigger().
 420:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_PWM0 - A trigger generated by the first PWM generator;
 421:C:/StellarisWare/driverlib\adc.c **** //!                         configured with PWMGenIntTrigEnable().
 422:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_PWM1 - A trigger generated by the second PWM generator;
 423:C:/StellarisWare/driverlib\adc.c **** //!                         configured with PWMGenIntTrigEnable().
 424:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_PWM2 - A trigger generated by the third PWM generator;
 425:C:/StellarisWare/driverlib\adc.c **** //!                         configured with PWMGenIntTrigEnable().
 426:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_PWM3 - A trigger generated by the fourth PWM generator;
 427:C:/StellarisWare/driverlib\adc.c **** //!                         configured with PWMGenIntTrigEnable().
 428:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_TRIGGER_ALWAYS - A trigger that is always asserted, causing the
 429:C:/StellarisWare/driverlib\adc.c **** //!                           sample sequence to capture repeatedly (so long as
 430:C:/StellarisWare/driverlib\adc.c **** //!                           there is not a higher priority source active).
 431:C:/StellarisWare/driverlib\adc.c **** //!
 432:C:/StellarisWare/driverlib\adc.c **** //! Note that not all trigger sources are available on all Stellaris family
 433:C:/StellarisWare/driverlib\adc.c **** //! members; consult the data sheet for the device in question to determine the
 434:C:/StellarisWare/driverlib\adc.c **** //! availability of triggers.
 435:C:/StellarisWare/driverlib\adc.c **** //!
 436:C:/StellarisWare/driverlib\adc.c **** //! The \e ulPriority parameter is a value between 0 and 3, where 0 represents
 437:C:/StellarisWare/driverlib\adc.c **** //! the highest priority and 3 the lowest.  Note that when programming the
 438:C:/StellarisWare/driverlib\adc.c **** //! priority among a set of sample sequences, each must have unique priority;
 439:C:/StellarisWare/driverlib\adc.c **** //! it is up to the caller to guarantee the uniqueness of the priorities.
 440:C:/StellarisWare/driverlib\adc.c **** //!
 441:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 442:C:/StellarisWare/driverlib\adc.c **** //
 443:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 444:C:/StellarisWare/driverlib\adc.c **** void
 445:C:/StellarisWare/driverlib\adc.c **** ADCSequenceConfigure(unsigned long ulBase, unsigned long ulSequenceNum,
 446:C:/StellarisWare/driverlib\adc.c ****                      unsigned long ulTrigger, unsigned long ulPriority)
 447:C:/StellarisWare/driverlib\adc.c **** {
 445              		.loc 1 447 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 16
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450 0000 80B4     		push	{r7}
 451              	.LCFI24:
 452              		.cfi_def_cfa_offset 4
 453              		.cfi_offset 7, -4
 454 0002 85B0     		sub	sp, sp, #20
 455              	.LCFI25:
 456              		.cfi_def_cfa_offset 24
 457 0004 00AF     		add	r7, sp, #0
 458              	.LCFI26:
 459              		.cfi_def_cfa_register 7
 460 0006 F860     		str	r0, [r7, #12]
 461 0008 B960     		str	r1, [r7, #8]
 462 000a 7A60     		str	r2, [r7, #4]
 463 000c 3B60     		str	r3, [r7, #0]
 448:C:/StellarisWare/driverlib\adc.c ****     //
 449:C:/StellarisWare/driverlib\adc.c ****     // Check the arugments.
 450:C:/StellarisWare/driverlib\adc.c ****     //
 451:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 452:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 453:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulTrigger == ADC_TRIGGER_PROCESSOR) ||
 454:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_COMP0) ||
 455:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_COMP1) ||
 456:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_COMP2) ||
 457:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_EXTERNAL) ||
 458:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_TIMER) ||
 459:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_PWM0) ||
 460:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_PWM1) ||
 461:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_PWM2) ||
 462:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_PWM3) ||
 463:C:/StellarisWare/driverlib\adc.c ****            (ulTrigger == ADC_TRIGGER_ALWAYS));
 464:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulPriority < 4);
 465:C:/StellarisWare/driverlib\adc.c **** 
 466:C:/StellarisWare/driverlib\adc.c ****     //
 467:C:/StellarisWare/driverlib\adc.c ****     // Compute the shift for the bits that control this sample sequence.
 468:C:/StellarisWare/driverlib\adc.c ****     //
 469:C:/StellarisWare/driverlib\adc.c ****     ulSequenceNum *= 4;
 464              		.loc 1 469 0
 465 000e BB68     		ldr	r3, [r7, #8]
 466 0010 4FEA8303 		lsl	r3, r3, #2
 467 0014 BB60     		str	r3, [r7, #8]
 470:C:/StellarisWare/driverlib\adc.c **** 
 471:C:/StellarisWare/driverlib\adc.c ****     //
 472:C:/StellarisWare/driverlib\adc.c ****     // Set the trigger event for this sample sequence.
 473:C:/StellarisWare/driverlib\adc.c ****     //
 474:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
 468              		.loc 1 474 0
 469 0016 FB68     		ldr	r3, [r7, #12]
 470 0018 03F11403 		add	r3, r3, #20
 471 001c FA68     		ldr	r2, [r7, #12]
 472 001e 02F11402 		add	r2, r2, #20
 473 0022 1168     		ldr	r1, [r2, #0]
 475:C:/StellarisWare/driverlib\adc.c ****                                    ~(0xf << ulSequenceNum)) |
 474              		.loc 1 475 0
 475 0024 BA68     		ldr	r2, [r7, #8]
 476 0026 4FF00F00 		mov	r0, #15
 477 002a 00FA02F2 		lsl	r2, r0, r2
 478 002e 6FEA0202 		mvn	r2, r2
 474:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
 479              		.loc 1 474 0
 480 0032 1140     		ands	r1, r1, r2
 476:C:/StellarisWare/driverlib\adc.c ****                                   ((ulTrigger & 0xf) << ulSequenceNum));
 481              		.loc 1 476 0
 482 0034 7A68     		ldr	r2, [r7, #4]
 483 0036 02F00F00 		and	r0, r2, #15
 484 003a BA68     		ldr	r2, [r7, #8]
 485 003c 00FA02F2 		lsl	r2, r0, r2
 475:C:/StellarisWare/driverlib\adc.c ****                                    ~(0xf << ulSequenceNum)) |
 486              		.loc 1 475 0
 487 0040 0A43     		orrs	r2, r2, r1
 474:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_EMUX) = ((HWREG(ulBase + ADC_O_EMUX) &
 488              		.loc 1 474 0
 489 0042 1A60     		str	r2, [r3, #0]
 477:C:/StellarisWare/driverlib\adc.c **** 
 478:C:/StellarisWare/driverlib\adc.c ****     //
 479:C:/StellarisWare/driverlib\adc.c ****     // Set the priority for this sample sequence.
 480:C:/StellarisWare/driverlib\adc.c ****     //
 481:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
 490              		.loc 1 481 0
 491 0044 FB68     		ldr	r3, [r7, #12]
 492 0046 03F12003 		add	r3, r3, #32
 493 004a FA68     		ldr	r2, [r7, #12]
 494 004c 02F12002 		add	r2, r2, #32
 495 0050 1168     		ldr	r1, [r2, #0]
 482:C:/StellarisWare/driverlib\adc.c ****                                     ~(0xf << ulSequenceNum)) |
 496              		.loc 1 482 0
 497 0052 BA68     		ldr	r2, [r7, #8]
 498 0054 4FF00F00 		mov	r0, #15
 499 0058 00FA02F2 		lsl	r2, r0, r2
 500 005c 6FEA0202 		mvn	r2, r2
 481:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
 501              		.loc 1 481 0
 502 0060 1140     		ands	r1, r1, r2
 483:C:/StellarisWare/driverlib\adc.c ****                                    ((ulPriority & 0x3) << ulSequenceNum));
 503              		.loc 1 483 0
 504 0062 3A68     		ldr	r2, [r7, #0]
 505 0064 02F00300 		and	r0, r2, #3
 506 0068 BA68     		ldr	r2, [r7, #8]
 507 006a 00FA02F2 		lsl	r2, r0, r2
 482:C:/StellarisWare/driverlib\adc.c ****                                     ~(0xf << ulSequenceNum)) |
 508              		.loc 1 482 0
 509 006e 0A43     		orrs	r2, r2, r1
 481:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_SSPRI) = ((HWREG(ulBase + ADC_O_SSPRI) &
 510              		.loc 1 481 0
 511 0070 1A60     		str	r2, [r3, #0]
 484:C:/StellarisWare/driverlib\adc.c **** }
 512              		.loc 1 484 0
 513 0072 07F11407 		add	r7, r7, #20
 514 0076 BD46     		mov	sp, r7
 515 0078 80BC     		pop	{r7}
 516 007a 7047     		bx	lr
 517              		.cfi_endproc
 518              	.LFE8:
 520              		.section	.text.ADCSequenceStepConfigure,"ax",%progbits
 521              		.align	2
 522              		.global	ADCSequenceStepConfigure
 523              		.thumb
 524              		.thumb_func
 526              	ADCSequenceStepConfigure:
 527              	.LFB9:
 485:C:/StellarisWare/driverlib\adc.c **** 
 486:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 487:C:/StellarisWare/driverlib\adc.c **** //
 488:C:/StellarisWare/driverlib\adc.c **** //! Configure a step of the sample sequencer.
 489:C:/StellarisWare/driverlib\adc.c **** //!
 490:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 491:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 492:C:/StellarisWare/driverlib\adc.c **** //! \param ulStep is the step to be configured.
 493:C:/StellarisWare/driverlib\adc.c **** //! \param ulConfig is the configuration of this step; must be a logical OR of
 494:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_CTL_TS, \b ADC_CTL_IE, \b ADC_CTL_END, \b ADC_CTL_D, one of the
 495:C:/StellarisWare/driverlib\adc.c **** //! input channel selects (\b ADC_CTL_CH0 through \b ADC_CTL_CH23), and one of
 496:C:/StellarisWare/driverlib\adc.c **** //! the digital comparator selects (\b ADC_CTL_CMP0 through \b ADC_CTL_CMP7).
 497:C:/StellarisWare/driverlib\adc.c **** //!
 498:C:/StellarisWare/driverlib\adc.c **** //! This function configures the ADC for one step of a sample sequence.  The
 499:C:/StellarisWare/driverlib\adc.c **** //! ADC can be configured for single-ended or differential operation
 500:C:/StellarisWare/driverlib\adc.c **** //! (the \b ADC_CTL_D bit selects differential operation when set), the
 501:C:/StellarisWare/driverlib\adc.c **** //! channel to be sampled can be chosen (the \b ADC_CTL_CH0 through
 502:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_CTL_CH23 values), and the internal temperature sensor can be
 503:C:/StellarisWare/driverlib\adc.c **** //! selected (the \b ADC_CTL_TS bit).  Additionally, this step can be defined
 504:C:/StellarisWare/driverlib\adc.c **** //! as the last in the sequence (the \b ADC_CTL_END bit) and it can be
 505:C:/StellarisWare/driverlib\adc.c **** //! configured to cause an interrupt when the step is complete (the
 506:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_CTL_IE bit).  If the digital comparators are present on the device,
 507:C:/StellarisWare/driverlib\adc.c **** //! this step may also be configured to send the ADC sample to the selected
 508:C:/StellarisWare/driverlib\adc.c **** //! comparator using \b ADC_CTL_CMP0 through \b ADC_CTL_CMP7. The configuration
 509:C:/StellarisWare/driverlib\adc.c **** //! is used by the ADC at the appropriate time when the trigger for
 510:C:/StellarisWare/driverlib\adc.c **** //! this sequence occurs.
 511:C:/StellarisWare/driverlib\adc.c **** //!
 512:C:/StellarisWare/driverlib\adc.c **** //! \note If the Digital Comparator is present and enabled using the
 513:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_CTL_CMP0 through \b ADC_CTL_CMP7 selects, the ADC sample is NOT
 514:C:/StellarisWare/driverlib\adc.c **** //! written into the ADC sequence data FIFO.
 515:C:/StellarisWare/driverlib\adc.c **** //!
 516:C:/StellarisWare/driverlib\adc.c **** //! The \e ulStep parameter determines the order in which the samples are
 517:C:/StellarisWare/driverlib\adc.c **** //! captured by the ADC when the trigger occurs.  It can range from zero to
 518:C:/StellarisWare/driverlib\adc.c **** //! seven for the first sample sequencer, from zero to three for the second and
 519:C:/StellarisWare/driverlib\adc.c **** //! third sample sequencer, and can only be zero for the fourth sample
 520:C:/StellarisWare/driverlib\adc.c **** //! sequencer.
 521:C:/StellarisWare/driverlib\adc.c **** //!
 522:C:/StellarisWare/driverlib\adc.c **** //! Differential mode only works with adjacent channel pairs (for example, 0
 523:C:/StellarisWare/driverlib\adc.c **** //! and 1).  The channel select must be the number of the channel pair to
 524:C:/StellarisWare/driverlib\adc.c **** //! sample (for example, \b ADC_CTL_CH0 for 0 and 1, or \b ADC_CTL_CH1 for 2
 525:C:/StellarisWare/driverlib\adc.c **** //! and 3) or undefined results are returned by the ADC.  Additionally, if
 526:C:/StellarisWare/driverlib\adc.c **** //! differential mode is selected when the temperature sensor is being sampled,
 527:C:/StellarisWare/driverlib\adc.c **** //! undefined results are returned by the ADC.
 528:C:/StellarisWare/driverlib\adc.c **** //!
 529:C:/StellarisWare/driverlib\adc.c **** //! It is the responsibility of the caller to ensure that a valid configuration
 530:C:/StellarisWare/driverlib\adc.c **** //! is specified; this function does not check the validity of the specified
 531:C:/StellarisWare/driverlib\adc.c **** //! configuration.
 532:C:/StellarisWare/driverlib\adc.c **** //!
 533:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 534:C:/StellarisWare/driverlib\adc.c **** //
 535:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 536:C:/StellarisWare/driverlib\adc.c **** void
 537:C:/StellarisWare/driverlib\adc.c **** ADCSequenceStepConfigure(unsigned long ulBase, unsigned long ulSequenceNum,
 538:C:/StellarisWare/driverlib\adc.c ****                          unsigned long ulStep, unsigned long ulConfig)
 539:C:/StellarisWare/driverlib\adc.c **** {
 528              		.loc 1 539 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 24
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533 0000 80B4     		push	{r7}
 534              	.LCFI27:
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 7, -4
 537 0002 87B0     		sub	sp, sp, #28
 538              	.LCFI28:
 539              		.cfi_def_cfa_offset 32
 540 0004 00AF     		add	r7, sp, #0
 541              	.LCFI29:
 542              		.cfi_def_cfa_register 7
 543 0006 F860     		str	r0, [r7, #12]
 544 0008 B960     		str	r1, [r7, #8]
 545 000a 7A60     		str	r2, [r7, #4]
 546 000c 3B60     		str	r3, [r7, #0]
 540:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulTemp;
 541:C:/StellarisWare/driverlib\adc.c **** 
 542:C:/StellarisWare/driverlib\adc.c ****     //
 543:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 544:C:/StellarisWare/driverlib\adc.c ****     //
 545:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 546:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 547:C:/StellarisWare/driverlib\adc.c ****     ASSERT(((ulSequenceNum == 0) && (ulStep < 8)) ||
 548:C:/StellarisWare/driverlib\adc.c ****            ((ulSequenceNum == 1) && (ulStep < 4)) ||
 549:C:/StellarisWare/driverlib\adc.c ****            ((ulSequenceNum == 2) && (ulStep < 4)) ||
 550:C:/StellarisWare/driverlib\adc.c ****            ((ulSequenceNum == 3) && (ulStep < 1)));
 551:C:/StellarisWare/driverlib\adc.c **** 
 552:C:/StellarisWare/driverlib\adc.c ****     //
 553:C:/StellarisWare/driverlib\adc.c ****     // Get the offset of the sequence to be configured.
 554:C:/StellarisWare/driverlib\adc.c ****     //
 555:C:/StellarisWare/driverlib\adc.c ****     ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
 547              		.loc 1 555 0
 548 000e BB68     		ldr	r3, [r7, #8]
 549 0010 03F10203 		add	r3, r3, #2
 550 0014 4FEA4313 		lsl	r3, r3, #5
 551 0018 FA68     		ldr	r2, [r7, #12]
 552 001a D318     		adds	r3, r2, r3
 553 001c FB60     		str	r3, [r7, #12]
 556:C:/StellarisWare/driverlib\adc.c **** 
 557:C:/StellarisWare/driverlib\adc.c ****     //
 558:C:/StellarisWare/driverlib\adc.c ****     // Compute the shift for the bits that control this step.
 559:C:/StellarisWare/driverlib\adc.c ****     //
 560:C:/StellarisWare/driverlib\adc.c ****     ulStep *= 4;
 554              		.loc 1 560 0
 555 001e 7B68     		ldr	r3, [r7, #4]
 556 0020 4FEA8303 		lsl	r3, r3, #2
 557 0024 7B60     		str	r3, [r7, #4]
 561:C:/StellarisWare/driverlib\adc.c **** 
 562:C:/StellarisWare/driverlib\adc.c ****     //
 563:C:/StellarisWare/driverlib\adc.c ****     // Set the analog mux value for this step.
 564:C:/StellarisWare/driverlib\adc.c ****     //
 565:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 558              		.loc 1 565 0
 559 0026 FB68     		ldr	r3, [r7, #12]
 560 0028 FA68     		ldr	r2, [r7, #12]
 561 002a 1168     		ldr	r1, [r2, #0]
 566:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 562              		.loc 1 566 0
 563 002c 7A68     		ldr	r2, [r7, #4]
 564 002e 4FF00F00 		mov	r0, #15
 565 0032 00FA02F2 		lsl	r2, r0, r2
 566 0036 6FEA0202 		mvn	r2, r2
 565:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 567              		.loc 1 565 0
 568 003a 1140     		ands	r1, r1, r2
 567:C:/StellarisWare/driverlib\adc.c ****                                  ((ulConfig & 0x0f) << ulStep));
 569              		.loc 1 567 0
 570 003c 3A68     		ldr	r2, [r7, #0]
 571 003e 02F00F00 		and	r0, r2, #15
 572 0042 7A68     		ldr	r2, [r7, #4]
 573 0044 00FA02F2 		lsl	r2, r0, r2
 566:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 574              		.loc 1 566 0
 575 0048 0A43     		orrs	r2, r2, r1
 565:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 576              		.loc 1 565 0
 577 004a 1A60     		str	r2, [r3, #0]
 568:C:/StellarisWare/driverlib\adc.c **** 
 569:C:/StellarisWare/driverlib\adc.c ****     //
 570:C:/StellarisWare/driverlib\adc.c ****     // Set the upper bits of the analog mux value for this step.
 571:C:/StellarisWare/driverlib\adc.c ****     //
 572:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 578              		.loc 1 572 0
 579 004c FB68     		ldr	r3, [r7, #12]
 580 004e 03F11803 		add	r3, r3, #24
 581 0052 FA68     		ldr	r2, [r7, #12]
 582 0054 02F11802 		add	r2, r2, #24
 583 0058 1168     		ldr	r1, [r2, #0]
 573:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 584              		.loc 1 573 0
 585 005a 7A68     		ldr	r2, [r7, #4]
 586 005c 4FF00F00 		mov	r0, #15
 587 0060 00FA02F2 		lsl	r2, r0, r2
 588 0064 6FEA0202 		mvn	r2, r2
 572:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 589              		.loc 1 572 0
 590 0068 1140     		ands	r1, r1, r2
 574:C:/StellarisWare/driverlib\adc.c ****                                   (((ulConfig & 0xf00) >> 8) << ulStep));
 591              		.loc 1 574 0
 592 006a 3A68     		ldr	r2, [r7, #0]
 593 006c 02F47062 		and	r2, r2, #3840
 594 0070 4FEA1220 		lsr	r0, r2, #8
 595 0074 7A68     		ldr	r2, [r7, #4]
 596 0076 00FA02F2 		lsl	r2, r0, r2
 573:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 597              		.loc 1 573 0
 598 007a 0A43     		orrs	r2, r2, r1
 572:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 599              		.loc 1 572 0
 600 007c 1A60     		str	r2, [r3, #0]
 575:C:/StellarisWare/driverlib\adc.c **** 
 576:C:/StellarisWare/driverlib\adc.c ****     //
 577:C:/StellarisWare/driverlib\adc.c ****     // Set the control value for this step.
 578:C:/StellarisWare/driverlib\adc.c ****     //
 579:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 601              		.loc 1 579 0
 602 007e FB68     		ldr	r3, [r7, #12]
 603 0080 03F10403 		add	r3, r3, #4
 604 0084 FA68     		ldr	r2, [r7, #12]
 605 0086 02F10402 		add	r2, r2, #4
 606 008a 1168     		ldr	r1, [r2, #0]
 580:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 607              		.loc 1 580 0
 608 008c 7A68     		ldr	r2, [r7, #4]
 609 008e 4FF00F00 		mov	r0, #15
 610 0092 00FA02F2 		lsl	r2, r0, r2
 611 0096 6FEA0202 		mvn	r2, r2
 579:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 612              		.loc 1 579 0
 613 009a 1140     		ands	r1, r1, r2
 581:C:/StellarisWare/driverlib\adc.c ****                                  (((ulConfig & 0xf0) >> 4) << ulStep));
 614              		.loc 1 581 0
 615 009c 3A68     		ldr	r2, [r7, #0]
 616 009e 02F0F002 		and	r2, r2, #240
 617 00a2 4FEA1210 		lsr	r0, r2, #4
 618 00a6 7A68     		ldr	r2, [r7, #4]
 619 00a8 00FA02F2 		lsl	r2, r0, r2
 580:C:/StellarisWare/driverlib\adc.c ****                                   ~(0x0000000f << ulStep)) |
 620              		.loc 1 580 0
 621 00ac 0A43     		orrs	r2, r2, r1
 579:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 622              		.loc 1 579 0
 623 00ae 1A60     		str	r2, [r3, #0]
 582:C:/StellarisWare/driverlib\adc.c **** 
 583:C:/StellarisWare/driverlib\adc.c ****     //
 584:C:/StellarisWare/driverlib\adc.c ****     // Enable digital comparator if specified in the ulConfig bit-fields.
 585:C:/StellarisWare/driverlib\adc.c ****     //
 586:C:/StellarisWare/driverlib\adc.c ****     if(ulConfig & 0x000F0000)
 624              		.loc 1 586 0
 625 00b0 3B68     		ldr	r3, [r7, #0]
 626 00b2 03F47023 		and	r3, r3, #983040
 627 00b6 002B     		cmp	r3, #0
 628 00b8 31D0     		beq	.L17
 587:C:/StellarisWare/driverlib\adc.c ****     {
 588:C:/StellarisWare/driverlib\adc.c ****         //
 589:C:/StellarisWare/driverlib\adc.c ****         // Program the comparator for the specified step.
 590:C:/StellarisWare/driverlib\adc.c ****         //
 591:C:/StellarisWare/driverlib\adc.c ****         ulTemp = HWREG(ulBase + ADC_SSDC);
 629              		.loc 1 591 0
 630 00ba FB68     		ldr	r3, [r7, #12]
 631 00bc 03F11403 		add	r3, r3, #20
 632 00c0 1B68     		ldr	r3, [r3, #0]
 633 00c2 7B61     		str	r3, [r7, #20]
 592:C:/StellarisWare/driverlib\adc.c ****         ulTemp &= ~(0xF << ulStep);
 634              		.loc 1 592 0
 635 00c4 7B68     		ldr	r3, [r7, #4]
 636 00c6 4FF00F02 		mov	r2, #15
 637 00ca 02FA03F3 		lsl	r3, r2, r3
 638 00ce 6FEA0303 		mvn	r3, r3
 639 00d2 7A69     		ldr	r2, [r7, #20]
 640 00d4 1340     		ands	r3, r3, r2
 641 00d6 7B61     		str	r3, [r7, #20]
 593:C:/StellarisWare/driverlib\adc.c ****         ulTemp |= (((ulConfig & 0x00070000) >> 16) << ulStep);
 642              		.loc 1 593 0
 643 00d8 3B68     		ldr	r3, [r7, #0]
 644 00da 03F4E023 		and	r3, r3, #458752
 645 00de 4FEA1342 		lsr	r2, r3, #16
 646 00e2 7B68     		ldr	r3, [r7, #4]
 647 00e4 02FA03F3 		lsl	r3, r2, r3
 648 00e8 7A69     		ldr	r2, [r7, #20]
 649 00ea 1343     		orrs	r3, r3, r2
 650 00ec 7B61     		str	r3, [r7, #20]
 594:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSDC) = ulTemp;
 651              		.loc 1 594 0
 652 00ee FB68     		ldr	r3, [r7, #12]
 653 00f0 03F11403 		add	r3, r3, #20
 654 00f4 7A69     		ldr	r2, [r7, #20]
 655 00f6 1A60     		str	r2, [r3, #0]
 595:C:/StellarisWare/driverlib\adc.c **** 
 596:C:/StellarisWare/driverlib\adc.c ****         //
 597:C:/StellarisWare/driverlib\adc.c ****         // Enable the comparator.
 598:C:/StellarisWare/driverlib\adc.c ****         //
 599:C:/StellarisWare/driverlib\adc.c ****         ulTemp = HWREG(ulBase + ADC_SSOP);
 656              		.loc 1 599 0
 657 00f8 FB68     		ldr	r3, [r7, #12]
 658 00fa 03F11003 		add	r3, r3, #16
 659 00fe 1B68     		ldr	r3, [r3, #0]
 660 0100 7B61     		str	r3, [r7, #20]
 600:C:/StellarisWare/driverlib\adc.c ****         ulTemp |= (1 << ulStep);
 661              		.loc 1 600 0
 662 0102 7B68     		ldr	r3, [r7, #4]
 663 0104 4FF00102 		mov	r2, #1
 664 0108 02FA03F3 		lsl	r3, r2, r3
 665 010c 7A69     		ldr	r2, [r7, #20]
 666 010e 1343     		orrs	r3, r3, r2
 667 0110 7B61     		str	r3, [r7, #20]
 601:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSOP) = ulTemp;
 668              		.loc 1 601 0
 669 0112 FB68     		ldr	r3, [r7, #12]
 670 0114 03F11003 		add	r3, r3, #16
 671 0118 7A69     		ldr	r2, [r7, #20]
 672 011a 1A60     		str	r2, [r3, #0]
 673 011c 13E0     		b	.L16
 674              	.L17:
 602:C:/StellarisWare/driverlib\adc.c ****     }
 603:C:/StellarisWare/driverlib\adc.c **** 
 604:C:/StellarisWare/driverlib\adc.c ****     //
 605:C:/StellarisWare/driverlib\adc.c ****     // Disable digital comparator if not specified.
 606:C:/StellarisWare/driverlib\adc.c ****     //
 607:C:/StellarisWare/driverlib\adc.c ****     else
 608:C:/StellarisWare/driverlib\adc.c ****     {
 609:C:/StellarisWare/driverlib\adc.c ****         ulTemp = HWREG(ulBase + ADC_SSOP);
 675              		.loc 1 609 0
 676 011e FB68     		ldr	r3, [r7, #12]
 677 0120 03F11003 		add	r3, r3, #16
 678 0124 1B68     		ldr	r3, [r3, #0]
 679 0126 7B61     		str	r3, [r7, #20]
 610:C:/StellarisWare/driverlib\adc.c ****         ulTemp &= ~(1 << ulStep);
 680              		.loc 1 610 0
 681 0128 7B68     		ldr	r3, [r7, #4]
 682 012a 4FF00102 		mov	r2, #1
 683 012e 02FA03F3 		lsl	r3, r2, r3
 684 0132 6FEA0303 		mvn	r3, r3
 685 0136 7A69     		ldr	r2, [r7, #20]
 686 0138 1340     		ands	r3, r3, r2
 687 013a 7B61     		str	r3, [r7, #20]
 611:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSOP) = ulTemp;
 688              		.loc 1 611 0
 689 013c FB68     		ldr	r3, [r7, #12]
 690 013e 03F11003 		add	r3, r3, #16
 691 0142 7A69     		ldr	r2, [r7, #20]
 692 0144 1A60     		str	r2, [r3, #0]
 693              	.L16:
 612:C:/StellarisWare/driverlib\adc.c ****     }
 613:C:/StellarisWare/driverlib\adc.c **** }
 694              		.loc 1 613 0
 695 0146 07F11C07 		add	r7, r7, #28
 696 014a BD46     		mov	sp, r7
 697 014c 80BC     		pop	{r7}
 698 014e 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE9:
 702              		.section	.text.ADCSequenceOverflow,"ax",%progbits
 703              		.align	2
 704              		.global	ADCSequenceOverflow
 705              		.thumb
 706              		.thumb_func
 708              	ADCSequenceOverflow:
 709              	.LFB10:
 614:C:/StellarisWare/driverlib\adc.c **** 
 615:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 616:C:/StellarisWare/driverlib\adc.c **** //
 617:C:/StellarisWare/driverlib\adc.c **** //! Determines if a sample sequence overflow occurred.
 618:C:/StellarisWare/driverlib\adc.c **** //!
 619:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 620:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 621:C:/StellarisWare/driverlib\adc.c **** //!
 622:C:/StellarisWare/driverlib\adc.c **** //! This function determines if a sample sequence overflow has occurred.
 623:C:/StellarisWare/driverlib\adc.c **** //! Overflow happens if the captured samples are not read from the FIFO before
 624:C:/StellarisWare/driverlib\adc.c **** //! the next trigger occurs.
 625:C:/StellarisWare/driverlib\adc.c **** //!
 626:C:/StellarisWare/driverlib\adc.c **** //! \return Returns zero if there was not an overflow, and non-zero if there
 627:C:/StellarisWare/driverlib\adc.c **** //! was.
 628:C:/StellarisWare/driverlib\adc.c **** //
 629:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 630:C:/StellarisWare/driverlib\adc.c **** long
 631:C:/StellarisWare/driverlib\adc.c **** ADCSequenceOverflow(unsigned long ulBase, unsigned long ulSequenceNum)
 632:C:/StellarisWare/driverlib\adc.c **** {
 710              		.loc 1 632 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715 0000 80B4     		push	{r7}
 716              	.LCFI30:
 717              		.cfi_def_cfa_offset 4
 718              		.cfi_offset 7, -4
 719 0002 83B0     		sub	sp, sp, #12
 720              	.LCFI31:
 721              		.cfi_def_cfa_offset 16
 722 0004 00AF     		add	r7, sp, #0
 723              	.LCFI32:
 724              		.cfi_def_cfa_register 7
 725 0006 7860     		str	r0, [r7, #4]
 726 0008 3960     		str	r1, [r7, #0]
 633:C:/StellarisWare/driverlib\adc.c ****     //
 634:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 635:C:/StellarisWare/driverlib\adc.c ****     //
 636:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 637:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 638:C:/StellarisWare/driverlib\adc.c **** 
 639:C:/StellarisWare/driverlib\adc.c ****     //
 640:C:/StellarisWare/driverlib\adc.c ****     // Determine if there was an overflow on this sequence.
 641:C:/StellarisWare/driverlib\adc.c ****     //
 642:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_OSTAT) & (1 << ulSequenceNum));
 727              		.loc 1 642 0
 728 000a 7B68     		ldr	r3, [r7, #4]
 729 000c 03F11003 		add	r3, r3, #16
 730 0010 1A68     		ldr	r2, [r3, #0]
 731 0012 3B68     		ldr	r3, [r7, #0]
 732 0014 4FF00101 		mov	r1, #1
 733 0018 01FA03F3 		lsl	r3, r1, r3
 734 001c 1340     		ands	r3, r3, r2
 643:C:/StellarisWare/driverlib\adc.c **** }
 735              		.loc 1 643 0
 736 001e 1846     		mov	r0, r3
 737 0020 07F10C07 		add	r7, r7, #12
 738 0024 BD46     		mov	sp, r7
 739 0026 80BC     		pop	{r7}
 740 0028 7047     		bx	lr
 741              		.cfi_endproc
 742              	.LFE10:
 744 002a 00BF     		.section	.text.ADCSequenceOverflowClear,"ax",%progbits
 745              		.align	2
 746              		.global	ADCSequenceOverflowClear
 747              		.thumb
 748              		.thumb_func
 750              	ADCSequenceOverflowClear:
 751              	.LFB11:
 644:C:/StellarisWare/driverlib\adc.c **** 
 645:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 646:C:/StellarisWare/driverlib\adc.c **** //
 647:C:/StellarisWare/driverlib\adc.c **** //! Clears the overflow condition on a sample sequence.
 648:C:/StellarisWare/driverlib\adc.c **** //!
 649:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 650:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 651:C:/StellarisWare/driverlib\adc.c **** //!
 652:C:/StellarisWare/driverlib\adc.c **** //! This function clears an overflow condition on one of the sample sequences.
 653:C:/StellarisWare/driverlib\adc.c **** //! The overflow condition must be cleared in order to detect a subsequent
 654:C:/StellarisWare/driverlib\adc.c **** //! overflow condition (it otherwise causes no harm).
 655:C:/StellarisWare/driverlib\adc.c **** //!
 656:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 657:C:/StellarisWare/driverlib\adc.c **** //
 658:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 659:C:/StellarisWare/driverlib\adc.c **** void
 660:C:/StellarisWare/driverlib\adc.c **** ADCSequenceOverflowClear(unsigned long ulBase, unsigned long ulSequenceNum)
 661:C:/StellarisWare/driverlib\adc.c **** {
 752              		.loc 1 661 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 8
 755              		@ frame_needed = 1, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757 0000 80B4     		push	{r7}
 758              	.LCFI33:
 759              		.cfi_def_cfa_offset 4
 760              		.cfi_offset 7, -4
 761 0002 83B0     		sub	sp, sp, #12
 762              	.LCFI34:
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              	.LCFI35:
 766              		.cfi_def_cfa_register 7
 767 0006 7860     		str	r0, [r7, #4]
 768 0008 3960     		str	r1, [r7, #0]
 662:C:/StellarisWare/driverlib\adc.c ****     //
 663:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 664:C:/StellarisWare/driverlib\adc.c ****     //
 665:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 666:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 667:C:/StellarisWare/driverlib\adc.c **** 
 668:C:/StellarisWare/driverlib\adc.c ****     //
 669:C:/StellarisWare/driverlib\adc.c ****     // Clear the overflow condition for this sequence.
 670:C:/StellarisWare/driverlib\adc.c ****     //
 671:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_OSTAT) = 1 << ulSequenceNum;
 769              		.loc 1 671 0
 770 000a 7B68     		ldr	r3, [r7, #4]
 771 000c 03F11003 		add	r3, r3, #16
 772 0010 3A68     		ldr	r2, [r7, #0]
 773 0012 4FF00101 		mov	r1, #1
 774 0016 01FA02F2 		lsl	r2, r1, r2
 775 001a 1A60     		str	r2, [r3, #0]
 672:C:/StellarisWare/driverlib\adc.c **** }
 776              		.loc 1 672 0
 777 001c 07F10C07 		add	r7, r7, #12
 778 0020 BD46     		mov	sp, r7
 779 0022 80BC     		pop	{r7}
 780 0024 7047     		bx	lr
 781              		.cfi_endproc
 782              	.LFE11:
 784 0026 00BF     		.section	.text.ADCSequenceUnderflow,"ax",%progbits
 785              		.align	2
 786              		.global	ADCSequenceUnderflow
 787              		.thumb
 788              		.thumb_func
 790              	ADCSequenceUnderflow:
 791              	.LFB12:
 673:C:/StellarisWare/driverlib\adc.c **** 
 674:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 675:C:/StellarisWare/driverlib\adc.c **** //
 676:C:/StellarisWare/driverlib\adc.c **** //! Determines if a sample sequence underflow occurred.
 677:C:/StellarisWare/driverlib\adc.c **** //!
 678:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 679:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 680:C:/StellarisWare/driverlib\adc.c **** //!
 681:C:/StellarisWare/driverlib\adc.c **** //! This function determines if a sample sequence underflow has occurred.
 682:C:/StellarisWare/driverlib\adc.c **** //! Underflow happens if too many samples are read from the FIFO.
 683:C:/StellarisWare/driverlib\adc.c **** //!
 684:C:/StellarisWare/driverlib\adc.c **** //! \return Returns zero if there was not an underflow, and non-zero if there
 685:C:/StellarisWare/driverlib\adc.c **** //! was.
 686:C:/StellarisWare/driverlib\adc.c **** //
 687:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 688:C:/StellarisWare/driverlib\adc.c **** long
 689:C:/StellarisWare/driverlib\adc.c **** ADCSequenceUnderflow(unsigned long ulBase, unsigned long ulSequenceNum)
 690:C:/StellarisWare/driverlib\adc.c **** {
 792              		.loc 1 690 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 8
 795              		@ frame_needed = 1, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797 0000 80B4     		push	{r7}
 798              	.LCFI36:
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 7, -4
 801 0002 83B0     		sub	sp, sp, #12
 802              	.LCFI37:
 803              		.cfi_def_cfa_offset 16
 804 0004 00AF     		add	r7, sp, #0
 805              	.LCFI38:
 806              		.cfi_def_cfa_register 7
 807 0006 7860     		str	r0, [r7, #4]
 808 0008 3960     		str	r1, [r7, #0]
 691:C:/StellarisWare/driverlib\adc.c ****     //
 692:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 693:C:/StellarisWare/driverlib\adc.c ****     //
 694:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 695:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 696:C:/StellarisWare/driverlib\adc.c **** 
 697:C:/StellarisWare/driverlib\adc.c ****     //
 698:C:/StellarisWare/driverlib\adc.c ****     // Determine if there was an underflow on this sequence.
 699:C:/StellarisWare/driverlib\adc.c ****     //
 700:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_USTAT) & (1 << ulSequenceNum));
 809              		.loc 1 700 0
 810 000a 7B68     		ldr	r3, [r7, #4]
 811 000c 03F11803 		add	r3, r3, #24
 812 0010 1A68     		ldr	r2, [r3, #0]
 813 0012 3B68     		ldr	r3, [r7, #0]
 814 0014 4FF00101 		mov	r1, #1
 815 0018 01FA03F3 		lsl	r3, r1, r3
 816 001c 1340     		ands	r3, r3, r2
 701:C:/StellarisWare/driverlib\adc.c **** }
 817              		.loc 1 701 0
 818 001e 1846     		mov	r0, r3
 819 0020 07F10C07 		add	r7, r7, #12
 820 0024 BD46     		mov	sp, r7
 821 0026 80BC     		pop	{r7}
 822 0028 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE12:
 826 002a 00BF     		.section	.text.ADCSequenceUnderflowClear,"ax",%progbits
 827              		.align	2
 828              		.global	ADCSequenceUnderflowClear
 829              		.thumb
 830              		.thumb_func
 832              	ADCSequenceUnderflowClear:
 833              	.LFB13:
 702:C:/StellarisWare/driverlib\adc.c **** 
 703:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 704:C:/StellarisWare/driverlib\adc.c **** //
 705:C:/StellarisWare/driverlib\adc.c **** //! Clears the underflow condition on a sample sequence.
 706:C:/StellarisWare/driverlib\adc.c **** //!
 707:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 708:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 709:C:/StellarisWare/driverlib\adc.c **** //!
 710:C:/StellarisWare/driverlib\adc.c **** //! This function clears an underflow condition on one of the sample sequencers.
 711:C:/StellarisWare/driverlib\adc.c **** //! The underflow condition must be cleared in order to detect a subsequent
 712:C:/StellarisWare/driverlib\adc.c **** //! underflow condition (it otherwise causes no harm).
 713:C:/StellarisWare/driverlib\adc.c **** //!
 714:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 715:C:/StellarisWare/driverlib\adc.c **** //
 716:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 717:C:/StellarisWare/driverlib\adc.c **** void
 718:C:/StellarisWare/driverlib\adc.c **** ADCSequenceUnderflowClear(unsigned long ulBase, unsigned long ulSequenceNum)
 719:C:/StellarisWare/driverlib\adc.c **** {
 834              		.loc 1 719 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 8
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 0000 80B4     		push	{r7}
 840              	.LCFI39:
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 0002 83B0     		sub	sp, sp, #12
 844              	.LCFI40:
 845              		.cfi_def_cfa_offset 16
 846 0004 00AF     		add	r7, sp, #0
 847              	.LCFI41:
 848              		.cfi_def_cfa_register 7
 849 0006 7860     		str	r0, [r7, #4]
 850 0008 3960     		str	r1, [r7, #0]
 720:C:/StellarisWare/driverlib\adc.c ****     //
 721:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 722:C:/StellarisWare/driverlib\adc.c ****     //
 723:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 724:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 725:C:/StellarisWare/driverlib\adc.c **** 
 726:C:/StellarisWare/driverlib\adc.c ****     //
 727:C:/StellarisWare/driverlib\adc.c ****     // Clear the underflow condition for this sequence.
 728:C:/StellarisWare/driverlib\adc.c ****     //
 729:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_USTAT) = 1 << ulSequenceNum;
 851              		.loc 1 729 0
 852 000a 7B68     		ldr	r3, [r7, #4]
 853 000c 03F11803 		add	r3, r3, #24
 854 0010 3A68     		ldr	r2, [r7, #0]
 855 0012 4FF00101 		mov	r1, #1
 856 0016 01FA02F2 		lsl	r2, r1, r2
 857 001a 1A60     		str	r2, [r3, #0]
 730:C:/StellarisWare/driverlib\adc.c **** }
 858              		.loc 1 730 0
 859 001c 07F10C07 		add	r7, r7, #12
 860 0020 BD46     		mov	sp, r7
 861 0022 80BC     		pop	{r7}
 862 0024 7047     		bx	lr
 863              		.cfi_endproc
 864              	.LFE13:
 866 0026 00BF     		.section	.text.ADCSequenceDataGet,"ax",%progbits
 867              		.align	2
 868              		.global	ADCSequenceDataGet
 869              		.thumb
 870              		.thumb_func
 872              	ADCSequenceDataGet:
 873              	.LFB14:
 731:C:/StellarisWare/driverlib\adc.c **** 
 732:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 733:C:/StellarisWare/driverlib\adc.c **** //
 734:C:/StellarisWare/driverlib\adc.c **** //! Gets the captured data for a sample sequence.
 735:C:/StellarisWare/driverlib\adc.c **** //!
 736:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 737:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 738:C:/StellarisWare/driverlib\adc.c **** //! \param pulBuffer is the address where the data is stored.
 739:C:/StellarisWare/driverlib\adc.c **** //!
 740:C:/StellarisWare/driverlib\adc.c **** //! This function copies data from the specified sample sequencer output FIFO
 741:C:/StellarisWare/driverlib\adc.c **** //! to a memory resident buffer.  The number of samples available in the
 742:C:/StellarisWare/driverlib\adc.c **** //! hardware FIFO are copied into the buffer, which is assumed to be large
 743:C:/StellarisWare/driverlib\adc.c **** //! enough to hold that many samples.  This function only returns the samples
 744:C:/StellarisWare/driverlib\adc.c **** //! that are presently available, which may not be the entire sample sequence
 745:C:/StellarisWare/driverlib\adc.c **** //! if it is in the process of being executed.
 746:C:/StellarisWare/driverlib\adc.c **** //!
 747:C:/StellarisWare/driverlib\adc.c **** //! \return Returns the number of samples copied to the buffer.
 748:C:/StellarisWare/driverlib\adc.c **** //
 749:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 750:C:/StellarisWare/driverlib\adc.c **** long
 751:C:/StellarisWare/driverlib\adc.c **** ADCSequenceDataGet(unsigned long ulBase, unsigned long ulSequenceNum,
 752:C:/StellarisWare/driverlib\adc.c ****                    unsigned long *pulBuffer)
 753:C:/StellarisWare/driverlib\adc.c **** {
 874              		.loc 1 753 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 24
 877              		@ frame_needed = 1, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879 0000 80B4     		push	{r7}
 880              	.LCFI42:
 881              		.cfi_def_cfa_offset 4
 882              		.cfi_offset 7, -4
 883 0002 87B0     		sub	sp, sp, #28
 884              	.LCFI43:
 885              		.cfi_def_cfa_offset 32
 886 0004 00AF     		add	r7, sp, #0
 887              	.LCFI44:
 888              		.cfi_def_cfa_register 7
 889 0006 F860     		str	r0, [r7, #12]
 890 0008 B960     		str	r1, [r7, #8]
 891 000a 7A60     		str	r2, [r7, #4]
 754:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulCount;
 755:C:/StellarisWare/driverlib\adc.c **** 
 756:C:/StellarisWare/driverlib\adc.c ****     //
 757:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 758:C:/StellarisWare/driverlib\adc.c ****     //
 759:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 760:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
 761:C:/StellarisWare/driverlib\adc.c **** 
 762:C:/StellarisWare/driverlib\adc.c ****     //
 763:C:/StellarisWare/driverlib\adc.c ****     // Get the offset of the sequence to be read.
 764:C:/StellarisWare/driverlib\adc.c ****     //
 765:C:/StellarisWare/driverlib\adc.c ****     ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
 892              		.loc 1 765 0
 893 000c BB68     		ldr	r3, [r7, #8]
 894 000e 03F10203 		add	r3, r3, #2
 895 0012 4FEA4313 		lsl	r3, r3, #5
 896 0016 FA68     		ldr	r2, [r7, #12]
 897 0018 D318     		adds	r3, r2, r3
 898 001a FB60     		str	r3, [r7, #12]
 766:C:/StellarisWare/driverlib\adc.c **** 
 767:C:/StellarisWare/driverlib\adc.c ****     //
 768:C:/StellarisWare/driverlib\adc.c ****     // Read samples from the FIFO until it is empty.
 769:C:/StellarisWare/driverlib\adc.c ****     //
 770:C:/StellarisWare/driverlib\adc.c ****     ulCount = 0;
 899              		.loc 1 770 0
 900 001c 4FF00003 		mov	r3, #0
 901 0020 7B61     		str	r3, [r7, #20]
 771:C:/StellarisWare/driverlib\adc.c ****     while(!(HWREG(ulBase + ADC_SSFSTAT) & ADC_SSFSTAT0_EMPTY) && (ulCount < 8))
 902              		.loc 1 771 0
 903 0022 0DE0     		b	.L24
 904              	.L26:
 772:C:/StellarisWare/driverlib\adc.c ****     {
 773:C:/StellarisWare/driverlib\adc.c ****         //
 774:C:/StellarisWare/driverlib\adc.c ****         // Read the FIFO and copy it to the destination.
 775:C:/StellarisWare/driverlib\adc.c ****         //
 776:C:/StellarisWare/driverlib\adc.c ****         *pulBuffer++ = HWREG(ulBase + ADC_SSFIFO);
 905              		.loc 1 776 0
 906 0024 FB68     		ldr	r3, [r7, #12]
 907 0026 03F10803 		add	r3, r3, #8
 908 002a 1A68     		ldr	r2, [r3, #0]
 909 002c 7B68     		ldr	r3, [r7, #4]
 910 002e 1A60     		str	r2, [r3, #0]
 911 0030 7B68     		ldr	r3, [r7, #4]
 912 0032 03F10403 		add	r3, r3, #4
 913 0036 7B60     		str	r3, [r7, #4]
 777:C:/StellarisWare/driverlib\adc.c **** 
 778:C:/StellarisWare/driverlib\adc.c ****         //
 779:C:/StellarisWare/driverlib\adc.c ****         // Increment the count of samples read.
 780:C:/StellarisWare/driverlib\adc.c ****         //
 781:C:/StellarisWare/driverlib\adc.c ****         ulCount++;
 914              		.loc 1 781 0
 915 0038 7B69     		ldr	r3, [r7, #20]
 916 003a 03F10103 		add	r3, r3, #1
 917 003e 7B61     		str	r3, [r7, #20]
 918              	.L24:
 771:C:/StellarisWare/driverlib\adc.c ****     while(!(HWREG(ulBase + ADC_SSFSTAT) & ADC_SSFSTAT0_EMPTY) && (ulCount < 8))
 919              		.loc 1 771 0 discriminator 1
 920 0040 FB68     		ldr	r3, [r7, #12]
 921 0042 03F10C03 		add	r3, r3, #12
 922 0046 1B68     		ldr	r3, [r3, #0]
 923 0048 03F48073 		and	r3, r3, #256
 924 004c 002B     		cmp	r3, #0
 925 004e 02D1     		bne	.L25
 771:C:/StellarisWare/driverlib\adc.c ****     while(!(HWREG(ulBase + ADC_SSFSTAT) & ADC_SSFSTAT0_EMPTY) && (ulCount < 8))
 926              		.loc 1 771 0 is_stmt 0 discriminator 2
 927 0050 7B69     		ldr	r3, [r7, #20]
 928 0052 072B     		cmp	r3, #7
 929 0054 E6D9     		bls	.L26
 930              	.L25:
 782:C:/StellarisWare/driverlib\adc.c ****     }
 783:C:/StellarisWare/driverlib\adc.c **** 
 784:C:/StellarisWare/driverlib\adc.c ****     //
 785:C:/StellarisWare/driverlib\adc.c ****     // Return the number of samples read.
 786:C:/StellarisWare/driverlib\adc.c ****     //
 787:C:/StellarisWare/driverlib\adc.c ****     return(ulCount);
 931              		.loc 1 787 0 is_stmt 1
 932 0056 7B69     		ldr	r3, [r7, #20]
 788:C:/StellarisWare/driverlib\adc.c **** }
 933              		.loc 1 788 0
 934 0058 1846     		mov	r0, r3
 935 005a 07F11C07 		add	r7, r7, #28
 936 005e BD46     		mov	sp, r7
 937 0060 80BC     		pop	{r7}
 938 0062 7047     		bx	lr
 939              		.cfi_endproc
 940              	.LFE14:
 942              		.section	.text.ADCProcessorTrigger,"ax",%progbits
 943              		.align	2
 944              		.global	ADCProcessorTrigger
 945              		.thumb
 946              		.thumb_func
 948              	ADCProcessorTrigger:
 949              	.LFB15:
 789:C:/StellarisWare/driverlib\adc.c **** 
 790:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 791:C:/StellarisWare/driverlib\adc.c **** //
 792:C:/StellarisWare/driverlib\adc.c **** //! Causes a processor trigger for a sample sequence.
 793:C:/StellarisWare/driverlib\adc.c **** //!
 794:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 795:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number, with
 796:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_TRIGGER_WAIT or \b ADC_TRIGGER_SIGNAL optionally ORed into it.
 797:C:/StellarisWare/driverlib\adc.c **** //!
 798:C:/StellarisWare/driverlib\adc.c **** //! This function triggers a processor-initiated sample sequence if the sample
 799:C:/StellarisWare/driverlib\adc.c **** //! sequence trigger is configured to \b ADC_TRIGGER_PROCESSOR.  If
 800:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_TRIGGER_WAIT is ORed into the sequence number, the
 801:C:/StellarisWare/driverlib\adc.c **** //! processor-initiated trigger is delayed until a later processor-initiated
 802:C:/StellarisWare/driverlib\adc.c **** //! trigger to a different ADC module that specifies \b ADC_TRIGGER_SIGNAL,
 803:C:/StellarisWare/driverlib\adc.c **** //! allowing multiple ADCs to start from a processor-initiated trigger in a
 804:C:/StellarisWare/driverlib\adc.c **** //! synchronous manner.
 805:C:/StellarisWare/driverlib\adc.c **** //!
 806:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 807:C:/StellarisWare/driverlib\adc.c **** //
 808:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 809:C:/StellarisWare/driverlib\adc.c **** void
 810:C:/StellarisWare/driverlib\adc.c **** ADCProcessorTrigger(unsigned long ulBase, unsigned long ulSequenceNum)
 811:C:/StellarisWare/driverlib\adc.c **** {
 950              		.loc 1 811 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 8
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 0000 90B4     		push	{r4, r7}
 956              	.LCFI45:
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 7, -4
 959              		.cfi_offset 4, -8
 960 0002 82B0     		sub	sp, sp, #8
 961              	.LCFI46:
 962              		.cfi_def_cfa_offset 16
 963 0004 00AF     		add	r7, sp, #0
 964              	.LCFI47:
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 967 0008 3960     		str	r1, [r7, #0]
 812:C:/StellarisWare/driverlib\adc.c ****     //
 813:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 814:C:/StellarisWare/driverlib\adc.c ****     //
 815:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 816:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulSequenceNum & 0xf) < 4);
 817:C:/StellarisWare/driverlib\adc.c **** 
 818:C:/StellarisWare/driverlib\adc.c ****     //
 819:C:/StellarisWare/driverlib\adc.c ****     // Generate a processor trigger for this sample sequence.
 820:C:/StellarisWare/driverlib\adc.c ****     //
 821:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_PSSI) |= ((ulSequenceNum & 0xffff0000) |
 968              		.loc 1 821 0
 969 000a 7B68     		ldr	r3, [r7, #4]
 970 000c 03F12803 		add	r3, r3, #40
 971 0010 1A46     		mov	r2, r3
 972 0012 7B68     		ldr	r3, [r7, #4]
 973 0014 03F12803 		add	r3, r3, #40
 974 0018 1968     		ldr	r1, [r3, #0]
 975 001a 3B68     		ldr	r3, [r7, #0]
 976 001c 4FEA1343 		lsr	r3, r3, #16
 977 0020 4FEA0343 		lsl	r3, r3, #16
 822:C:/StellarisWare/driverlib\adc.c ****                                    (1 << (ulSequenceNum & 0xf)));
 978              		.loc 1 822 0
 979 0024 3868     		ldr	r0, [r7, #0]
 980 0026 00F00F00 		and	r0, r0, #15
 981 002a 4FF00104 		mov	r4, #1
 982 002e 04FA00F0 		lsl	r0, r4, r0
 821:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_PSSI) |= ((ulSequenceNum & 0xffff0000) |
 983              		.loc 1 821 0
 984 0032 0343     		orrs	r3, r3, r0
 985 0034 0B43     		orrs	r3, r3, r1
 986 0036 1360     		str	r3, [r2, #0]
 823:C:/StellarisWare/driverlib\adc.c **** }
 987              		.loc 1 823 0
 988 0038 07F10807 		add	r7, r7, #8
 989 003c BD46     		mov	sp, r7
 990 003e 90BC     		pop	{r4, r7}
 991 0040 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE15:
 995 0042 00BF     		.section	.text.ADCSoftwareOversampleConfigure,"ax",%progbits
 996              		.align	2
 997              		.global	ADCSoftwareOversampleConfigure
 998              		.thumb
 999              		.thumb_func
 1001              	ADCSoftwareOversampleConfigure:
 1002              	.LFB16:
 824:C:/StellarisWare/driverlib\adc.c **** 
 825:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 826:C:/StellarisWare/driverlib\adc.c **** //
 827:C:/StellarisWare/driverlib\adc.c **** //! Configures the software oversampling factor of the ADC.
 828:C:/StellarisWare/driverlib\adc.c **** //!
 829:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 830:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 831:C:/StellarisWare/driverlib\adc.c **** //! \param ulFactor is the number of samples to be averaged.
 832:C:/StellarisWare/driverlib\adc.c **** //!
 833:C:/StellarisWare/driverlib\adc.c **** //! This function configures the software oversampling for the ADC, which can
 834:C:/StellarisWare/driverlib\adc.c **** //! be used to provide better resolution on the sampled data.  Oversampling is
 835:C:/StellarisWare/driverlib\adc.c **** //! accomplished by averaging multiple samples from the same analog input.
 836:C:/StellarisWare/driverlib\adc.c **** //! Three different oversampling rates are supported; 2x, 4x, and 8x.
 837:C:/StellarisWare/driverlib\adc.c **** //!
 838:C:/StellarisWare/driverlib\adc.c **** //! Oversampling is only supported on the sample sequencers that are more than
 839:C:/StellarisWare/driverlib\adc.c **** //! one sample in depth (that is, the fourth sample sequencer is not
 840:C:/StellarisWare/driverlib\adc.c **** //! supported).  Oversampling by 2x (for example) divides the depth of the
 841:C:/StellarisWare/driverlib\adc.c **** //! sample sequencer by two; so 2x oversampling on the first sample sequencer
 842:C:/StellarisWare/driverlib\adc.c **** //! can only provide four samples per trigger.  This also means that 8x
 843:C:/StellarisWare/driverlib\adc.c **** //! oversampling is only available on the first sample sequencer.
 844:C:/StellarisWare/driverlib\adc.c **** //!
 845:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 846:C:/StellarisWare/driverlib\adc.c **** //
 847:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 848:C:/StellarisWare/driverlib\adc.c **** void
 849:C:/StellarisWare/driverlib\adc.c **** ADCSoftwareOversampleConfigure(unsigned long ulBase,
 850:C:/StellarisWare/driverlib\adc.c ****                                unsigned long ulSequenceNum,
 851:C:/StellarisWare/driverlib\adc.c ****                                unsigned long ulFactor)
 852:C:/StellarisWare/driverlib\adc.c **** {
 1003              		.loc 1 852 0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 24
 1006              		@ frame_needed = 1, uses_anonymous_args = 0
 1007              		@ link register save eliminated.
 1008 0000 80B4     		push	{r7}
 1009              	.LCFI48:
 1010              		.cfi_def_cfa_offset 4
 1011              		.cfi_offset 7, -4
 1012 0002 87B0     		sub	sp, sp, #28
 1013              	.LCFI49:
 1014              		.cfi_def_cfa_offset 32
 1015 0004 00AF     		add	r7, sp, #0
 1016              	.LCFI50:
 1017              		.cfi_def_cfa_register 7
 1018 0006 F860     		str	r0, [r7, #12]
 1019 0008 B960     		str	r1, [r7, #8]
 1020 000a 7A60     		str	r2, [r7, #4]
 853:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulValue;
 854:C:/StellarisWare/driverlib\adc.c **** 
 855:C:/StellarisWare/driverlib\adc.c ****     //
 856:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 857:C:/StellarisWare/driverlib\adc.c ****     //
 858:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 859:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 3);
 860:C:/StellarisWare/driverlib\adc.c ****     ASSERT(((ulFactor == 2) || (ulFactor == 4) || (ulFactor == 8)) &&
 861:C:/StellarisWare/driverlib\adc.c ****            ((ulSequenceNum == 0) || (ulFactor != 8)));
 862:C:/StellarisWare/driverlib\adc.c **** 
 863:C:/StellarisWare/driverlib\adc.c ****     //
 864:C:/StellarisWare/driverlib\adc.c ****     // Convert the oversampling factor to a shift factor.
 865:C:/StellarisWare/driverlib\adc.c ****     //
 866:C:/StellarisWare/driverlib\adc.c ****     for(ulValue = 0, ulFactor >>= 1; ulFactor; ulValue++, ulFactor >>= 1)
 1021              		.loc 1 866 0
 1022 000c 4FF00003 		mov	r3, #0
 1023 0010 7B61     		str	r3, [r7, #20]
 1024 0012 7B68     		ldr	r3, [r7, #4]
 1025 0014 4FEA5303 		lsr	r3, r3, #1
 1026 0018 7B60     		str	r3, [r7, #4]
 1027 001a 07E0     		b	.L29
 1028              	.L30:
 1029              		.loc 1 866 0 is_stmt 0 discriminator 2
 1030 001c 7B69     		ldr	r3, [r7, #20]
 1031 001e 03F10103 		add	r3, r3, #1
 1032 0022 7B61     		str	r3, [r7, #20]
 1033 0024 7B68     		ldr	r3, [r7, #4]
 1034 0026 4FEA5303 		lsr	r3, r3, #1
 1035 002a 7B60     		str	r3, [r7, #4]
 1036              	.L29:
 1037              		.loc 1 866 0 discriminator 1
 1038 002c 7B68     		ldr	r3, [r7, #4]
 1039 002e 002B     		cmp	r3, #0
 1040 0030 F4D1     		bne	.L30
 867:C:/StellarisWare/driverlib\adc.c ****     {
 868:C:/StellarisWare/driverlib\adc.c ****     }
 869:C:/StellarisWare/driverlib\adc.c **** 
 870:C:/StellarisWare/driverlib\adc.c ****     //
 871:C:/StellarisWare/driverlib\adc.c ****     // Save the shift factor.
 872:C:/StellarisWare/driverlib\adc.c ****     //
 873:C:/StellarisWare/driverlib\adc.c ****     g_pucOversampleFactor[ulSequenceNum] = ulValue;
 1041              		.loc 1 873 0 is_stmt 1
 1042 0032 7B69     		ldr	r3, [r7, #20]
 1043 0034 DAB2     		uxtb	r2, r3
 1044 0036 40F20003 		movw	r3, #:lower16:g_pucOversampleFactor
 1045 003a C0F20003 		movt	r3, #:upper16:g_pucOversampleFactor
 1046 003e B968     		ldr	r1, [r7, #8]
 1047 0040 5B18     		adds	r3, r3, r1
 1048 0042 1A70     		strb	r2, [r3, #0]
 874:C:/StellarisWare/driverlib\adc.c **** }
 1049              		.loc 1 874 0
 1050 0044 07F11C07 		add	r7, r7, #28
 1051 0048 BD46     		mov	sp, r7
 1052 004a 80BC     		pop	{r7}
 1053 004c 7047     		bx	lr
 1054              		.cfi_endproc
 1055              	.LFE16:
 1057 004e 00BF     		.section	.text.ADCSoftwareOversampleStepConfigure,"ax",%progbits
 1058              		.align	2
 1059              		.global	ADCSoftwareOversampleStepConfigure
 1060              		.thumb
 1061              		.thumb_func
 1063              	ADCSoftwareOversampleStepConfigure:
 1064              	.LFB17:
 875:C:/StellarisWare/driverlib\adc.c **** 
 876:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 877:C:/StellarisWare/driverlib\adc.c **** //
 878:C:/StellarisWare/driverlib\adc.c **** //! Configures a step of the software oversampled sequencer.
 879:C:/StellarisWare/driverlib\adc.c **** //!
 880:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 881:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 882:C:/StellarisWare/driverlib\adc.c **** //! \param ulStep is the step to be configured.
 883:C:/StellarisWare/driverlib\adc.c **** //! \param ulConfig is the configuration of this step.
 884:C:/StellarisWare/driverlib\adc.c **** //!
 885:C:/StellarisWare/driverlib\adc.c **** //! This function configures a step of the sample sequencer when using the
 886:C:/StellarisWare/driverlib\adc.c **** //! software oversampling feature.  The number of steps available depends on
 887:C:/StellarisWare/driverlib\adc.c **** //! the oversampling factor set by ADCSoftwareOversampleConfigure().  The value
 888:C:/StellarisWare/driverlib\adc.c **** //! of \e ulConfig is the same as defined for ADCSequenceStepConfigure().
 889:C:/StellarisWare/driverlib\adc.c **** //!
 890:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 891:C:/StellarisWare/driverlib\adc.c **** //
 892:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 893:C:/StellarisWare/driverlib\adc.c **** void
 894:C:/StellarisWare/driverlib\adc.c **** ADCSoftwareOversampleStepConfigure(unsigned long ulBase,
 895:C:/StellarisWare/driverlib\adc.c ****                                    unsigned long ulSequenceNum,
 896:C:/StellarisWare/driverlib\adc.c ****                                    unsigned long ulStep,
 897:C:/StellarisWare/driverlib\adc.c ****                                    unsigned long ulConfig)
 898:C:/StellarisWare/driverlib\adc.c **** {
 1065              		.loc 1 898 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 16
 1068              		@ frame_needed = 1, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070 0000 80B4     		push	{r7}
 1071              	.LCFI51:
 1072              		.cfi_def_cfa_offset 4
 1073              		.cfi_offset 7, -4
 1074 0002 85B0     		sub	sp, sp, #20
 1075              	.LCFI52:
 1076              		.cfi_def_cfa_offset 24
 1077 0004 00AF     		add	r7, sp, #0
 1078              	.LCFI53:
 1079              		.cfi_def_cfa_register 7
 1080 0006 F860     		str	r0, [r7, #12]
 1081 0008 B960     		str	r1, [r7, #8]
 1082 000a 7A60     		str	r2, [r7, #4]
 1083 000c 3B60     		str	r3, [r7, #0]
 899:C:/StellarisWare/driverlib\adc.c ****     //
 900:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 901:C:/StellarisWare/driverlib\adc.c ****     //
 902:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 903:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 3);
 904:C:/StellarisWare/driverlib\adc.c ****     ASSERT(((ulSequenceNum == 0) &&
 905:C:/StellarisWare/driverlib\adc.c ****             (ulStep < (8 >> g_pucOversampleFactor[ulSequenceNum]))) ||
 906:C:/StellarisWare/driverlib\adc.c ****            (ulStep < (4 >> g_pucOversampleFactor[ulSequenceNum])));
 907:C:/StellarisWare/driverlib\adc.c **** 
 908:C:/StellarisWare/driverlib\adc.c ****     //
 909:C:/StellarisWare/driverlib\adc.c ****     // Get the offset of the sequence to be configured.
 910:C:/StellarisWare/driverlib\adc.c ****     //
 911:C:/StellarisWare/driverlib\adc.c ****     ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
 1084              		.loc 1 911 0
 1085 000e BB68     		ldr	r3, [r7, #8]
 1086 0010 03F10203 		add	r3, r3, #2
 1087 0014 4FEA4313 		lsl	r3, r3, #5
 1088 0018 FA68     		ldr	r2, [r7, #12]
 1089 001a D318     		adds	r3, r2, r3
 1090 001c FB60     		str	r3, [r7, #12]
 912:C:/StellarisWare/driverlib\adc.c **** 
 913:C:/StellarisWare/driverlib\adc.c ****     //
 914:C:/StellarisWare/driverlib\adc.c ****     // Compute the shift for the bits that control this step.
 915:C:/StellarisWare/driverlib\adc.c ****     //
 916:C:/StellarisWare/driverlib\adc.c ****     ulStep *= 4 << g_pucOversampleFactor[ulSequenceNum];
 1091              		.loc 1 916 0
 1092 001e 40F20003 		movw	r3, #:lower16:g_pucOversampleFactor
 1093 0022 C0F20003 		movt	r3, #:upper16:g_pucOversampleFactor
 1094 0026 BA68     		ldr	r2, [r7, #8]
 1095 0028 9B18     		adds	r3, r3, r2
 1096 002a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1097 002c 4FF00402 		mov	r2, #4
 1098 0030 02FA03F3 		lsl	r3, r2, r3
 1099 0034 1A46     		mov	r2, r3
 1100 0036 7B68     		ldr	r3, [r7, #4]
 1101 0038 02FB03F3 		mul	r3, r2, r3
 1102 003c 7B60     		str	r3, [r7, #4]
 917:C:/StellarisWare/driverlib\adc.c **** 
 918:C:/StellarisWare/driverlib\adc.c ****     //
 919:C:/StellarisWare/driverlib\adc.c ****     // Loop through the hardware steps that make up this step of the software
 920:C:/StellarisWare/driverlib\adc.c ****     // oversampled sequence.
 921:C:/StellarisWare/driverlib\adc.c ****     //
 922:C:/StellarisWare/driverlib\adc.c ****     for(ulSequenceNum = 1 << g_pucOversampleFactor[ulSequenceNum];
 1103              		.loc 1 922 0
 1104 003e 40F20003 		movw	r3, #:lower16:g_pucOversampleFactor
 1105 0042 C0F20003 		movt	r3, #:upper16:g_pucOversampleFactor
 1106 0046 BA68     		ldr	r2, [r7, #8]
 1107 0048 9B18     		adds	r3, r3, r2
 1108 004a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1109 004c 4FF00102 		mov	r2, #1
 1110 0050 02FA03F3 		lsl	r3, r2, r3
 1111 0054 BB60     		str	r3, [r7, #8]
 1112 0056 5FE0     		b	.L32
 1113              	.L34:
 923:C:/StellarisWare/driverlib\adc.c ****         ulSequenceNum; ulSequenceNum--)
 924:C:/StellarisWare/driverlib\adc.c ****     {
 925:C:/StellarisWare/driverlib\adc.c ****         //
 926:C:/StellarisWare/driverlib\adc.c ****         // Set the analog mux value for this step.
 927:C:/StellarisWare/driverlib\adc.c ****         //
 928:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 1114              		.loc 1 928 0
 1115 0058 FB68     		ldr	r3, [r7, #12]
 1116 005a FA68     		ldr	r2, [r7, #12]
 1117 005c 1168     		ldr	r1, [r2, #0]
 929:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1118              		.loc 1 929 0
 1119 005e 7A68     		ldr	r2, [r7, #4]
 1120 0060 4FF00F00 		mov	r0, #15
 1121 0064 00FA02F2 		lsl	r2, r0, r2
 1122 0068 6FEA0202 		mvn	r2, r2
 928:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 1123              		.loc 1 928 0
 1124 006c 1140     		ands	r1, r1, r2
 930:C:/StellarisWare/driverlib\adc.c ****                                      ((ulConfig & 0x0f) << ulStep));
 1125              		.loc 1 930 0
 1126 006e 3A68     		ldr	r2, [r7, #0]
 1127 0070 02F00F00 		and	r0, r2, #15
 1128 0074 7A68     		ldr	r2, [r7, #4]
 1129 0076 00FA02F2 		lsl	r2, r0, r2
 929:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1130              		.loc 1 929 0
 1131 007a 0A43     		orrs	r2, r2, r1
 928:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSMUX) = ((HWREG(ulBase + ADC_SSMUX) &
 1132              		.loc 1 928 0
 1133 007c 1A60     		str	r2, [r3, #0]
 931:C:/StellarisWare/driverlib\adc.c **** 
 932:C:/StellarisWare/driverlib\adc.c ****         //
 933:C:/StellarisWare/driverlib\adc.c ****         // Set the upper bits of the analog mux value for this step.
 934:C:/StellarisWare/driverlib\adc.c ****         //
 935:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 1134              		.loc 1 935 0
 1135 007e FB68     		ldr	r3, [r7, #12]
 1136 0080 03F11803 		add	r3, r3, #24
 1137 0084 FA68     		ldr	r2, [r7, #12]
 1138 0086 02F11802 		add	r2, r2, #24
 1139 008a 1168     		ldr	r1, [r2, #0]
 936:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1140              		.loc 1 936 0
 1141 008c 7A68     		ldr	r2, [r7, #4]
 1142 008e 4FF00F00 		mov	r0, #15
 1143 0092 00FA02F2 		lsl	r2, r0, r2
 1144 0096 6FEA0202 		mvn	r2, r2
 935:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 1145              		.loc 1 935 0
 1146 009a 1140     		ands	r1, r1, r2
 937:C:/StellarisWare/driverlib\adc.c ****                                       (((ulConfig & 0xf00) >> 8) << ulStep));
 1147              		.loc 1 937 0
 1148 009c 3A68     		ldr	r2, [r7, #0]
 1149 009e 02F47062 		and	r2, r2, #3840
 1150 00a2 4FEA1220 		lsr	r0, r2, #8
 1151 00a6 7A68     		ldr	r2, [r7, #4]
 1152 00a8 00FA02F2 		lsl	r2, r0, r2
 936:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1153              		.loc 1 936 0
 1154 00ac 0A43     		orrs	r2, r2, r1
 935:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSEMUX) = ((HWREG(ulBase + ADC_SSEMUX) &
 1155              		.loc 1 935 0
 1156 00ae 1A60     		str	r2, [r3, #0]
 938:C:/StellarisWare/driverlib\adc.c **** 
 939:C:/StellarisWare/driverlib\adc.c ****         //
 940:C:/StellarisWare/driverlib\adc.c ****         // Set the control value for this step.
 941:C:/StellarisWare/driverlib\adc.c ****         //
 942:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 1157              		.loc 1 942 0
 1158 00b0 FB68     		ldr	r3, [r7, #12]
 1159 00b2 03F10403 		add	r3, r3, #4
 1160 00b6 FA68     		ldr	r2, [r7, #12]
 1161 00b8 02F10402 		add	r2, r2, #4
 1162 00bc 1168     		ldr	r1, [r2, #0]
 943:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1163              		.loc 1 943 0
 1164 00be 7A68     		ldr	r2, [r7, #4]
 1165 00c0 4FF00F00 		mov	r0, #15
 1166 00c4 00FA02F2 		lsl	r2, r0, r2
 1167 00c8 6FEA0202 		mvn	r2, r2
 942:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 1168              		.loc 1 942 0
 1169 00cc 1140     		ands	r1, r1, r2
 944:C:/StellarisWare/driverlib\adc.c ****                                      (((ulConfig & 0xf0) >> 4) << ulStep));
 1170              		.loc 1 944 0
 1171 00ce 3A68     		ldr	r2, [r7, #0]
 1172 00d0 02F0F002 		and	r2, r2, #240
 1173 00d4 4FEA1210 		lsr	r0, r2, #4
 1174 00d8 7A68     		ldr	r2, [r7, #4]
 1175 00da 00FA02F2 		lsl	r2, r0, r2
 943:C:/StellarisWare/driverlib\adc.c ****                                       ~(0x0000000f << ulStep)) |
 1176              		.loc 1 943 0
 1177 00de 0A43     		orrs	r2, r2, r1
 942:C:/StellarisWare/driverlib\adc.c ****         HWREG(ulBase + ADC_SSCTL) = ((HWREG(ulBase + ADC_SSCTL) &
 1178              		.loc 1 942 0
 1179 00e0 1A60     		str	r2, [r3, #0]
 945:C:/StellarisWare/driverlib\adc.c ****         if(ulSequenceNum != 1)
 1180              		.loc 1 945 0
 1181 00e2 BB68     		ldr	r3, [r7, #8]
 1182 00e4 012B     		cmp	r3, #1
 1183 00e6 0FD0     		beq	.L33
 946:C:/StellarisWare/driverlib\adc.c ****         {
 947:C:/StellarisWare/driverlib\adc.c ****             HWREG(ulBase + ADC_SSCTL) &= ~((ADC_SSCTL0_IE0 |
 1184              		.loc 1 947 0
 1185 00e8 FB68     		ldr	r3, [r7, #12]
 1186 00ea 03F10403 		add	r3, r3, #4
 1187 00ee FA68     		ldr	r2, [r7, #12]
 1188 00f0 02F10402 		add	r2, r2, #4
 1189 00f4 1168     		ldr	r1, [r2, #0]
 948:C:/StellarisWare/driverlib\adc.c ****                                             ADC_SSCTL0_END0) << ulStep);
 1190              		.loc 1 948 0
 1191 00f6 7A68     		ldr	r2, [r7, #4]
 1192 00f8 4FF00600 		mov	r0, #6
 1193 00fc 00FA02F2 		lsl	r2, r0, r2
 947:C:/StellarisWare/driverlib\adc.c ****             HWREG(ulBase + ADC_SSCTL) &= ~((ADC_SSCTL0_IE0 |
 1194              		.loc 1 947 0
 1195 0100 6FEA0202 		mvn	r2, r2
 1196 0104 0A40     		ands	r2, r2, r1
 1197 0106 1A60     		str	r2, [r3, #0]
 1198              	.L33:
 949:C:/StellarisWare/driverlib\adc.c ****         }
 950:C:/StellarisWare/driverlib\adc.c **** 
 951:C:/StellarisWare/driverlib\adc.c ****         //
 952:C:/StellarisWare/driverlib\adc.c ****         // Go to the next hardware step.
 953:C:/StellarisWare/driverlib\adc.c ****         //
 954:C:/StellarisWare/driverlib\adc.c ****         ulStep += 4;
 1199              		.loc 1 954 0
 1200 0108 7B68     		ldr	r3, [r7, #4]
 1201 010a 03F10403 		add	r3, r3, #4
 1202 010e 7B60     		str	r3, [r7, #4]
 923:C:/StellarisWare/driverlib\adc.c ****         ulSequenceNum; ulSequenceNum--)
 1203              		.loc 1 923 0
 1204 0110 BB68     		ldr	r3, [r7, #8]
 1205 0112 03F1FF33 		add	r3, r3, #-1
 1206 0116 BB60     		str	r3, [r7, #8]
 1207              	.L32:
 922:C:/StellarisWare/driverlib\adc.c ****     for(ulSequenceNum = 1 << g_pucOversampleFactor[ulSequenceNum];
 1208              		.loc 1 922 0 discriminator 1
 1209 0118 BB68     		ldr	r3, [r7, #8]
 1210 011a 002B     		cmp	r3, #0
 1211 011c 9CD1     		bne	.L34
 955:C:/StellarisWare/driverlib\adc.c ****     }
 956:C:/StellarisWare/driverlib\adc.c **** }
 1212              		.loc 1 956 0
 1213 011e 07F11407 		add	r7, r7, #20
 1214 0122 BD46     		mov	sp, r7
 1215 0124 80BC     		pop	{r7}
 1216 0126 7047     		bx	lr
 1217              		.cfi_endproc
 1218              	.LFE17:
 1220              		.section	.text.ADCSoftwareOversampleDataGet,"ax",%progbits
 1221              		.align	2
 1222              		.global	ADCSoftwareOversampleDataGet
 1223              		.thumb
 1224              		.thumb_func
 1226              	ADCSoftwareOversampleDataGet:
 1227              	.LFB18:
 957:C:/StellarisWare/driverlib\adc.c **** 
 958:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 959:C:/StellarisWare/driverlib\adc.c **** //
 960:C:/StellarisWare/driverlib\adc.c **** //! Gets the captured data for a sample sequence using software oversampling.
 961:C:/StellarisWare/driverlib\adc.c **** //!
 962:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
 963:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
 964:C:/StellarisWare/driverlib\adc.c **** //! \param pulBuffer is the address where the data is stored.
 965:C:/StellarisWare/driverlib\adc.c **** //! \param ulCount is the number of samples to be read.
 966:C:/StellarisWare/driverlib\adc.c **** //!
 967:C:/StellarisWare/driverlib\adc.c **** //! This function copies data from the specified sample sequence output FIFO to
 968:C:/StellarisWare/driverlib\adc.c **** //! a memory resident buffer with software oversampling applied.  The requested
 969:C:/StellarisWare/driverlib\adc.c **** //! number of samples are copied into the data buffer; if there are not enough
 970:C:/StellarisWare/driverlib\adc.c **** //! samples in the hardware FIFO to satisfy this many oversampled data items,
 971:C:/StellarisWare/driverlib\adc.c **** //! then incorrect results are returned.  It is the caller's responsibility to
 972:C:/StellarisWare/driverlib\adc.c **** //! read only the samples that are available and wait until enough data is
 973:C:/StellarisWare/driverlib\adc.c **** //! available, for example as a result of receiving an interrupt.
 974:C:/StellarisWare/driverlib\adc.c **** //!
 975:C:/StellarisWare/driverlib\adc.c **** //! \return None.
 976:C:/StellarisWare/driverlib\adc.c **** //
 977:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
 978:C:/StellarisWare/driverlib\adc.c **** void
 979:C:/StellarisWare/driverlib\adc.c **** ADCSoftwareOversampleDataGet(unsigned long ulBase, unsigned long ulSequenceNum,
 980:C:/StellarisWare/driverlib\adc.c ****                              unsigned long *pulBuffer, unsigned long ulCount)
 981:C:/StellarisWare/driverlib\adc.c **** {
 1228              		.loc 1 981 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 24
 1231              		@ frame_needed = 1, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 1233 0000 80B4     		push	{r7}
 1234              	.LCFI54:
 1235              		.cfi_def_cfa_offset 4
 1236              		.cfi_offset 7, -4
 1237 0002 87B0     		sub	sp, sp, #28
 1238              	.LCFI55:
 1239              		.cfi_def_cfa_offset 32
 1240 0004 00AF     		add	r7, sp, #0
 1241              	.LCFI56:
 1242              		.cfi_def_cfa_register 7
 1243 0006 F860     		str	r0, [r7, #12]
 1244 0008 B960     		str	r1, [r7, #8]
 1245 000a 7A60     		str	r2, [r7, #4]
 1246 000c 3B60     		str	r3, [r7, #0]
 982:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulIdx, ulAccum;
 983:C:/StellarisWare/driverlib\adc.c **** 
 984:C:/StellarisWare/driverlib\adc.c ****     //
 985:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
 986:C:/StellarisWare/driverlib\adc.c ****     //
 987:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
 988:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 3);
 989:C:/StellarisWare/driverlib\adc.c ****     ASSERT(((ulSequenceNum == 0) &&
 990:C:/StellarisWare/driverlib\adc.c ****             (ulCount < (8 >> g_pucOversampleFactor[ulSequenceNum]))) ||
 991:C:/StellarisWare/driverlib\adc.c ****            (ulCount < (4 >> g_pucOversampleFactor[ulSequenceNum])));
 992:C:/StellarisWare/driverlib\adc.c **** 
 993:C:/StellarisWare/driverlib\adc.c ****     //
 994:C:/StellarisWare/driverlib\adc.c ****     // Get the offset of the sequence to be read.
 995:C:/StellarisWare/driverlib\adc.c ****     //
 996:C:/StellarisWare/driverlib\adc.c ****     ulBase += ADC_SEQ + (ADC_SEQ_STEP * ulSequenceNum);
 1247              		.loc 1 996 0
 1248 000e BB68     		ldr	r3, [r7, #8]
 1249 0010 03F10203 		add	r3, r3, #2
 1250 0014 4FEA4313 		lsl	r3, r3, #5
 1251 0018 FA68     		ldr	r2, [r7, #12]
 1252 001a D318     		adds	r3, r2, r3
 1253 001c FB60     		str	r3, [r7, #12]
 997:C:/StellarisWare/driverlib\adc.c **** 
 998:C:/StellarisWare/driverlib\adc.c ****     //
 999:C:/StellarisWare/driverlib\adc.c ****     // Read the samples from the FIFO until it is empty.
1000:C:/StellarisWare/driverlib\adc.c ****     //
1001:C:/StellarisWare/driverlib\adc.c ****     while(ulCount--)
 1254              		.loc 1 1001 0
 1255 001e 2DE0     		b	.L36
 1256              	.L39:
1002:C:/StellarisWare/driverlib\adc.c ****     {
1003:C:/StellarisWare/driverlib\adc.c ****         //
1004:C:/StellarisWare/driverlib\adc.c ****         // Compute the sum of the samples.
1005:C:/StellarisWare/driverlib\adc.c ****         //
1006:C:/StellarisWare/driverlib\adc.c ****         ulAccum = 0;
 1257              		.loc 1 1006 0
 1258 0020 4FF00003 		mov	r3, #0
 1259 0024 3B61     		str	r3, [r7, #16]
1007:C:/StellarisWare/driverlib\adc.c ****         for(ulIdx = 1 << g_pucOversampleFactor[ulSequenceNum]; ulIdx; ulIdx--)
 1260              		.loc 1 1007 0
 1261 0026 40F20003 		movw	r3, #:lower16:g_pucOversampleFactor
 1262 002a C0F20003 		movt	r3, #:upper16:g_pucOversampleFactor
 1263 002e BA68     		ldr	r2, [r7, #8]
 1264 0030 9B18     		adds	r3, r3, r2
 1265 0032 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1266 0034 4FF00102 		mov	r2, #1
 1267 0038 02FA03F3 		lsl	r3, r2, r3
 1268 003c 7B61     		str	r3, [r7, #20]
 1269 003e 0AE0     		b	.L37
 1270              	.L38:
1008:C:/StellarisWare/driverlib\adc.c ****         {
1009:C:/StellarisWare/driverlib\adc.c ****             //
1010:C:/StellarisWare/driverlib\adc.c ****             // Read the FIFO and add it to the accumulator.
1011:C:/StellarisWare/driverlib\adc.c ****             //
1012:C:/StellarisWare/driverlib\adc.c ****             ulAccum += HWREG(ulBase + ADC_SSFIFO);
 1271              		.loc 1 1012 0 discriminator 2
 1272 0040 FB68     		ldr	r3, [r7, #12]
 1273 0042 03F10803 		add	r3, r3, #8
 1274 0046 1B68     		ldr	r3, [r3, #0]
 1275 0048 3A69     		ldr	r2, [r7, #16]
 1276 004a D318     		adds	r3, r2, r3
 1277 004c 3B61     		str	r3, [r7, #16]
1007:C:/StellarisWare/driverlib\adc.c ****         for(ulIdx = 1 << g_pucOversampleFactor[ulSequenceNum]; ulIdx; ulIdx--)
 1278              		.loc 1 1007 0 discriminator 2
 1279 004e 7B69     		ldr	r3, [r7, #20]
 1280 0050 03F1FF33 		add	r3, r3, #-1
 1281 0054 7B61     		str	r3, [r7, #20]
 1282              	.L37:
1007:C:/StellarisWare/driverlib\adc.c ****         for(ulIdx = 1 << g_pucOversampleFactor[ulSequenceNum]; ulIdx; ulIdx--)
 1283              		.loc 1 1007 0 is_stmt 0 discriminator 1
 1284 0056 7B69     		ldr	r3, [r7, #20]
 1285 0058 002B     		cmp	r3, #0
 1286 005a F1D1     		bne	.L38
1013:C:/StellarisWare/driverlib\adc.c ****         }
1014:C:/StellarisWare/driverlib\adc.c **** 
1015:C:/StellarisWare/driverlib\adc.c ****         //
1016:C:/StellarisWare/driverlib\adc.c ****         // Write the averaged sample to the output buffer.
1017:C:/StellarisWare/driverlib\adc.c ****         //
1018:C:/StellarisWare/driverlib\adc.c ****         *pulBuffer++ = ulAccum >> g_pucOversampleFactor[ulSequenceNum];
 1287              		.loc 1 1018 0 is_stmt 1
 1288 005c 40F20003 		movw	r3, #:lower16:g_pucOversampleFactor
 1289 0060 C0F20003 		movt	r3, #:upper16:g_pucOversampleFactor
 1290 0064 BA68     		ldr	r2, [r7, #8]
 1291 0066 9B18     		adds	r3, r3, r2
 1292 0068 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1293 006a 3A69     		ldr	r2, [r7, #16]
 1294 006c 22FA03F2 		lsr	r2, r2, r3
 1295 0070 7B68     		ldr	r3, [r7, #4]
 1296 0072 1A60     		str	r2, [r3, #0]
 1297 0074 7B68     		ldr	r3, [r7, #4]
 1298 0076 03F10403 		add	r3, r3, #4
 1299 007a 7B60     		str	r3, [r7, #4]
 1300              	.L36:
1001:C:/StellarisWare/driverlib\adc.c ****     while(ulCount--)
 1301              		.loc 1 1001 0 discriminator 1
 1302 007c 3B68     		ldr	r3, [r7, #0]
 1303 007e 002B     		cmp	r3, #0
 1304 0080 0CBF     		ite	eq
 1305 0082 0023     		moveq	r3, #0
 1306 0084 0123     		movne	r3, #1
 1307 0086 DBB2     		uxtb	r3, r3
 1308 0088 3A68     		ldr	r2, [r7, #0]
 1309 008a 02F1FF32 		add	r2, r2, #-1
 1310 008e 3A60     		str	r2, [r7, #0]
 1311 0090 002B     		cmp	r3, #0
 1312 0092 C5D1     		bne	.L39
1019:C:/StellarisWare/driverlib\adc.c ****     }
1020:C:/StellarisWare/driverlib\adc.c **** }
 1313              		.loc 1 1020 0
 1314 0094 07F11C07 		add	r7, r7, #28
 1315 0098 BD46     		mov	sp, r7
 1316 009a 80BC     		pop	{r7}
 1317 009c 7047     		bx	lr
 1318              		.cfi_endproc
 1319              	.LFE18:
 1321 009e 00BF     		.section	.text.ADCHardwareOversampleConfigure,"ax",%progbits
 1322              		.align	2
 1323              		.global	ADCHardwareOversampleConfigure
 1324              		.thumb
 1325              		.thumb_func
 1327              	ADCHardwareOversampleConfigure:
 1328              	.LFB19:
1021:C:/StellarisWare/driverlib\adc.c **** 
1022:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1023:C:/StellarisWare/driverlib\adc.c **** //
1024:C:/StellarisWare/driverlib\adc.c **** //! Configures the hardware oversampling factor of the ADC.
1025:C:/StellarisWare/driverlib\adc.c **** //!
1026:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1027:C:/StellarisWare/driverlib\adc.c **** //! \param ulFactor is the number of samples to be averaged.
1028:C:/StellarisWare/driverlib\adc.c **** //!
1029:C:/StellarisWare/driverlib\adc.c **** //! This function configures the hardware oversampling for the ADC, which can
1030:C:/StellarisWare/driverlib\adc.c **** //! be used to provide better resolution on the sampled data.  Oversampling is
1031:C:/StellarisWare/driverlib\adc.c **** //! accomplished by averaging multiple samples from the same analog input.  Six
1032:C:/StellarisWare/driverlib\adc.c **** //! different oversampling rates are supported; 2x, 4x, 8x, 16x, 32x, and 64x.
1033:C:/StellarisWare/driverlib\adc.c **** //! Specifying an oversampling factor of zero disables hardware
1034:C:/StellarisWare/driverlib\adc.c **** //! oversampling.
1035:C:/StellarisWare/driverlib\adc.c **** //!
1036:C:/StellarisWare/driverlib\adc.c **** //! Hardware oversampling applies uniformly to all sample sequencers.  It does
1037:C:/StellarisWare/driverlib\adc.c **** //! not reduce the depth of the sample sequencers like the software
1038:C:/StellarisWare/driverlib\adc.c **** //! oversampling APIs; each sample written into the sample sequencer FIFO is a
1039:C:/StellarisWare/driverlib\adc.c **** //! fully oversampled analog input reading.
1040:C:/StellarisWare/driverlib\adc.c **** //!
1041:C:/StellarisWare/driverlib\adc.c **** //! Enabling hardware averaging increases the precision of the ADC at the cost
1042:C:/StellarisWare/driverlib\adc.c **** //! of throughput.  For example, enabling 4x oversampling reduces the
1043:C:/StellarisWare/driverlib\adc.c **** //! throughput of a 250 Ksps ADC to 62.5 Ksps.
1044:C:/StellarisWare/driverlib\adc.c **** //!
1045:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1046:C:/StellarisWare/driverlib\adc.c **** //
1047:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1048:C:/StellarisWare/driverlib\adc.c **** void
1049:C:/StellarisWare/driverlib\adc.c **** ADCHardwareOversampleConfigure(unsigned long ulBase, unsigned long ulFactor)
1050:C:/StellarisWare/driverlib\adc.c **** {
 1329              		.loc 1 1050 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 16
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 1334 0000 80B4     		push	{r7}
 1335              	.LCFI57:
 1336              		.cfi_def_cfa_offset 4
 1337              		.cfi_offset 7, -4
 1338 0002 85B0     		sub	sp, sp, #20
 1339              	.LCFI58:
 1340              		.cfi_def_cfa_offset 24
 1341 0004 00AF     		add	r7, sp, #0
 1342              	.LCFI59:
 1343              		.cfi_def_cfa_register 7
 1344 0006 7860     		str	r0, [r7, #4]
 1345 0008 3960     		str	r1, [r7, #0]
1051:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulValue;
1052:C:/StellarisWare/driverlib\adc.c **** 
1053:C:/StellarisWare/driverlib\adc.c ****     //
1054:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1055:C:/StellarisWare/driverlib\adc.c ****     //
1056:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1057:C:/StellarisWare/driverlib\adc.c ****     ASSERT(((ulFactor == 0) || (ulFactor == 2) || (ulFactor == 4) ||
1058:C:/StellarisWare/driverlib\adc.c ****            (ulFactor == 8) || (ulFactor == 16) || (ulFactor == 32) ||
1059:C:/StellarisWare/driverlib\adc.c ****            (ulFactor == 64)));
1060:C:/StellarisWare/driverlib\adc.c **** 
1061:C:/StellarisWare/driverlib\adc.c ****     //
1062:C:/StellarisWare/driverlib\adc.c ****     // Convert the oversampling factor to a shift factor.
1063:C:/StellarisWare/driverlib\adc.c ****     //
1064:C:/StellarisWare/driverlib\adc.c ****     for(ulValue = 0, ulFactor >>= 1; ulFactor; ulValue++, ulFactor >>= 1)
 1346              		.loc 1 1064 0
 1347 000a 4FF00003 		mov	r3, #0
 1348 000e FB60     		str	r3, [r7, #12]
 1349 0010 3B68     		ldr	r3, [r7, #0]
 1350 0012 4FEA5303 		lsr	r3, r3, #1
 1351 0016 3B60     		str	r3, [r7, #0]
 1352 0018 07E0     		b	.L41
 1353              	.L42:
 1354              		.loc 1 1064 0 is_stmt 0 discriminator 2
 1355 001a FB68     		ldr	r3, [r7, #12]
 1356 001c 03F10103 		add	r3, r3, #1
 1357 0020 FB60     		str	r3, [r7, #12]
 1358 0022 3B68     		ldr	r3, [r7, #0]
 1359 0024 4FEA5303 		lsr	r3, r3, #1
 1360 0028 3B60     		str	r3, [r7, #0]
 1361              	.L41:
 1362              		.loc 1 1064 0 discriminator 1
 1363 002a 3B68     		ldr	r3, [r7, #0]
 1364 002c 002B     		cmp	r3, #0
 1365 002e F4D1     		bne	.L42
1065:C:/StellarisWare/driverlib\adc.c ****     {
1066:C:/StellarisWare/driverlib\adc.c ****     }
1067:C:/StellarisWare/driverlib\adc.c **** 
1068:C:/StellarisWare/driverlib\adc.c ****     //
1069:C:/StellarisWare/driverlib\adc.c ****     // Write the shift factor to the ADC to configure the hardware oversampler.
1070:C:/StellarisWare/driverlib\adc.c ****     //
1071:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_SAC) = ulValue;
 1366              		.loc 1 1071 0 is_stmt 1
 1367 0030 7B68     		ldr	r3, [r7, #4]
 1368 0032 03F13003 		add	r3, r3, #48
 1369 0036 FA68     		ldr	r2, [r7, #12]
 1370 0038 1A60     		str	r2, [r3, #0]
1072:C:/StellarisWare/driverlib\adc.c **** }
 1371              		.loc 1 1072 0
 1372 003a 07F11407 		add	r7, r7, #20
 1373 003e BD46     		mov	sp, r7
 1374 0040 80BC     		pop	{r7}
 1375 0042 7047     		bx	lr
 1376              		.cfi_endproc
 1377              	.LFE19:
 1379              		.section	.text.ADCComparatorConfigure,"ax",%progbits
 1380              		.align	2
 1381              		.global	ADCComparatorConfigure
 1382              		.thumb
 1383              		.thumb_func
 1385              	ADCComparatorConfigure:
 1386              	.LFB20:
1073:C:/StellarisWare/driverlib\adc.c **** 
1074:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1075:C:/StellarisWare/driverlib\adc.c **** //
1076:C:/StellarisWare/driverlib\adc.c **** //! Configures an ADC digital comparator.
1077:C:/StellarisWare/driverlib\adc.c **** //!
1078:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1079:C:/StellarisWare/driverlib\adc.c **** //! \param ulComp is the index of the comparator to configure.
1080:C:/StellarisWare/driverlib\adc.c **** //! \param ulConfig is the configuration of the comparator.
1081:C:/StellarisWare/driverlib\adc.c **** //!
1082:C:/StellarisWare/driverlib\adc.c **** //! This function configures a comparator.  The \e ulConfig parameter is
1083:C:/StellarisWare/driverlib\adc.c **** //! the result of a logical OR operation between the \b ADC_COMP_TRIG_xxx, and
1084:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_COMP_INT_xxx values.
1085:C:/StellarisWare/driverlib\adc.c **** //!
1086:C:/StellarisWare/driverlib\adc.c **** //! The \b ADC_COMP_TRIG_xxx term can take on the following values:
1087:C:/StellarisWare/driverlib\adc.c **** //!
1088:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_NONE to never trigger PWM fault condition.
1089:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_LOW_ALWAYS to always trigger PWM fault condition when
1090:C:/StellarisWare/driverlib\adc.c **** //! ADC output is in the low-band.
1091:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_LOW_ONCE to trigger PWM fault condition once when ADC
1092:C:/StellarisWare/driverlib\adc.c **** //! output transitions into the low-band.
1093:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_LOW_HALWAYS to always trigger PWM fault condition when
1094:C:/StellarisWare/driverlib\adc.c **** //! ADC output is in the low-band only if ADC output has been in the high-band
1095:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1096:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_LOW_HONCE to trigger PWM fault condition once when ADC
1097:C:/StellarisWare/driverlib\adc.c **** //! output transitions into low-band only if ADC output has been in the
1098:C:/StellarisWare/driverlib\adc.c **** //! high-band since the last trigger output.
1099:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_MID_ALWAYS to always trigger PWM fault condition when
1100:C:/StellarisWare/driverlib\adc.c **** //! ADC output is in the mid-band.
1101:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_MID_ONCE to trigger PWM fault condition once when ADC
1102:C:/StellarisWare/driverlib\adc.c **** //! output transitions into the mid-band.
1103:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_HIGH_ALWAYS to always trigger PWM fault condition when
1104:C:/StellarisWare/driverlib\adc.c **** //! ADC output is in the high-band.
1105:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_HIGH_ONCE to trigger PWM fault condition once when ADC
1106:C:/StellarisWare/driverlib\adc.c **** //! output transitions into the high-band.
1107:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_HIGH_HALWAYS to always trigger PWM fault condition when
1108:C:/StellarisWare/driverlib\adc.c **** //! ADC output is in the high-band only if ADC output has been in the low-band
1109:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1110:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_TRIG_HIGH_HONCE to trigger PWM fault condition once when ADC
1111:C:/StellarisWare/driverlib\adc.c **** //! output transitions into high-band only if ADC output has been in the
1112:C:/StellarisWare/driverlib\adc.c **** //! low-band since the last trigger output.
1113:C:/StellarisWare/driverlib\adc.c **** //!
1114:C:/StellarisWare/driverlib\adc.c **** //! The \b ADC_COMP_INT_xxx term can take on the following values:
1115:C:/StellarisWare/driverlib\adc.c **** //!
1116:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_NONE to never generate ADC interrupt.
1117:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_LOW_ALWAYS to always generate ADC interrupt when ADC
1118:C:/StellarisWare/driverlib\adc.c **** //! output is in the low-band.
1119:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_LOW_ONCE to generate ADC interrupt once when ADC output
1120:C:/StellarisWare/driverlib\adc.c **** //! transitions into the low-band.
1121:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_LOW_HALWAYS to always generate ADC interrupt when ADC
1122:C:/StellarisWare/driverlib\adc.c **** //! output is in the low-band only if ADC output has been in the high-band
1123:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1124:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_LOW_HONCE to generate ADC interrupt once when ADC output
1125:C:/StellarisWare/driverlib\adc.c **** //! transitions into low-band only if ADC output has been in the high-band
1126:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1127:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_MID_ALWAYS to always generate ADC interrupt when ADC
1128:C:/StellarisWare/driverlib\adc.c **** //! output is in the mid-band.
1129:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_MID_ONCE to generate ADC interrupt once when ADC output
1130:C:/StellarisWare/driverlib\adc.c **** //! transitions into the mid-band.
1131:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_HIGH_ALWAYS to always generate ADC interrupt when ADC
1132:C:/StellarisWare/driverlib\adc.c **** //! output is in the high-band.
1133:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_HIGH_ONCE to generate ADC interrupt once when ADC output
1134:C:/StellarisWare/driverlib\adc.c **** //! transitions into the high-band.
1135:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_HIGH_HALWAYS to always generate ADC interrupt when ADC
1136:C:/StellarisWare/driverlib\adc.c **** //! output is in the high-band only if ADC output has been in the low-band
1137:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1138:C:/StellarisWare/driverlib\adc.c **** //! - \b ADC_COMP_INT_HIGH_HONCE to generate ADC interrupt once when ADC output
1139:C:/StellarisWare/driverlib\adc.c **** //! transitions into high-band only if ADC output has been in the low-band
1140:C:/StellarisWare/driverlib\adc.c **** //! since the last trigger output.
1141:C:/StellarisWare/driverlib\adc.c **** //!
1142:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1143:C:/StellarisWare/driverlib\adc.c **** //
1144:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1145:C:/StellarisWare/driverlib\adc.c **** void
1146:C:/StellarisWare/driverlib\adc.c **** ADCComparatorConfigure(unsigned long ulBase, unsigned long ulComp,
1147:C:/StellarisWare/driverlib\adc.c ****                        unsigned long ulConfig)
1148:C:/StellarisWare/driverlib\adc.c **** {
 1387              		.loc 1 1148 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 16
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391              		@ link register save eliminated.
 1392 0000 80B4     		push	{r7}
 1393              	.LCFI60:
 1394              		.cfi_def_cfa_offset 4
 1395              		.cfi_offset 7, -4
 1396 0002 85B0     		sub	sp, sp, #20
 1397              	.LCFI61:
 1398              		.cfi_def_cfa_offset 24
 1399 0004 00AF     		add	r7, sp, #0
 1400              	.LCFI62:
 1401              		.cfi_def_cfa_register 7
 1402 0006 F860     		str	r0, [r7, #12]
 1403 0008 B960     		str	r1, [r7, #8]
 1404 000a 7A60     		str	r2, [r7, #4]
1149:C:/StellarisWare/driverlib\adc.c ****     //
1150:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1151:C:/StellarisWare/driverlib\adc.c ****     //
1152:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1153:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulComp < 8);
1154:C:/StellarisWare/driverlib\adc.c **** 
1155:C:/StellarisWare/driverlib\adc.c ****     //
1156:C:/StellarisWare/driverlib\adc.c ****     // Save the new setting.
1157:C:/StellarisWare/driverlib\adc.c ****     //
1158:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_DCCTL0 + (ulComp * 4)) = ulConfig;
 1405              		.loc 1 1158 0
 1406 000c BB68     		ldr	r3, [r7, #8]
 1407 000e 4FEA8302 		lsl	r2, r3, #2
 1408 0012 FB68     		ldr	r3, [r7, #12]
 1409 0014 D318     		adds	r3, r2, r3
 1410 0016 03F56063 		add	r3, r3, #3584
 1411 001a 7A68     		ldr	r2, [r7, #4]
 1412 001c 1A60     		str	r2, [r3, #0]
1159:C:/StellarisWare/driverlib\adc.c **** }
 1413              		.loc 1 1159 0
 1414 001e 07F11407 		add	r7, r7, #20
 1415 0022 BD46     		mov	sp, r7
 1416 0024 80BC     		pop	{r7}
 1417 0026 7047     		bx	lr
 1418              		.cfi_endproc
 1419              	.LFE20:
 1421              		.section	.text.ADCComparatorRegionSet,"ax",%progbits
 1422              		.align	2
 1423              		.global	ADCComparatorRegionSet
 1424              		.thumb
 1425              		.thumb_func
 1427              	ADCComparatorRegionSet:
 1428              	.LFB21:
1160:C:/StellarisWare/driverlib\adc.c **** 
1161:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1162:C:/StellarisWare/driverlib\adc.c **** //
1163:C:/StellarisWare/driverlib\adc.c **** //! Defines the ADC digital comparator regions.
1164:C:/StellarisWare/driverlib\adc.c **** //!
1165:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1166:C:/StellarisWare/driverlib\adc.c **** //! \param ulComp is the index of the comparator to configure.
1167:C:/StellarisWare/driverlib\adc.c **** //! \param ulLowRef is the reference point for the low/mid band threshold.
1168:C:/StellarisWare/driverlib\adc.c **** //! \param ulHighRef is the reference point for the mid/high band threshold.
1169:C:/StellarisWare/driverlib\adc.c **** //!
1170:C:/StellarisWare/driverlib\adc.c **** //! The ADC digital comparator operation is based on three ADC value regions:
1171:C:/StellarisWare/driverlib\adc.c **** //! - \b low-band is defined as any ADC value less than or equal to the
1172:C:/StellarisWare/driverlib\adc.c **** //! \e ulLowRef value.
1173:C:/StellarisWare/driverlib\adc.c **** //! - \b mid-band is defined as any ADC value greater than the \e ulLowRef
1174:C:/StellarisWare/driverlib\adc.c **** //! value but less than or equal to the \e ulHighRef value.
1175:C:/StellarisWare/driverlib\adc.c **** //! - \b high-band is defined as any ADC value greater than the \e ulHighRef
1176:C:/StellarisWare/driverlib\adc.c **** //! value.
1177:C:/StellarisWare/driverlib\adc.c **** //!
1178:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1179:C:/StellarisWare/driverlib\adc.c **** //
1180:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1181:C:/StellarisWare/driverlib\adc.c **** void
1182:C:/StellarisWare/driverlib\adc.c **** ADCComparatorRegionSet(unsigned long ulBase, unsigned long ulComp,
1183:C:/StellarisWare/driverlib\adc.c ****                        unsigned long ulLowRef, unsigned long ulHighRef)
1184:C:/StellarisWare/driverlib\adc.c **** {
 1429              		.loc 1 1184 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 16
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0000 80B4     		push	{r7}
 1435              	.LCFI63:
 1436              		.cfi_def_cfa_offset 4
 1437              		.cfi_offset 7, -4
 1438 0002 85B0     		sub	sp, sp, #20
 1439              	.LCFI64:
 1440              		.cfi_def_cfa_offset 24
 1441 0004 00AF     		add	r7, sp, #0
 1442              	.LCFI65:
 1443              		.cfi_def_cfa_register 7
 1444 0006 F860     		str	r0, [r7, #12]
 1445 0008 B960     		str	r1, [r7, #8]
 1446 000a 7A60     		str	r2, [r7, #4]
 1447 000c 3B60     		str	r3, [r7, #0]
1185:C:/StellarisWare/driverlib\adc.c ****     //
1186:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1187:C:/StellarisWare/driverlib\adc.c ****     //
1188:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1189:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulComp < 8);
1190:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulLowRef < 1024) && (ulLowRef <= ulHighRef));
1191:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulHighRef < 1024);
1192:C:/StellarisWare/driverlib\adc.c **** 
1193:C:/StellarisWare/driverlib\adc.c ****     //
1194:C:/StellarisWare/driverlib\adc.c ****     // Save the new region settings.
1195:C:/StellarisWare/driverlib\adc.c ****     //
1196:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_DCCMP0 + (ulComp * 4)) = (ulHighRef << 16) | ulLowRef;
 1448              		.loc 1 1196 0
 1449 000e BB68     		ldr	r3, [r7, #8]
 1450 0010 4FEA8302 		lsl	r2, r3, #2
 1451 0014 FB68     		ldr	r3, [r7, #12]
 1452 0016 D318     		adds	r3, r2, r3
 1453 0018 03F56463 		add	r3, r3, #3648
 1454 001c 3A68     		ldr	r2, [r7, #0]
 1455 001e 4FEA0241 		lsl	r1, r2, #16
 1456 0022 7A68     		ldr	r2, [r7, #4]
 1457 0024 0A43     		orrs	r2, r2, r1
 1458 0026 1A60     		str	r2, [r3, #0]
1197:C:/StellarisWare/driverlib\adc.c **** }
 1459              		.loc 1 1197 0
 1460 0028 07F11407 		add	r7, r7, #20
 1461 002c BD46     		mov	sp, r7
 1462 002e 80BC     		pop	{r7}
 1463 0030 7047     		bx	lr
 1464              		.cfi_endproc
 1465              	.LFE21:
 1467 0032 00BF     		.section	.text.ADCComparatorReset,"ax",%progbits
 1468              		.align	2
 1469              		.global	ADCComparatorReset
 1470              		.thumb
 1471              		.thumb_func
 1473              	ADCComparatorReset:
 1474              	.LFB22:
1198:C:/StellarisWare/driverlib\adc.c **** 
1199:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1200:C:/StellarisWare/driverlib\adc.c **** //
1201:C:/StellarisWare/driverlib\adc.c **** //! Resets the current ADC digital comparator conditions.
1202:C:/StellarisWare/driverlib\adc.c **** //!
1203:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1204:C:/StellarisWare/driverlib\adc.c **** //! \param ulComp is the index of the comparator.
1205:C:/StellarisWare/driverlib\adc.c **** //! \param bTrigger is the flag to indicate reset of Trigger conditions.
1206:C:/StellarisWare/driverlib\adc.c **** //! \param bInterrupt is the flag to indicate reset of Interrupt conditions.
1207:C:/StellarisWare/driverlib\adc.c **** //!
1208:C:/StellarisWare/driverlib\adc.c **** //! Because the digital comparator uses current and previous ADC values, this
1209:C:/StellarisWare/driverlib\adc.c **** //! function allows the comparator to be reset to its initial
1210:C:/StellarisWare/driverlib\adc.c **** //! value to prevent stale data from being used when a sequence is enabled.
1211:C:/StellarisWare/driverlib\adc.c **** //!
1212:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1213:C:/StellarisWare/driverlib\adc.c **** //
1214:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1215:C:/StellarisWare/driverlib\adc.c **** void
1216:C:/StellarisWare/driverlib\adc.c **** ADCComparatorReset(unsigned long ulBase, unsigned long ulComp,
1217:C:/StellarisWare/driverlib\adc.c ****                    tBoolean bTrigger, tBoolean bInterrupt)
1218:C:/StellarisWare/driverlib\adc.c **** {
 1475              		.loc 1 1218 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 24
 1478              		@ frame_needed = 1, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
 1480 0000 80B4     		push	{r7}
 1481              	.LCFI66:
 1482              		.cfi_def_cfa_offset 4
 1483              		.cfi_offset 7, -4
 1484 0002 87B0     		sub	sp, sp, #28
 1485              	.LCFI67:
 1486              		.cfi_def_cfa_offset 32
 1487 0004 00AF     		add	r7, sp, #0
 1488              	.LCFI68:
 1489              		.cfi_def_cfa_register 7
 1490 0006 F860     		str	r0, [r7, #12]
 1491 0008 B960     		str	r1, [r7, #8]
 1492 000a FA71     		strb	r2, [r7, #7]
 1493 000c BB71     		strb	r3, [r7, #6]
1219:C:/StellarisWare/driverlib\adc.c ****     unsigned long ulTemp = 0;
 1494              		.loc 1 1219 0
 1495 000e 4FF00003 		mov	r3, #0
 1496 0012 7B61     		str	r3, [r7, #20]
1220:C:/StellarisWare/driverlib\adc.c **** 
1221:C:/StellarisWare/driverlib\adc.c ****     //
1222:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1223:C:/StellarisWare/driverlib\adc.c ****     //
1224:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1225:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulComp < 8);
1226:C:/StellarisWare/driverlib\adc.c **** 
1227:C:/StellarisWare/driverlib\adc.c ****     //
1228:C:/StellarisWare/driverlib\adc.c ****     // Set the appropriate bits to reset the trigger and/or interrupt
1229:C:/StellarisWare/driverlib\adc.c ****     // comparator conditions.
1230:C:/StellarisWare/driverlib\adc.c ****     //
1231:C:/StellarisWare/driverlib\adc.c ****     if(bTrigger)
 1497              		.loc 1 1231 0
 1498 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1499 0016 002B     		cmp	r3, #0
 1500 0018 09D0     		beq	.L46
1232:C:/StellarisWare/driverlib\adc.c ****     {
1233:C:/StellarisWare/driverlib\adc.c ****         ulTemp |= (1 << (16 + ulComp));
 1501              		.loc 1 1233 0
 1502 001a BB68     		ldr	r3, [r7, #8]
 1503 001c 03F11003 		add	r3, r3, #16
 1504 0020 4FF00102 		mov	r2, #1
 1505 0024 02FA03F3 		lsl	r3, r2, r3
 1506 0028 7A69     		ldr	r2, [r7, #20]
 1507 002a 1343     		orrs	r3, r3, r2
 1508 002c 7B61     		str	r3, [r7, #20]
 1509              	.L46:
1234:C:/StellarisWare/driverlib\adc.c ****     }
1235:C:/StellarisWare/driverlib\adc.c ****     if(bInterrupt)
 1510              		.loc 1 1235 0
 1511 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1512 0030 002B     		cmp	r3, #0
 1513 0032 07D0     		beq	.L47
1236:C:/StellarisWare/driverlib\adc.c ****     {
1237:C:/StellarisWare/driverlib\adc.c ****         ulTemp |= (1 << ulComp);
 1514              		.loc 1 1237 0
 1515 0034 BB68     		ldr	r3, [r7, #8]
 1516 0036 4FF00102 		mov	r2, #1
 1517 003a 02FA03F3 		lsl	r3, r2, r3
 1518 003e 7A69     		ldr	r2, [r7, #20]
 1519 0040 1343     		orrs	r3, r3, r2
 1520 0042 7B61     		str	r3, [r7, #20]
 1521              	.L47:
1238:C:/StellarisWare/driverlib\adc.c ****     }
1239:C:/StellarisWare/driverlib\adc.c **** 
1240:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_DCRIC) = ulTemp;
 1522              		.loc 1 1240 0
 1523 0044 FB68     		ldr	r3, [r7, #12]
 1524 0046 03F55063 		add	r3, r3, #3328
 1525 004a 7A69     		ldr	r2, [r7, #20]
 1526 004c 1A60     		str	r2, [r3, #0]
1241:C:/StellarisWare/driverlib\adc.c **** }
 1527              		.loc 1 1241 0
 1528 004e 07F11C07 		add	r7, r7, #28
 1529 0052 BD46     		mov	sp, r7
 1530 0054 80BC     		pop	{r7}
 1531 0056 7047     		bx	lr
 1532              		.cfi_endproc
 1533              	.LFE22:
 1535              		.section	.text.ADCComparatorIntDisable,"ax",%progbits
 1536              		.align	2
 1537              		.global	ADCComparatorIntDisable
 1538              		.thumb
 1539              		.thumb_func
 1541              	ADCComparatorIntDisable:
 1542              	.LFB23:
1242:C:/StellarisWare/driverlib\adc.c **** 
1243:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1244:C:/StellarisWare/driverlib\adc.c **** //
1245:C:/StellarisWare/driverlib\adc.c **** //! Disables a sample sequence comparator interrupt.
1246:C:/StellarisWare/driverlib\adc.c **** //!
1247:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1248:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
1249:C:/StellarisWare/driverlib\adc.c **** //!
1250:C:/StellarisWare/driverlib\adc.c **** //! This function disables the requested sample sequence comparator interrupt.
1251:C:/StellarisWare/driverlib\adc.c **** //!
1252:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1253:C:/StellarisWare/driverlib\adc.c **** //
1254:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1255:C:/StellarisWare/driverlib\adc.c **** void
1256:C:/StellarisWare/driverlib\adc.c **** ADCComparatorIntDisable(unsigned long ulBase, unsigned long ulSequenceNum)
1257:C:/StellarisWare/driverlib\adc.c **** {
 1543              		.loc 1 1257 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 8
 1546              		@ frame_needed = 1, uses_anonymous_args = 0
 1547              		@ link register save eliminated.
 1548 0000 80B4     		push	{r7}
 1549              	.LCFI69:
 1550              		.cfi_def_cfa_offset 4
 1551              		.cfi_offset 7, -4
 1552 0002 83B0     		sub	sp, sp, #12
 1553              	.LCFI70:
 1554              		.cfi_def_cfa_offset 16
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI71:
 1557              		.cfi_def_cfa_register 7
 1558 0006 7860     		str	r0, [r7, #4]
 1559 0008 3960     		str	r1, [r7, #0]
1258:C:/StellarisWare/driverlib\adc.c ****     //
1259:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1260:C:/StellarisWare/driverlib\adc.c ****     //
1261:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1262:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
1263:C:/StellarisWare/driverlib\adc.c **** 
1264:C:/StellarisWare/driverlib\adc.c ****     //
1265:C:/StellarisWare/driverlib\adc.c ****     // Disable this sample sequence comparator interrupt.
1266:C:/StellarisWare/driverlib\adc.c ****     //
1267:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_IM) &= ~(0x10000 << ulSequenceNum);
 1560              		.loc 1 1267 0
 1561 000a 7B68     		ldr	r3, [r7, #4]
 1562 000c 03F10803 		add	r3, r3, #8
 1563 0010 7A68     		ldr	r2, [r7, #4]
 1564 0012 02F10802 		add	r2, r2, #8
 1565 0016 1168     		ldr	r1, [r2, #0]
 1566 0018 3A68     		ldr	r2, [r7, #0]
 1567 001a 4FF48030 		mov	r0, #65536
 1568 001e 00FA02F2 		lsl	r2, r0, r2
 1569 0022 6FEA0202 		mvn	r2, r2
 1570 0026 0A40     		ands	r2, r2, r1
 1571 0028 1A60     		str	r2, [r3, #0]
1268:C:/StellarisWare/driverlib\adc.c **** }
 1572              		.loc 1 1268 0
 1573 002a 07F10C07 		add	r7, r7, #12
 1574 002e BD46     		mov	sp, r7
 1575 0030 80BC     		pop	{r7}
 1576 0032 7047     		bx	lr
 1577              		.cfi_endproc
 1578              	.LFE23:
 1580              		.section	.text.ADCComparatorIntEnable,"ax",%progbits
 1581              		.align	2
 1582              		.global	ADCComparatorIntEnable
 1583              		.thumb
 1584              		.thumb_func
 1586              	ADCComparatorIntEnable:
 1587              	.LFB24:
1269:C:/StellarisWare/driverlib\adc.c **** 
1270:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1271:C:/StellarisWare/driverlib\adc.c **** //
1272:C:/StellarisWare/driverlib\adc.c **** //! Enables a sample sequence comparator interrupt.
1273:C:/StellarisWare/driverlib\adc.c **** //!
1274:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1275:C:/StellarisWare/driverlib\adc.c **** //! \param ulSequenceNum is the sample sequence number.
1276:C:/StellarisWare/driverlib\adc.c **** //!
1277:C:/StellarisWare/driverlib\adc.c **** //! This function enables the requested sample sequence comparator interrupt.
1278:C:/StellarisWare/driverlib\adc.c **** //!
1279:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1280:C:/StellarisWare/driverlib\adc.c **** //
1281:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1282:C:/StellarisWare/driverlib\adc.c **** void
1283:C:/StellarisWare/driverlib\adc.c **** ADCComparatorIntEnable(unsigned long ulBase, unsigned long ulSequenceNum)
1284:C:/StellarisWare/driverlib\adc.c **** {
 1588              		.loc 1 1284 0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 8
 1591              		@ frame_needed = 1, uses_anonymous_args = 0
 1592              		@ link register save eliminated.
 1593 0000 80B4     		push	{r7}
 1594              	.LCFI72:
 1595              		.cfi_def_cfa_offset 4
 1596              		.cfi_offset 7, -4
 1597 0002 83B0     		sub	sp, sp, #12
 1598              	.LCFI73:
 1599              		.cfi_def_cfa_offset 16
 1600 0004 00AF     		add	r7, sp, #0
 1601              	.LCFI74:
 1602              		.cfi_def_cfa_register 7
 1603 0006 7860     		str	r0, [r7, #4]
 1604 0008 3960     		str	r1, [r7, #0]
1285:C:/StellarisWare/driverlib\adc.c ****     //
1286:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1287:C:/StellarisWare/driverlib\adc.c ****     //
1288:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1289:C:/StellarisWare/driverlib\adc.c ****     ASSERT(ulSequenceNum < 4);
1290:C:/StellarisWare/driverlib\adc.c **** 
1291:C:/StellarisWare/driverlib\adc.c ****     //
1292:C:/StellarisWare/driverlib\adc.c ****     // Enable this sample sequence interrupt.
1293:C:/StellarisWare/driverlib\adc.c ****     //
1294:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_IM) |= 0x10000 << ulSequenceNum;
 1605              		.loc 1 1294 0
 1606 000a 7B68     		ldr	r3, [r7, #4]
 1607 000c 03F10803 		add	r3, r3, #8
 1608 0010 7A68     		ldr	r2, [r7, #4]
 1609 0012 02F10802 		add	r2, r2, #8
 1610 0016 1168     		ldr	r1, [r2, #0]
 1611 0018 3A68     		ldr	r2, [r7, #0]
 1612 001a 4FF48030 		mov	r0, #65536
 1613 001e 00FA02F2 		lsl	r2, r0, r2
 1614 0022 0A43     		orrs	r2, r2, r1
 1615 0024 1A60     		str	r2, [r3, #0]
1295:C:/StellarisWare/driverlib\adc.c **** }
 1616              		.loc 1 1295 0
 1617 0026 07F10C07 		add	r7, r7, #12
 1618 002a BD46     		mov	sp, r7
 1619 002c 80BC     		pop	{r7}
 1620 002e 7047     		bx	lr
 1621              		.cfi_endproc
 1622              	.LFE24:
 1624              		.section	.text.ADCComparatorIntStatus,"ax",%progbits
 1625              		.align	2
 1626              		.global	ADCComparatorIntStatus
 1627              		.thumb
 1628              		.thumb_func
 1630              	ADCComparatorIntStatus:
 1631              	.LFB25:
1296:C:/StellarisWare/driverlib\adc.c **** 
1297:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1298:C:/StellarisWare/driverlib\adc.c **** //
1299:C:/StellarisWare/driverlib\adc.c **** //! Gets the current comparator interrupt status.
1300:C:/StellarisWare/driverlib\adc.c **** //!
1301:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1302:C:/StellarisWare/driverlib\adc.c **** //!
1303:C:/StellarisWare/driverlib\adc.c **** //! This function returns the digital comparator interrupt status bits.  This
1304:C:/StellarisWare/driverlib\adc.c **** //! status is sequence agnostic.
1305:C:/StellarisWare/driverlib\adc.c **** //!
1306:C:/StellarisWare/driverlib\adc.c **** //! \return The current comparator interrupt status.
1307:C:/StellarisWare/driverlib\adc.c **** //
1308:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1309:C:/StellarisWare/driverlib\adc.c **** unsigned long
1310:C:/StellarisWare/driverlib\adc.c **** ADCComparatorIntStatus(unsigned long ulBase)
1311:C:/StellarisWare/driverlib\adc.c **** {
 1632              		.loc 1 1311 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 8
 1635              		@ frame_needed = 1, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
 1637 0000 80B4     		push	{r7}
 1638              	.LCFI75:
 1639              		.cfi_def_cfa_offset 4
 1640              		.cfi_offset 7, -4
 1641 0002 83B0     		sub	sp, sp, #12
 1642              	.LCFI76:
 1643              		.cfi_def_cfa_offset 16
 1644 0004 00AF     		add	r7, sp, #0
 1645              	.LCFI77:
 1646              		.cfi_def_cfa_register 7
 1647 0006 7860     		str	r0, [r7, #4]
1312:C:/StellarisWare/driverlib\adc.c ****     //
1313:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1314:C:/StellarisWare/driverlib\adc.c ****     //
1315:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1316:C:/StellarisWare/driverlib\adc.c **** 
1317:C:/StellarisWare/driverlib\adc.c ****     //
1318:C:/StellarisWare/driverlib\adc.c ****     // Return the digital comparator interrupt status.
1319:C:/StellarisWare/driverlib\adc.c ****     //
1320:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_DCISC));
 1648              		.loc 1 1320 0
 1649 0008 7B68     		ldr	r3, [r7, #4]
 1650 000a 03F13403 		add	r3, r3, #52
 1651 000e 1B68     		ldr	r3, [r3, #0]
1321:C:/StellarisWare/driverlib\adc.c **** }
 1652              		.loc 1 1321 0
 1653 0010 1846     		mov	r0, r3
 1654 0012 07F10C07 		add	r7, r7, #12
 1655 0016 BD46     		mov	sp, r7
 1656 0018 80BC     		pop	{r7}
 1657 001a 7047     		bx	lr
 1658              		.cfi_endproc
 1659              	.LFE25:
 1661              		.section	.text.ADCComparatorIntClear,"ax",%progbits
 1662              		.align	2
 1663              		.global	ADCComparatorIntClear
 1664              		.thumb
 1665              		.thumb_func
 1667              	ADCComparatorIntClear:
 1668              	.LFB26:
1322:C:/StellarisWare/driverlib\adc.c **** 
1323:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1324:C:/StellarisWare/driverlib\adc.c **** //
1325:C:/StellarisWare/driverlib\adc.c **** //! Clears sample sequence comparator interrupt source.
1326:C:/StellarisWare/driverlib\adc.c **** //!
1327:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1328:C:/StellarisWare/driverlib\adc.c **** //! \param ulStatus is the bit-mapped interrupts status to clear.
1329:C:/StellarisWare/driverlib\adc.c **** //!
1330:C:/StellarisWare/driverlib\adc.c **** //! The specified interrupt status is cleared.
1331:C:/StellarisWare/driverlib\adc.c **** //!
1332:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1333:C:/StellarisWare/driverlib\adc.c **** //
1334:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1335:C:/StellarisWare/driverlib\adc.c **** void
1336:C:/StellarisWare/driverlib\adc.c **** ADCComparatorIntClear(unsigned long ulBase, unsigned long ulStatus)
1337:C:/StellarisWare/driverlib\adc.c **** {
 1669              		.loc 1 1337 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 8
 1672              		@ frame_needed = 1, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
 1674 0000 80B4     		push	{r7}
 1675              	.LCFI78:
 1676              		.cfi_def_cfa_offset 4
 1677              		.cfi_offset 7, -4
 1678 0002 83B0     		sub	sp, sp, #12
 1679              	.LCFI79:
 1680              		.cfi_def_cfa_offset 16
 1681 0004 00AF     		add	r7, sp, #0
 1682              	.LCFI80:
 1683              		.cfi_def_cfa_register 7
 1684 0006 7860     		str	r0, [r7, #4]
 1685 0008 3960     		str	r1, [r7, #0]
1338:C:/StellarisWare/driverlib\adc.c ****     //
1339:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1340:C:/StellarisWare/driverlib\adc.c ****     //
1341:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1342:C:/StellarisWare/driverlib\adc.c **** 
1343:C:/StellarisWare/driverlib\adc.c ****     //
1344:C:/StellarisWare/driverlib\adc.c ****     // Clear the interrupt.
1345:C:/StellarisWare/driverlib\adc.c ****     //
1346:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_DCISC) = ulStatus;
 1686              		.loc 1 1346 0
 1687 000a 7B68     		ldr	r3, [r7, #4]
 1688 000c 03F13403 		add	r3, r3, #52
 1689 0010 3A68     		ldr	r2, [r7, #0]
 1690 0012 1A60     		str	r2, [r3, #0]
1347:C:/StellarisWare/driverlib\adc.c **** }
 1691              		.loc 1 1347 0
 1692 0014 07F10C07 		add	r7, r7, #12
 1693 0018 BD46     		mov	sp, r7
 1694 001a 80BC     		pop	{r7}
 1695 001c 7047     		bx	lr
 1696              		.cfi_endproc
 1697              	.LFE26:
 1699 001e 00BF     		.section	.text.ADCReferenceSet,"ax",%progbits
 1700              		.align	2
 1701              		.global	ADCReferenceSet
 1702              		.thumb
 1703              		.thumb_func
 1705              	ADCReferenceSet:
 1706              	.LFB27:
1348:C:/StellarisWare/driverlib\adc.c **** 
1349:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1350:C:/StellarisWare/driverlib\adc.c **** //
1351:C:/StellarisWare/driverlib\adc.c **** //! Selects the ADC reference.
1352:C:/StellarisWare/driverlib\adc.c **** //!
1353:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1354:C:/StellarisWare/driverlib\adc.c **** //! \param ulRef is the reference to use.
1355:C:/StellarisWare/driverlib\adc.c **** //!
1356:C:/StellarisWare/driverlib\adc.c **** //! The ADC reference is set as specified by \e ulRef.  It must be one of
1357:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_REF_INT, \b ADC_REF_EXT_3V, or \b ADC_REF_EXT_1V for internal or
1358:C:/StellarisWare/driverlib\adc.c **** //! external reference.  If \b ADC_REF_INT is chosen, then an internal 3V
1359:C:/StellarisWare/driverlib\adc.c **** //! reference is used and no external reference is needed.  If
1360:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_REF_EXT_3V is chosen, then a 3V reference must be supplied to the
1361:C:/StellarisWare/driverlib\adc.c **** //! AVREF pin.  If \b ADC_REF_EXT_1V is chosen, then a 1V external reference
1362:C:/StellarisWare/driverlib\adc.c **** //! must be supplied to the AVREF pin.
1363:C:/StellarisWare/driverlib\adc.c **** //!
1364:C:/StellarisWare/driverlib\adc.c **** //! \note The ADC reference can only be selected on parts that have an external
1365:C:/StellarisWare/driverlib\adc.c **** //! reference.  Consult the data sheet for your part to determine if there is
1366:C:/StellarisWare/driverlib\adc.c **** //! an external reference.
1367:C:/StellarisWare/driverlib\adc.c **** //!
1368:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1369:C:/StellarisWare/driverlib\adc.c **** //
1370:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1371:C:/StellarisWare/driverlib\adc.c **** void
1372:C:/StellarisWare/driverlib\adc.c **** ADCReferenceSet(unsigned long ulBase, unsigned long ulRef)
1373:C:/StellarisWare/driverlib\adc.c **** {
 1707              		.loc 1 1373 0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 8
 1710              		@ frame_needed = 1, uses_anonymous_args = 0
 1711              		@ link register save eliminated.
 1712 0000 80B4     		push	{r7}
 1713              	.LCFI81:
 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 83B0     		sub	sp, sp, #12
 1717              	.LCFI82:
 1718              		.cfi_def_cfa_offset 16
 1719 0004 00AF     		add	r7, sp, #0
 1720              	.LCFI83:
 1721              		.cfi_def_cfa_register 7
 1722 0006 7860     		str	r0, [r7, #4]
 1723 0008 3960     		str	r1, [r7, #0]
1374:C:/StellarisWare/driverlib\adc.c ****     //
1375:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1376:C:/StellarisWare/driverlib\adc.c ****     //
1377:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1378:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulRef == ADC_REF_INT) || (ulRef == ADC_REF_EXT_3V) ||
1379:C:/StellarisWare/driverlib\adc.c ****            (ulRef == ADC_REF_EXT_1V));
1380:C:/StellarisWare/driverlib\adc.c **** 
1381:C:/StellarisWare/driverlib\adc.c ****     //
1382:C:/StellarisWare/driverlib\adc.c ****     // Set the reference.
1383:C:/StellarisWare/driverlib\adc.c ****     //
1384:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_CTL) = (HWREG(ulBase + ADC_O_CTL) & ~ADC_CTL_VREF_M) |
 1724              		.loc 1 1384 0
 1725 000a 7B68     		ldr	r3, [r7, #4]
 1726 000c 03F13803 		add	r3, r3, #56
 1727 0010 7A68     		ldr	r2, [r7, #4]
 1728 0012 02F13802 		add	r2, r2, #56
 1729 0016 1268     		ldr	r2, [r2, #0]
 1730 0018 22F00301 		bic	r1, r2, #3
 1731 001c 3A68     		ldr	r2, [r7, #0]
 1732 001e 0A43     		orrs	r2, r2, r1
 1733 0020 1A60     		str	r2, [r3, #0]
1385:C:/StellarisWare/driverlib\adc.c ****                                 ulRef;
1386:C:/StellarisWare/driverlib\adc.c **** }
 1734              		.loc 1 1386 0
 1735 0022 07F10C07 		add	r7, r7, #12
 1736 0026 BD46     		mov	sp, r7
 1737 0028 80BC     		pop	{r7}
 1738 002a 7047     		bx	lr
 1739              		.cfi_endproc
 1740              	.LFE27:
 1742              		.section	.text.ADCReferenceGet,"ax",%progbits
 1743              		.align	2
 1744              		.global	ADCReferenceGet
 1745              		.thumb
 1746              		.thumb_func
 1748              	ADCReferenceGet:
 1749              	.LFB28:
1387:C:/StellarisWare/driverlib\adc.c **** 
1388:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1389:C:/StellarisWare/driverlib\adc.c **** //
1390:C:/StellarisWare/driverlib\adc.c **** //! Returns the current setting of the ADC reference.
1391:C:/StellarisWare/driverlib\adc.c **** //!
1392:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1393:C:/StellarisWare/driverlib\adc.c **** //!
1394:C:/StellarisWare/driverlib\adc.c **** //! Returns the value of the ADC reference setting.  The returned value is one
1395:C:/StellarisWare/driverlib\adc.c **** //! of \b ADC_REF_INT, \b ADC_REF_EXT_3V, or \b ADC_REF_EXT_1V.
1396:C:/StellarisWare/driverlib\adc.c **** //!
1397:C:/StellarisWare/driverlib\adc.c **** //! \note The value returned by this function is only meaningful if used on a
1398:C:/StellarisWare/driverlib\adc.c **** //! part that is capable of using an external reference.  Consult the data
1399:C:/StellarisWare/driverlib\adc.c **** //! sheet for your part to determine if it has an external reference input.
1400:C:/StellarisWare/driverlib\adc.c **** //!
1401:C:/StellarisWare/driverlib\adc.c **** //! \return The current setting of the ADC reference.
1402:C:/StellarisWare/driverlib\adc.c **** //
1403:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1404:C:/StellarisWare/driverlib\adc.c **** unsigned long
1405:C:/StellarisWare/driverlib\adc.c **** ADCReferenceGet(unsigned long ulBase)
1406:C:/StellarisWare/driverlib\adc.c **** {
 1750              		.loc 1 1406 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 8
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755 0000 80B4     		push	{r7}
 1756              	.LCFI84:
 1757              		.cfi_def_cfa_offset 4
 1758              		.cfi_offset 7, -4
 1759 0002 83B0     		sub	sp, sp, #12
 1760              	.LCFI85:
 1761              		.cfi_def_cfa_offset 16
 1762 0004 00AF     		add	r7, sp, #0
 1763              	.LCFI86:
 1764              		.cfi_def_cfa_register 7
 1765 0006 7860     		str	r0, [r7, #4]
1407:C:/StellarisWare/driverlib\adc.c ****     //
1408:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1409:C:/StellarisWare/driverlib\adc.c ****     //
1410:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1411:C:/StellarisWare/driverlib\adc.c **** 
1412:C:/StellarisWare/driverlib\adc.c ****     //
1413:C:/StellarisWare/driverlib\adc.c ****     // Return the value of the reference.
1414:C:/StellarisWare/driverlib\adc.c ****     //
1415:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_CTL) & ADC_CTL_VREF_M);
 1766              		.loc 1 1415 0
 1767 0008 7B68     		ldr	r3, [r7, #4]
 1768 000a 03F13803 		add	r3, r3, #56
 1769 000e 1B68     		ldr	r3, [r3, #0]
 1770 0010 03F00303 		and	r3, r3, #3
1416:C:/StellarisWare/driverlib\adc.c **** }
 1771              		.loc 1 1416 0
 1772 0014 1846     		mov	r0, r3
 1773 0016 07F10C07 		add	r7, r7, #12
 1774 001a BD46     		mov	sp, r7
 1775 001c 80BC     		pop	{r7}
 1776 001e 7047     		bx	lr
 1777              		.cfi_endproc
 1778              	.LFE28:
 1780              		.section	.text.ADCResolutionSet,"ax",%progbits
 1781              		.align	2
 1782              		.global	ADCResolutionSet
 1783              		.thumb
 1784              		.thumb_func
 1786              	ADCResolutionSet:
 1787              	.LFB29:
1417:C:/StellarisWare/driverlib\adc.c **** 
1418:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1419:C:/StellarisWare/driverlib\adc.c **** //
1420:C:/StellarisWare/driverlib\adc.c **** //! Selects the ADC resolution.
1421:C:/StellarisWare/driverlib\adc.c **** //!
1422:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1423:C:/StellarisWare/driverlib\adc.c **** //! \param ulResolution is the ADC bit resolution.
1424:C:/StellarisWare/driverlib\adc.c **** //!
1425:C:/StellarisWare/driverlib\adc.c **** //! The ADC resolution is set as specified by \e ulResolution.  It must be one
1426:C:/StellarisWare/driverlib\adc.c **** //! of \b ADC_RES_12BIT or \b ADC_RES_10BIT.
1427:C:/StellarisWare/driverlib\adc.c **** //!
1428:C:/StellarisWare/driverlib\adc.c **** //! \note The ADC resolution can only be set on parts that are capable of
1429:C:/StellarisWare/driverlib\adc.c **** //! changing ADC resolution mode.  Consult the data sheet for your part to
1430:C:/StellarisWare/driverlib\adc.c **** //! determine if it is capable of operating in more than one resolution mode.
1431:C:/StellarisWare/driverlib\adc.c **** //!
1432:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1433:C:/StellarisWare/driverlib\adc.c **** //
1434:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1435:C:/StellarisWare/driverlib\adc.c **** void
1436:C:/StellarisWare/driverlib\adc.c **** ADCResolutionSet(unsigned long ulBase, unsigned long ulResolution)
1437:C:/StellarisWare/driverlib\adc.c **** {
 1788              		.loc 1 1437 0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 8
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792              		@ link register save eliminated.
 1793 0000 80B4     		push	{r7}
 1794              	.LCFI87:
 1795              		.cfi_def_cfa_offset 4
 1796              		.cfi_offset 7, -4
 1797 0002 83B0     		sub	sp, sp, #12
 1798              	.LCFI88:
 1799              		.cfi_def_cfa_offset 16
 1800 0004 00AF     		add	r7, sp, #0
 1801              	.LCFI89:
 1802              		.cfi_def_cfa_register 7
 1803 0006 7860     		str	r0, [r7, #4]
 1804 0008 3960     		str	r1, [r7, #0]
1438:C:/StellarisWare/driverlib\adc.c ****     //
1439:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1440:C:/StellarisWare/driverlib\adc.c ****     //
1441:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1442:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulResolution == ADC_RES_10BIT) || (ulResolution == ADC_RES_12BIT));
1443:C:/StellarisWare/driverlib\adc.c **** 
1444:C:/StellarisWare/driverlib\adc.c ****     //
1445:C:/StellarisWare/driverlib\adc.c ****     // Set the resolution.
1446:C:/StellarisWare/driverlib\adc.c ****     //
1447:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_CTL) = (HWREG(ulBase + ADC_O_CTL) & ~ADC_CTL_RES) |
 1805              		.loc 1 1447 0
 1806 000a 7B68     		ldr	r3, [r7, #4]
 1807 000c 03F13803 		add	r3, r3, #56
 1808 0010 7A68     		ldr	r2, [r7, #4]
 1809 0012 02F13802 		add	r2, r2, #56
 1810 0016 1268     		ldr	r2, [r2, #0]
 1811 0018 22F01001 		bic	r1, r2, #16
 1812 001c 3A68     		ldr	r2, [r7, #0]
 1813 001e 0A43     		orrs	r2, r2, r1
 1814 0020 1A60     		str	r2, [r3, #0]
1448:C:/StellarisWare/driverlib\adc.c ****                                 ulResolution;
1449:C:/StellarisWare/driverlib\adc.c **** }
 1815              		.loc 1 1449 0
 1816 0022 07F10C07 		add	r7, r7, #12
 1817 0026 BD46     		mov	sp, r7
 1818 0028 80BC     		pop	{r7}
 1819 002a 7047     		bx	lr
 1820              		.cfi_endproc
 1821              	.LFE29:
 1823              		.section	.text.ADCResolutionGet,"ax",%progbits
 1824              		.align	2
 1825              		.global	ADCResolutionGet
 1826              		.thumb
 1827              		.thumb_func
 1829              	ADCResolutionGet:
 1830              	.LFB30:
1450:C:/StellarisWare/driverlib\adc.c **** 
1451:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1452:C:/StellarisWare/driverlib\adc.c **** //
1453:C:/StellarisWare/driverlib\adc.c **** //! Gets the setting of ADC resolution.
1454:C:/StellarisWare/driverlib\adc.c **** //!
1455:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1456:C:/StellarisWare/driverlib\adc.c **** //!
1457:C:/StellarisWare/driverlib\adc.c **** //! The ADC resolution is returned as one of \b ADC_RES_12BIT or
1458:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_RES_10BIT.
1459:C:/StellarisWare/driverlib\adc.c **** //!
1460:C:/StellarisWare/driverlib\adc.c **** //! \note The value returned by this function is only meaningful if used on a
1461:C:/StellarisWare/driverlib\adc.c **** //! part that is capable of changing ADC resolution mode.  Consult the
1462:C:/StellarisWare/driverlib\adc.c **** //! data sheet for your part to determine if it is capable of operating in
1463:C:/StellarisWare/driverlib\adc.c **** //! more than one resolution mode.
1464:C:/StellarisWare/driverlib\adc.c **** //!
1465:C:/StellarisWare/driverlib\adc.c **** //! \return The current setting of the ADC resolution.
1466:C:/StellarisWare/driverlib\adc.c **** //
1467:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1468:C:/StellarisWare/driverlib\adc.c **** unsigned long
1469:C:/StellarisWare/driverlib\adc.c **** ADCResolutionGet(unsigned long ulBase)
1470:C:/StellarisWare/driverlib\adc.c **** {
 1831              		.loc 1 1470 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 8
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836 0000 80B4     		push	{r7}
 1837              	.LCFI90:
 1838              		.cfi_def_cfa_offset 4
 1839              		.cfi_offset 7, -4
 1840 0002 83B0     		sub	sp, sp, #12
 1841              	.LCFI91:
 1842              		.cfi_def_cfa_offset 16
 1843 0004 00AF     		add	r7, sp, #0
 1844              	.LCFI92:
 1845              		.cfi_def_cfa_register 7
 1846 0006 7860     		str	r0, [r7, #4]
1471:C:/StellarisWare/driverlib\adc.c ****     //
1472:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1473:C:/StellarisWare/driverlib\adc.c ****     //
1474:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1475:C:/StellarisWare/driverlib\adc.c **** 
1476:C:/StellarisWare/driverlib\adc.c ****     //
1477:C:/StellarisWare/driverlib\adc.c ****     // Get the resolution and return it to the caller.
1478:C:/StellarisWare/driverlib\adc.c ****     //
1479:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_CTL) & ADC_CTL_RES);
 1847              		.loc 1 1479 0
 1848 0008 7B68     		ldr	r3, [r7, #4]
 1849 000a 03F13803 		add	r3, r3, #56
 1850 000e 1B68     		ldr	r3, [r3, #0]
 1851 0010 03F01003 		and	r3, r3, #16
1480:C:/StellarisWare/driverlib\adc.c **** }
 1852              		.loc 1 1480 0
 1853 0014 1846     		mov	r0, r3
 1854 0016 07F10C07 		add	r7, r7, #12
 1855 001a BD46     		mov	sp, r7
 1856 001c 80BC     		pop	{r7}
 1857 001e 7047     		bx	lr
 1858              		.cfi_endproc
 1859              	.LFE30:
 1861              		.section	.text.ADCPhaseDelaySet,"ax",%progbits
 1862              		.align	2
 1863              		.global	ADCPhaseDelaySet
 1864              		.thumb
 1865              		.thumb_func
 1867              	ADCPhaseDelaySet:
 1868              	.LFB31:
1481:C:/StellarisWare/driverlib\adc.c **** 
1482:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1483:C:/StellarisWare/driverlib\adc.c **** //
1484:C:/StellarisWare/driverlib\adc.c **** //! Sets the phase delay between a trigger and the start of a sequence.
1485:C:/StellarisWare/driverlib\adc.c **** //!
1486:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1487:C:/StellarisWare/driverlib\adc.c **** //! \param ulPhase is the phase delay, specified as one of \b ADC_PHASE_0,
1488:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_22_5, \b ADC_PHASE_45, \b ADC_PHASE_67_5, \b ADC_PHASE_90,
1489:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_112_5, \b ADC_PHASE_135, \b ADC_PHASE_157_5, \b ADC_PHASE_180,
1490:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_202_5, \b ADC_PHASE_225, \b ADC_PHASE_247_5, \b ADC_PHASE_270,
1491:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_292_5, \b ADC_PHASE_315, or \b ADC_PHASE_337_5.
1492:C:/StellarisWare/driverlib\adc.c **** //!
1493:C:/StellarisWare/driverlib\adc.c **** //! This function sets the phase delay between the detection of an ADC trigger
1494:C:/StellarisWare/driverlib\adc.c **** //! event and the start of the sample sequence.  By selecting a different phase
1495:C:/StellarisWare/driverlib\adc.c **** //! delay for a pair of ADC modules (such as \b ADC_PHASE_0 and
1496:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_180) and having each ADC module sample the same analog input,
1497:C:/StellarisWare/driverlib\adc.c **** //! it is possible to increase the sampling rate of the analog input (with
1498:C:/StellarisWare/driverlib\adc.c **** //! samples N, N+2, N+4, and so on, coming from the first ADC and samples N+1,
1499:C:/StellarisWare/driverlib\adc.c **** //! N+3, N+5, and so on, coming from the second ADC).  The ADC module has a
1500:C:/StellarisWare/driverlib\adc.c **** //! single phase delay that is applied to all sample sequences within that
1501:C:/StellarisWare/driverlib\adc.c **** //! module.
1502:C:/StellarisWare/driverlib\adc.c **** //!
1503:C:/StellarisWare/driverlib\adc.c **** //! \note This capability is not available on all parts.
1504:C:/StellarisWare/driverlib\adc.c **** //!
1505:C:/StellarisWare/driverlib\adc.c **** //! \return None.
1506:C:/StellarisWare/driverlib\adc.c **** //
1507:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1508:C:/StellarisWare/driverlib\adc.c **** void
1509:C:/StellarisWare/driverlib\adc.c **** ADCPhaseDelaySet(unsigned long ulBase, unsigned long ulPhase)
1510:C:/StellarisWare/driverlib\adc.c **** {
 1869              		.loc 1 1510 0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 8
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
 1874 0000 80B4     		push	{r7}
 1875              	.LCFI93:
 1876              		.cfi_def_cfa_offset 4
 1877              		.cfi_offset 7, -4
 1878 0002 83B0     		sub	sp, sp, #12
 1879              	.LCFI94:
 1880              		.cfi_def_cfa_offset 16
 1881 0004 00AF     		add	r7, sp, #0
 1882              	.LCFI95:
 1883              		.cfi_def_cfa_register 7
 1884 0006 7860     		str	r0, [r7, #4]
 1885 0008 3960     		str	r1, [r7, #0]
1511:C:/StellarisWare/driverlib\adc.c ****     //
1512:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1513:C:/StellarisWare/driverlib\adc.c ****     //
1514:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1515:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulPhase == ADC_PHASE_0) || (ulPhase == ADC_PHASE_22_5) ||
1516:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_45) || (ulPhase == ADC_PHASE_67_5) ||
1517:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_90) || (ulPhase == ADC_PHASE_112_5) ||
1518:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_135) || (ulPhase == ADC_PHASE_157_5) ||
1519:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_180) || (ulPhase == ADC_PHASE_202_5) ||
1520:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_225) || (ulPhase == ADC_PHASE_247_5) ||
1521:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_270) || (ulPhase == ADC_PHASE_292_5) ||
1522:C:/StellarisWare/driverlib\adc.c ****            (ulPhase == ADC_PHASE_315) || (ulPhase == ADC_PHASE_337_5));
1523:C:/StellarisWare/driverlib\adc.c **** 
1524:C:/StellarisWare/driverlib\adc.c ****     //
1525:C:/StellarisWare/driverlib\adc.c ****     // Set the phase delay.
1526:C:/StellarisWare/driverlib\adc.c ****     //
1527:C:/StellarisWare/driverlib\adc.c ****     HWREG(ulBase + ADC_O_SPC) = ulPhase;
 1886              		.loc 1 1527 0
 1887 000a 7B68     		ldr	r3, [r7, #4]
 1888 000c 03F12403 		add	r3, r3, #36
 1889 0010 3A68     		ldr	r2, [r7, #0]
 1890 0012 1A60     		str	r2, [r3, #0]
1528:C:/StellarisWare/driverlib\adc.c **** }
 1891              		.loc 1 1528 0
 1892 0014 07F10C07 		add	r7, r7, #12
 1893 0018 BD46     		mov	sp, r7
 1894 001a 80BC     		pop	{r7}
 1895 001c 7047     		bx	lr
 1896              		.cfi_endproc
 1897              	.LFE31:
 1899 001e 00BF     		.section	.text.ADCPhaseDelayGet,"ax",%progbits
 1900              		.align	2
 1901              		.global	ADCPhaseDelayGet
 1902              		.thumb
 1903              		.thumb_func
 1905              	ADCPhaseDelayGet:
 1906              	.LFB32:
1529:C:/StellarisWare/driverlib\adc.c **** 
1530:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1531:C:/StellarisWare/driverlib\adc.c **** //
1532:C:/StellarisWare/driverlib\adc.c **** //! Gets the phase delay between a trigger and the start of a sequence.
1533:C:/StellarisWare/driverlib\adc.c **** //!
1534:C:/StellarisWare/driverlib\adc.c **** //! \param ulBase is the base address of the ADC module.
1535:C:/StellarisWare/driverlib\adc.c **** //!
1536:C:/StellarisWare/driverlib\adc.c **** //! This function gets the current phase delay between the detection of an ADC
1537:C:/StellarisWare/driverlib\adc.c **** //! trigger event and the start of the sample sequence.
1538:C:/StellarisWare/driverlib\adc.c **** //!
1539:C:/StellarisWare/driverlib\adc.c **** //! \return Returns the phase delay, specified as one of \b ADC_PHASE_0,
1540:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_22_5, \b ADC_PHASE_45, \b ADC_PHASE_67_5, \b ADC_PHASE_90,
1541:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_112_5, \b ADC_PHASE_135, \b ADC_PHASE_157_5, \b ADC_PHASE_180,
1542:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_202_5, \b ADC_PHASE_225, \b ADC_PHASE_247_5, \b ADC_PHASE_270,
1543:C:/StellarisWare/driverlib\adc.c **** //! \b ADC_PHASE_292_5, \b ADC_PHASE_315, or \b ADC_PHASE_337_5.
1544:C:/StellarisWare/driverlib\adc.c **** //
1545:C:/StellarisWare/driverlib\adc.c **** //*****************************************************************************
1546:C:/StellarisWare/driverlib\adc.c **** unsigned long
1547:C:/StellarisWare/driverlib\adc.c **** ADCPhaseDelayGet(unsigned long ulBase)
1548:C:/StellarisWare/driverlib\adc.c **** {
 1907              		.loc 1 1548 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 8
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912 0000 80B4     		push	{r7}
 1913              	.LCFI96:
 1914              		.cfi_def_cfa_offset 4
 1915              		.cfi_offset 7, -4
 1916 0002 83B0     		sub	sp, sp, #12
 1917              	.LCFI97:
 1918              		.cfi_def_cfa_offset 16
 1919 0004 00AF     		add	r7, sp, #0
 1920              	.LCFI98:
 1921              		.cfi_def_cfa_register 7
 1922 0006 7860     		str	r0, [r7, #4]
1549:C:/StellarisWare/driverlib\adc.c ****     //
1550:C:/StellarisWare/driverlib\adc.c ****     // Check the arguments.
1551:C:/StellarisWare/driverlib\adc.c ****     //
1552:C:/StellarisWare/driverlib\adc.c ****     ASSERT((ulBase == ADC0_BASE) || (ulBase == ADC1_BASE));
1553:C:/StellarisWare/driverlib\adc.c **** 
1554:C:/StellarisWare/driverlib\adc.c ****     //
1555:C:/StellarisWare/driverlib\adc.c ****     // Return the phase delay.
1556:C:/StellarisWare/driverlib\adc.c ****     //
1557:C:/StellarisWare/driverlib\adc.c ****     return(HWREG(ulBase + ADC_O_SPC));
 1923              		.loc 1 1557 0
 1924 0008 7B68     		ldr	r3, [r7, #4]
 1925 000a 03F12403 		add	r3, r3, #36
 1926 000e 1B68     		ldr	r3, [r3, #0]
1558:C:/StellarisWare/driverlib\adc.c **** }
 1927              		.loc 1 1558 0
 1928 0010 1846     		mov	r0, r3
 1929 0012 07F10C07 		add	r7, r7, #12
 1930 0016 BD46     		mov	sp, r7
 1931 0018 80BC     		pop	{r7}
 1932 001a 7047     		bx	lr
 1933              		.cfi_endproc
 1934              	.LFE32:
 1936              		.text
 1937              	.Letext0:
 1938              		.file 2 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:19     .bss:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:20     .bss:00000000 g_pucOversampleFactor
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:23     .text.ADCIntRegister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:28     .text.ADCIntRegister:00000000 ADCIntRegister
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:81     .text.ADCIntUnregister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:86     .text.ADCIntUnregister:00000000 ADCIntUnregister
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:136    .text.ADCIntDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:141    .text.ADCIntDisable:00000000 ADCIntDisable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:181    .text.ADCIntEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:186    .text.ADCIntEnable:00000000 ADCIntEnable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:232    .text.ADCIntStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:237    .text.ADCIntStatus:00000000 ADCIntStatus
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:313    .text.ADCIntClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:318    .text.ADCIntClear:00000000 ADCIntClear
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:353    .text.ADCSequenceEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:358    .text.ADCSequenceEnable:00000000 ADCSequenceEnable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:395    .text.ADCSequenceDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:400    .text.ADCSequenceDisable:00000000 ADCSequenceDisable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:438    .text.ADCSequenceConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:443    .text.ADCSequenceConfigure:00000000 ADCSequenceConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:521    .text.ADCSequenceStepConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:526    .text.ADCSequenceStepConfigure:00000000 ADCSequenceStepConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:703    .text.ADCSequenceOverflow:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:708    .text.ADCSequenceOverflow:00000000 ADCSequenceOverflow
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:745    .text.ADCSequenceOverflowClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:750    .text.ADCSequenceOverflowClear:00000000 ADCSequenceOverflowClear
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:785    .text.ADCSequenceUnderflow:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:790    .text.ADCSequenceUnderflow:00000000 ADCSequenceUnderflow
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:827    .text.ADCSequenceUnderflowClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:832    .text.ADCSequenceUnderflowClear:00000000 ADCSequenceUnderflowClear
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:867    .text.ADCSequenceDataGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:872    .text.ADCSequenceDataGet:00000000 ADCSequenceDataGet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:943    .text.ADCProcessorTrigger:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:948    .text.ADCProcessorTrigger:00000000 ADCProcessorTrigger
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:996    .text.ADCSoftwareOversampleConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1001   .text.ADCSoftwareOversampleConfigure:00000000 ADCSoftwareOversampleConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1058   .text.ADCSoftwareOversampleStepConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1063   .text.ADCSoftwareOversampleStepConfigure:00000000 ADCSoftwareOversampleStepConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1221   .text.ADCSoftwareOversampleDataGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1226   .text.ADCSoftwareOversampleDataGet:00000000 ADCSoftwareOversampleDataGet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1322   .text.ADCHardwareOversampleConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1327   .text.ADCHardwareOversampleConfigure:00000000 ADCHardwareOversampleConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1380   .text.ADCComparatorConfigure:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1385   .text.ADCComparatorConfigure:00000000 ADCComparatorConfigure
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1422   .text.ADCComparatorRegionSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1427   .text.ADCComparatorRegionSet:00000000 ADCComparatorRegionSet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1468   .text.ADCComparatorReset:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1473   .text.ADCComparatorReset:00000000 ADCComparatorReset
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1536   .text.ADCComparatorIntDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1541   .text.ADCComparatorIntDisable:00000000 ADCComparatorIntDisable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1581   .text.ADCComparatorIntEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1586   .text.ADCComparatorIntEnable:00000000 ADCComparatorIntEnable
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1625   .text.ADCComparatorIntStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1630   .text.ADCComparatorIntStatus:00000000 ADCComparatorIntStatus
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1662   .text.ADCComparatorIntClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1667   .text.ADCComparatorIntClear:00000000 ADCComparatorIntClear
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1700   .text.ADCReferenceSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1705   .text.ADCReferenceSet:00000000 ADCReferenceSet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1743   .text.ADCReferenceGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1748   .text.ADCReferenceGet:00000000 ADCReferenceGet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1781   .text.ADCResolutionSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1786   .text.ADCResolutionSet:00000000 ADCResolutionSet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1824   .text.ADCResolutionGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1829   .text.ADCResolutionGet:00000000 ADCResolutionGet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1862   .text.ADCPhaseDelaySet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1867   .text.ADCPhaseDelaySet:00000000 ADCPhaseDelaySet
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1900   .text.ADCPhaseDelayGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccPDh7ir.s:1905   .text.ADCPhaseDelayGet:00000000 ADCPhaseDelayGet
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
