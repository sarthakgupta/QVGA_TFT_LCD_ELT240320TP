   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"sysctl.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  22              	g_pulDCRegs:
  23 0000 10E00F40 		.word	1074782224
  24 0004 14E00F40 		.word	1074782228
  25 0008 1CE00F40 		.word	1074782236
  26 000c 10E00F40 		.word	1074782224
  27              		.align	2
  30              	g_pulSRCRRegs:
  31 0010 40E00F40 		.word	1074782272
  32 0014 44E00F40 		.word	1074782276
  33 0018 48E00F40 		.word	1074782280
  34              		.align	2
  37              	g_pulRCGCRegs:
  38 001c 00E10F40 		.word	1074782464
  39 0020 04E10F40 		.word	1074782468
  40 0024 08E10F40 		.word	1074782472
  41              		.align	2
  44              	g_pulSCGCRegs:
  45 0028 10E10F40 		.word	1074782480
  46 002c 14E10F40 		.word	1074782484
  47 0030 18E10F40 		.word	1074782488
  48              		.align	2
  51              	g_pulDCGCRegs:
  52 0034 20E10F40 		.word	1074782496
  53 0038 24E10F40 		.word	1074782500
  54 003c 28E10F40 		.word	1074782504
  55              		.align	2
  58              	g_pulXtals:
  59 0040 40420F00 		.word	1000000
  60 0044 00201C00 		.word	1843200
  61 0048 80841E00 		.word	2000000
  62 004c 00802500 		.word	2457600
  63 0050 999E3600 		.word	3579545
  64 0054 00403800 		.word	3686400
  65 0058 00093D00 		.word	4000000
  66 005c 00803E00 		.word	4096000
  67 0060 00004B00 		.word	4915200
  68 0064 404B4C00 		.word	5000000
  69 0068 00204E00 		.word	5120000
  70 006c 808D5B00 		.word	6000000
  71 0070 00C05D00 		.word	6144000
  72 0074 00807000 		.word	7372800
  73 0078 00127A00 		.word	8000000
  74 007c 00007D00 		.word	8192000
  75 0080 80969800 		.word	10000000
  76 0084 001BB700 		.word	12000000
  77 0088 0080BB00 		.word	12288000
  78 008c C0E8CE00 		.word	13560000
  79 0090 647ADA00 		.word	14318180
  80 0094 0024F400 		.word	16000000
  81 0098 0000FA00 		.word	16384000
  82 009c 80A81201 		.word	18000000
  83 00a0 002D3101 		.word	20000000
  84 00a4 00366E01 		.word	24000000
  85 00a8 40787D01 		.word	25000000
  86              		.align	2
  89              	g_ppulPeripheralMap:
  90 00ac 01001000 		.word	1048577
  91 00b0 003800F0 		.word	-268421120
  92 00b4 02001000 		.word	1048578
  93 00b8 013800F0 		.word	-268421119
  94 00bc 00011000 		.word	1048832
  95 00c0 003400F0 		.word	-268422144
  96 00c4 00021000 		.word	1049088
  97 00c8 013400F0 		.word	-268422143
  98 00cc 00041000 		.word	1049600
  99 00d0 023400F0 		.word	-268422142
 100 00d4 00011010 		.word	269484288
 101 00d8 003C00F0 		.word	-268420096
 102 00dc 00021010 		.word	269484544
 103 00e0 003C00F0 		.word	-268420096
 104 00e4 00041010 		.word	269485056
 105 00e8 003C00F0 		.word	-268420096
 106 00ec 01000020 		.word	536870913
 107 00f0 000800F0 		.word	-268433408
 108 00f4 02000020 		.word	536870914
 109 00f8 010800F0 		.word	-268433407
 110 00fc 04000020 		.word	536870916
 111 0100 020800F0 		.word	-268433406
 112 0104 08000020 		.word	536870920
 113 0108 030800F0 		.word	-268433405
 114 010c 10000020 		.word	536870928
 115 0110 040800F0 		.word	-268433404
 116 0114 20000020 		.word	536870944
 117 0118 050800F0 		.word	-268433403
 118 011c 40000020 		.word	536870976
 119 0120 060800F0 		.word	-268433402
 120 0124 80000020 		.word	536871040
 121 0128 070800F0 		.word	-268433401
 122 012c 00010020 		.word	536871168
 123 0130 080800F0 		.word	-268433400
 124 0134 40000000 		.word	64
 125 0138 001400F0 		.word	-268430336
 126 013c 00100010 		.word	268439552
 127 0140 002000F0 		.word	-268427264
 128 0144 00400010 		.word	268451840
 129 0148 012000F0 		.word	-268427263
 130 014c 10001000 		.word	1048592
 131 0150 004000F0 		.word	-268419072
 132 0154 00010010 		.word	268435712
 133 0158 004400F0 		.word	-268418048
 134 015c 00020010 		.word	268435968
 135 0160 014400F0 		.word	-268418047
 136 0164 10000010 		.word	268435472
 137 0168 001C00F0 		.word	-268428288
 138 016c 20000010 		.word	268435488
 139 0170 011C00F0 		.word	-268428287
 140 0174 01001010 		.word	269484033
 141 0178 000400F0 		.word	-268434432
 142 017c 02001010 		.word	269484034
 143 0180 010400F0 		.word	-268434431
 144 0184 04001010 		.word	269484036
 145 0188 020400F0 		.word	-268434430
 146 018c 08001010 		.word	269484040
 147 0190 030400F0 		.word	-268434429
 148 0194 01000010 		.word	268435457
 149 0198 001800F0 		.word	-268429312
 150 019c 02000010 		.word	268435458
 151 01a0 011800F0 		.word	-268429311
 152 01a4 04000010 		.word	268435460
 153 01a8 021800F0 		.word	-268429310
 154 01ac 00200020 		.word	536879104
 155 01b0 000C00F0 		.word	-268432384
 156 01b4 01001020 		.word	537919489
 157 01b8 002800F0 		.word	-268425216
 158 01bc 08000000 		.word	8
 159 01c0 000000F0 		.word	-268435456
 160 01c4 00101000 		.word	1052672
 161 01c8 010000F0 		.word	-268435455
 162              		.section	.text.SysCtlPeripheralMapToNew,"ax",%progbits
 163              		.align	2
 164              		.thumb
 165              		.thumb_func
 167              	SysCtlPeripheralMapToNew:
 168              	.LFB0:
 169              		.file 1 "C:/StellarisWare/driverlib/sysctl.c"
   1:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
   2:C:/StellarisWare/driverlib\sysctl.c **** //
   3:C:/StellarisWare/driverlib\sysctl.c **** // sysctl.c - Driver for the system controller.
   4:C:/StellarisWare/driverlib\sysctl.c **** //
   5:C:/StellarisWare/driverlib\sysctl.c **** // Copyright (c) 2005-2012 Texas Instruments Incorporated.  All rights reserved.
   6:C:/StellarisWare/driverlib\sysctl.c **** // Software License Agreement
   7:C:/StellarisWare/driverlib\sysctl.c **** // 
   8:C:/StellarisWare/driverlib\sysctl.c **** //   Redistribution and use in source and binary forms, with or without
   9:C:/StellarisWare/driverlib\sysctl.c **** //   modification, are permitted provided that the following conditions
  10:C:/StellarisWare/driverlib\sysctl.c **** //   are met:
  11:C:/StellarisWare/driverlib\sysctl.c **** // 
  12:C:/StellarisWare/driverlib\sysctl.c **** //   Redistributions of source code must retain the above copyright
  13:C:/StellarisWare/driverlib\sysctl.c **** //   notice, this list of conditions and the following disclaimer.
  14:C:/StellarisWare/driverlib\sysctl.c **** // 
  15:C:/StellarisWare/driverlib\sysctl.c **** //   Redistributions in binary form must reproduce the above copyright
  16:C:/StellarisWare/driverlib\sysctl.c **** //   notice, this list of conditions and the following disclaimer in the
  17:C:/StellarisWare/driverlib\sysctl.c **** //   documentation and/or other materials provided with the  
  18:C:/StellarisWare/driverlib\sysctl.c **** //   distribution.
  19:C:/StellarisWare/driverlib\sysctl.c **** // 
  20:C:/StellarisWare/driverlib\sysctl.c **** //   Neither the name of Texas Instruments Incorporated nor the names of
  21:C:/StellarisWare/driverlib\sysctl.c **** //   its contributors may be used to endorse or promote products derived
  22:C:/StellarisWare/driverlib\sysctl.c **** //   from this software without specific prior written permission.
  23:C:/StellarisWare/driverlib\sysctl.c **** // 
  24:C:/StellarisWare/driverlib\sysctl.c **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  25:C:/StellarisWare/driverlib\sysctl.c **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  26:C:/StellarisWare/driverlib\sysctl.c **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  27:C:/StellarisWare/driverlib\sysctl.c **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  28:C:/StellarisWare/driverlib\sysctl.c **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  29:C:/StellarisWare/driverlib\sysctl.c **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  30:C:/StellarisWare/driverlib\sysctl.c **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  31:C:/StellarisWare/driverlib\sysctl.c **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  32:C:/StellarisWare/driverlib\sysctl.c **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  33:C:/StellarisWare/driverlib\sysctl.c **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  34:C:/StellarisWare/driverlib\sysctl.c **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:C:/StellarisWare/driverlib\sysctl.c **** // 
  36:C:/StellarisWare/driverlib\sysctl.c **** // This is part of revision 9107 of the Stellaris Peripheral Driver Library.
  37:C:/StellarisWare/driverlib\sysctl.c **** //
  38:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  39:C:/StellarisWare/driverlib\sysctl.c **** 
  40:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  41:C:/StellarisWare/driverlib\sysctl.c **** //
  42:C:/StellarisWare/driverlib\sysctl.c **** //! \addtogroup sysctl_api
  43:C:/StellarisWare/driverlib\sysctl.c **** //! @{
  44:C:/StellarisWare/driverlib\sysctl.c **** //
  45:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  46:C:/StellarisWare/driverlib\sysctl.c **** 
  47:C:/StellarisWare/driverlib\sysctl.c **** #include "inc/hw_ints.h"
  48:C:/StellarisWare/driverlib\sysctl.c **** #include "inc/hw_nvic.h"
  49:C:/StellarisWare/driverlib\sysctl.c **** #include "inc/hw_sysctl.h"
  50:C:/StellarisWare/driverlib\sysctl.c **** #include "inc/hw_types.h"
  51:C:/StellarisWare/driverlib\sysctl.c **** #include "driverlib/cpu.h"
  52:C:/StellarisWare/driverlib\sysctl.c **** #include "driverlib/debug.h"
  53:C:/StellarisWare/driverlib\sysctl.c **** #include "driverlib/interrupt.h"
  54:C:/StellarisWare/driverlib\sysctl.c **** #include "driverlib/sysctl.h"
  55:C:/StellarisWare/driverlib\sysctl.c **** 
  56:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  57:C:/StellarisWare/driverlib\sysctl.c **** //
  58:C:/StellarisWare/driverlib\sysctl.c **** // This macro extracts the array index out of the peripheral number.
  59:C:/StellarisWare/driverlib\sysctl.c **** //
  60:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  61:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_PERIPH_INDEX(a)  (((a) >> 28) & 0xf)
  62:C:/StellarisWare/driverlib\sysctl.c **** 
  63:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  64:C:/StellarisWare/driverlib\sysctl.c **** //
  65:C:/StellarisWare/driverlib\sysctl.c **** // This macro constructs the peripheral bit mask from the peripheral number.
  66:C:/StellarisWare/driverlib\sysctl.c **** //
  67:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  68:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_PERIPH_MASK(a)   (((a) & 0xffff) << (((a) & 0x001f0000) >> 16))
  69:C:/StellarisWare/driverlib\sysctl.c **** 
  70:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  71:C:/StellarisWare/driverlib\sysctl.c **** //
  72:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the "peripheral set" number (which is stored in the upper
  73:C:/StellarisWare/driverlib\sysctl.c **** // nibble of the SYSCTL_PERIPH_* defines) to the SYSCTL DC? register that
  74:C:/StellarisWare/driverlib\sysctl.c **** // contains the peripheral present bit for that peripheral.
  75:C:/StellarisWare/driverlib\sysctl.c **** //
  76:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  77:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulDCRegs[] =
  78:C:/StellarisWare/driverlib\sysctl.c **** {
  79:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DC1,
  80:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DC2,
  81:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DC4,
  82:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DC1
  83:C:/StellarisWare/driverlib\sysctl.c **** };
  84:C:/StellarisWare/driverlib\sysctl.c **** 
  85:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  86:C:/StellarisWare/driverlib\sysctl.c **** //
  87:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the "peripheral set" number (which is stored in the upper
  88:C:/StellarisWare/driverlib\sysctl.c **** // nibble of the SYSCTL_PERIPH_* defines) to the SYSCTL_SRCR? register that
  89:C:/StellarisWare/driverlib\sysctl.c **** // controls the software reset for that peripheral.
  90:C:/StellarisWare/driverlib\sysctl.c **** //
  91:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
  92:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulSRCRRegs[] =
  93:C:/StellarisWare/driverlib\sysctl.c **** {
  94:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SRCR0,
  95:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SRCR1,
  96:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SRCR2
  97:C:/StellarisWare/driverlib\sysctl.c **** };
  98:C:/StellarisWare/driverlib\sysctl.c **** 
  99:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 100:C:/StellarisWare/driverlib\sysctl.c **** //
 101:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the "peripheral set" number (which is stored in the upper
 102:C:/StellarisWare/driverlib\sysctl.c **** // nibble of the SYSCTL_PERIPH_* defines) to the SYSCTL_RCGC? register that
 103:C:/StellarisWare/driverlib\sysctl.c **** // controls the run-mode enable for that peripheral.
 104:C:/StellarisWare/driverlib\sysctl.c **** //
 105:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 106:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulRCGCRegs[] =
 107:C:/StellarisWare/driverlib\sysctl.c **** {
 108:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_RCGC0,
 109:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_RCGC1,
 110:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_RCGC2
 111:C:/StellarisWare/driverlib\sysctl.c **** };
 112:C:/StellarisWare/driverlib\sysctl.c **** 
 113:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 114:C:/StellarisWare/driverlib\sysctl.c **** //
 115:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the "peripheral set" number (which is stored in the upper
 116:C:/StellarisWare/driverlib\sysctl.c **** // nibble of the SYSCTL_PERIPH_* defines) to the SYSCTL_SCGC? register that
 117:C:/StellarisWare/driverlib\sysctl.c **** // controls the sleep-mode enable for that peripheral.
 118:C:/StellarisWare/driverlib\sysctl.c **** //
 119:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 120:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulSCGCRegs[] =
 121:C:/StellarisWare/driverlib\sysctl.c **** {
 122:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SCGC0,
 123:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SCGC1,
 124:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_SCGC2
 125:C:/StellarisWare/driverlib\sysctl.c **** };
 126:C:/StellarisWare/driverlib\sysctl.c **** 
 127:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 128:C:/StellarisWare/driverlib\sysctl.c **** //
 129:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the "peripheral set" number (which is stored in the upper
 130:C:/StellarisWare/driverlib\sysctl.c **** // nibble of the SYSCTL_PERIPH_* defines) to the SYSCTL_DCGC? register that
 131:C:/StellarisWare/driverlib\sysctl.c **** // controls the deep-sleep-mode enable for that peripheral.
 132:C:/StellarisWare/driverlib\sysctl.c **** //
 133:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 134:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulDCGCRegs[] =
 135:C:/StellarisWare/driverlib\sysctl.c **** {
 136:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DCGC0,
 137:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DCGC1,
 138:C:/StellarisWare/driverlib\sysctl.c ****     SYSCTL_DCGC2
 139:C:/StellarisWare/driverlib\sysctl.c **** };
 140:C:/StellarisWare/driverlib\sysctl.c **** 
 141:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 142:C:/StellarisWare/driverlib\sysctl.c **** //
 143:C:/StellarisWare/driverlib\sysctl.c **** // An array that maps the crystal number in RCC to a frequency.
 144:C:/StellarisWare/driverlib\sysctl.c **** //
 145:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 146:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_pulXtals[] =
 147:C:/StellarisWare/driverlib\sysctl.c **** {
 148:C:/StellarisWare/driverlib\sysctl.c ****     1000000,
 149:C:/StellarisWare/driverlib\sysctl.c ****     1843200,
 150:C:/StellarisWare/driverlib\sysctl.c ****     2000000,
 151:C:/StellarisWare/driverlib\sysctl.c ****     2457600,
 152:C:/StellarisWare/driverlib\sysctl.c ****     3579545,
 153:C:/StellarisWare/driverlib\sysctl.c ****     3686400,
 154:C:/StellarisWare/driverlib\sysctl.c ****     4000000,
 155:C:/StellarisWare/driverlib\sysctl.c ****     4096000,
 156:C:/StellarisWare/driverlib\sysctl.c ****     4915200,
 157:C:/StellarisWare/driverlib\sysctl.c ****     5000000,
 158:C:/StellarisWare/driverlib\sysctl.c ****     5120000,
 159:C:/StellarisWare/driverlib\sysctl.c ****     6000000,
 160:C:/StellarisWare/driverlib\sysctl.c ****     6144000,
 161:C:/StellarisWare/driverlib\sysctl.c ****     7372800,
 162:C:/StellarisWare/driverlib\sysctl.c ****     8000000,
 163:C:/StellarisWare/driverlib\sysctl.c ****     8192000,
 164:C:/StellarisWare/driverlib\sysctl.c ****     10000000,
 165:C:/StellarisWare/driverlib\sysctl.c ****     12000000,
 166:C:/StellarisWare/driverlib\sysctl.c ****     12288000,
 167:C:/StellarisWare/driverlib\sysctl.c ****     13560000,
 168:C:/StellarisWare/driverlib\sysctl.c ****     14318180,
 169:C:/StellarisWare/driverlib\sysctl.c ****     16000000,
 170:C:/StellarisWare/driverlib\sysctl.c ****     16384000,
 171:C:/StellarisWare/driverlib\sysctl.c ****     18000000,
 172:C:/StellarisWare/driverlib\sysctl.c ****     20000000,
 173:C:/StellarisWare/driverlib\sysctl.c ****     24000000,
 174:C:/StellarisWare/driverlib\sysctl.c ****     25000000
 175:C:/StellarisWare/driverlib\sysctl.c **** };
 176:C:/StellarisWare/driverlib\sysctl.c **** 
 177:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 178:C:/StellarisWare/driverlib\sysctl.c **** //
 179:C:/StellarisWare/driverlib\sysctl.c **** // The base addresses of the various peripheral control registers.
 180:C:/StellarisWare/driverlib\sysctl.c **** //
 181:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 182:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_PPBASE           0x400fe300
 183:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_SRBASE           0x400fe500
 184:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_RCGCBASE         0x400fe600
 185:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_SCGCBASE         0x400fe700
 186:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_DCGCBASE         0x400fe800
 187:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_PCBASE           0x400fe900
 188:C:/StellarisWare/driverlib\sysctl.c **** #define SYSCTL_PRBASE           0x400fea00
 189:C:/StellarisWare/driverlib\sysctl.c **** 
 190:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 191:C:/StellarisWare/driverlib\sysctl.c **** //
 192:C:/StellarisWare/driverlib\sysctl.c **** //! \internal
 193:C:/StellarisWare/driverlib\sysctl.c **** //! Checks a peripheral identifier.
 194:C:/StellarisWare/driverlib\sysctl.c **** //!
 195:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral identifier.
 196:C:/StellarisWare/driverlib\sysctl.c **** //!
 197:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines if a peripheral identifier is valid.
 198:C:/StellarisWare/driverlib\sysctl.c **** //!
 199:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns \b true if the peripheral identifier is valid and \b false
 200:C:/StellarisWare/driverlib\sysctl.c **** //! otherwise.
 201:C:/StellarisWare/driverlib\sysctl.c **** //
 202:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 203:C:/StellarisWare/driverlib\sysctl.c **** #ifdef DEBUG
 204:C:/StellarisWare/driverlib\sysctl.c **** static tBoolean
 205:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralValid(unsigned long ulPeripheral)
 206:C:/StellarisWare/driverlib\sysctl.c **** {
 207:C:/StellarisWare/driverlib\sysctl.c ****     return((ulPeripheral == SYSCTL_PERIPH_ADC0) ||
 208:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_ADC1) ||
 209:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_CAN0) ||
 210:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_CAN1) ||
 211:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_CAN2) ||
 212:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_COMP0) ||
 213:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_COMP1) ||
 214:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_COMP2) ||
 215:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_EEPROM0) ||
 216:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_EPI0) ||
 217:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_ETH) ||
 218:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_FAN0) ||
 219:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOA) ||
 220:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOB) ||
 221:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOC) ||
 222:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOD) ||
 223:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOE) ||
 224:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOF) ||
 225:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOG) ||
 226:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOH) ||
 227:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOJ) ||
 228:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOK) ||
 229:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOL) ||
 230:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOM) ||
 231:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPION) ||
 232:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOP) ||
 233:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOQ) ||
 234:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOR) ||
 235:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_GPIOS) ||
 236:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_HIBERNATE) ||
 237:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C0) ||
 238:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C1) ||
 239:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C2) ||
 240:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C3) ||
 241:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C4) ||
 242:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2C5) ||
 243:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_I2S0) ||
 244:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_IEEE1588) ||
 245:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_LPC0) ||
 246:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_MPU) ||
 247:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_PECI0) ||
 248:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_PLL) ||
 249:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_PWM0) ||
 250:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_PWM1) ||
 251:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_QEI0) ||
 252:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_QEI1) ||
 253:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_SSI0) ||
 254:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_SSI1) ||
 255:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_SSI2) ||
 256:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_SSI3) ||
 257:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TEMP) ||
 258:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER0) ||
 259:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER1) ||
 260:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER2) ||
 261:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER3) ||
 262:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER4) ||
 263:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_TIMER5) ||
 264:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART0) ||
 265:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART1) ||
 266:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART2) ||
 267:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART3) ||
 268:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART4) ||
 269:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART5) ||
 270:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART6) ||
 271:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UART7) ||
 272:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_UDMA) ||
 273:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_USB0) ||
 274:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WDOG0) ||
 275:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WDOG1) ||
 276:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER0) ||
 277:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER1) ||
 278:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER2) ||
 279:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER3) ||
 280:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER4) ||
 281:C:/StellarisWare/driverlib\sysctl.c ****            (ulPeripheral == SYSCTL_PERIPH_WTIMER5));
 282:C:/StellarisWare/driverlib\sysctl.c **** }
 283:C:/StellarisWare/driverlib\sysctl.c **** #endif
 284:C:/StellarisWare/driverlib\sysctl.c **** 
 285:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 286:C:/StellarisWare/driverlib\sysctl.c **** //
 287:C:/StellarisWare/driverlib\sysctl.c **** // A map of old peripheral defines to new peripheral defines.  Note that the
 288:C:/StellarisWare/driverlib\sysctl.c **** // new peripheral defines will not work on parts that precede Blizzard class.
 289:C:/StellarisWare/driverlib\sysctl.c **** //
 290:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 291:C:/StellarisWare/driverlib\sysctl.c **** static const unsigned long g_ppulPeripheralMap[][2] =
 292:C:/StellarisWare/driverlib\sysctl.c **** {
 293:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_ADC0, SYSCTL_PERIPH2_ADC0 },
 294:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_ADC1, SYSCTL_PERIPH2_ADC1 },
 295:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_CAN0, SYSCTL_PERIPH2_CAN0 },
 296:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_CAN1, SYSCTL_PERIPH2_CAN1 },
 297:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_CAN2, SYSCTL_PERIPH2_CAN2 },
 298:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_COMP0, SYSCTL_PERIPH2_COMP0 },
 299:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_COMP1, SYSCTL_PERIPH2_COMP0 },
 300:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_COMP2, SYSCTL_PERIPH2_COMP0 },
 301:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOA, SYSCTL_PERIPH2_GPIOA },
 302:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOB, SYSCTL_PERIPH2_GPIOB },
 303:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOC, SYSCTL_PERIPH2_GPIOC },
 304:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOD, SYSCTL_PERIPH2_GPIOD },
 305:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOE, SYSCTL_PERIPH2_GPIOE },
 306:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOF, SYSCTL_PERIPH2_GPIOF },
 307:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOG, SYSCTL_PERIPH2_GPIOG },
 308:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOH, SYSCTL_PERIPH2_GPIOH },
 309:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_GPIOJ, SYSCTL_PERIPH2_GPIOJ },
 310:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_HIBERNATE, SYSCTL_PERIPH2_HIBERNATE },
 311:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_I2C0, SYSCTL_PERIPH2_I2C0 },
 312:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_I2C1, SYSCTL_PERIPH2_I2C1 },
 313:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_PWM0, SYSCTL_PERIPH2_PWM0 },
 314:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_QEI0, SYSCTL_PERIPH2_QEI0 },
 315:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_QEI1, SYSCTL_PERIPH2_QEI1 },
 316:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_SSI0, SYSCTL_PERIPH2_SSI0 },
 317:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_SSI1, SYSCTL_PERIPH2_SSI1 },
 318:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_TIMER0, SYSCTL_PERIPH2_TIMER0 },
 319:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_TIMER1, SYSCTL_PERIPH2_TIMER1 },
 320:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_TIMER2, SYSCTL_PERIPH2_TIMER2 },
 321:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_TIMER3, SYSCTL_PERIPH2_TIMER3 },
 322:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_UART0, SYSCTL_PERIPH2_UART0 },
 323:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_UART1, SYSCTL_PERIPH2_UART1 },
 324:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_UART2, SYSCTL_PERIPH2_UART2 },
 325:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_UDMA, SYSCTL_PERIPH2_UDMA },
 326:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_USB0, SYSCTL_PERIPH2_USB0 },
 327:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_WDOG0, SYSCTL_PERIPH2_WDOG0 },
 328:C:/StellarisWare/driverlib\sysctl.c ****     { SYSCTL_PERIPH_WDOG1, SYSCTL_PERIPH2_WDOG1 },
 329:C:/StellarisWare/driverlib\sysctl.c **** };
 330:C:/StellarisWare/driverlib\sysctl.c **** 
 331:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 332:C:/StellarisWare/driverlib\sysctl.c **** //
 333:C:/StellarisWare/driverlib\sysctl.c **** // Maps a SYSCTL_PERIPH_foo identifier into its new-style SYSCTL_PERIPH2_foo
 334:C:/StellarisWare/driverlib\sysctl.c **** // identifier.
 335:C:/StellarisWare/driverlib\sysctl.c **** //
 336:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 337:C:/StellarisWare/driverlib\sysctl.c **** static unsigned long
 338:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralMapToNew(unsigned long ulPeripheral)
 339:C:/StellarisWare/driverlib\sysctl.c **** {
 170              		.loc 1 339 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 16
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 175 0000 80B4     		push	{r7}
 176              	.LCFI0:
 177              		.cfi_def_cfa_offset 4
 178              		.cfi_offset 7, -4
 179 0002 85B0     		sub	sp, sp, #20
 180              	.LCFI1:
 181              		.cfi_def_cfa_offset 24
 182 0004 00AF     		add	r7, sp, #0
 183              	.LCFI2:
 184              		.cfi_def_cfa_register 7
 185 0006 7860     		str	r0, [r7, #4]
 340:C:/StellarisWare/driverlib\sysctl.c ****     unsigned long ulIndex;
 341:C:/StellarisWare/driverlib\sysctl.c **** 
 342:C:/StellarisWare/driverlib\sysctl.c ****     //
 343:C:/StellarisWare/driverlib\sysctl.c ****     // Loop through the table of old-style identifiers.
 344:C:/StellarisWare/driverlib\sysctl.c ****     //
 345:C:/StellarisWare/driverlib\sysctl.c ****     for(ulIndex = 0; ulIndex < (sizeof(g_ppulPeripheralMap) /
 186              		.loc 1 345 0
 187 0008 4FF00003 		mov	r3, #0
 188 000c FB60     		str	r3, [r7, #12]
 189 000e 17E0     		b	.L2
 190              	.L5:
 346:C:/StellarisWare/driverlib\sysctl.c ****                                 sizeof(g_ppulPeripheralMap[0])); ulIndex++)
 347:C:/StellarisWare/driverlib\sysctl.c ****     {
 348:C:/StellarisWare/driverlib\sysctl.c ****         //
 349:C:/StellarisWare/driverlib\sysctl.c ****         // See if this peripheral matches the old-style identifier.
 350:C:/StellarisWare/driverlib\sysctl.c ****         //
 351:C:/StellarisWare/driverlib\sysctl.c ****         if(g_ppulPeripheralMap[ulIndex][0] == ulPeripheral)
 191              		.loc 1 351 0
 192 0010 40F20003 		movw	r3, #:lower16:g_ppulPeripheralMap
 193 0014 C0F20003 		movt	r3, #:upper16:g_ppulPeripheralMap
 194 0018 FA68     		ldr	r2, [r7, #12]
 195 001a 53F83220 		ldr	r2, [r3, r2, lsl #3]
 196 001e 7B68     		ldr	r3, [r7, #4]
 197 0020 9A42     		cmp	r2, r3
 198 0022 09D1     		bne	.L3
 352:C:/StellarisWare/driverlib\sysctl.c ****         {
 353:C:/StellarisWare/driverlib\sysctl.c ****             //
 354:C:/StellarisWare/driverlib\sysctl.c ****             // Return the new-style identifier that corresponds to this
 355:C:/StellarisWare/driverlib\sysctl.c ****             // peripheral.
 356:C:/StellarisWare/driverlib\sysctl.c ****             //
 357:C:/StellarisWare/driverlib\sysctl.c ****             return(g_ppulPeripheralMap[ulIndex][1]);
 199              		.loc 1 357 0
 200 0024 40F20002 		movw	r2, #:lower16:g_ppulPeripheralMap
 201 0028 C0F20002 		movt	r2, #:upper16:g_ppulPeripheralMap
 202 002c FB68     		ldr	r3, [r7, #12]
 203 002e 4FEAC303 		lsl	r3, r3, #3
 204 0032 D318     		adds	r3, r2, r3
 205 0034 5B68     		ldr	r3, [r3, #4]
 206 0036 07E0     		b	.L4
 207              	.L3:
 346:C:/StellarisWare/driverlib\sysctl.c ****                                 sizeof(g_ppulPeripheralMap[0])); ulIndex++)
 208              		.loc 1 346 0
 209 0038 FB68     		ldr	r3, [r7, #12]
 210 003a 03F10103 		add	r3, r3, #1
 211 003e FB60     		str	r3, [r7, #12]
 212              	.L2:
 345:C:/StellarisWare/driverlib\sysctl.c ****     for(ulIndex = 0; ulIndex < (sizeof(g_ppulPeripheralMap) /
 213              		.loc 1 345 0 discriminator 1
 214 0040 FB68     		ldr	r3, [r7, #12]
 215 0042 232B     		cmp	r3, #35
 216 0044 E4D9     		bls	.L5
 358:C:/StellarisWare/driverlib\sysctl.c ****         }
 359:C:/StellarisWare/driverlib\sysctl.c ****     }
 360:C:/StellarisWare/driverlib\sysctl.c **** 
 361:C:/StellarisWare/driverlib\sysctl.c ****     //
 362:C:/StellarisWare/driverlib\sysctl.c ****     // No old-style identifier was found, so return the identifier unchanged
 363:C:/StellarisWare/driverlib\sysctl.c ****     // (on the assumption that it is already a new-style identifier).
 364:C:/StellarisWare/driverlib\sysctl.c ****     //
 365:C:/StellarisWare/driverlib\sysctl.c ****     return(ulPeripheral);
 217              		.loc 1 365 0
 218 0046 7B68     		ldr	r3, [r7, #4]
 219              	.L4:
 366:C:/StellarisWare/driverlib\sysctl.c **** }
 220              		.loc 1 366 0
 221 0048 1846     		mov	r0, r3
 222 004a 07F11407 		add	r7, r7, #20
 223 004e BD46     		mov	sp, r7
 224 0050 80BC     		pop	{r7}
 225 0052 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE0:
 229              		.section	.text.SysCtlSRAMSizeGet,"ax",%progbits
 230              		.align	2
 231              		.global	SysCtlSRAMSizeGet
 232              		.thumb
 233              		.thumb_func
 235              	SysCtlSRAMSizeGet:
 236              	.LFB1:
 367:C:/StellarisWare/driverlib\sysctl.c **** 
 368:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 369:C:/StellarisWare/driverlib\sysctl.c **** //
 370:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the size of the SRAM.
 371:C:/StellarisWare/driverlib\sysctl.c **** //!
 372:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines the size of the SRAM on the Stellaris device.
 373:C:/StellarisWare/driverlib\sysctl.c **** //!
 374:C:/StellarisWare/driverlib\sysctl.c **** //! \return The total number of bytes of SRAM.
 375:C:/StellarisWare/driverlib\sysctl.c **** //
 376:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 377:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
 378:C:/StellarisWare/driverlib\sysctl.c **** SysCtlSRAMSizeGet(void)
 379:C:/StellarisWare/driverlib\sysctl.c **** {
 237              		.loc 1 379 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 242 0000 80B4     		push	{r7}
 243              	.LCFI3:
 244              		.cfi_def_cfa_offset 4
 245              		.cfi_offset 7, -4
 246 0002 00AF     		add	r7, sp, #0
 247              	.LCFI4:
 248              		.cfi_def_cfa_register 7
 380:C:/StellarisWare/driverlib\sysctl.c ****     //
 381:C:/StellarisWare/driverlib\sysctl.c ****     // Compute the size of the SRAM.
 382:C:/StellarisWare/driverlib\sysctl.c ****     //
 383:C:/StellarisWare/driverlib\sysctl.c ****     return(((HWREG(SYSCTL_DC0) & SYSCTL_DC0_SRAMSZ_M) >> 8) + 0x100);
 249              		.loc 1 383 0
 250 0004 4EF20803 		movw	r3, #57352
 251 0008 C4F20F03 		movt	r3, 16399
 252 000c 1B68     		ldr	r3, [r3, #0]
 253 000e 4FEA1343 		lsr	r3, r3, #16
 254 0012 4FEA0343 		lsl	r3, r3, #16
 255 0016 4FEA1323 		lsr	r3, r3, #8
 256 001a 03F58073 		add	r3, r3, #256
 384:C:/StellarisWare/driverlib\sysctl.c **** }
 257              		.loc 1 384 0
 258 001e 1846     		mov	r0, r3
 259 0020 BD46     		mov	sp, r7
 260 0022 80BC     		pop	{r7}
 261 0024 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE1:
 265 0026 00BF     		.section	.text.SysCtlFlashSizeGet,"ax",%progbits
 266              		.align	2
 267              		.global	SysCtlFlashSizeGet
 268              		.thumb
 269              		.thumb_func
 271              	SysCtlFlashSizeGet:
 272              	.LFB2:
 385:C:/StellarisWare/driverlib\sysctl.c **** 
 386:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 387:C:/StellarisWare/driverlib\sysctl.c **** //
 388:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the size of the flash.
 389:C:/StellarisWare/driverlib\sysctl.c **** //!
 390:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines the size of the flash on the Stellaris device.
 391:C:/StellarisWare/driverlib\sysctl.c **** //!
 392:C:/StellarisWare/driverlib\sysctl.c **** //! \return The total number of bytes of flash.
 393:C:/StellarisWare/driverlib\sysctl.c **** //
 394:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 395:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
 396:C:/StellarisWare/driverlib\sysctl.c **** SysCtlFlashSizeGet(void)
 397:C:/StellarisWare/driverlib\sysctl.c **** {
 273              		.loc 1 397 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              	.LCFI5:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 7, -4
 282 0002 00AF     		add	r7, sp, #0
 283              	.LCFI6:
 284              		.cfi_def_cfa_register 7
 398:C:/StellarisWare/driverlib\sysctl.c ****     //
 399:C:/StellarisWare/driverlib\sysctl.c ****     // Compute the size of the flash.
 400:C:/StellarisWare/driverlib\sysctl.c ****     //
 401:C:/StellarisWare/driverlib\sysctl.c ****     return(((HWREG(SYSCTL_DC0) & SYSCTL_DC0_FLASHSZ_M) << 11) + 0x800);
 285              		.loc 1 401 0
 286 0004 4EF20803 		movw	r3, #57352
 287 0008 C4F20F03 		movt	r3, 16399
 288 000c 1B68     		ldr	r3, [r3, #0]
 289 000e 4FEA0343 		lsl	r3, r3, #16
 290 0012 4FEA1343 		lsr	r3, r3, #16
 291 0016 4FEAC323 		lsl	r3, r3, #11
 292 001a 03F50063 		add	r3, r3, #2048
 402:C:/StellarisWare/driverlib\sysctl.c **** }
 293              		.loc 1 402 0
 294 001e 1846     		mov	r0, r3
 295 0020 BD46     		mov	sp, r7
 296 0022 80BC     		pop	{r7}
 297 0024 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE2:
 301 0026 00BF     		.section	.text.SysCtlPinPresent,"ax",%progbits
 302              		.align	2
 303              		.global	SysCtlPinPresent
 304              		.thumb
 305              		.thumb_func
 307              	SysCtlPinPresent:
 308              	.LFB3:
 403:C:/StellarisWare/driverlib\sysctl.c **** 
 404:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 405:C:/StellarisWare/driverlib\sysctl.c **** //
 406:C:/StellarisWare/driverlib\sysctl.c **** //! Determines if a pin is present.
 407:C:/StellarisWare/driverlib\sysctl.c **** //!
 408:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPin is the pin in question.
 409:C:/StellarisWare/driverlib\sysctl.c **** //!
 410:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines if a particular pin is present in the device.  The
 411:C:/StellarisWare/driverlib\sysctl.c **** //! PWM, analog comparators, ADC, and timers have a varying number of pins
 412:C:/StellarisWare/driverlib\sysctl.c **** //! across members of the Stellaris family; this function determines which pins
 413:C:/StellarisWare/driverlib\sysctl.c **** //! are present on this device.
 414:C:/StellarisWare/driverlib\sysctl.c **** //!
 415:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPin argument must be only one of the following values:
 416:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_PWM0, \b SYSCTL_PIN_PWM1, \b SYSCTL_PIN_PWM2,
 417:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_PWM3, \b SYSCTL_PIN_PWM4, \b SYSCTL_PIN_PWM5,
 418:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_C0MINUS, \b SYSCTL_PIN_C0PLUS, \b SYSCTL_PIN_C0O,
 419:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_C1MINUS, \b SYSCTL_PIN_C1PLUS, \b SYSCTL_PIN_C1O,
 420:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_C2MINUS, \b SYSCTL_PIN_C2PLUS, \b SYSCTL_PIN_C2O,
 421:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_ADC0, \b SYSCTL_PIN_ADC1, \b SYSCTL_PIN_ADC2,
 422:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_ADC3, \b SYSCTL_PIN_ADC4, \b SYSCTL_PIN_ADC5,
 423:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_ADC6, \b SYSCTL_PIN_ADC7, \b SYSCTL_PIN_CCP0,
 424:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_CCP1, \b SYSCTL_PIN_CCP2, \b SYSCTL_PIN_CCP3,
 425:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_CCP4, \b SYSCTL_PIN_CCP5, \b SYSCTL_PIN_CCP6,
 426:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PIN_CCP7, \b SYSCTL_PIN_32KHZ, or \b SYSCTL_PIN_MC_FAULT0.
 427:C:/StellarisWare/driverlib\sysctl.c **** //!
 428:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns \b true if the specified pin is present and \b false if it
 429:C:/StellarisWare/driverlib\sysctl.c **** //! is not.
 430:C:/StellarisWare/driverlib\sysctl.c **** //
 431:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 432:C:/StellarisWare/driverlib\sysctl.c **** tBoolean
 433:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPinPresent(unsigned long ulPin)
 434:C:/StellarisWare/driverlib\sysctl.c **** {
 309              		.loc 1 434 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 8
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314 0000 80B4     		push	{r7}
 315              	.LCFI7:
 316              		.cfi_def_cfa_offset 4
 317              		.cfi_offset 7, -4
 318 0002 83B0     		sub	sp, sp, #12
 319              	.LCFI8:
 320              		.cfi_def_cfa_offset 16
 321 0004 00AF     		add	r7, sp, #0
 322              	.LCFI9:
 323              		.cfi_def_cfa_register 7
 324 0006 7860     		str	r0, [r7, #4]
 435:C:/StellarisWare/driverlib\sysctl.c ****     //
 436:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 437:C:/StellarisWare/driverlib\sysctl.c ****     //
 438:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulPin == SYSCTL_PIN_PWM0) ||
 439:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_PWM1) ||
 440:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_PWM2) ||
 441:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_PWM3) ||
 442:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_PWM4) ||
 443:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_PWM5) ||
 444:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C0MINUS) ||
 445:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C0PLUS) ||
 446:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C0O) ||
 447:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C1MINUS) ||
 448:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C1PLUS) ||
 449:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C1O) ||
 450:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C2MINUS) ||
 451:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C2PLUS) ||
 452:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_C2O) ||
 453:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_MC_FAULT0) ||
 454:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC0) ||
 455:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC1) ||
 456:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC2) ||
 457:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC3) ||
 458:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC4) ||
 459:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC5) ||
 460:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC6) ||
 461:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_ADC7) ||
 462:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP0) ||
 463:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP1) ||
 464:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP2) ||
 465:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP3) ||
 466:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP4) ||
 467:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_CCP5) ||
 468:C:/StellarisWare/driverlib\sysctl.c ****            (ulPin == SYSCTL_PIN_32KHZ));
 469:C:/StellarisWare/driverlib\sysctl.c **** 
 470:C:/StellarisWare/driverlib\sysctl.c ****     //
 471:C:/StellarisWare/driverlib\sysctl.c ****     // Determine if this pin is present.
 472:C:/StellarisWare/driverlib\sysctl.c ****     //
 473:C:/StellarisWare/driverlib\sysctl.c ****     if(HWREG(SYSCTL_DC3) & ulPin)
 325              		.loc 1 473 0
 326 0008 4EF21803 		movw	r3, #57368
 327 000c C4F20F03 		movt	r3, 16399
 328 0010 1A68     		ldr	r2, [r3, #0]
 329 0012 7B68     		ldr	r3, [r7, #4]
 330 0014 1340     		ands	r3, r3, r2
 331 0016 002B     		cmp	r3, #0
 332 0018 02D0     		beq	.L9
 474:C:/StellarisWare/driverlib\sysctl.c ****     {
 475:C:/StellarisWare/driverlib\sysctl.c ****         return(true);
 333              		.loc 1 475 0
 334 001a 4FF00103 		mov	r3, #1
 335 001e 01E0     		b	.L10
 336              	.L9:
 476:C:/StellarisWare/driverlib\sysctl.c ****     }
 477:C:/StellarisWare/driverlib\sysctl.c ****     else
 478:C:/StellarisWare/driverlib\sysctl.c ****     {
 479:C:/StellarisWare/driverlib\sysctl.c ****         return(false);
 337              		.loc 1 479 0
 338 0020 4FF00003 		mov	r3, #0
 339              	.L10:
 480:C:/StellarisWare/driverlib\sysctl.c ****     }
 481:C:/StellarisWare/driverlib\sysctl.c **** }
 340              		.loc 1 481 0
 341 0024 1846     		mov	r0, r3
 342 0026 07F10C07 		add	r7, r7, #12
 343 002a BD46     		mov	sp, r7
 344 002c 80BC     		pop	{r7}
 345 002e 7047     		bx	lr
 346              		.cfi_endproc
 347              	.LFE3:
 349              		.section	.text.SysCtlPeripheralPresent,"ax",%progbits
 350              		.align	2
 351              		.global	SysCtlPeripheralPresent
 352              		.thumb
 353              		.thumb_func
 355              	SysCtlPeripheralPresent:
 356              	.LFB4:
 482:C:/StellarisWare/driverlib\sysctl.c **** 
 483:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 484:C:/StellarisWare/driverlib\sysctl.c **** //
 485:C:/StellarisWare/driverlib\sysctl.c **** //! Determines if a peripheral is present.
 486:C:/StellarisWare/driverlib\sysctl.c **** //!
 487:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral in question.
 488:C:/StellarisWare/driverlib\sysctl.c **** //!
 489:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines if a particular peripheral is present in the
 490:C:/StellarisWare/driverlib\sysctl.c **** //! device.  Each member of the Stellaris family has a different peripheral
 491:C:/StellarisWare/driverlib\sysctl.c **** //! set; this function determines which peripherals are present on this device.
 492:C:/StellarisWare/driverlib\sysctl.c **** //!
 493:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 494:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 495:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 496:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EPI0,
 497:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0, \b SYSCTL_PERIPH_GPIOA,
 498:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC, \b SYSCTL_PERIPH_GPIOD,
 499:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF, \b SYSCTL_PERIPH_GPIOG,
 500:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ, \b SYSCTL_PERIPH_GPIOK,
 501:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM, \b SYSCTL_PERIPH_GPION,
 502:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ, \b SYSCTL_PERIPH_HIBERNATE,
 503:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1, \b SYSCTL_PERIPH_I2C2,
 504:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4, \b SYSCTL_PERIPH_I2C5,
 505:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_IEEE1588, \b SYSCTL_PERIPH_LPC0,
 506:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_MPU, \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PLL,
 507:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1, \b SYSCTL_PERIPH_QEI0,
 508:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0, \b SYSCTL_PERIPH_SSI1,
 509:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3, \b SYSCTL_PERIPH_TEMP,
 510:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 511:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 512:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 513:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 514:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 515:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 516:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 517:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 518:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5,
 519:C:/StellarisWare/driverlib\sysctl.c **** //!
 520:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns \b true if the specified peripheral is present and \b false
 521:C:/StellarisWare/driverlib\sysctl.c **** //! if it is not.
 522:C:/StellarisWare/driverlib\sysctl.c **** //
 523:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 524:C:/StellarisWare/driverlib\sysctl.c **** tBoolean
 525:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralPresent(unsigned long ulPeripheral)
 526:C:/StellarisWare/driverlib\sysctl.c **** {
 357              		.loc 1 526 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 8
 360              		@ frame_needed = 1, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362 0000 80B4     		push	{r7}
 363              	.LCFI10:
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 0002 83B0     		sub	sp, sp, #12
 367              	.LCFI11:
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              	.LCFI12:
 371              		.cfi_def_cfa_register 7
 372 0006 7860     		str	r0, [r7, #4]
 527:C:/StellarisWare/driverlib\sysctl.c ****     //
 528:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 529:C:/StellarisWare/driverlib\sysctl.c ****     //
 530:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 531:C:/StellarisWare/driverlib\sysctl.c **** 
 532:C:/StellarisWare/driverlib\sysctl.c ****     //
 533:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
 534:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_PPperiph registers.
 535:C:/StellarisWare/driverlib\sysctl.c ****     //
 536:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 373              		.loc 1 536 0
 374 0008 7B68     		ldr	r3, [r7, #4]
 375 000a 03F07043 		and	r3, r3, #-268435456
 376 000e B3F1704F 		cmp	r3, #-268435456
 377 0012 26D1     		bne	.L12
 537:C:/StellarisWare/driverlib\sysctl.c ****     {
 538:C:/StellarisWare/driverlib\sysctl.c ****         //
 539:C:/StellarisWare/driverlib\sysctl.c ****         // See if this peripheral is present.
 540:C:/StellarisWare/driverlib\sysctl.c ****         //
 541:C:/StellarisWare/driverlib\sysctl.c ****         return(HWREGBITW(SYSCTL_PPBASE + ((ulPeripheral & 0xff00) >> 8),
 378              		.loc 1 541 0
 379 0014 7B68     		ldr	r3, [r7, #4]
 380 0016 03F47F43 		and	r3, r3, #65280
 381 001a 4FEA1322 		lsr	r2, r3, #8
 382 001e 4FF46343 		mov	r3, #58112
 383 0022 C4F20F03 		movt	r3, 16399
 384 0026 D318     		adds	r3, r2, r3
 385 0028 03F07042 		and	r2, r3, #-268435456
 386 002c 7B68     		ldr	r3, [r7, #4]
 387 002e 03F47F43 		and	r3, r3, #65280
 388 0032 4FEA1321 		lsr	r1, r3, #8
 389 0036 4FF46343 		mov	r3, #58112
 390 003a C4F20F03 		movt	r3, 16399
 391 003e CB18     		adds	r3, r1, r3
 392 0040 23F07F43 		bic	r3, r3, #-16777216
 393 0044 23F47003 		bic	r3, r3, #15728640
 394 0048 4FEA4313 		lsl	r3, r3, #5
 395 004c 1A43     		orrs	r2, r2, r3
 396 004e 7B68     		ldr	r3, [r7, #4]
 397 0050 DBB2     		uxtb	r3, r3
 398 0052 4FEA8303 		lsl	r3, r3, #2
 399 0056 1343     		orrs	r3, r3, r2
 400 0058 43F00073 		orr	r3, r3, #33554432
 401 005c 1B68     		ldr	r3, [r3, #0]
 402 005e DBB2     		uxtb	r3, r3
 403 0060 33E0     		b	.L13
 404              	.L12:
 542:C:/StellarisWare/driverlib\sysctl.c ****                          ulPeripheral & 0xff));
 543:C:/StellarisWare/driverlib\sysctl.c ****     }
 544:C:/StellarisWare/driverlib\sysctl.c ****     else if(ulPeripheral == SYSCTL_PERIPH_USB0)
 405              		.loc 1 544 0
 406 0062 7A68     		ldr	r2, [r7, #4]
 407 0064 4FF00103 		mov	r3, #1
 408 0068 C2F21003 		movt	r3, 8208
 409 006c 9A42     		cmp	r2, r3
 410 006e 0ED1     		bne	.L14
 545:C:/StellarisWare/driverlib\sysctl.c ****     {
 546:C:/StellarisWare/driverlib\sysctl.c ****         //
 547:C:/StellarisWare/driverlib\sysctl.c ****         // USB is a special case because the DC bit is missing for USB0.
 548:C:/StellarisWare/driverlib\sysctl.c ****         //
 549:C:/StellarisWare/driverlib\sysctl.c ****         if(HWREG(SYSCTL_DC6) & SYSCTL_DC6_USB0_M)
 411              		.loc 1 549 0
 412 0070 4EF22403 		movw	r3, #57380
 413 0074 C4F20F03 		movt	r3, 16399
 414 0078 1B68     		ldr	r3, [r3, #0]
 415 007a 03F00303 		and	r3, r3, #3
 416 007e 002B     		cmp	r3, #0
 417 0080 02D0     		beq	.L15
 550:C:/StellarisWare/driverlib\sysctl.c ****         {
 551:C:/StellarisWare/driverlib\sysctl.c ****             return(true);
 418              		.loc 1 551 0
 419 0082 4FF00103 		mov	r3, #1
 420 0086 20E0     		b	.L13
 421              	.L15:
 552:C:/StellarisWare/driverlib\sysctl.c ****         }
 553:C:/StellarisWare/driverlib\sysctl.c ****         else
 554:C:/StellarisWare/driverlib\sysctl.c ****         {
 555:C:/StellarisWare/driverlib\sysctl.c ****             return(false);
 422              		.loc 1 555 0
 423 0088 4FF00003 		mov	r3, #0
 424 008c 1DE0     		b	.L13
 425              	.L14:
 556:C:/StellarisWare/driverlib\sysctl.c ****         }
 557:C:/StellarisWare/driverlib\sysctl.c ****     }
 558:C:/StellarisWare/driverlib\sysctl.c ****     else if(HWREG(g_pulDCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &
 426              		.loc 1 558 0
 427 008e 7B68     		ldr	r3, [r7, #4]
 428 0090 4FEA1372 		lsr	r2, r3, #28
 429 0094 40F20003 		movw	r3, #:lower16:g_pulDCRegs
 430 0098 C0F20003 		movt	r3, #:upper16:g_pulDCRegs
 431 009c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 432 00a0 1A68     		ldr	r2, [r3, #0]
 559:C:/StellarisWare/driverlib\sysctl.c ****             SYSCTL_PERIPH_MASK(ulPeripheral))
 433              		.loc 1 559 0
 434 00a2 7B68     		ldr	r3, [r7, #4]
 435 00a4 4FEA0343 		lsl	r3, r3, #16
 436 00a8 4FEA1343 		lsr	r3, r3, #16
 437 00ac 7968     		ldr	r1, [r7, #4]
 438 00ae 01F4F811 		and	r1, r1, #2031616
 439 00b2 4FEA1141 		lsr	r1, r1, #16
 440 00b6 03FA01F3 		lsl	r3, r3, r1
 558:C:/StellarisWare/driverlib\sysctl.c ****     else if(HWREG(g_pulDCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &
 441              		.loc 1 558 0
 442 00ba 1340     		ands	r3, r3, r2
 443 00bc 002B     		cmp	r3, #0
 444 00be 02D0     		beq	.L16
 560:C:/StellarisWare/driverlib\sysctl.c ****     {
 561:C:/StellarisWare/driverlib\sysctl.c ****         return(true);
 445              		.loc 1 561 0
 446 00c0 4FF00103 		mov	r3, #1
 447 00c4 01E0     		b	.L13
 448              	.L16:
 562:C:/StellarisWare/driverlib\sysctl.c ****     }
 563:C:/StellarisWare/driverlib\sysctl.c ****     else
 564:C:/StellarisWare/driverlib\sysctl.c ****     {
 565:C:/StellarisWare/driverlib\sysctl.c ****         return(false);
 449              		.loc 1 565 0
 450 00c6 4FF00003 		mov	r3, #0
 451              	.L13:
 566:C:/StellarisWare/driverlib\sysctl.c ****     }
 567:C:/StellarisWare/driverlib\sysctl.c **** }
 452              		.loc 1 567 0
 453 00ca 1846     		mov	r0, r3
 454 00cc 07F10C07 		add	r7, r7, #12
 455 00d0 BD46     		mov	sp, r7
 456 00d2 80BC     		pop	{r7}
 457 00d4 7047     		bx	lr
 458              		.cfi_endproc
 459              	.LFE4:
 461 00d6 00BF     		.section	.text.SysCtlPeripheralReady,"ax",%progbits
 462              		.align	2
 463              		.global	SysCtlPeripheralReady
 464              		.thumb
 465              		.thumb_func
 467              	SysCtlPeripheralReady:
 468              	.LFB5:
 568:C:/StellarisWare/driverlib\sysctl.c **** 
 569:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 570:C:/StellarisWare/driverlib\sysctl.c **** //
 571:C:/StellarisWare/driverlib\sysctl.c **** //! Determines if a peripheral is ready.
 572:C:/StellarisWare/driverlib\sysctl.c **** //!
 573:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral in question.
 574:C:/StellarisWare/driverlib\sysctl.c **** //!
 575:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines if a particular peripheral is ready to be
 576:C:/StellarisWare/driverlib\sysctl.c **** //! accessed.  The peripheral may be in a non-ready state if it is not enabled,
 577:C:/StellarisWare/driverlib\sysctl.c **** //! is being held in reset, or is in the process of becoming ready after being
 578:C:/StellarisWare/driverlib\sysctl.c **** //! enabled or taken out of reset.
 579:C:/StellarisWare/driverlib\sysctl.c **** //!
 580:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 581:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 582:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 583:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 584:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 585:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 586:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 587:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 588:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 589:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 590:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 591:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 592:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 593:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 594:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 595:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 596:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 597:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 598:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 599:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 600:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 601:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 602:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 603:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 604:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 605:C:/StellarisWare/driverlib\sysctl.c **** //!
 606:C:/StellarisWare/driverlib\sysctl.c **** //! \note The ability to check for a peripheral being ready varies based on the
 607:C:/StellarisWare/driverlib\sysctl.c **** //! Stellaris part in use.  Please consult the data sheet for the part you are
 608:C:/StellarisWare/driverlib\sysctl.c **** //! using to determine if this feature is available.
 609:C:/StellarisWare/driverlib\sysctl.c **** //!
 610:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns \b true if the specified peripheral is ready and \b false
 611:C:/StellarisWare/driverlib\sysctl.c **** //! if it is not.
 612:C:/StellarisWare/driverlib\sysctl.c **** //
 613:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 614:C:/StellarisWare/driverlib\sysctl.c **** tBoolean
 615:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralReady(unsigned long ulPeripheral)
 616:C:/StellarisWare/driverlib\sysctl.c **** {
 469              		.loc 1 616 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 8
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473 0000 80B5     		push	{r7, lr}
 474              	.LCFI13:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 14, -4
 477              		.cfi_offset 7, -8
 478 0002 82B0     		sub	sp, sp, #8
 479              	.LCFI14:
 480              		.cfi_def_cfa_offset 16
 481 0004 00AF     		add	r7, sp, #0
 482              	.LCFI15:
 483              		.cfi_def_cfa_register 7
 484 0006 7860     		str	r0, [r7, #4]
 617:C:/StellarisWare/driverlib\sysctl.c ****     //
 618:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 619:C:/StellarisWare/driverlib\sysctl.c ****     //
 620:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 621:C:/StellarisWare/driverlib\sysctl.c **** 
 622:C:/StellarisWare/driverlib\sysctl.c ****     //
 623:C:/StellarisWare/driverlib\sysctl.c ****     // Map the peripheral identifier to the new style identifiers.  If it is
 624:C:/StellarisWare/driverlib\sysctl.c ****     // already a new style identifier, this is a NOP.
 625:C:/StellarisWare/driverlib\sysctl.c ****     //
 626:C:/StellarisWare/driverlib\sysctl.c ****     ulPeripheral = SysCtlPeripheralMapToNew(ulPeripheral);
 485              		.loc 1 626 0
 486 0008 7868     		ldr	r0, [r7, #4]
 487 000a FFF7FEFF 		bl	SysCtlPeripheralMapToNew
 488 000e 7860     		str	r0, [r7, #4]
 627:C:/StellarisWare/driverlib\sysctl.c **** 
 628:C:/StellarisWare/driverlib\sysctl.c ****     //
 629:C:/StellarisWare/driverlib\sysctl.c ****     // See if this peripheral is ready.
 630:C:/StellarisWare/driverlib\sysctl.c ****     //
 631:C:/StellarisWare/driverlib\sysctl.c ****     return(HWREGBITW(SYSCTL_PRBASE + ((ulPeripheral & 0xff00) >> 8),
 489              		.loc 1 631 0
 490 0010 7B68     		ldr	r3, [r7, #4]
 491 0012 03F47F43 		and	r3, r3, #65280
 492 0016 4FEA1322 		lsr	r2, r3, #8
 493 001a 4FF46A43 		mov	r3, #59904
 494 001e C4F20F03 		movt	r3, 16399
 495 0022 D318     		adds	r3, r2, r3
 496 0024 03F07042 		and	r2, r3, #-268435456
 497 0028 7B68     		ldr	r3, [r7, #4]
 498 002a 03F47F43 		and	r3, r3, #65280
 499 002e 4FEA1321 		lsr	r1, r3, #8
 500 0032 4FF46A43 		mov	r3, #59904
 501 0036 C4F20F03 		movt	r3, 16399
 502 003a CB18     		adds	r3, r1, r3
 503 003c 23F07F43 		bic	r3, r3, #-16777216
 504 0040 23F47003 		bic	r3, r3, #15728640
 505 0044 4FEA4313 		lsl	r3, r3, #5
 506 0048 1A43     		orrs	r2, r2, r3
 507 004a 7B68     		ldr	r3, [r7, #4]
 508 004c DBB2     		uxtb	r3, r3
 509 004e 4FEA8303 		lsl	r3, r3, #2
 510 0052 1343     		orrs	r3, r3, r2
 511 0054 43F00073 		orr	r3, r3, #33554432
 512 0058 1B68     		ldr	r3, [r3, #0]
 513 005a DBB2     		uxtb	r3, r3
 632:C:/StellarisWare/driverlib\sysctl.c ****                      ulPeripheral & 0xff));
 633:C:/StellarisWare/driverlib\sysctl.c **** }
 514              		.loc 1 633 0
 515 005c 1846     		mov	r0, r3
 516 005e 07F10807 		add	r7, r7, #8
 517 0062 BD46     		mov	sp, r7
 518 0064 80BD     		pop	{r7, pc}
 519              		.cfi_endproc
 520              	.LFE5:
 522 0066 00BF     		.section	.text.SysCtlPeripheralPowerOn,"ax",%progbits
 523              		.align	2
 524              		.global	SysCtlPeripheralPowerOn
 525              		.thumb
 526              		.thumb_func
 528              	SysCtlPeripheralPowerOn:
 529              	.LFB6:
 634:C:/StellarisWare/driverlib\sysctl.c **** 
 635:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 636:C:/StellarisWare/driverlib\sysctl.c **** //
 637:C:/StellarisWare/driverlib\sysctl.c **** //! Powers on a peripheral.
 638:C:/StellarisWare/driverlib\sysctl.c **** //!
 639:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to be powered on.
 640:C:/StellarisWare/driverlib\sysctl.c **** //!
 641:C:/StellarisWare/driverlib\sysctl.c **** //! This function turns on the power to a peripheral.  The peripheral continues
 642:C:/StellarisWare/driverlib\sysctl.c **** //! to receive power even when its clock is not enabled.
 643:C:/StellarisWare/driverlib\sysctl.c **** //!
 644:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 645:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 646:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 647:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 648:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 649:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 650:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 651:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 652:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 653:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 654:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 655:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 656:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 657:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 658:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 659:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 660:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 661:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 662:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 663:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 664:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 665:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 666:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 667:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 668:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 669:C:/StellarisWare/driverlib\sysctl.c **** //!
 670:C:/StellarisWare/driverlib\sysctl.c **** //! \note The ability to power off a peripheral varies based on the Stellaris
 671:C:/StellarisWare/driverlib\sysctl.c **** //! part in use.  Please consult the data sheet for the part you are using to
 672:C:/StellarisWare/driverlib\sysctl.c **** //! determine if this feature is available.
 673:C:/StellarisWare/driverlib\sysctl.c **** //!
 674:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
 675:C:/StellarisWare/driverlib\sysctl.c **** //
 676:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 677:C:/StellarisWare/driverlib\sysctl.c **** void
 678:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralPowerOn(unsigned long ulPeripheral)
 679:C:/StellarisWare/driverlib\sysctl.c **** {
 530              		.loc 1 679 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 80B5     		push	{r7, lr}
 535              	.LCFI16:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 14, -4
 538              		.cfi_offset 7, -8
 539 0002 82B0     		sub	sp, sp, #8
 540              	.LCFI17:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI18:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 680:C:/StellarisWare/driverlib\sysctl.c ****     //
 681:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 682:C:/StellarisWare/driverlib\sysctl.c ****     //
 683:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 684:C:/StellarisWare/driverlib\sysctl.c **** 
 685:C:/StellarisWare/driverlib\sysctl.c ****     //
 686:C:/StellarisWare/driverlib\sysctl.c ****     // Map the peripheral identifier to the new style identifiers.  If it is
 687:C:/StellarisWare/driverlib\sysctl.c ****     // already a new style identifier, this is a NOP.
 688:C:/StellarisWare/driverlib\sysctl.c ****     //
 689:C:/StellarisWare/driverlib\sysctl.c ****     ulPeripheral = SysCtlPeripheralMapToNew(ulPeripheral);
 546              		.loc 1 689 0
 547 0008 7868     		ldr	r0, [r7, #4]
 548 000a FFF7FEFF 		bl	SysCtlPeripheralMapToNew
 549 000e 7860     		str	r0, [r7, #4]
 690:C:/StellarisWare/driverlib\sysctl.c **** 
 691:C:/StellarisWare/driverlib\sysctl.c ****     //
 692:C:/StellarisWare/driverlib\sysctl.c ****     // Power on this peripheral.
 693:C:/StellarisWare/driverlib\sysctl.c ****     //
 694:C:/StellarisWare/driverlib\sysctl.c ****     HWREGBITW(SYSCTL_PCBASE + ((ulPeripheral & 0xff00) >> 8),
 550              		.loc 1 694 0
 551 0010 7B68     		ldr	r3, [r7, #4]
 552 0012 03F47F43 		and	r3, r3, #65280
 553 0016 4FEA1322 		lsr	r2, r3, #8
 554 001a 4FF46943 		mov	r3, #59648
 555 001e C4F20F03 		movt	r3, 16399
 556 0022 D318     		adds	r3, r2, r3
 557 0024 03F07042 		and	r2, r3, #-268435456
 558 0028 7B68     		ldr	r3, [r7, #4]
 559 002a 03F47F43 		and	r3, r3, #65280
 560 002e 4FEA1321 		lsr	r1, r3, #8
 561 0032 4FF46943 		mov	r3, #59648
 562 0036 C4F20F03 		movt	r3, 16399
 563 003a CB18     		adds	r3, r1, r3
 564 003c 23F07F43 		bic	r3, r3, #-16777216
 565 0040 23F47003 		bic	r3, r3, #15728640
 566 0044 4FEA4313 		lsl	r3, r3, #5
 567 0048 1A43     		orrs	r2, r2, r3
 568 004a 7B68     		ldr	r3, [r7, #4]
 569 004c DBB2     		uxtb	r3, r3
 570 004e 4FEA8303 		lsl	r3, r3, #2
 571 0052 1343     		orrs	r3, r3, r2
 572 0054 43F00073 		orr	r3, r3, #33554432
 695:C:/StellarisWare/driverlib\sysctl.c ****               ulPeripheral & 0xff) = 1;
 573              		.loc 1 695 0
 574 0058 4FF00102 		mov	r2, #1
 575 005c 1A60     		str	r2, [r3, #0]
 696:C:/StellarisWare/driverlib\sysctl.c **** }
 576              		.loc 1 696 0
 577 005e 07F10807 		add	r7, r7, #8
 578 0062 BD46     		mov	sp, r7
 579 0064 80BD     		pop	{r7, pc}
 580              		.cfi_endproc
 581              	.LFE6:
 583 0066 00BF     		.section	.text.SysCtlPeripheralPowerOff,"ax",%progbits
 584              		.align	2
 585              		.global	SysCtlPeripheralPowerOff
 586              		.thumb
 587              		.thumb_func
 589              	SysCtlPeripheralPowerOff:
 590              	.LFB7:
 697:C:/StellarisWare/driverlib\sysctl.c **** 
 698:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 699:C:/StellarisWare/driverlib\sysctl.c **** //
 700:C:/StellarisWare/driverlib\sysctl.c **** //! Powers off a peripheral.
 701:C:/StellarisWare/driverlib\sysctl.c **** //!
 702:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to be powered off.
 703:C:/StellarisWare/driverlib\sysctl.c **** //!
 704:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows the power to a peripheral to be turned off.  The
 705:C:/StellarisWare/driverlib\sysctl.c **** //! peripheral continues to receive power when its clock is enabled, but
 706:C:/StellarisWare/driverlib\sysctl.c **** //! the power is removed when its clock is disabled.
 707:C:/StellarisWare/driverlib\sysctl.c **** //!
 708:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 709:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 710:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 711:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 712:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 713:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 714:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 715:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 716:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 717:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 718:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 719:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 720:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 721:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 722:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 723:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 724:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 725:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 726:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 727:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 728:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 729:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 730:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 731:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 732:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 733:C:/StellarisWare/driverlib\sysctl.c **** //!
 734:C:/StellarisWare/driverlib\sysctl.c **** //! \note The ability to power off a peripheral varies based on the Stellaris
 735:C:/StellarisWare/driverlib\sysctl.c **** //! part in use.  Please consult the data sheet for the part you are using to
 736:C:/StellarisWare/driverlib\sysctl.c **** //! determine if this feature is available.
 737:C:/StellarisWare/driverlib\sysctl.c **** //!
 738:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
 739:C:/StellarisWare/driverlib\sysctl.c **** //
 740:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 741:C:/StellarisWare/driverlib\sysctl.c **** void
 742:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralPowerOff(unsigned long ulPeripheral)
 743:C:/StellarisWare/driverlib\sysctl.c **** {
 591              		.loc 1 743 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 8
 594              		@ frame_needed = 1, uses_anonymous_args = 0
 595 0000 80B5     		push	{r7, lr}
 596              	.LCFI19:
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 14, -4
 599              		.cfi_offset 7, -8
 600 0002 82B0     		sub	sp, sp, #8
 601              	.LCFI20:
 602              		.cfi_def_cfa_offset 16
 603 0004 00AF     		add	r7, sp, #0
 604              	.LCFI21:
 605              		.cfi_def_cfa_register 7
 606 0006 7860     		str	r0, [r7, #4]
 744:C:/StellarisWare/driverlib\sysctl.c ****     //
 745:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 746:C:/StellarisWare/driverlib\sysctl.c ****     //
 747:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 748:C:/StellarisWare/driverlib\sysctl.c **** 
 749:C:/StellarisWare/driverlib\sysctl.c ****     //
 750:C:/StellarisWare/driverlib\sysctl.c ****     // Map the peripheral identifier to the new style identifiers.  If it is
 751:C:/StellarisWare/driverlib\sysctl.c ****     // already a new style identifier, this is a NOP.
 752:C:/StellarisWare/driverlib\sysctl.c ****     //
 753:C:/StellarisWare/driverlib\sysctl.c ****     ulPeripheral = SysCtlPeripheralMapToNew(ulPeripheral);
 607              		.loc 1 753 0
 608 0008 7868     		ldr	r0, [r7, #4]
 609 000a FFF7FEFF 		bl	SysCtlPeripheralMapToNew
 610 000e 7860     		str	r0, [r7, #4]
 754:C:/StellarisWare/driverlib\sysctl.c **** 
 755:C:/StellarisWare/driverlib\sysctl.c ****     //
 756:C:/StellarisWare/driverlib\sysctl.c ****     // Power off this peripheral.
 757:C:/StellarisWare/driverlib\sysctl.c ****     //
 758:C:/StellarisWare/driverlib\sysctl.c ****     HWREGBITW(SYSCTL_PCBASE + ((ulPeripheral & 0xff00) >> 8),
 611              		.loc 1 758 0
 612 0010 7B68     		ldr	r3, [r7, #4]
 613 0012 03F47F43 		and	r3, r3, #65280
 614 0016 4FEA1322 		lsr	r2, r3, #8
 615 001a 4FF46943 		mov	r3, #59648
 616 001e C4F20F03 		movt	r3, 16399
 617 0022 D318     		adds	r3, r2, r3
 618 0024 03F07042 		and	r2, r3, #-268435456
 619 0028 7B68     		ldr	r3, [r7, #4]
 620 002a 03F47F43 		and	r3, r3, #65280
 621 002e 4FEA1321 		lsr	r1, r3, #8
 622 0032 4FF46943 		mov	r3, #59648
 623 0036 C4F20F03 		movt	r3, 16399
 624 003a CB18     		adds	r3, r1, r3
 625 003c 23F07F43 		bic	r3, r3, #-16777216
 626 0040 23F47003 		bic	r3, r3, #15728640
 627 0044 4FEA4313 		lsl	r3, r3, #5
 628 0048 1A43     		orrs	r2, r2, r3
 629 004a 7B68     		ldr	r3, [r7, #4]
 630 004c DBB2     		uxtb	r3, r3
 631 004e 4FEA8303 		lsl	r3, r3, #2
 632 0052 1343     		orrs	r3, r3, r2
 633 0054 43F00073 		orr	r3, r3, #33554432
 759:C:/StellarisWare/driverlib\sysctl.c ****               ulPeripheral & 0xff) = 0;
 634              		.loc 1 759 0
 635 0058 4FF00002 		mov	r2, #0
 636 005c 1A60     		str	r2, [r3, #0]
 760:C:/StellarisWare/driverlib\sysctl.c **** }
 637              		.loc 1 760 0
 638 005e 07F10807 		add	r7, r7, #8
 639 0062 BD46     		mov	sp, r7
 640 0064 80BD     		pop	{r7, pc}
 641              		.cfi_endproc
 642              	.LFE7:
 644 0066 00BF     		.section	.text.SysCtlPeripheralReset,"ax",%progbits
 645              		.align	2
 646              		.global	SysCtlPeripheralReset
 647              		.thumb
 648              		.thumb_func
 650              	SysCtlPeripheralReset:
 651              	.LFB8:
 761:C:/StellarisWare/driverlib\sysctl.c **** 
 762:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 763:C:/StellarisWare/driverlib\sysctl.c **** //
 764:C:/StellarisWare/driverlib\sysctl.c **** //! Performs a software reset of a peripheral.
 765:C:/StellarisWare/driverlib\sysctl.c **** //!
 766:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to reset.
 767:C:/StellarisWare/driverlib\sysctl.c **** //!
 768:C:/StellarisWare/driverlib\sysctl.c **** //! This function performs a software reset of the specified peripheral.  An
 769:C:/StellarisWare/driverlib\sysctl.c **** //! individual peripheral reset signal is asserted for a brief period and then
 770:C:/StellarisWare/driverlib\sysctl.c **** //! deasserted, returning the internal state of the peripheral to its reset
 771:C:/StellarisWare/driverlib\sysctl.c **** //! condition.
 772:C:/StellarisWare/driverlib\sysctl.c **** //!
 773:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 774:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 775:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 776:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 777:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 778:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 779:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 780:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 781:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 782:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 783:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 784:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 785:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 786:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 787:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 788:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 789:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 790:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 791:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 792:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 793:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 794:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 795:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 796:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 797:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 798:C:/StellarisWare/driverlib\sysctl.c **** //!
 799:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
 800:C:/StellarisWare/driverlib\sysctl.c **** //
 801:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 802:C:/StellarisWare/driverlib\sysctl.c **** void
 803:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralReset(unsigned long ulPeripheral)
 804:C:/StellarisWare/driverlib\sysctl.c **** {
 652              		.loc 1 804 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 16
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657 0000 80B4     		push	{r7}
 658              	.LCFI22:
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0002 85B0     		sub	sp, sp, #20
 662              	.LCFI23:
 663              		.cfi_def_cfa_offset 24
 664 0004 00AF     		add	r7, sp, #0
 665              	.LCFI24:
 666              		.cfi_def_cfa_register 7
 667 0006 7860     		str	r0, [r7, #4]
 805:C:/StellarisWare/driverlib\sysctl.c ****     volatile unsigned long ulDelay;
 806:C:/StellarisWare/driverlib\sysctl.c **** 
 807:C:/StellarisWare/driverlib\sysctl.c ****     //
 808:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 809:C:/StellarisWare/driverlib\sysctl.c ****     //
 810:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 811:C:/StellarisWare/driverlib\sysctl.c **** 
 812:C:/StellarisWare/driverlib\sysctl.c ****     //
 813:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
 814:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_SRperiph registers.
 815:C:/StellarisWare/driverlib\sysctl.c ****     //
 816:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 668              		.loc 1 816 0
 669 0008 7B68     		ldr	r3, [r7, #4]
 670 000a 03F07043 		and	r3, r3, #-268435456
 671 000e B3F1704F 		cmp	r3, #-268435456
 672 0012 59D1     		bne	.L21
 817:C:/StellarisWare/driverlib\sysctl.c ****     {
 818:C:/StellarisWare/driverlib\sysctl.c ****         //
 819:C:/StellarisWare/driverlib\sysctl.c ****         // Put the peripheral into the reset state.
 820:C:/StellarisWare/driverlib\sysctl.c ****         //
 821:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_SRBASE + ((ulPeripheral & 0xff00) >> 8),
 673              		.loc 1 821 0
 674 0014 7B68     		ldr	r3, [r7, #4]
 675 0016 03F47F43 		and	r3, r3, #65280
 676 001a 4FEA1322 		lsr	r2, r3, #8
 677 001e 4FF46543 		mov	r3, #58624
 678 0022 C4F20F03 		movt	r3, 16399
 679 0026 D318     		adds	r3, r2, r3
 680 0028 03F07042 		and	r2, r3, #-268435456
 681 002c 7B68     		ldr	r3, [r7, #4]
 682 002e 03F47F43 		and	r3, r3, #65280
 683 0032 4FEA1321 		lsr	r1, r3, #8
 684 0036 4FF46543 		mov	r3, #58624
 685 003a C4F20F03 		movt	r3, 16399
 686 003e CB18     		adds	r3, r1, r3
 687 0040 23F07F43 		bic	r3, r3, #-16777216
 688 0044 23F47003 		bic	r3, r3, #15728640
 689 0048 4FEA4313 		lsl	r3, r3, #5
 690 004c 1A43     		orrs	r2, r2, r3
 691 004e 7B68     		ldr	r3, [r7, #4]
 692 0050 DBB2     		uxtb	r3, r3
 693 0052 4FEA8303 		lsl	r3, r3, #2
 694 0056 1343     		orrs	r3, r3, r2
 695 0058 43F00073 		orr	r3, r3, #33554432
 822:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 1;
 696              		.loc 1 822 0
 697 005c 4FF00102 		mov	r2, #1
 698 0060 1A60     		str	r2, [r3, #0]
 823:C:/StellarisWare/driverlib\sysctl.c **** 
 824:C:/StellarisWare/driverlib\sysctl.c ****         //
 825:C:/StellarisWare/driverlib\sysctl.c ****         // Delay for a little bit.
 826:C:/StellarisWare/driverlib\sysctl.c ****         //
 827:C:/StellarisWare/driverlib\sysctl.c ****         for(ulDelay = 0; ulDelay < 16; ulDelay++)
 699              		.loc 1 827 0
 700 0062 4FF00003 		mov	r3, #0
 701 0066 FB60     		str	r3, [r7, #12]
 702 0068 03E0     		b	.L22
 703              	.L23:
 704              		.loc 1 827 0 is_stmt 0 discriminator 2
 705 006a FB68     		ldr	r3, [r7, #12]
 706 006c 03F10103 		add	r3, r3, #1
 707 0070 FB60     		str	r3, [r7, #12]
 708              	.L22:
 709              		.loc 1 827 0 discriminator 1
 710 0072 FB68     		ldr	r3, [r7, #12]
 711 0074 0F2B     		cmp	r3, #15
 712 0076 F8D9     		bls	.L23
 828:C:/StellarisWare/driverlib\sysctl.c ****         {
 829:C:/StellarisWare/driverlib\sysctl.c ****         }
 830:C:/StellarisWare/driverlib\sysctl.c **** 
 831:C:/StellarisWare/driverlib\sysctl.c ****         //
 832:C:/StellarisWare/driverlib\sysctl.c ****         // Take the peripheral out of the reset state.
 833:C:/StellarisWare/driverlib\sysctl.c ****         //
 834:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_SRBASE + ((ulPeripheral & 0xff00) >> 8),
 713              		.loc 1 834 0 is_stmt 1
 714 0078 7B68     		ldr	r3, [r7, #4]
 715 007a 03F47F43 		and	r3, r3, #65280
 716 007e 4FEA1322 		lsr	r2, r3, #8
 717 0082 4FF46543 		mov	r3, #58624
 718 0086 C4F20F03 		movt	r3, 16399
 719 008a D318     		adds	r3, r2, r3
 720 008c 03F07042 		and	r2, r3, #-268435456
 721 0090 7B68     		ldr	r3, [r7, #4]
 722 0092 03F47F43 		and	r3, r3, #65280
 723 0096 4FEA1321 		lsr	r1, r3, #8
 724 009a 4FF46543 		mov	r3, #58624
 725 009e C4F20F03 		movt	r3, 16399
 726 00a2 CB18     		adds	r3, r1, r3
 727 00a4 23F07F43 		bic	r3, r3, #-16777216
 728 00a8 23F47003 		bic	r3, r3, #15728640
 729 00ac 4FEA4313 		lsl	r3, r3, #5
 730 00b0 1A43     		orrs	r2, r2, r3
 731 00b2 7B68     		ldr	r3, [r7, #4]
 732 00b4 DBB2     		uxtb	r3, r3
 733 00b6 4FEA8303 		lsl	r3, r3, #2
 734 00ba 1343     		orrs	r3, r3, r2
 735 00bc 43F00073 		orr	r3, r3, #33554432
 835:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 0;
 736              		.loc 1 835 0
 737 00c0 4FF00002 		mov	r2, #0
 738 00c4 1A60     		str	r2, [r3, #0]
 739 00c6 50E0     		b	.L20
 740              	.L21:
 836:C:/StellarisWare/driverlib\sysctl.c ****     }
 837:C:/StellarisWare/driverlib\sysctl.c ****     else
 838:C:/StellarisWare/driverlib\sysctl.c ****     {
 839:C:/StellarisWare/driverlib\sysctl.c ****         //
 840:C:/StellarisWare/driverlib\sysctl.c ****         // Put the peripheral into the reset state.
 841:C:/StellarisWare/driverlib\sysctl.c ****         //
 842:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 741              		.loc 1 842 0
 742 00c8 7B68     		ldr	r3, [r7, #4]
 743 00ca 4FEA1372 		lsr	r2, r3, #28
 744 00ce 40F20003 		movw	r3, #:lower16:g_pulSRCRRegs
 745 00d2 C0F20003 		movt	r3, #:upper16:g_pulSRCRRegs
 746 00d6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 747 00da 1A46     		mov	r2, r3
 748 00dc 7B68     		ldr	r3, [r7, #4]
 749 00de 4FEA1371 		lsr	r1, r3, #28
 750 00e2 40F20003 		movw	r3, #:lower16:g_pulSRCRRegs
 751 00e6 C0F20003 		movt	r3, #:upper16:g_pulSRCRRegs
 752 00ea 53F82130 		ldr	r3, [r3, r1, lsl #2]
 753 00ee 1968     		ldr	r1, [r3, #0]
 843:C:/StellarisWare/driverlib\sysctl.c ****             SYSCTL_PERIPH_MASK(ulPeripheral);
 754              		.loc 1 843 0
 755 00f0 7B68     		ldr	r3, [r7, #4]
 756 00f2 4FEA0343 		lsl	r3, r3, #16
 757 00f6 4FEA1343 		lsr	r3, r3, #16
 758 00fa 7868     		ldr	r0, [r7, #4]
 759 00fc 00F4F810 		and	r0, r0, #2031616
 760 0100 4FEA1040 		lsr	r0, r0, #16
 761 0104 03FA00F3 		lsl	r3, r3, r0
 842:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 762              		.loc 1 842 0
 763 0108 0B43     		orrs	r3, r3, r1
 764 010a 1360     		str	r3, [r2, #0]
 844:C:/StellarisWare/driverlib\sysctl.c **** 
 845:C:/StellarisWare/driverlib\sysctl.c ****         //
 846:C:/StellarisWare/driverlib\sysctl.c ****         // Delay for a little bit.
 847:C:/StellarisWare/driverlib\sysctl.c ****         //
 848:C:/StellarisWare/driverlib\sysctl.c ****         for(ulDelay = 0; ulDelay < 16; ulDelay++)
 765              		.loc 1 848 0
 766 010c 4FF00003 		mov	r3, #0
 767 0110 FB60     		str	r3, [r7, #12]
 768 0112 03E0     		b	.L25
 769              	.L26:
 770              		.loc 1 848 0 is_stmt 0 discriminator 2
 771 0114 FB68     		ldr	r3, [r7, #12]
 772 0116 03F10103 		add	r3, r3, #1
 773 011a FB60     		str	r3, [r7, #12]
 774              	.L25:
 775              		.loc 1 848 0 discriminator 1
 776 011c FB68     		ldr	r3, [r7, #12]
 777 011e 0F2B     		cmp	r3, #15
 778 0120 F8D9     		bls	.L26
 849:C:/StellarisWare/driverlib\sysctl.c ****         {
 850:C:/StellarisWare/driverlib\sysctl.c ****         }
 851:C:/StellarisWare/driverlib\sysctl.c **** 
 852:C:/StellarisWare/driverlib\sysctl.c ****         //
 853:C:/StellarisWare/driverlib\sysctl.c ****         // Take the peripheral out of the reset state.
 854:C:/StellarisWare/driverlib\sysctl.c ****         //
 855:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 779              		.loc 1 855 0 is_stmt 1
 780 0122 7B68     		ldr	r3, [r7, #4]
 781 0124 4FEA1372 		lsr	r2, r3, #28
 782 0128 40F20003 		movw	r3, #:lower16:g_pulSRCRRegs
 783 012c C0F20003 		movt	r3, #:upper16:g_pulSRCRRegs
 784 0130 53F82230 		ldr	r3, [r3, r2, lsl #2]
 785 0134 1A46     		mov	r2, r3
 786 0136 7B68     		ldr	r3, [r7, #4]
 787 0138 4FEA1371 		lsr	r1, r3, #28
 788 013c 40F20003 		movw	r3, #:lower16:g_pulSRCRRegs
 789 0140 C0F20003 		movt	r3, #:upper16:g_pulSRCRRegs
 790 0144 53F82130 		ldr	r3, [r3, r1, lsl #2]
 791 0148 1968     		ldr	r1, [r3, #0]
 856:C:/StellarisWare/driverlib\sysctl.c ****             ~SYSCTL_PERIPH_MASK(ulPeripheral);
 792              		.loc 1 856 0
 793 014a 7B68     		ldr	r3, [r7, #4]
 794 014c 4FEA0343 		lsl	r3, r3, #16
 795 0150 4FEA1343 		lsr	r3, r3, #16
 796 0154 7868     		ldr	r0, [r7, #4]
 797 0156 00F4F810 		and	r0, r0, #2031616
 798 015a 4FEA1040 		lsr	r0, r0, #16
 799 015e 03FA00F3 		lsl	r3, r3, r0
 800 0162 6FEA0303 		mvn	r3, r3
 855:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 801              		.loc 1 855 0
 802 0166 0B40     		ands	r3, r3, r1
 803 0168 1360     		str	r3, [r2, #0]
 804              	.L20:
 857:C:/StellarisWare/driverlib\sysctl.c ****     }
 858:C:/StellarisWare/driverlib\sysctl.c **** }
 805              		.loc 1 858 0
 806 016a 07F11407 		add	r7, r7, #20
 807 016e BD46     		mov	sp, r7
 808 0170 80BC     		pop	{r7}
 809 0172 7047     		bx	lr
 810              		.cfi_endproc
 811              	.LFE8:
 813              		.section	.text.SysCtlPeripheralEnable,"ax",%progbits
 814              		.align	2
 815              		.global	SysCtlPeripheralEnable
 816              		.thumb
 817              		.thumb_func
 819              	SysCtlPeripheralEnable:
 820              	.LFB9:
 859:C:/StellarisWare/driverlib\sysctl.c **** 
 860:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 861:C:/StellarisWare/driverlib\sysctl.c **** //
 862:C:/StellarisWare/driverlib\sysctl.c **** //! Enables a peripheral.
 863:C:/StellarisWare/driverlib\sysctl.c **** //!
 864:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to enable.
 865:C:/StellarisWare/driverlib\sysctl.c **** //!
 866:C:/StellarisWare/driverlib\sysctl.c **** //! This function enables peripherals.  At power-up, all peripherals
 867:C:/StellarisWare/driverlib\sysctl.c **** //! are disabled; they must be enabled in order to operate or respond to
 868:C:/StellarisWare/driverlib\sysctl.c **** //! register reads/writes.
 869:C:/StellarisWare/driverlib\sysctl.c **** //!
 870:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 871:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 872:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 873:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 874:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 875:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 876:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 877:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 878:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 879:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 880:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 881:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 882:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 883:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 884:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 885:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 886:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 887:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 888:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 889:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 890:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 891:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 892:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 893:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 894:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 895:C:/StellarisWare/driverlib\sysctl.c **** //!
 896:C:/StellarisWare/driverlib\sysctl.c **** //! \note It takes five clock cycles after the write to enable a peripheral
 897:C:/StellarisWare/driverlib\sysctl.c **** //! before the the peripheral is actually enabled.  During this time, attempts
 898:C:/StellarisWare/driverlib\sysctl.c **** //! to access the peripheral result in a bus fault.  Care should be taken
 899:C:/StellarisWare/driverlib\sysctl.c **** //! to ensure that the peripheral is not accessed during this brief time
 900:C:/StellarisWare/driverlib\sysctl.c **** //! period.
 901:C:/StellarisWare/driverlib\sysctl.c **** //!
 902:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
 903:C:/StellarisWare/driverlib\sysctl.c **** //
 904:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 905:C:/StellarisWare/driverlib\sysctl.c **** void
 906:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralEnable(unsigned long ulPeripheral)
 907:C:/StellarisWare/driverlib\sysctl.c **** {
 821              		.loc 1 907 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 8
 824              		@ frame_needed = 1, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826 0000 80B4     		push	{r7}
 827              	.LCFI25:
 828              		.cfi_def_cfa_offset 4
 829              		.cfi_offset 7, -4
 830 0002 83B0     		sub	sp, sp, #12
 831              	.LCFI26:
 832              		.cfi_def_cfa_offset 16
 833 0004 00AF     		add	r7, sp, #0
 834              	.LCFI27:
 835              		.cfi_def_cfa_register 7
 836 0006 7860     		str	r0, [r7, #4]
 908:C:/StellarisWare/driverlib\sysctl.c ****     //
 909:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 910:C:/StellarisWare/driverlib\sysctl.c ****     //
 911:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 912:C:/StellarisWare/driverlib\sysctl.c **** 
 913:C:/StellarisWare/driverlib\sysctl.c ****     //
 914:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
 915:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_RCGCperiph registers.
 916:C:/StellarisWare/driverlib\sysctl.c ****     //
 917:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 837              		.loc 1 917 0
 838 0008 7B68     		ldr	r3, [r7, #4]
 839 000a 03F07043 		and	r3, r3, #-268435456
 840 000e B3F1704F 		cmp	r3, #-268435456
 841 0012 27D1     		bne	.L28
 918:C:/StellarisWare/driverlib\sysctl.c ****     {
 919:C:/StellarisWare/driverlib\sysctl.c ****         //
 920:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral.
 921:C:/StellarisWare/driverlib\sysctl.c ****         //
 922:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_RCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 842              		.loc 1 922 0
 843 0014 7B68     		ldr	r3, [r7, #4]
 844 0016 03F47F43 		and	r3, r3, #65280
 845 001a 4FEA1322 		lsr	r2, r3, #8
 846 001e 4FF46643 		mov	r3, #58880
 847 0022 C4F20F03 		movt	r3, 16399
 848 0026 D318     		adds	r3, r2, r3
 849 0028 03F07042 		and	r2, r3, #-268435456
 850 002c 7B68     		ldr	r3, [r7, #4]
 851 002e 03F47F43 		and	r3, r3, #65280
 852 0032 4FEA1321 		lsr	r1, r3, #8
 853 0036 4FF46643 		mov	r3, #58880
 854 003a C4F20F03 		movt	r3, 16399
 855 003e CB18     		adds	r3, r1, r3
 856 0040 23F07F43 		bic	r3, r3, #-16777216
 857 0044 23F47003 		bic	r3, r3, #15728640
 858 0048 4FEA4313 		lsl	r3, r3, #5
 859 004c 1A43     		orrs	r2, r2, r3
 860 004e 7B68     		ldr	r3, [r7, #4]
 861 0050 DBB2     		uxtb	r3, r3
 862 0052 4FEA8303 		lsl	r3, r3, #2
 863 0056 1343     		orrs	r3, r3, r2
 864 0058 43F00073 		orr	r3, r3, #33554432
 923:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 1;
 865              		.loc 1 923 0
 866 005c 4FF00102 		mov	r2, #1
 867 0060 1A60     		str	r2, [r3, #0]
 868 0062 21E0     		b	.L27
 869              	.L28:
 924:C:/StellarisWare/driverlib\sysctl.c ****     }
 925:C:/StellarisWare/driverlib\sysctl.c ****     else
 926:C:/StellarisWare/driverlib\sysctl.c ****     {
 927:C:/StellarisWare/driverlib\sysctl.c ****         //
 928:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral.
 929:C:/StellarisWare/driverlib\sysctl.c ****         //
 930:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 870              		.loc 1 930 0
 871 0064 7B68     		ldr	r3, [r7, #4]
 872 0066 4FEA1372 		lsr	r2, r3, #28
 873 006a 40F20003 		movw	r3, #:lower16:g_pulRCGCRegs
 874 006e C0F20003 		movt	r3, #:upper16:g_pulRCGCRegs
 875 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 876 0076 1A46     		mov	r2, r3
 877 0078 7B68     		ldr	r3, [r7, #4]
 878 007a 4FEA1371 		lsr	r1, r3, #28
 879 007e 40F20003 		movw	r3, #:lower16:g_pulRCGCRegs
 880 0082 C0F20003 		movt	r3, #:upper16:g_pulRCGCRegs
 881 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 882 008a 1968     		ldr	r1, [r3, #0]
 931:C:/StellarisWare/driverlib\sysctl.c ****             SYSCTL_PERIPH_MASK(ulPeripheral);
 883              		.loc 1 931 0
 884 008c 7B68     		ldr	r3, [r7, #4]
 885 008e 4FEA0343 		lsl	r3, r3, #16
 886 0092 4FEA1343 		lsr	r3, r3, #16
 887 0096 7868     		ldr	r0, [r7, #4]
 888 0098 00F4F810 		and	r0, r0, #2031616
 889 009c 4FEA1040 		lsr	r0, r0, #16
 890 00a0 03FA00F3 		lsl	r3, r3, r0
 930:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 891              		.loc 1 930 0
 892 00a4 0B43     		orrs	r3, r3, r1
 893 00a6 1360     		str	r3, [r2, #0]
 894              	.L27:
 932:C:/StellarisWare/driverlib\sysctl.c ****     }
 933:C:/StellarisWare/driverlib\sysctl.c **** }
 895              		.loc 1 933 0
 896 00a8 07F10C07 		add	r7, r7, #12
 897 00ac BD46     		mov	sp, r7
 898 00ae 80BC     		pop	{r7}
 899 00b0 7047     		bx	lr
 900              		.cfi_endproc
 901              	.LFE9:
 903 00b2 00BF     		.section	.text.SysCtlPeripheralDisable,"ax",%progbits
 904              		.align	2
 905              		.global	SysCtlPeripheralDisable
 906              		.thumb
 907              		.thumb_func
 909              	SysCtlPeripheralDisable:
 910              	.LFB10:
 934:C:/StellarisWare/driverlib\sysctl.c **** 
 935:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 936:C:/StellarisWare/driverlib\sysctl.c **** //
 937:C:/StellarisWare/driverlib\sysctl.c **** //! Disables a peripheral.
 938:C:/StellarisWare/driverlib\sysctl.c **** //!
 939:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to disable.
 940:C:/StellarisWare/driverlib\sysctl.c **** //!
 941:C:/StellarisWare/driverlib\sysctl.c **** //! This function disables peripherals are disabled with this function.  Once
 942:C:/StellarisWare/driverlib\sysctl.c **** //! disabled, they do not operate or respond to register reads/writes.
 943:C:/StellarisWare/driverlib\sysctl.c **** //!
 944:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
 945:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
 946:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
 947:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
 948:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
 949:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
 950:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
 951:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
 952:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
 953:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
 954:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
 955:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
 956:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
 957:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
 958:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
 959:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
 960:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
 961:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
 962:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
 963:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
 964:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
 965:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
 966:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
 967:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
 968:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
 969:C:/StellarisWare/driverlib\sysctl.c **** //!
 970:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
 971:C:/StellarisWare/driverlib\sysctl.c **** //
 972:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
 973:C:/StellarisWare/driverlib\sysctl.c **** void
 974:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralDisable(unsigned long ulPeripheral)
 975:C:/StellarisWare/driverlib\sysctl.c **** {
 911              		.loc 1 975 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 8
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 916 0000 80B4     		push	{r7}
 917              	.LCFI28:
 918              		.cfi_def_cfa_offset 4
 919              		.cfi_offset 7, -4
 920 0002 83B0     		sub	sp, sp, #12
 921              	.LCFI29:
 922              		.cfi_def_cfa_offset 16
 923 0004 00AF     		add	r7, sp, #0
 924              	.LCFI30:
 925              		.cfi_def_cfa_register 7
 926 0006 7860     		str	r0, [r7, #4]
 976:C:/StellarisWare/driverlib\sysctl.c ****     //
 977:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
 978:C:/StellarisWare/driverlib\sysctl.c ****     //
 979:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
 980:C:/StellarisWare/driverlib\sysctl.c **** 
 981:C:/StellarisWare/driverlib\sysctl.c ****     //
 982:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
 983:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_RCGCperiph registers.
 984:C:/StellarisWare/driverlib\sysctl.c ****     //
 985:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 927              		.loc 1 985 0
 928 0008 7B68     		ldr	r3, [r7, #4]
 929 000a 03F07043 		and	r3, r3, #-268435456
 930 000e B3F1704F 		cmp	r3, #-268435456
 931 0012 27D1     		bne	.L31
 986:C:/StellarisWare/driverlib\sysctl.c ****     {
 987:C:/StellarisWare/driverlib\sysctl.c ****         //
 988:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral.
 989:C:/StellarisWare/driverlib\sysctl.c ****         //
 990:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_RCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 932              		.loc 1 990 0
 933 0014 7B68     		ldr	r3, [r7, #4]
 934 0016 03F47F43 		and	r3, r3, #65280
 935 001a 4FEA1322 		lsr	r2, r3, #8
 936 001e 4FF46643 		mov	r3, #58880
 937 0022 C4F20F03 		movt	r3, 16399
 938 0026 D318     		adds	r3, r2, r3
 939 0028 03F07042 		and	r2, r3, #-268435456
 940 002c 7B68     		ldr	r3, [r7, #4]
 941 002e 03F47F43 		and	r3, r3, #65280
 942 0032 4FEA1321 		lsr	r1, r3, #8
 943 0036 4FF46643 		mov	r3, #58880
 944 003a C4F20F03 		movt	r3, 16399
 945 003e CB18     		adds	r3, r1, r3
 946 0040 23F07F43 		bic	r3, r3, #-16777216
 947 0044 23F47003 		bic	r3, r3, #15728640
 948 0048 4FEA4313 		lsl	r3, r3, #5
 949 004c 1A43     		orrs	r2, r2, r3
 950 004e 7B68     		ldr	r3, [r7, #4]
 951 0050 DBB2     		uxtb	r3, r3
 952 0052 4FEA8303 		lsl	r3, r3, #2
 953 0056 1343     		orrs	r3, r3, r2
 954 0058 43F00073 		orr	r3, r3, #33554432
 991:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 0;
 955              		.loc 1 991 0
 956 005c 4FF00002 		mov	r2, #0
 957 0060 1A60     		str	r2, [r3, #0]
 958 0062 23E0     		b	.L30
 959              	.L31:
 992:C:/StellarisWare/driverlib\sysctl.c ****     }
 993:C:/StellarisWare/driverlib\sysctl.c ****     else
 994:C:/StellarisWare/driverlib\sysctl.c ****     {
 995:C:/StellarisWare/driverlib\sysctl.c ****         //
 996:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral.
 997:C:/StellarisWare/driverlib\sysctl.c ****         //
 998:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 960              		.loc 1 998 0
 961 0064 7B68     		ldr	r3, [r7, #4]
 962 0066 4FEA1372 		lsr	r2, r3, #28
 963 006a 40F20003 		movw	r3, #:lower16:g_pulRCGCRegs
 964 006e C0F20003 		movt	r3, #:upper16:g_pulRCGCRegs
 965 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 966 0076 1A46     		mov	r2, r3
 967 0078 7B68     		ldr	r3, [r7, #4]
 968 007a 4FEA1371 		lsr	r1, r3, #28
 969 007e 40F20003 		movw	r3, #:lower16:g_pulRCGCRegs
 970 0082 C0F20003 		movt	r3, #:upper16:g_pulRCGCRegs
 971 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 972 008a 1968     		ldr	r1, [r3, #0]
 999:C:/StellarisWare/driverlib\sysctl.c ****             ~SYSCTL_PERIPH_MASK(ulPeripheral);
 973              		.loc 1 999 0
 974 008c 7B68     		ldr	r3, [r7, #4]
 975 008e 4FEA0343 		lsl	r3, r3, #16
 976 0092 4FEA1343 		lsr	r3, r3, #16
 977 0096 7868     		ldr	r0, [r7, #4]
 978 0098 00F4F810 		and	r0, r0, #2031616
 979 009c 4FEA1040 		lsr	r0, r0, #16
 980 00a0 03FA00F3 		lsl	r3, r3, r0
 981 00a4 6FEA0303 		mvn	r3, r3
 998:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 982              		.loc 1 998 0
 983 00a8 0B40     		ands	r3, r3, r1
 984 00aa 1360     		str	r3, [r2, #0]
 985              	.L30:
1000:C:/StellarisWare/driverlib\sysctl.c ****     }
1001:C:/StellarisWare/driverlib\sysctl.c **** }
 986              		.loc 1 1001 0
 987 00ac 07F10C07 		add	r7, r7, #12
 988 00b0 BD46     		mov	sp, r7
 989 00b2 80BC     		pop	{r7}
 990 00b4 7047     		bx	lr
 991              		.cfi_endproc
 992              	.LFE10:
 994 00b6 00BF     		.section	.text.SysCtlPeripheralSleepEnable,"ax",%progbits
 995              		.align	2
 996              		.global	SysCtlPeripheralSleepEnable
 997              		.thumb
 998              		.thumb_func
 1000              	SysCtlPeripheralSleepEnable:
 1001              	.LFB11:
1002:C:/StellarisWare/driverlib\sysctl.c **** 
1003:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1004:C:/StellarisWare/driverlib\sysctl.c **** //
1005:C:/StellarisWare/driverlib\sysctl.c **** //! Enables a peripheral in sleep mode.
1006:C:/StellarisWare/driverlib\sysctl.c **** //!
1007:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to enable in sleep mode.
1008:C:/StellarisWare/driverlib\sysctl.c **** //!
1009:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows a peripheral to continue operating when the processor
1010:C:/StellarisWare/driverlib\sysctl.c **** //! goes into sleep mode.  Because the clocking configuration of the device
1011:C:/StellarisWare/driverlib\sysctl.c **** //! does not change, any peripheral can safely continue operating while the
1012:C:/StellarisWare/driverlib\sysctl.c **** //! processor is in sleep mode and can therefore wake the processor from sleep
1013:C:/StellarisWare/driverlib\sysctl.c **** //! mode.
1014:C:/StellarisWare/driverlib\sysctl.c **** //!
1015:C:/StellarisWare/driverlib\sysctl.c **** //! Sleep mode clocking of peripherals must be enabled via
1016:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(); if disabled, the peripheral sleep mode
1017:C:/StellarisWare/driverlib\sysctl.c **** //! configuration is maintained but has no effect when sleep mode is entered.
1018:C:/StellarisWare/driverlib\sysctl.c **** //!
1019:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
1020:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
1021:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
1022:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
1023:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
1024:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
1025:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
1026:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
1027:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
1028:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
1029:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
1030:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
1031:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
1032:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
1033:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
1034:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
1035:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
1036:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
1037:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
1038:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
1039:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
1040:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
1041:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
1042:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
1043:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
1044:C:/StellarisWare/driverlib\sysctl.c **** //!
1045:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1046:C:/StellarisWare/driverlib\sysctl.c **** //
1047:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1048:C:/StellarisWare/driverlib\sysctl.c **** void
1049:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralSleepEnable(unsigned long ulPeripheral)
1050:C:/StellarisWare/driverlib\sysctl.c **** {
 1002              		.loc 1 1050 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007 0000 80B4     		push	{r7}
 1008              	.LCFI31:
 1009              		.cfi_def_cfa_offset 4
 1010              		.cfi_offset 7, -4
 1011 0002 83B0     		sub	sp, sp, #12
 1012              	.LCFI32:
 1013              		.cfi_def_cfa_offset 16
 1014 0004 00AF     		add	r7, sp, #0
 1015              	.LCFI33:
 1016              		.cfi_def_cfa_register 7
 1017 0006 7860     		str	r0, [r7, #4]
1051:C:/StellarisWare/driverlib\sysctl.c ****     //
1052:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1053:C:/StellarisWare/driverlib\sysctl.c ****     //
1054:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
1055:C:/StellarisWare/driverlib\sysctl.c **** 
1056:C:/StellarisWare/driverlib\sysctl.c ****     //
1057:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
1058:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_SCGCperiph registers.
1059:C:/StellarisWare/driverlib\sysctl.c ****     //
1060:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 1018              		.loc 1 1060 0
 1019 0008 7B68     		ldr	r3, [r7, #4]
 1020 000a 03F07043 		and	r3, r3, #-268435456
 1021 000e B3F1704F 		cmp	r3, #-268435456
 1022 0012 27D1     		bne	.L34
1061:C:/StellarisWare/driverlib\sysctl.c ****     {
1062:C:/StellarisWare/driverlib\sysctl.c ****         //
1063:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral in sleep mode.
1064:C:/StellarisWare/driverlib\sysctl.c ****         //
1065:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_SCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 1023              		.loc 1 1065 0
 1024 0014 7B68     		ldr	r3, [r7, #4]
 1025 0016 03F47F43 		and	r3, r3, #65280
 1026 001a 4FEA1322 		lsr	r2, r3, #8
 1027 001e 4FF46743 		mov	r3, #59136
 1028 0022 C4F20F03 		movt	r3, 16399
 1029 0026 D318     		adds	r3, r2, r3
 1030 0028 03F07042 		and	r2, r3, #-268435456
 1031 002c 7B68     		ldr	r3, [r7, #4]
 1032 002e 03F47F43 		and	r3, r3, #65280
 1033 0032 4FEA1321 		lsr	r1, r3, #8
 1034 0036 4FF46743 		mov	r3, #59136
 1035 003a C4F20F03 		movt	r3, 16399
 1036 003e CB18     		adds	r3, r1, r3
 1037 0040 23F07F43 		bic	r3, r3, #-16777216
 1038 0044 23F47003 		bic	r3, r3, #15728640
 1039 0048 4FEA4313 		lsl	r3, r3, #5
 1040 004c 1A43     		orrs	r2, r2, r3
 1041 004e 7B68     		ldr	r3, [r7, #4]
 1042 0050 DBB2     		uxtb	r3, r3
 1043 0052 4FEA8303 		lsl	r3, r3, #2
 1044 0056 1343     		orrs	r3, r3, r2
 1045 0058 43F00073 		orr	r3, r3, #33554432
1066:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 1;
 1046              		.loc 1 1066 0
 1047 005c 4FF00102 		mov	r2, #1
 1048 0060 1A60     		str	r2, [r3, #0]
 1049 0062 21E0     		b	.L33
 1050              	.L34:
1067:C:/StellarisWare/driverlib\sysctl.c ****     }
1068:C:/StellarisWare/driverlib\sysctl.c ****     else
1069:C:/StellarisWare/driverlib\sysctl.c ****     {
1070:C:/StellarisWare/driverlib\sysctl.c ****         //
1071:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral in sleep mode.
1072:C:/StellarisWare/driverlib\sysctl.c ****         //
1073:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 1051              		.loc 1 1073 0
 1052 0064 7B68     		ldr	r3, [r7, #4]
 1053 0066 4FEA1372 		lsr	r2, r3, #28
 1054 006a 40F20003 		movw	r3, #:lower16:g_pulSCGCRegs
 1055 006e C0F20003 		movt	r3, #:upper16:g_pulSCGCRegs
 1056 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1057 0076 1A46     		mov	r2, r3
 1058 0078 7B68     		ldr	r3, [r7, #4]
 1059 007a 4FEA1371 		lsr	r1, r3, #28
 1060 007e 40F20003 		movw	r3, #:lower16:g_pulSCGCRegs
 1061 0082 C0F20003 		movt	r3, #:upper16:g_pulSCGCRegs
 1062 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1063 008a 1968     		ldr	r1, [r3, #0]
1074:C:/StellarisWare/driverlib\sysctl.c ****             SYSCTL_PERIPH_MASK(ulPeripheral);
 1064              		.loc 1 1074 0
 1065 008c 7B68     		ldr	r3, [r7, #4]
 1066 008e 4FEA0343 		lsl	r3, r3, #16
 1067 0092 4FEA1343 		lsr	r3, r3, #16
 1068 0096 7868     		ldr	r0, [r7, #4]
 1069 0098 00F4F810 		and	r0, r0, #2031616
 1070 009c 4FEA1040 		lsr	r0, r0, #16
 1071 00a0 03FA00F3 		lsl	r3, r3, r0
1073:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 1072              		.loc 1 1073 0
 1073 00a4 0B43     		orrs	r3, r3, r1
 1074 00a6 1360     		str	r3, [r2, #0]
 1075              	.L33:
1075:C:/StellarisWare/driverlib\sysctl.c ****     }
1076:C:/StellarisWare/driverlib\sysctl.c **** }
 1076              		.loc 1 1076 0
 1077 00a8 07F10C07 		add	r7, r7, #12
 1078 00ac BD46     		mov	sp, r7
 1079 00ae 80BC     		pop	{r7}
 1080 00b0 7047     		bx	lr
 1081              		.cfi_endproc
 1082              	.LFE11:
 1084 00b2 00BF     		.section	.text.SysCtlPeripheralSleepDisable,"ax",%progbits
 1085              		.align	2
 1086              		.global	SysCtlPeripheralSleepDisable
 1087              		.thumb
 1088              		.thumb_func
 1090              	SysCtlPeripheralSleepDisable:
 1091              	.LFB12:
1077:C:/StellarisWare/driverlib\sysctl.c **** 
1078:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1079:C:/StellarisWare/driverlib\sysctl.c **** //
1080:C:/StellarisWare/driverlib\sysctl.c **** //! Disables a peripheral in sleep mode.
1081:C:/StellarisWare/driverlib\sysctl.c **** //!
1082:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to disable in sleep mode.
1083:C:/StellarisWare/driverlib\sysctl.c **** //!
1084:C:/StellarisWare/driverlib\sysctl.c **** //! This function causes a peripheral to stop operating when the processor goes
1085:C:/StellarisWare/driverlib\sysctl.c **** //! into sleep mode.  Disabling peripherals while in sleep mode helps to lower
1086:C:/StellarisWare/driverlib\sysctl.c **** //! the current draw of the device.  If enabled (via SysCtlPeripheralEnable()),
1087:C:/StellarisWare/driverlib\sysctl.c **** //! the peripheral automatically resumes operation when the processor
1088:C:/StellarisWare/driverlib\sysctl.c **** //! leaves sleep mode, maintaining its entire state from before sleep mode was
1089:C:/StellarisWare/driverlib\sysctl.c **** //! entered.
1090:C:/StellarisWare/driverlib\sysctl.c **** //!
1091:C:/StellarisWare/driverlib\sysctl.c **** //! Sleep mode clocking of peripherals must be enabled via
1092:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(); if disabled, the peripheral sleep mode
1093:C:/StellarisWare/driverlib\sysctl.c **** //! configuration is maintained but has no effect when sleep mode is entered.
1094:C:/StellarisWare/driverlib\sysctl.c **** //!
1095:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
1096:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
1097:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
1098:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
1099:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
1100:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
1101:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
1102:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
1103:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
1104:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
1105:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
1106:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
1107:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
1108:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
1109:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
1110:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
1111:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
1112:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
1113:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
1114:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
1115:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
1116:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
1117:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
1118:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
1119:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
1120:C:/StellarisWare/driverlib\sysctl.c **** //!
1121:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1122:C:/StellarisWare/driverlib\sysctl.c **** //
1123:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1124:C:/StellarisWare/driverlib\sysctl.c **** void
1125:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralSleepDisable(unsigned long ulPeripheral)
1126:C:/StellarisWare/driverlib\sysctl.c **** {
 1092              		.loc 1 1126 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 80B4     		push	{r7}
 1098              	.LCFI34:
 1099              		.cfi_def_cfa_offset 4
 1100              		.cfi_offset 7, -4
 1101 0002 83B0     		sub	sp, sp, #12
 1102              	.LCFI35:
 1103              		.cfi_def_cfa_offset 16
 1104 0004 00AF     		add	r7, sp, #0
 1105              	.LCFI36:
 1106              		.cfi_def_cfa_register 7
 1107 0006 7860     		str	r0, [r7, #4]
1127:C:/StellarisWare/driverlib\sysctl.c ****     //
1128:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1129:C:/StellarisWare/driverlib\sysctl.c ****     //
1130:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
1131:C:/StellarisWare/driverlib\sysctl.c **** 
1132:C:/StellarisWare/driverlib\sysctl.c ****     //
1133:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
1134:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_SCGCperiph registers.
1135:C:/StellarisWare/driverlib\sysctl.c ****     //
1136:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 1108              		.loc 1 1136 0
 1109 0008 7B68     		ldr	r3, [r7, #4]
 1110 000a 03F07043 		and	r3, r3, #-268435456
 1111 000e B3F1704F 		cmp	r3, #-268435456
 1112 0012 27D1     		bne	.L37
1137:C:/StellarisWare/driverlib\sysctl.c ****     {
1138:C:/StellarisWare/driverlib\sysctl.c ****         //
1139:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral in sleep mode.
1140:C:/StellarisWare/driverlib\sysctl.c ****         //
1141:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_SCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 1113              		.loc 1 1141 0
 1114 0014 7B68     		ldr	r3, [r7, #4]
 1115 0016 03F47F43 		and	r3, r3, #65280
 1116 001a 4FEA1322 		lsr	r2, r3, #8
 1117 001e 4FF46743 		mov	r3, #59136
 1118 0022 C4F20F03 		movt	r3, 16399
 1119 0026 D318     		adds	r3, r2, r3
 1120 0028 03F07042 		and	r2, r3, #-268435456
 1121 002c 7B68     		ldr	r3, [r7, #4]
 1122 002e 03F47F43 		and	r3, r3, #65280
 1123 0032 4FEA1321 		lsr	r1, r3, #8
 1124 0036 4FF46743 		mov	r3, #59136
 1125 003a C4F20F03 		movt	r3, 16399
 1126 003e CB18     		adds	r3, r1, r3
 1127 0040 23F07F43 		bic	r3, r3, #-16777216
 1128 0044 23F47003 		bic	r3, r3, #15728640
 1129 0048 4FEA4313 		lsl	r3, r3, #5
 1130 004c 1A43     		orrs	r2, r2, r3
 1131 004e 7B68     		ldr	r3, [r7, #4]
 1132 0050 DBB2     		uxtb	r3, r3
 1133 0052 4FEA8303 		lsl	r3, r3, #2
 1134 0056 1343     		orrs	r3, r3, r2
 1135 0058 43F00073 		orr	r3, r3, #33554432
1142:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 0;
 1136              		.loc 1 1142 0
 1137 005c 4FF00002 		mov	r2, #0
 1138 0060 1A60     		str	r2, [r3, #0]
 1139 0062 23E0     		b	.L36
 1140              	.L37:
1143:C:/StellarisWare/driverlib\sysctl.c ****     }
1144:C:/StellarisWare/driverlib\sysctl.c ****     else
1145:C:/StellarisWare/driverlib\sysctl.c ****     {
1146:C:/StellarisWare/driverlib\sysctl.c ****         //
1147:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral in sleep mode.
1148:C:/StellarisWare/driverlib\sysctl.c ****         //
1149:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 1141              		.loc 1 1149 0
 1142 0064 7B68     		ldr	r3, [r7, #4]
 1143 0066 4FEA1372 		lsr	r2, r3, #28
 1144 006a 40F20003 		movw	r3, #:lower16:g_pulSCGCRegs
 1145 006e C0F20003 		movt	r3, #:upper16:g_pulSCGCRegs
 1146 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1147 0076 1A46     		mov	r2, r3
 1148 0078 7B68     		ldr	r3, [r7, #4]
 1149 007a 4FEA1371 		lsr	r1, r3, #28
 1150 007e 40F20003 		movw	r3, #:lower16:g_pulSCGCRegs
 1151 0082 C0F20003 		movt	r3, #:upper16:g_pulSCGCRegs
 1152 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1153 008a 1968     		ldr	r1, [r3, #0]
1150:C:/StellarisWare/driverlib\sysctl.c ****             ~SYSCTL_PERIPH_MASK(ulPeripheral);
 1154              		.loc 1 1150 0
 1155 008c 7B68     		ldr	r3, [r7, #4]
 1156 008e 4FEA0343 		lsl	r3, r3, #16
 1157 0092 4FEA1343 		lsr	r3, r3, #16
 1158 0096 7868     		ldr	r0, [r7, #4]
 1159 0098 00F4F810 		and	r0, r0, #2031616
 1160 009c 4FEA1040 		lsr	r0, r0, #16
 1161 00a0 03FA00F3 		lsl	r3, r3, r0
 1162 00a4 6FEA0303 		mvn	r3, r3
1149:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulSCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 1163              		.loc 1 1149 0
 1164 00a8 0B40     		ands	r3, r3, r1
 1165 00aa 1360     		str	r3, [r2, #0]
 1166              	.L36:
1151:C:/StellarisWare/driverlib\sysctl.c ****     }
1152:C:/StellarisWare/driverlib\sysctl.c **** }
 1167              		.loc 1 1152 0
 1168 00ac 07F10C07 		add	r7, r7, #12
 1169 00b0 BD46     		mov	sp, r7
 1170 00b2 80BC     		pop	{r7}
 1171 00b4 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE12:
 1175 00b6 00BF     		.section	.text.SysCtlPeripheralDeepSleepEnable,"ax",%progbits
 1176              		.align	2
 1177              		.global	SysCtlPeripheralDeepSleepEnable
 1178              		.thumb
 1179              		.thumb_func
 1181              	SysCtlPeripheralDeepSleepEnable:
 1182              	.LFB13:
1153:C:/StellarisWare/driverlib\sysctl.c **** 
1154:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1155:C:/StellarisWare/driverlib\sysctl.c **** //
1156:C:/StellarisWare/driverlib\sysctl.c **** //! Enables a peripheral in deep-sleep mode.
1157:C:/StellarisWare/driverlib\sysctl.c **** //!
1158:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to enable in deep-sleep mode.
1159:C:/StellarisWare/driverlib\sysctl.c **** //!
1160:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows a peripheral to continue operating when the processor
1161:C:/StellarisWare/driverlib\sysctl.c **** //! goes into deep-sleep mode.  Because the clocking configuration of the
1162:C:/StellarisWare/driverlib\sysctl.c **** //! device may change, not all peripherals can safely continue operating while
1163:C:/StellarisWare/driverlib\sysctl.c **** //! the processor is in sleep mode.  Those that must run at a particular
1164:C:/StellarisWare/driverlib\sysctl.c **** //! frequency (such as a UART) do not work as expected if the clock changes.
1165:C:/StellarisWare/driverlib\sysctl.c **** //! It is the responsibility of the caller to make sensible choices.
1166:C:/StellarisWare/driverlib\sysctl.c **** //!
1167:C:/StellarisWare/driverlib\sysctl.c **** //! Deep-sleep mode clocking of peripherals must be enabled via
1168:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(); if disabled, the peripheral deep-sleep mode
1169:C:/StellarisWare/driverlib\sysctl.c **** //! configuration is maintained but has no effect when deep-sleep mode is
1170:C:/StellarisWare/driverlib\sysctl.c **** //! entered.
1171:C:/StellarisWare/driverlib\sysctl.c **** //!
1172:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
1173:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
1174:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
1175:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
1176:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
1177:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
1178:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
1179:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
1180:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
1181:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
1182:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
1183:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
1184:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
1185:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
1186:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
1187:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
1188:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
1189:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
1190:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
1191:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
1192:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
1193:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
1194:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
1195:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
1196:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
1197:C:/StellarisWare/driverlib\sysctl.c **** //!
1198:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1199:C:/StellarisWare/driverlib\sysctl.c **** //
1200:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1201:C:/StellarisWare/driverlib\sysctl.c **** void
1202:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralDeepSleepEnable(unsigned long ulPeripheral)
1203:C:/StellarisWare/driverlib\sysctl.c **** {
 1183              		.loc 1 1203 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 8
 1186              		@ frame_needed = 1, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 1188 0000 80B4     		push	{r7}
 1189              	.LCFI37:
 1190              		.cfi_def_cfa_offset 4
 1191              		.cfi_offset 7, -4
 1192 0002 83B0     		sub	sp, sp, #12
 1193              	.LCFI38:
 1194              		.cfi_def_cfa_offset 16
 1195 0004 00AF     		add	r7, sp, #0
 1196              	.LCFI39:
 1197              		.cfi_def_cfa_register 7
 1198 0006 7860     		str	r0, [r7, #4]
1204:C:/StellarisWare/driverlib\sysctl.c ****     //
1205:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1206:C:/StellarisWare/driverlib\sysctl.c ****     //
1207:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
1208:C:/StellarisWare/driverlib\sysctl.c **** 
1209:C:/StellarisWare/driverlib\sysctl.c ****     //
1210:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
1211:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_DCGCperiph registers.
1212:C:/StellarisWare/driverlib\sysctl.c ****     //
1213:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 1199              		.loc 1 1213 0
 1200 0008 7B68     		ldr	r3, [r7, #4]
 1201 000a 03F07043 		and	r3, r3, #-268435456
 1202 000e B3F1704F 		cmp	r3, #-268435456
 1203 0012 27D1     		bne	.L40
1214:C:/StellarisWare/driverlib\sysctl.c ****     {
1215:C:/StellarisWare/driverlib\sysctl.c ****         //
1216:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral in deep-sleep mode.
1217:C:/StellarisWare/driverlib\sysctl.c ****         //
1218:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_DCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 1204              		.loc 1 1218 0
 1205 0014 7B68     		ldr	r3, [r7, #4]
 1206 0016 03F47F43 		and	r3, r3, #65280
 1207 001a 4FEA1322 		lsr	r2, r3, #8
 1208 001e 4FF46843 		mov	r3, #59392
 1209 0022 C4F20F03 		movt	r3, 16399
 1210 0026 D318     		adds	r3, r2, r3
 1211 0028 03F07042 		and	r2, r3, #-268435456
 1212 002c 7B68     		ldr	r3, [r7, #4]
 1213 002e 03F47F43 		and	r3, r3, #65280
 1214 0032 4FEA1321 		lsr	r1, r3, #8
 1215 0036 4FF46843 		mov	r3, #59392
 1216 003a C4F20F03 		movt	r3, 16399
 1217 003e CB18     		adds	r3, r1, r3
 1218 0040 23F07F43 		bic	r3, r3, #-16777216
 1219 0044 23F47003 		bic	r3, r3, #15728640
 1220 0048 4FEA4313 		lsl	r3, r3, #5
 1221 004c 1A43     		orrs	r2, r2, r3
 1222 004e 7B68     		ldr	r3, [r7, #4]
 1223 0050 DBB2     		uxtb	r3, r3
 1224 0052 4FEA8303 		lsl	r3, r3, #2
 1225 0056 1343     		orrs	r3, r3, r2
 1226 0058 43F00073 		orr	r3, r3, #33554432
1219:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 1;
 1227              		.loc 1 1219 0
 1228 005c 4FF00102 		mov	r2, #1
 1229 0060 1A60     		str	r2, [r3, #0]
 1230 0062 21E0     		b	.L39
 1231              	.L40:
1220:C:/StellarisWare/driverlib\sysctl.c ****     }
1221:C:/StellarisWare/driverlib\sysctl.c ****     else
1222:C:/StellarisWare/driverlib\sysctl.c ****     {
1223:C:/StellarisWare/driverlib\sysctl.c ****         //
1224:C:/StellarisWare/driverlib\sysctl.c ****         // Enable this peripheral in deep-sleep mode.
1225:C:/StellarisWare/driverlib\sysctl.c ****         //
1226:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulDCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 1232              		.loc 1 1226 0
 1233 0064 7B68     		ldr	r3, [r7, #4]
 1234 0066 4FEA1372 		lsr	r2, r3, #28
 1235 006a 40F20003 		movw	r3, #:lower16:g_pulDCGCRegs
 1236 006e C0F20003 		movt	r3, #:upper16:g_pulDCGCRegs
 1237 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1238 0076 1A46     		mov	r2, r3
 1239 0078 7B68     		ldr	r3, [r7, #4]
 1240 007a 4FEA1371 		lsr	r1, r3, #28
 1241 007e 40F20003 		movw	r3, #:lower16:g_pulDCGCRegs
 1242 0082 C0F20003 		movt	r3, #:upper16:g_pulDCGCRegs
 1243 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1244 008a 1968     		ldr	r1, [r3, #0]
1227:C:/StellarisWare/driverlib\sysctl.c ****             SYSCTL_PERIPH_MASK(ulPeripheral);
 1245              		.loc 1 1227 0
 1246 008c 7B68     		ldr	r3, [r7, #4]
 1247 008e 4FEA0343 		lsl	r3, r3, #16
 1248 0092 4FEA1343 		lsr	r3, r3, #16
 1249 0096 7868     		ldr	r0, [r7, #4]
 1250 0098 00F4F810 		and	r0, r0, #2031616
 1251 009c 4FEA1040 		lsr	r0, r0, #16
 1252 00a0 03FA00F3 		lsl	r3, r3, r0
1226:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulDCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
 1253              		.loc 1 1226 0
 1254 00a4 0B43     		orrs	r3, r3, r1
 1255 00a6 1360     		str	r3, [r2, #0]
 1256              	.L39:
1228:C:/StellarisWare/driverlib\sysctl.c ****     }
1229:C:/StellarisWare/driverlib\sysctl.c **** }
 1257              		.loc 1 1229 0
 1258 00a8 07F10C07 		add	r7, r7, #12
 1259 00ac BD46     		mov	sp, r7
 1260 00ae 80BC     		pop	{r7}
 1261 00b0 7047     		bx	lr
 1262              		.cfi_endproc
 1263              	.LFE13:
 1265 00b2 00BF     		.section	.text.SysCtlPeripheralDeepSleepDisable,"ax",%progbits
 1266              		.align	2
 1267              		.global	SysCtlPeripheralDeepSleepDisable
 1268              		.thumb
 1269              		.thumb_func
 1271              	SysCtlPeripheralDeepSleepDisable:
 1272              	.LFB14:
1230:C:/StellarisWare/driverlib\sysctl.c **** 
1231:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1232:C:/StellarisWare/driverlib\sysctl.c **** //
1233:C:/StellarisWare/driverlib\sysctl.c **** //! Disables a peripheral in deep-sleep mode.
1234:C:/StellarisWare/driverlib\sysctl.c **** //!
1235:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulPeripheral is the peripheral to disable in deep-sleep mode.
1236:C:/StellarisWare/driverlib\sysctl.c **** //!
1237:C:/StellarisWare/driverlib\sysctl.c **** //! This function causes a peripheral to stop operating when the processor goes
1238:C:/StellarisWare/driverlib\sysctl.c **** //! into deep-sleep mode.  Disabling peripherals while in deep-sleep mode helps
1239:C:/StellarisWare/driverlib\sysctl.c **** //! to lower the current draw of the device, and can keep peripherals that
1240:C:/StellarisWare/driverlib\sysctl.c **** //! require a particular clock frequency from operating when the clock changes
1241:C:/StellarisWare/driverlib\sysctl.c **** //! as a result of entering deep-sleep mode.  If enabled (via
1242:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralEnable()), the peripheral automatically resumes
1243:C:/StellarisWare/driverlib\sysctl.c **** //! operation when the processor leaves deep-sleep mode, maintaining its entire
1244:C:/StellarisWare/driverlib\sysctl.c **** //! state from before deep-sleep mode was entered.
1245:C:/StellarisWare/driverlib\sysctl.c **** //!
1246:C:/StellarisWare/driverlib\sysctl.c **** //! Deep-sleep mode clocking of peripherals must be enabled via
1247:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(); if disabled, the peripheral deep-sleep mode
1248:C:/StellarisWare/driverlib\sysctl.c **** //! configuration is maintained but has no effect when deep-sleep mode is
1249:C:/StellarisWare/driverlib\sysctl.c **** //! entered.
1250:C:/StellarisWare/driverlib\sysctl.c **** //!
1251:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulPeripheral parameter must be only one of the following values:
1252:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_ADC0, \b SYSCTL_PERIPH_ADC1, \b SYSCTL_PERIPH_CAN0,
1253:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_CAN1, \b SYSCTL_PERIPH_CAN2, \b SYSCTL_PERIPH_COMP0,
1254:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_COMP1, \b SYSCTL_PERIPH_COMP2, \b SYSCTL_PERIPH_EEPROM0,
1255:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_EPI0, \b SYSCTL_PERIPH_ETH, \b SYSCTL_PERIPH_FAN0,
1256:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
1257:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
1258:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, \b SYSCTL_PERIPH_GPIOJ,
1259:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOK, \b SYSCTL_PERIPH_GPIOL, \b SYSCTL_PERIPH_GPIOM,
1260:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPION, \b SYSCTL_PERIPH_GPIOP, \b SYSCTL_PERIPH_GPIOQ,
1261:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_HIBERNATE, \b SYSCTL_PERIPH_I2C0, \b SYSCTL_PERIPH_I2C1,
1262:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C2, \b SYSCTL_PERIPH_I2C3, \b SYSCTL_PERIPH_I2C4,
1263:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_I2C5, \b SYSCTL_PERIPH_I2S0, \b SYSCTL_PERIPH_LPC0,
1264:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_PECI0, \b SYSCTL_PERIPH_PWM0, \b SYSCTL_PERIPH_PWM1,
1265:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_QEI0, \b SYSCTL_PERIPH_QEI1, \b SYSCTL_PERIPH_SSI0,
1266:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_SSI1, \b SYSCTL_PERIPH_SSI2, \b SYSCTL_PERIPH_SSI3,
1267:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER0, \b SYSCTL_PERIPH_TIMER1, \b SYSCTL_PERIPH_TIMER2,
1268:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_TIMER3, \b SYSCTL_PERIPH_TIMER4, \b SYSCTL_PERIPH_TIMER5,
1269:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART0, \b SYSCTL_PERIPH_UART1, \b SYSCTL_PERIPH_UART2,
1270:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART3, \b SYSCTL_PERIPH_UART4, \b SYSCTL_PERIPH_UART5,
1271:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_UART6, \b SYSCTL_PERIPH_UART7, \b SYSCTL_PERIPH_UDMA,
1272:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_USB0, \b SYSCTL_PERIPH_WDOG0, \b SYSCTL_PERIPH_WDOG1,
1273:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER0, \b SYSCTL_PERIPH_WTIMER1,
1274:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER2, \b SYSCTL_PERIPH_WTIMER3,
1275:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_WTIMER4, or \b SYSCTL_PERIPH_WTIMER5.
1276:C:/StellarisWare/driverlib\sysctl.c **** //!
1277:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1278:C:/StellarisWare/driverlib\sysctl.c **** //
1279:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1280:C:/StellarisWare/driverlib\sysctl.c **** void
1281:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralDeepSleepDisable(unsigned long ulPeripheral)
1282:C:/StellarisWare/driverlib\sysctl.c **** {
 1273              		.loc 1 1282 0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 8
 1276              		@ frame_needed = 1, uses_anonymous_args = 0
 1277              		@ link register save eliminated.
 1278 0000 80B4     		push	{r7}
 1279              	.LCFI40:
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 7, -4
 1282 0002 83B0     		sub	sp, sp, #12
 1283              	.LCFI41:
 1284              		.cfi_def_cfa_offset 16
 1285 0004 00AF     		add	r7, sp, #0
 1286              	.LCFI42:
 1287              		.cfi_def_cfa_register 7
 1288 0006 7860     		str	r0, [r7, #4]
1283:C:/StellarisWare/driverlib\sysctl.c ****     //
1284:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1285:C:/StellarisWare/driverlib\sysctl.c ****     //
1286:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(SysCtlPeripheralValid(ulPeripheral));
1287:C:/StellarisWare/driverlib\sysctl.c **** 
1288:C:/StellarisWare/driverlib\sysctl.c ****     //
1289:C:/StellarisWare/driverlib\sysctl.c ****     // See if the peripheral index is 15, indicating a peripheral that is
1290:C:/StellarisWare/driverlib\sysctl.c ****     // accessed via the SYSCTL_DCGCperiph registers.
1291:C:/StellarisWare/driverlib\sysctl.c ****     //
1292:C:/StellarisWare/driverlib\sysctl.c ****     if((ulPeripheral & 0xf0000000) == 0xf0000000)
 1289              		.loc 1 1292 0
 1290 0008 7B68     		ldr	r3, [r7, #4]
 1291 000a 03F07043 		and	r3, r3, #-268435456
 1292 000e B3F1704F 		cmp	r3, #-268435456
 1293 0012 27D1     		bne	.L43
1293:C:/StellarisWare/driverlib\sysctl.c ****     {
1294:C:/StellarisWare/driverlib\sysctl.c ****         //
1295:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral in deep-sleep mode.
1296:C:/StellarisWare/driverlib\sysctl.c ****         //
1297:C:/StellarisWare/driverlib\sysctl.c ****         HWREGBITW(SYSCTL_DCGCBASE + ((ulPeripheral & 0xff00) >> 8),
 1294              		.loc 1 1297 0
 1295 0014 7B68     		ldr	r3, [r7, #4]
 1296 0016 03F47F43 		and	r3, r3, #65280
 1297 001a 4FEA1322 		lsr	r2, r3, #8
 1298 001e 4FF46843 		mov	r3, #59392
 1299 0022 C4F20F03 		movt	r3, 16399
 1300 0026 D318     		adds	r3, r2, r3
 1301 0028 03F07042 		and	r2, r3, #-268435456
 1302 002c 7B68     		ldr	r3, [r7, #4]
 1303 002e 03F47F43 		and	r3, r3, #65280
 1304 0032 4FEA1321 		lsr	r1, r3, #8
 1305 0036 4FF46843 		mov	r3, #59392
 1306 003a C4F20F03 		movt	r3, 16399
 1307 003e CB18     		adds	r3, r1, r3
 1308 0040 23F07F43 		bic	r3, r3, #-16777216
 1309 0044 23F47003 		bic	r3, r3, #15728640
 1310 0048 4FEA4313 		lsl	r3, r3, #5
 1311 004c 1A43     		orrs	r2, r2, r3
 1312 004e 7B68     		ldr	r3, [r7, #4]
 1313 0050 DBB2     		uxtb	r3, r3
 1314 0052 4FEA8303 		lsl	r3, r3, #2
 1315 0056 1343     		orrs	r3, r3, r2
 1316 0058 43F00073 		orr	r3, r3, #33554432
1298:C:/StellarisWare/driverlib\sysctl.c ****                   ulPeripheral & 0xff) = 0;
 1317              		.loc 1 1298 0
 1318 005c 4FF00002 		mov	r2, #0
 1319 0060 1A60     		str	r2, [r3, #0]
 1320 0062 23E0     		b	.L42
 1321              	.L43:
1299:C:/StellarisWare/driverlib\sysctl.c ****     }
1300:C:/StellarisWare/driverlib\sysctl.c ****     else
1301:C:/StellarisWare/driverlib\sysctl.c ****     {
1302:C:/StellarisWare/driverlib\sysctl.c ****         //
1303:C:/StellarisWare/driverlib\sysctl.c ****         // Disable this peripheral in deep-sleep mode.
1304:C:/StellarisWare/driverlib\sysctl.c ****         //
1305:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulDCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 1322              		.loc 1 1305 0
 1323 0064 7B68     		ldr	r3, [r7, #4]
 1324 0066 4FEA1372 		lsr	r2, r3, #28
 1325 006a 40F20003 		movw	r3, #:lower16:g_pulDCGCRegs
 1326 006e C0F20003 		movt	r3, #:upper16:g_pulDCGCRegs
 1327 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1328 0076 1A46     		mov	r2, r3
 1329 0078 7B68     		ldr	r3, [r7, #4]
 1330 007a 4FEA1371 		lsr	r1, r3, #28
 1331 007e 40F20003 		movw	r3, #:lower16:g_pulDCGCRegs
 1332 0082 C0F20003 		movt	r3, #:upper16:g_pulDCGCRegs
 1333 0086 53F82130 		ldr	r3, [r3, r1, lsl #2]
 1334 008a 1968     		ldr	r1, [r3, #0]
1306:C:/StellarisWare/driverlib\sysctl.c ****             ~SYSCTL_PERIPH_MASK(ulPeripheral);
 1335              		.loc 1 1306 0
 1336 008c 7B68     		ldr	r3, [r7, #4]
 1337 008e 4FEA0343 		lsl	r3, r3, #16
 1338 0092 4FEA1343 		lsr	r3, r3, #16
 1339 0096 7868     		ldr	r0, [r7, #4]
 1340 0098 00F4F810 		and	r0, r0, #2031616
 1341 009c 4FEA1040 		lsr	r0, r0, #16
 1342 00a0 03FA00F3 		lsl	r3, r3, r0
 1343 00a4 6FEA0303 		mvn	r3, r3
1305:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(g_pulDCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
 1344              		.loc 1 1305 0
 1345 00a8 0B40     		ands	r3, r3, r1
 1346 00aa 1360     		str	r3, [r2, #0]
 1347              	.L42:
1307:C:/StellarisWare/driverlib\sysctl.c ****     }
1308:C:/StellarisWare/driverlib\sysctl.c **** }
 1348              		.loc 1 1308 0
 1349 00ac 07F10C07 		add	r7, r7, #12
 1350 00b0 BD46     		mov	sp, r7
 1351 00b2 80BC     		pop	{r7}
 1352 00b4 7047     		bx	lr
 1353              		.cfi_endproc
 1354              	.LFE14:
 1356 00b6 00BF     		.section	.text.SysCtlPeripheralClockGating,"ax",%progbits
 1357              		.align	2
 1358              		.global	SysCtlPeripheralClockGating
 1359              		.thumb
 1360              		.thumb_func
 1362              	SysCtlPeripheralClockGating:
 1363              	.LFB15:
1309:C:/StellarisWare/driverlib\sysctl.c **** 
1310:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1311:C:/StellarisWare/driverlib\sysctl.c **** //
1312:C:/StellarisWare/driverlib\sysctl.c **** //! Controls peripheral clock gating in sleep and deep-sleep mode.
1313:C:/StellarisWare/driverlib\sysctl.c **** //!
1314:C:/StellarisWare/driverlib\sysctl.c **** //! \param bEnable is a boolean that is \b true if the sleep and deep-sleep
1315:C:/StellarisWare/driverlib\sysctl.c **** //! peripheral configuration should be used and \b false if not.
1316:C:/StellarisWare/driverlib\sysctl.c **** //!
1317:C:/StellarisWare/driverlib\sysctl.c **** //! This function controls how peripherals are clocked when the processor goes
1318:C:/StellarisWare/driverlib\sysctl.c **** //! into sleep or deep-sleep mode.  By default, the peripherals are clocked the
1319:C:/StellarisWare/driverlib\sysctl.c **** //! same as in run mode; if peripheral clock gating is enabled, they are
1320:C:/StellarisWare/driverlib\sysctl.c **** //! clocked according to the configuration set by
1321:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralSleepEnable(), SysCtlPeripheralSleepDisable(),
1322:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralDeepSleepEnable(), and SysCtlPeripheralDeepSleepDisable().
1323:C:/StellarisWare/driverlib\sysctl.c **** //!
1324:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1325:C:/StellarisWare/driverlib\sysctl.c **** //
1326:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1327:C:/StellarisWare/driverlib\sysctl.c **** void
1328:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPeripheralClockGating(tBoolean bEnable)
1329:C:/StellarisWare/driverlib\sysctl.c **** {
 1364              		.loc 1 1329 0
 1365              		.cfi_startproc
 1366              		@ args = 0, pretend = 0, frame = 8
 1367              		@ frame_needed = 1, uses_anonymous_args = 0
 1368              		@ link register save eliminated.
 1369 0000 80B4     		push	{r7}
 1370              	.LCFI43:
 1371              		.cfi_def_cfa_offset 4
 1372              		.cfi_offset 7, -4
 1373 0002 83B0     		sub	sp, sp, #12
 1374              	.LCFI44:
 1375              		.cfi_def_cfa_offset 16
 1376 0004 00AF     		add	r7, sp, #0
 1377              	.LCFI45:
 1378              		.cfi_def_cfa_register 7
 1379 0006 0346     		mov	r3, r0
 1380 0008 FB71     		strb	r3, [r7, #7]
1330:C:/StellarisWare/driverlib\sysctl.c ****     //
1331:C:/StellarisWare/driverlib\sysctl.c ****     // Enable peripheral clock gating as requested.
1332:C:/StellarisWare/driverlib\sysctl.c ****     //
1333:C:/StellarisWare/driverlib\sysctl.c ****     if(bEnable)
 1381              		.loc 1 1333 0
 1382 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1383 000c 002B     		cmp	r3, #0
 1384 000e 0CD0     		beq	.L46
1334:C:/StellarisWare/driverlib\sysctl.c ****     {
1335:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) |= SYSCTL_RCC_ACG;
 1385              		.loc 1 1335 0
 1386 0010 4EF26003 		movw	r3, #57440
 1387 0014 C4F20F03 		movt	r3, 16399
 1388 0018 4EF26002 		movw	r2, #57440
 1389 001c C4F20F02 		movt	r2, 16399
 1390 0020 1268     		ldr	r2, [r2, #0]
 1391 0022 42F00062 		orr	r2, r2, #134217728
 1392 0026 1A60     		str	r2, [r3, #0]
 1393 0028 0BE0     		b	.L45
 1394              	.L46:
1336:C:/StellarisWare/driverlib\sysctl.c ****     }
1337:C:/StellarisWare/driverlib\sysctl.c ****     else
1338:C:/StellarisWare/driverlib\sysctl.c ****     {
1339:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) &= ~(SYSCTL_RCC_ACG);
 1395              		.loc 1 1339 0
 1396 002a 4EF26003 		movw	r3, #57440
 1397 002e C4F20F03 		movt	r3, 16399
 1398 0032 4EF26002 		movw	r2, #57440
 1399 0036 C4F20F02 		movt	r2, 16399
 1400 003a 1268     		ldr	r2, [r2, #0]
 1401 003c 22F00062 		bic	r2, r2, #134217728
 1402 0040 1A60     		str	r2, [r3, #0]
 1403              	.L45:
1340:C:/StellarisWare/driverlib\sysctl.c ****     }
1341:C:/StellarisWare/driverlib\sysctl.c **** }
 1404              		.loc 1 1341 0
 1405 0042 07F10C07 		add	r7, r7, #12
 1406 0046 BD46     		mov	sp, r7
 1407 0048 80BC     		pop	{r7}
 1408 004a 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE15:
 1412              		.section	.text.SysCtlIntRegister,"ax",%progbits
 1413              		.align	2
 1414              		.global	SysCtlIntRegister
 1415              		.thumb
 1416              		.thumb_func
 1418              	SysCtlIntRegister:
 1419              	.LFB16:
1342:C:/StellarisWare/driverlib\sysctl.c **** 
1343:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1344:C:/StellarisWare/driverlib\sysctl.c **** //
1345:C:/StellarisWare/driverlib\sysctl.c **** //! Registers an interrupt handler for the system control interrupt.
1346:C:/StellarisWare/driverlib\sysctl.c **** //!
1347:C:/StellarisWare/driverlib\sysctl.c **** //! \param pfnHandler is a pointer to the function to be called when the system
1348:C:/StellarisWare/driverlib\sysctl.c **** //! control interrupt occurs.
1349:C:/StellarisWare/driverlib\sysctl.c **** //!
1350:C:/StellarisWare/driverlib\sysctl.c **** //! This function registers the handler to be called when a system control
1351:C:/StellarisWare/driverlib\sysctl.c **** //! interrupt occurs. This function enables the global interrupt in the
1352:C:/StellarisWare/driverlib\sysctl.c **** //! interrupt controller; specific system control interrupts must be enabled
1353:C:/StellarisWare/driverlib\sysctl.c **** //! via SysCtlIntEnable().  It is the interrupt handler's responsibility to
1354:C:/StellarisWare/driverlib\sysctl.c **** //! clear the interrupt source via SysCtlIntClear().
1355:C:/StellarisWare/driverlib\sysctl.c **** //!
1356:C:/StellarisWare/driverlib\sysctl.c **** //! System control can generate interrupts when the PLL achieves lock, if the
1357:C:/StellarisWare/driverlib\sysctl.c **** //! internal LDO current limit is exceeded, if the internal oscillator fails,
1358:C:/StellarisWare/driverlib\sysctl.c **** //! if the main oscillator fails, if the internal LDO output voltage droops too
1359:C:/StellarisWare/driverlib\sysctl.c **** //! much, if the external voltage droops too much, or if the PLL fails.
1360:C:/StellarisWare/driverlib\sysctl.c **** //!
1361:C:/StellarisWare/driverlib\sysctl.c **** //! \sa IntRegister() for important information about registering interrupt
1362:C:/StellarisWare/driverlib\sysctl.c **** //! handlers.
1363:C:/StellarisWare/driverlib\sysctl.c **** //!
1364:C:/StellarisWare/driverlib\sysctl.c **** //! \note The events that cause system control interrupts vary based on the
1365:C:/StellarisWare/driverlib\sysctl.c **** //! Stellaris part in use.  Please consult the data sheet for the part you are
1366:C:/StellarisWare/driverlib\sysctl.c **** //! using to determine which interrupt sources are available.
1367:C:/StellarisWare/driverlib\sysctl.c **** //!
1368:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1369:C:/StellarisWare/driverlib\sysctl.c **** //
1370:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1371:C:/StellarisWare/driverlib\sysctl.c **** void
1372:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntRegister(void (*pfnHandler)(void))
1373:C:/StellarisWare/driverlib\sysctl.c **** {
 1420              		.loc 1 1373 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              	.LCFI46:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 14, -4
 1428              		.cfi_offset 7, -8
 1429 0002 82B0     		sub	sp, sp, #8
 1430              	.LCFI47:
 1431              		.cfi_def_cfa_offset 16
 1432 0004 00AF     		add	r7, sp, #0
 1433              	.LCFI48:
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
1374:C:/StellarisWare/driverlib\sysctl.c ****     //
1375:C:/StellarisWare/driverlib\sysctl.c ****     // Register the interrupt handler, returning an error if an error occurs.
1376:C:/StellarisWare/driverlib\sysctl.c ****     //
1377:C:/StellarisWare/driverlib\sysctl.c ****     IntRegister(INT_SYSCTL, pfnHandler);
 1436              		.loc 1 1377 0
 1437 0008 4FF02C00 		mov	r0, #44
 1438 000c 7968     		ldr	r1, [r7, #4]
 1439 000e FFF7FEFF 		bl	IntRegister
1378:C:/StellarisWare/driverlib\sysctl.c **** 
1379:C:/StellarisWare/driverlib\sysctl.c ****     //
1380:C:/StellarisWare/driverlib\sysctl.c ****     // Enable the system control interrupt.
1381:C:/StellarisWare/driverlib\sysctl.c ****     //
1382:C:/StellarisWare/driverlib\sysctl.c ****     IntEnable(INT_SYSCTL);
 1440              		.loc 1 1382 0
 1441 0012 4FF02C00 		mov	r0, #44
 1442 0016 FFF7FEFF 		bl	IntEnable
1383:C:/StellarisWare/driverlib\sysctl.c **** }
 1443              		.loc 1 1383 0
 1444 001a 07F10807 		add	r7, r7, #8
 1445 001e BD46     		mov	sp, r7
 1446 0020 80BD     		pop	{r7, pc}
 1447              		.cfi_endproc
 1448              	.LFE16:
 1450 0022 00BF     		.section	.text.SysCtlIntUnregister,"ax",%progbits
 1451              		.align	2
 1452              		.global	SysCtlIntUnregister
 1453              		.thumb
 1454              		.thumb_func
 1456              	SysCtlIntUnregister:
 1457              	.LFB17:
1384:C:/StellarisWare/driverlib\sysctl.c **** 
1385:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1386:C:/StellarisWare/driverlib\sysctl.c **** //
1387:C:/StellarisWare/driverlib\sysctl.c **** //! Unregisters the interrupt handler for the system control interrupt.
1388:C:/StellarisWare/driverlib\sysctl.c **** //!
1389:C:/StellarisWare/driverlib\sysctl.c **** //! This function unregisters the handler to be called when a system control
1390:C:/StellarisWare/driverlib\sysctl.c **** //! interrupt occurs.  This function also masks off the interrupt in the
1391:C:/StellarisWare/driverlib\sysctl.c **** //! interrupt controller so that the interrupt handler no longer is called.
1392:C:/StellarisWare/driverlib\sysctl.c **** //!
1393:C:/StellarisWare/driverlib\sysctl.c **** //! \sa IntRegister() for important information about registering interrupt
1394:C:/StellarisWare/driverlib\sysctl.c **** //! handlers.
1395:C:/StellarisWare/driverlib\sysctl.c **** //!
1396:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1397:C:/StellarisWare/driverlib\sysctl.c **** //
1398:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1399:C:/StellarisWare/driverlib\sysctl.c **** void
1400:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntUnregister(void)
1401:C:/StellarisWare/driverlib\sysctl.c **** {
 1458              		.loc 1 1401 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 1, uses_anonymous_args = 0
 1462 0000 80B5     		push	{r7, lr}
 1463              	.LCFI49:
 1464              		.cfi_def_cfa_offset 8
 1465              		.cfi_offset 14, -4
 1466              		.cfi_offset 7, -8
 1467 0002 00AF     		add	r7, sp, #0
 1468              	.LCFI50:
 1469              		.cfi_def_cfa_register 7
1402:C:/StellarisWare/driverlib\sysctl.c ****     //
1403:C:/StellarisWare/driverlib\sysctl.c ****     // Disable the interrupt.
1404:C:/StellarisWare/driverlib\sysctl.c ****     //
1405:C:/StellarisWare/driverlib\sysctl.c ****     IntDisable(INT_SYSCTL);
 1470              		.loc 1 1405 0
 1471 0004 4FF02C00 		mov	r0, #44
 1472 0008 FFF7FEFF 		bl	IntDisable
1406:C:/StellarisWare/driverlib\sysctl.c **** 
1407:C:/StellarisWare/driverlib\sysctl.c ****     //
1408:C:/StellarisWare/driverlib\sysctl.c ****     // Unregister the interrupt handler.
1409:C:/StellarisWare/driverlib\sysctl.c ****     //
1410:C:/StellarisWare/driverlib\sysctl.c ****     IntUnregister(INT_SYSCTL);
 1473              		.loc 1 1410 0
 1474 000c 4FF02C00 		mov	r0, #44
 1475 0010 FFF7FEFF 		bl	IntUnregister
1411:C:/StellarisWare/driverlib\sysctl.c **** }
 1476              		.loc 1 1411 0
 1477 0014 80BD     		pop	{r7, pc}
 1478              		.cfi_endproc
 1479              	.LFE17:
 1481 0016 00BF     		.section	.text.SysCtlIntEnable,"ax",%progbits
 1482              		.align	2
 1483              		.global	SysCtlIntEnable
 1484              		.thumb
 1485              		.thumb_func
 1487              	SysCtlIntEnable:
 1488              	.LFB18:
1412:C:/StellarisWare/driverlib\sysctl.c **** 
1413:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1414:C:/StellarisWare/driverlib\sysctl.c **** //
1415:C:/StellarisWare/driverlib\sysctl.c **** //! Enables individual system control interrupt sources.
1416:C:/StellarisWare/driverlib\sysctl.c **** //!
1417:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulInts is a bit mask of the interrupt sources to be enabled.  Must
1418:C:/StellarisWare/driverlib\sysctl.c **** //! be a logical OR of \b SYSCTL_INT_PLL_LOCK, \b SYSCTL_INT_CUR_LIMIT,
1419:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_IOSC_FAIL, \b SYSCTL_INT_MOSC_FAIL, \b SYSCTL_INT_POR,
1420:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_BOR, and/or \b SYSCTL_INT_PLL_FAIL.
1421:C:/StellarisWare/driverlib\sysctl.c **** //!
1422:C:/StellarisWare/driverlib\sysctl.c **** //! This function enables the indicated system control interrupt sources.  Only
1423:C:/StellarisWare/driverlib\sysctl.c **** //! the sources that are enabled can be reflected to the processor interrupt;
1424:C:/StellarisWare/driverlib\sysctl.c **** //! disabled sources have no effect on the processor.
1425:C:/StellarisWare/driverlib\sysctl.c **** //!
1426:C:/StellarisWare/driverlib\sysctl.c **** //! \note The interrupt sources vary based on the Stellaris part in use.
1427:C:/StellarisWare/driverlib\sysctl.c **** //! Please consult the data sheet for the part you are using to determine
1428:C:/StellarisWare/driverlib\sysctl.c **** //! which interrupt sources are available.
1429:C:/StellarisWare/driverlib\sysctl.c **** //!
1430:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1431:C:/StellarisWare/driverlib\sysctl.c **** //
1432:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1433:C:/StellarisWare/driverlib\sysctl.c **** void
1434:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntEnable(unsigned long ulInts)
1435:C:/StellarisWare/driverlib\sysctl.c **** {
 1489              		.loc 1 1435 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493              		@ link register save eliminated.
 1494 0000 80B4     		push	{r7}
 1495              	.LCFI51:
 1496              		.cfi_def_cfa_offset 4
 1497              		.cfi_offset 7, -4
 1498 0002 83B0     		sub	sp, sp, #12
 1499              	.LCFI52:
 1500              		.cfi_def_cfa_offset 16
 1501 0004 00AF     		add	r7, sp, #0
 1502              	.LCFI53:
 1503              		.cfi_def_cfa_register 7
 1504 0006 7860     		str	r0, [r7, #4]
1436:C:/StellarisWare/driverlib\sysctl.c ****     //
1437:C:/StellarisWare/driverlib\sysctl.c ****     // Enable the specified interrupts.
1438:C:/StellarisWare/driverlib\sysctl.c ****     //
1439:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_IMC) |= ulInts;
 1505              		.loc 1 1439 0
 1506 0008 4EF25403 		movw	r3, #57428
 1507 000c C4F20F03 		movt	r3, 16399
 1508 0010 4EF25402 		movw	r2, #57428
 1509 0014 C4F20F02 		movt	r2, 16399
 1510 0018 1168     		ldr	r1, [r2, #0]
 1511 001a 7A68     		ldr	r2, [r7, #4]
 1512 001c 0A43     		orrs	r2, r2, r1
 1513 001e 1A60     		str	r2, [r3, #0]
1440:C:/StellarisWare/driverlib\sysctl.c **** }
 1514              		.loc 1 1440 0
 1515 0020 07F10C07 		add	r7, r7, #12
 1516 0024 BD46     		mov	sp, r7
 1517 0026 80BC     		pop	{r7}
 1518 0028 7047     		bx	lr
 1519              		.cfi_endproc
 1520              	.LFE18:
 1522 002a 00BF     		.section	.text.SysCtlIntDisable,"ax",%progbits
 1523              		.align	2
 1524              		.global	SysCtlIntDisable
 1525              		.thumb
 1526              		.thumb_func
 1528              	SysCtlIntDisable:
 1529              	.LFB19:
1441:C:/StellarisWare/driverlib\sysctl.c **** 
1442:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1443:C:/StellarisWare/driverlib\sysctl.c **** //
1444:C:/StellarisWare/driverlib\sysctl.c **** //! Disables individual system control interrupt sources.
1445:C:/StellarisWare/driverlib\sysctl.c **** //!
1446:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulInts is a bit mask of the interrupt sources to be disabled.  Must
1447:C:/StellarisWare/driverlib\sysctl.c **** //! be a logical OR of \b SYSCTL_INT_PLL_LOCK, \b SYSCTL_INT_CUR_LIMIT,
1448:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_IOSC_FAIL, \b SYSCTL_INT_MOSC_FAIL, \b SYSCTL_INT_POR,
1449:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_BOR, and/or \b SYSCTL_INT_PLL_FAIL.
1450:C:/StellarisWare/driverlib\sysctl.c **** //!
1451:C:/StellarisWare/driverlib\sysctl.c **** //! This function disables the indicated system control interrupt sources.
1452:C:/StellarisWare/driverlib\sysctl.c **** //! Only the sources that are enabled can be reflected to the processor
1453:C:/StellarisWare/driverlib\sysctl.c **** //! interrupt; disabled sources have no effect on the processor.
1454:C:/StellarisWare/driverlib\sysctl.c **** //!
1455:C:/StellarisWare/driverlib\sysctl.c **** //! \note The interrupt sources vary based on the Stellaris part in use.
1456:C:/StellarisWare/driverlib\sysctl.c **** //! Please consult the data sheet for the part you are using to determine
1457:C:/StellarisWare/driverlib\sysctl.c **** //! which interrupt sources are available.
1458:C:/StellarisWare/driverlib\sysctl.c **** //!
1459:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1460:C:/StellarisWare/driverlib\sysctl.c **** //
1461:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1462:C:/StellarisWare/driverlib\sysctl.c **** void
1463:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntDisable(unsigned long ulInts)
1464:C:/StellarisWare/driverlib\sysctl.c **** {
 1530              		.loc 1 1464 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 8
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534              		@ link register save eliminated.
 1535 0000 80B4     		push	{r7}
 1536              	.LCFI54:
 1537              		.cfi_def_cfa_offset 4
 1538              		.cfi_offset 7, -4
 1539 0002 83B0     		sub	sp, sp, #12
 1540              	.LCFI55:
 1541              		.cfi_def_cfa_offset 16
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI56:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
1465:C:/StellarisWare/driverlib\sysctl.c ****     //
1466:C:/StellarisWare/driverlib\sysctl.c ****     // Disable the specified interrupts.
1467:C:/StellarisWare/driverlib\sysctl.c ****     //
1468:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_IMC) &= ~(ulInts);
 1546              		.loc 1 1468 0
 1547 0008 4EF25403 		movw	r3, #57428
 1548 000c C4F20F03 		movt	r3, 16399
 1549 0010 4EF25402 		movw	r2, #57428
 1550 0014 C4F20F02 		movt	r2, 16399
 1551 0018 1168     		ldr	r1, [r2, #0]
 1552 001a 7A68     		ldr	r2, [r7, #4]
 1553 001c 6FEA0202 		mvn	r2, r2
 1554 0020 0A40     		ands	r2, r2, r1
 1555 0022 1A60     		str	r2, [r3, #0]
1469:C:/StellarisWare/driverlib\sysctl.c **** }
 1556              		.loc 1 1469 0
 1557 0024 07F10C07 		add	r7, r7, #12
 1558 0028 BD46     		mov	sp, r7
 1559 002a 80BC     		pop	{r7}
 1560 002c 7047     		bx	lr
 1561              		.cfi_endproc
 1562              	.LFE19:
 1564 002e 00BF     		.section	.text.SysCtlIntClear,"ax",%progbits
 1565              		.align	2
 1566              		.global	SysCtlIntClear
 1567              		.thumb
 1568              		.thumb_func
 1570              	SysCtlIntClear:
 1571              	.LFB20:
1470:C:/StellarisWare/driverlib\sysctl.c **** 
1471:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1472:C:/StellarisWare/driverlib\sysctl.c **** //
1473:C:/StellarisWare/driverlib\sysctl.c **** //! Clears system control interrupt sources.
1474:C:/StellarisWare/driverlib\sysctl.c **** //!
1475:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulInts is a bit mask of the interrupt sources to be cleared.  Must
1476:C:/StellarisWare/driverlib\sysctl.c **** //! be a logical OR of \b SYSCTL_INT_PLL_LOCK, \b SYSCTL_INT_CUR_LIMIT,
1477:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_IOSC_FAIL, \b SYSCTL_INT_MOSC_FAIL, \b SYSCTL_INT_POR,
1478:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_BOR, and/or \b SYSCTL_INT_PLL_FAIL.
1479:C:/StellarisWare/driverlib\sysctl.c **** //!
1480:C:/StellarisWare/driverlib\sysctl.c **** //! The specified system control interrupt sources are cleared, so that they no
1481:C:/StellarisWare/driverlib\sysctl.c **** //! longer assert.  This function must be called in the interrupt handler to
1482:C:/StellarisWare/driverlib\sysctl.c **** //! keep it from being called again immediately upon exit.
1483:C:/StellarisWare/driverlib\sysctl.c **** //!
1484:C:/StellarisWare/driverlib\sysctl.c **** //! \note Because there is a write buffer in the Cortex-M processor, it may
1485:C:/StellarisWare/driverlib\sysctl.c **** //! take several clock cycles before the interrupt source is actually cleared.
1486:C:/StellarisWare/driverlib\sysctl.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1487:C:/StellarisWare/driverlib\sysctl.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1488:C:/StellarisWare/driverlib\sysctl.c **** //! returning from the interrupt handler before the interrupt source is
1489:C:/StellarisWare/driverlib\sysctl.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1490:C:/StellarisWare/driverlib\sysctl.c **** //! being immediately reentered (because the interrupt controller still sees
1491:C:/StellarisWare/driverlib\sysctl.c **** //! the interrupt source asserted).
1492:C:/StellarisWare/driverlib\sysctl.c **** //!
1493:C:/StellarisWare/driverlib\sysctl.c **** //! \note The interrupt sources vary based on the Stellaris part in use.
1494:C:/StellarisWare/driverlib\sysctl.c **** //! Please consult the data sheet for the part you are using to determine
1495:C:/StellarisWare/driverlib\sysctl.c **** //! which interrupt sources are available.
1496:C:/StellarisWare/driverlib\sysctl.c **** //!
1497:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1498:C:/StellarisWare/driverlib\sysctl.c **** //
1499:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1500:C:/StellarisWare/driverlib\sysctl.c **** void
1501:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntClear(unsigned long ulInts)
1502:C:/StellarisWare/driverlib\sysctl.c **** {
 1572              		.loc 1 1502 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0000 80B4     		push	{r7}
 1578              	.LCFI57:
 1579              		.cfi_def_cfa_offset 4
 1580              		.cfi_offset 7, -4
 1581 0002 83B0     		sub	sp, sp, #12
 1582              	.LCFI58:
 1583              		.cfi_def_cfa_offset 16
 1584 0004 00AF     		add	r7, sp, #0
 1585              	.LCFI59:
 1586              		.cfi_def_cfa_register 7
 1587 0006 7860     		str	r0, [r7, #4]
1503:C:/StellarisWare/driverlib\sysctl.c ****     //
1504:C:/StellarisWare/driverlib\sysctl.c ****     // Clear the requested interrupt sources.
1505:C:/StellarisWare/driverlib\sysctl.c ****     //
1506:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_MISC) = ulInts;
 1588              		.loc 1 1506 0
 1589 0008 4EF25803 		movw	r3, #57432
 1590 000c C4F20F03 		movt	r3, 16399
 1591 0010 7A68     		ldr	r2, [r7, #4]
 1592 0012 1A60     		str	r2, [r3, #0]
1507:C:/StellarisWare/driverlib\sysctl.c **** }
 1593              		.loc 1 1507 0
 1594 0014 07F10C07 		add	r7, r7, #12
 1595 0018 BD46     		mov	sp, r7
 1596 001a 80BC     		pop	{r7}
 1597 001c 7047     		bx	lr
 1598              		.cfi_endproc
 1599              	.LFE20:
 1601 001e 00BF     		.section	.text.SysCtlIntStatus,"ax",%progbits
 1602              		.align	2
 1603              		.global	SysCtlIntStatus
 1604              		.thumb
 1605              		.thumb_func
 1607              	SysCtlIntStatus:
 1608              	.LFB21:
1508:C:/StellarisWare/driverlib\sysctl.c **** 
1509:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1510:C:/StellarisWare/driverlib\sysctl.c **** //
1511:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the current interrupt status.
1512:C:/StellarisWare/driverlib\sysctl.c **** //!
1513:C:/StellarisWare/driverlib\sysctl.c **** //! \param bMasked is false if the raw interrupt status is required and true if
1514:C:/StellarisWare/driverlib\sysctl.c **** //! the masked interrupt status is required.
1515:C:/StellarisWare/driverlib\sysctl.c **** //!
1516:C:/StellarisWare/driverlib\sysctl.c **** //! This function returns the interrupt status for the system controller.
1517:C:/StellarisWare/driverlib\sysctl.c **** //! Either the raw interrupt status or the status of interrupts that are
1518:C:/StellarisWare/driverlib\sysctl.c **** //! allowed to reflect to the processor can be returned.
1519:C:/StellarisWare/driverlib\sysctl.c **** //!
1520:C:/StellarisWare/driverlib\sysctl.c **** //! \return The current interrupt status, enumerated as a bit field of
1521:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_PLL_LOCK, \b SYSCTL_INT_CUR_LIMIT, \b SYSCTL_INT_IOSC_FAIL,
1522:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_MOSC_FAIL, \b SYSCTL_INT_POR, \b SYSCTL_INT_BOR, and
1523:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_PLL_FAIL.
1524:C:/StellarisWare/driverlib\sysctl.c **** //!
1525:C:/StellarisWare/driverlib\sysctl.c **** //! \note The interrupt sources vary based on the Stellaris part in use.
1526:C:/StellarisWare/driverlib\sysctl.c **** //! Please consult the data sheet for the part you are using to determine
1527:C:/StellarisWare/driverlib\sysctl.c **** //! which interrupt sources are available.
1528:C:/StellarisWare/driverlib\sysctl.c **** //
1529:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1530:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
1531:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIntStatus(tBoolean bMasked)
1532:C:/StellarisWare/driverlib\sysctl.c **** {
 1609              		.loc 1 1532 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 8
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614 0000 80B4     		push	{r7}
 1615              	.LCFI60:
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 7, -4
 1618 0002 83B0     		sub	sp, sp, #12
 1619              	.LCFI61:
 1620              		.cfi_def_cfa_offset 16
 1621 0004 00AF     		add	r7, sp, #0
 1622              	.LCFI62:
 1623              		.cfi_def_cfa_register 7
 1624 0006 0346     		mov	r3, r0
 1625 0008 FB71     		strb	r3, [r7, #7]
1533:C:/StellarisWare/driverlib\sysctl.c ****     //
1534:C:/StellarisWare/driverlib\sysctl.c ****     // Return either the interrupt status or the raw interrupt status as
1535:C:/StellarisWare/driverlib\sysctl.c ****     // requested.
1536:C:/StellarisWare/driverlib\sysctl.c ****     //
1537:C:/StellarisWare/driverlib\sysctl.c ****     if(bMasked)
 1626              		.loc 1 1537 0
 1627 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1628 000c 002B     		cmp	r3, #0
 1629 000e 05D0     		beq	.L54
1538:C:/StellarisWare/driverlib\sysctl.c ****     {
1539:C:/StellarisWare/driverlib\sysctl.c ****         return(HWREG(SYSCTL_MISC));
 1630              		.loc 1 1539 0
 1631 0010 4EF25803 		movw	r3, #57432
 1632 0014 C4F20F03 		movt	r3, 16399
 1633 0018 1B68     		ldr	r3, [r3, #0]
 1634 001a 04E0     		b	.L55
 1635              	.L54:
1540:C:/StellarisWare/driverlib\sysctl.c ****     }
1541:C:/StellarisWare/driverlib\sysctl.c ****     else
1542:C:/StellarisWare/driverlib\sysctl.c ****     {
1543:C:/StellarisWare/driverlib\sysctl.c ****         return(HWREG(SYSCTL_RIS));
 1636              		.loc 1 1543 0
 1637 001c 4EF25003 		movw	r3, #57424
 1638 0020 C4F20F03 		movt	r3, 16399
 1639 0024 1B68     		ldr	r3, [r3, #0]
 1640              	.L55:
1544:C:/StellarisWare/driverlib\sysctl.c ****     }
1545:C:/StellarisWare/driverlib\sysctl.c **** }
 1641              		.loc 1 1545 0
 1642 0026 1846     		mov	r0, r3
 1643 0028 07F10C07 		add	r7, r7, #12
 1644 002c BD46     		mov	sp, r7
 1645 002e 80BC     		pop	{r7}
 1646 0030 7047     		bx	lr
 1647              		.cfi_endproc
 1648              	.LFE21:
 1650 0032 00BF     		.section	.text.SysCtlLDOSet,"ax",%progbits
 1651              		.align	2
 1652              		.global	SysCtlLDOSet
 1653              		.thumb
 1654              		.thumb_func
 1656              	SysCtlLDOSet:
 1657              	.LFB22:
1546:C:/StellarisWare/driverlib\sysctl.c **** 
1547:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1548:C:/StellarisWare/driverlib\sysctl.c **** //
1549:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the output voltage of the LDO.
1550:C:/StellarisWare/driverlib\sysctl.c **** //!
1551:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulVoltage is the required output voltage from the LDO.  Must be one
1552:C:/StellarisWare/driverlib\sysctl.c **** //! of \b SYSCTL_LDO_2_25V, \b SYSCTL_LDO_2_30V, \b SYSCTL_LDO_2_35V,
1553:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_40V, \b SYSCTL_LDO_2_45V, \b SYSCTL_LDO_2_50V,
1554:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_55V, \b SYSCTL_LDO_2_60V, \b SYSCTL_LDO_2_65V,
1555:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_70V, or \b SYSCTL_LDO_2_75V.
1556:C:/StellarisWare/driverlib\sysctl.c **** //!
1557:C:/StellarisWare/driverlib\sysctl.c **** //! This function sets the output voltage of the LDO.
1558:C:/StellarisWare/driverlib\sysctl.c **** //!
1559:C:/StellarisWare/driverlib\sysctl.c **** //! \note The default LDO voltage and the adjustment range varies with the
1560:C:/StellarisWare/driverlib\sysctl.c **** //! Stellaris part in use.  Please consult the data sheet for the part you are
1561:C:/StellarisWare/driverlib\sysctl.c **** //! using to determine the default voltage and range available.
1562:C:/StellarisWare/driverlib\sysctl.c **** //!
1563:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1564:C:/StellarisWare/driverlib\sysctl.c **** //
1565:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1566:C:/StellarisWare/driverlib\sysctl.c **** void
1567:C:/StellarisWare/driverlib\sysctl.c **** SysCtlLDOSet(unsigned long ulVoltage)
1568:C:/StellarisWare/driverlib\sysctl.c **** {
 1658              		.loc 1 1568 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 8
 1661              		@ frame_needed = 1, uses_anonymous_args = 0
 1662              		@ link register save eliminated.
 1663 0000 80B4     		push	{r7}
 1664              	.LCFI63:
 1665              		.cfi_def_cfa_offset 4
 1666              		.cfi_offset 7, -4
 1667 0002 83B0     		sub	sp, sp, #12
 1668              	.LCFI64:
 1669              		.cfi_def_cfa_offset 16
 1670 0004 00AF     		add	r7, sp, #0
 1671              	.LCFI65:
 1672              		.cfi_def_cfa_register 7
 1673 0006 7860     		str	r0, [r7, #4]
1569:C:/StellarisWare/driverlib\sysctl.c ****     //
1570:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1571:C:/StellarisWare/driverlib\sysctl.c ****     //
1572:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulVoltage == SYSCTL_LDO_2_25V) ||
1573:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_30V) ||
1574:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_35V) ||
1575:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_40V) ||
1576:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_45V) ||
1577:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_50V) ||
1578:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_55V) ||
1579:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_60V) ||
1580:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_65V) ||
1581:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_70V) ||
1582:C:/StellarisWare/driverlib\sysctl.c ****            (ulVoltage == SYSCTL_LDO_2_75V));
1583:C:/StellarisWare/driverlib\sysctl.c **** 
1584:C:/StellarisWare/driverlib\sysctl.c ****     //
1585:C:/StellarisWare/driverlib\sysctl.c ****     // Set the LDO voltage to the requested value.
1586:C:/StellarisWare/driverlib\sysctl.c ****     //
1587:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_LDOPCTL) = ulVoltage;
 1674              		.loc 1 1587 0
 1675 0008 4EF23403 		movw	r3, #57396
 1676 000c C4F20F03 		movt	r3, 16399
 1677 0010 7A68     		ldr	r2, [r7, #4]
 1678 0012 1A60     		str	r2, [r3, #0]
1588:C:/StellarisWare/driverlib\sysctl.c **** }
 1679              		.loc 1 1588 0
 1680 0014 07F10C07 		add	r7, r7, #12
 1681 0018 BD46     		mov	sp, r7
 1682 001a 80BC     		pop	{r7}
 1683 001c 7047     		bx	lr
 1684              		.cfi_endproc
 1685              	.LFE22:
 1687 001e 00BF     		.section	.text.SysCtlLDOGet,"ax",%progbits
 1688              		.align	2
 1689              		.global	SysCtlLDOGet
 1690              		.thumb
 1691              		.thumb_func
 1693              	SysCtlLDOGet:
 1694              	.LFB23:
1589:C:/StellarisWare/driverlib\sysctl.c **** 
1590:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1591:C:/StellarisWare/driverlib\sysctl.c **** //
1592:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the output voltage of the LDO.
1593:C:/StellarisWare/driverlib\sysctl.c **** //!
1594:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines the output voltage of the LDO, as specified by the
1595:C:/StellarisWare/driverlib\sysctl.c **** //! control register.
1596:C:/StellarisWare/driverlib\sysctl.c **** //!
1597:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns the current voltage of the LDO; is one of
1598:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_25V, \b SYSCTL_LDO_2_30V, \b SYSCTL_LDO_2_35V,
1599:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_40V, \b SYSCTL_LDO_2_45V, \b SYSCTL_LDO_2_50V,
1600:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_55V, \b SYSCTL_LDO_2_60V, \b SYSCTL_LDO_2_65V,
1601:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDO_2_70V, or \b SYSCTL_LDO_2_75V.
1602:C:/StellarisWare/driverlib\sysctl.c **** //
1603:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1604:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
1605:C:/StellarisWare/driverlib\sysctl.c **** SysCtlLDOGet(void)
1606:C:/StellarisWare/driverlib\sysctl.c **** {
 1695              		.loc 1 1606 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 1, uses_anonymous_args = 0
 1699              		@ link register save eliminated.
 1700 0000 80B4     		push	{r7}
 1701              	.LCFI66:
 1702              		.cfi_def_cfa_offset 4
 1703              		.cfi_offset 7, -4
 1704 0002 00AF     		add	r7, sp, #0
 1705              	.LCFI67:
 1706              		.cfi_def_cfa_register 7
1607:C:/StellarisWare/driverlib\sysctl.c ****     //
1608:C:/StellarisWare/driverlib\sysctl.c ****     // Return the LDO voltage setting.
1609:C:/StellarisWare/driverlib\sysctl.c ****     //
1610:C:/StellarisWare/driverlib\sysctl.c ****     return(HWREG(SYSCTL_LDOPCTL));
 1707              		.loc 1 1610 0
 1708 0004 4EF23403 		movw	r3, #57396
 1709 0008 C4F20F03 		movt	r3, 16399
 1710 000c 1B68     		ldr	r3, [r3, #0]
1611:C:/StellarisWare/driverlib\sysctl.c **** }
 1711              		.loc 1 1611 0
 1712 000e 1846     		mov	r0, r3
 1713 0010 BD46     		mov	sp, r7
 1714 0012 80BC     		pop	{r7}
 1715 0014 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE23:
 1719 0016 00BF     		.section	.text.SysCtlLDOConfigSet,"ax",%progbits
 1720              		.align	2
 1721              		.global	SysCtlLDOConfigSet
 1722              		.thumb
 1723              		.thumb_func
 1725              	SysCtlLDOConfigSet:
 1726              	.LFB24:
1612:C:/StellarisWare/driverlib\sysctl.c **** 
1613:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1614:C:/StellarisWare/driverlib\sysctl.c **** //
1615:C:/StellarisWare/driverlib\sysctl.c **** //! Configures the LDO failure control.
1616:C:/StellarisWare/driverlib\sysctl.c **** //!
1617:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the required LDO failure control setting; can be either
1618:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_LDOCFG_ARST or \b SYSCTL_LDOCFG_NORST.
1619:C:/StellarisWare/driverlib\sysctl.c **** //!
1620:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows the LDO to be configured to cause a processor reset
1621:C:/StellarisWare/driverlib\sysctl.c **** //! when the output voltage becomes unregulated.
1622:C:/StellarisWare/driverlib\sysctl.c **** //!
1623:C:/StellarisWare/driverlib\sysctl.c **** //! The LDO failure control is only available on Sandstorm-class devices.
1624:C:/StellarisWare/driverlib\sysctl.c **** //!
1625:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1626:C:/StellarisWare/driverlib\sysctl.c **** //
1627:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1628:C:/StellarisWare/driverlib\sysctl.c **** void
1629:C:/StellarisWare/driverlib\sysctl.c **** SysCtlLDOConfigSet(unsigned long ulConfig)
1630:C:/StellarisWare/driverlib\sysctl.c **** {
 1727              		.loc 1 1630 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 8
 1730              		@ frame_needed = 1, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732 0000 80B4     		push	{r7}
 1733              	.LCFI68:
 1734              		.cfi_def_cfa_offset 4
 1735              		.cfi_offset 7, -4
 1736 0002 83B0     		sub	sp, sp, #12
 1737              	.LCFI69:
 1738              		.cfi_def_cfa_offset 16
 1739 0004 00AF     		add	r7, sp, #0
 1740              	.LCFI70:
 1741              		.cfi_def_cfa_register 7
 1742 0006 7860     		str	r0, [r7, #4]
1631:C:/StellarisWare/driverlib\sysctl.c ****     //
1632:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1633:C:/StellarisWare/driverlib\sysctl.c ****     //
1634:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulConfig == SYSCTL_LDOCFG_ARST) ||
1635:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_LDOCFG_NORST));
1636:C:/StellarisWare/driverlib\sysctl.c **** 
1637:C:/StellarisWare/driverlib\sysctl.c ****     //
1638:C:/StellarisWare/driverlib\sysctl.c ****     // Set the reset control as requested.
1639:C:/StellarisWare/driverlib\sysctl.c ****     //
1640:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_LDOARST) = ulConfig;
 1743              		.loc 1 1640 0
 1744 0008 4EF26013 		movw	r3, #57696
 1745 000c C4F20F03 		movt	r3, 16399
 1746 0010 7A68     		ldr	r2, [r7, #4]
 1747 0012 1A60     		str	r2, [r3, #0]
1641:C:/StellarisWare/driverlib\sysctl.c **** }
 1748              		.loc 1 1641 0
 1749 0014 07F10C07 		add	r7, r7, #12
 1750 0018 BD46     		mov	sp, r7
 1751 001a 80BC     		pop	{r7}
 1752 001c 7047     		bx	lr
 1753              		.cfi_endproc
 1754              	.LFE24:
 1756 001e 00BF     		.section	.text.SysCtlReset,"ax",%progbits
 1757              		.align	2
 1758              		.global	SysCtlReset
 1759              		.thumb
 1760              		.thumb_func
 1762              	SysCtlReset:
 1763              	.LFB25:
1642:C:/StellarisWare/driverlib\sysctl.c **** 
1643:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1644:C:/StellarisWare/driverlib\sysctl.c **** //
1645:C:/StellarisWare/driverlib\sysctl.c **** //! Resets the device.
1646:C:/StellarisWare/driverlib\sysctl.c **** //!
1647:C:/StellarisWare/driverlib\sysctl.c **** //! This function performs a software reset of the entire device.  The
1648:C:/StellarisWare/driverlib\sysctl.c **** //! processor and all peripherals are reset and all device registers are
1649:C:/StellarisWare/driverlib\sysctl.c **** //! returned to their default values (with the exception of the reset cause
1650:C:/StellarisWare/driverlib\sysctl.c **** //! register, which maintains its current value but has the software reset
1651:C:/StellarisWare/driverlib\sysctl.c **** //! bit set as well).
1652:C:/StellarisWare/driverlib\sysctl.c **** //!
1653:C:/StellarisWare/driverlib\sysctl.c **** //! \return This function does not return.
1654:C:/StellarisWare/driverlib\sysctl.c **** //
1655:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1656:C:/StellarisWare/driverlib\sysctl.c **** void
1657:C:/StellarisWare/driverlib\sysctl.c **** SysCtlReset(void)
1658:C:/StellarisWare/driverlib\sysctl.c **** {
 1764              		.loc 1 1658 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 1, uses_anonymous_args = 0
 1768              		@ link register save eliminated.
 1769 0000 80B4     		push	{r7}
 1770              	.LCFI71:
 1771              		.cfi_def_cfa_offset 4
 1772              		.cfi_offset 7, -4
 1773 0002 00AF     		add	r7, sp, #0
 1774              	.LCFI72:
 1775              		.cfi_def_cfa_register 7
1659:C:/StellarisWare/driverlib\sysctl.c ****     //
1660:C:/StellarisWare/driverlib\sysctl.c ****     // Perform a software reset request.  This request causes the device to
1661:C:/StellarisWare/driverlib\sysctl.c ****     // reset, no further code is executed.
1662:C:/StellarisWare/driverlib\sysctl.c ****     //
1663:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(NVIC_APINT) = NVIC_APINT_VECTKEY | NVIC_APINT_SYSRESETREQ;
 1776              		.loc 1 1663 0
 1777 0004 4EF60C53 		movw	r3, #60684
 1778 0008 CEF20003 		movt	r3, 57344
 1779 000c 4FF00402 		mov	r2, #4
 1780 0010 C0F2FA52 		movt	r2, 1530
 1781 0014 1A60     		str	r2, [r3, #0]
 1782              	.L60:
1664:C:/StellarisWare/driverlib\sysctl.c **** 
1665:C:/StellarisWare/driverlib\sysctl.c ****     //
1666:C:/StellarisWare/driverlib\sysctl.c ****     // The device should have reset, so this should never be reached.  Just in
1667:C:/StellarisWare/driverlib\sysctl.c ****     // case, loop forever.
1668:C:/StellarisWare/driverlib\sysctl.c ****     //
1669:C:/StellarisWare/driverlib\sysctl.c ****     while(1)
1670:C:/StellarisWare/driverlib\sysctl.c ****     {
1671:C:/StellarisWare/driverlib\sysctl.c ****     }
 1783              		.loc 1 1671 0 discriminator 1
 1784 0016 FEE7     		b	.L60
 1785              		.cfi_endproc
 1786              	.LFE25:
 1788              		.section	.text.SysCtlSleep,"ax",%progbits
 1789              		.align	2
 1790              		.global	SysCtlSleep
 1791              		.thumb
 1792              		.thumb_func
 1794              	SysCtlSleep:
 1795              	.LFB26:
1672:C:/StellarisWare/driverlib\sysctl.c **** }
1673:C:/StellarisWare/driverlib\sysctl.c **** 
1674:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1675:C:/StellarisWare/driverlib\sysctl.c **** //
1676:C:/StellarisWare/driverlib\sysctl.c **** //! Puts the processor into sleep mode.
1677:C:/StellarisWare/driverlib\sysctl.c **** //!
1678:C:/StellarisWare/driverlib\sysctl.c **** //! This function places the processor into sleep mode; it does not return
1679:C:/StellarisWare/driverlib\sysctl.c **** //! until the processor returns to run mode.  The peripherals that are enabled
1680:C:/StellarisWare/driverlib\sysctl.c **** //! via SysCtlPeripheralSleepEnable() continue to operate and can wake up the
1681:C:/StellarisWare/driverlib\sysctl.c **** //! processor (if automatic clock gating is enabled with
1682:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(), otherwise all peripherals continue to
1683:C:/StellarisWare/driverlib\sysctl.c **** //! operate).
1684:C:/StellarisWare/driverlib\sysctl.c **** //!
1685:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1686:C:/StellarisWare/driverlib\sysctl.c **** //
1687:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1688:C:/StellarisWare/driverlib\sysctl.c **** void
1689:C:/StellarisWare/driverlib\sysctl.c **** SysCtlSleep(void)
1690:C:/StellarisWare/driverlib\sysctl.c **** {
 1796              		.loc 1 1690 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 1, uses_anonymous_args = 0
 1800 0000 80B5     		push	{r7, lr}
 1801              	.LCFI73:
 1802              		.cfi_def_cfa_offset 8
 1803              		.cfi_offset 14, -4
 1804              		.cfi_offset 7, -8
 1805 0002 00AF     		add	r7, sp, #0
 1806              	.LCFI74:
 1807              		.cfi_def_cfa_register 7
1691:C:/StellarisWare/driverlib\sysctl.c ****     //
1692:C:/StellarisWare/driverlib\sysctl.c ****     // Wait for an interrupt.
1693:C:/StellarisWare/driverlib\sysctl.c ****     //
1694:C:/StellarisWare/driverlib\sysctl.c ****     CPUwfi();
 1808              		.loc 1 1694 0
 1809 0004 FFF7FEFF 		bl	CPUwfi
1695:C:/StellarisWare/driverlib\sysctl.c **** }
 1810              		.loc 1 1695 0
 1811 0008 80BD     		pop	{r7, pc}
 1812              		.cfi_endproc
 1813              	.LFE26:
 1815 000a 00BF     		.section	.text.SysCtlDeepSleep,"ax",%progbits
 1816              		.align	2
 1817              		.global	SysCtlDeepSleep
 1818              		.thumb
 1819              		.thumb_func
 1821              	SysCtlDeepSleep:
 1822              	.LFB27:
1696:C:/StellarisWare/driverlib\sysctl.c **** 
1697:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1698:C:/StellarisWare/driverlib\sysctl.c **** //
1699:C:/StellarisWare/driverlib\sysctl.c **** //! Puts the processor into deep-sleep mode.
1700:C:/StellarisWare/driverlib\sysctl.c **** //!
1701:C:/StellarisWare/driverlib\sysctl.c **** //! This function places the processor into deep-sleep mode; it does not return
1702:C:/StellarisWare/driverlib\sysctl.c **** //! until the processor returns to run mode.  The peripherals that are enabled
1703:C:/StellarisWare/driverlib\sysctl.c **** //! via SysCtlPeripheralDeepSleepEnable() continue to operate and can wake up
1704:C:/StellarisWare/driverlib\sysctl.c **** //! the processor (if automatic clock gating is enabled with
1705:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlPeripheralClockGating(), otherwise all peripherals continue to
1706:C:/StellarisWare/driverlib\sysctl.c **** //! operate).
1707:C:/StellarisWare/driverlib\sysctl.c **** //!
1708:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1709:C:/StellarisWare/driverlib\sysctl.c **** //
1710:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1711:C:/StellarisWare/driverlib\sysctl.c **** void
1712:C:/StellarisWare/driverlib\sysctl.c **** SysCtlDeepSleep(void)
1713:C:/StellarisWare/driverlib\sysctl.c **** {
 1823              		.loc 1 1713 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 1, uses_anonymous_args = 0
 1827 0000 80B5     		push	{r7, lr}
 1828              	.LCFI75:
 1829              		.cfi_def_cfa_offset 8
 1830              		.cfi_offset 14, -4
 1831              		.cfi_offset 7, -8
 1832 0002 00AF     		add	r7, sp, #0
 1833              	.LCFI76:
 1834              		.cfi_def_cfa_register 7
1714:C:/StellarisWare/driverlib\sysctl.c ****     //
1715:C:/StellarisWare/driverlib\sysctl.c ****     // Enable deep-sleep.
1716:C:/StellarisWare/driverlib\sysctl.c ****     //
1717:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
 1835              		.loc 1 1717 0
 1836 0004 4EF61053 		movw	r3, #60688
 1837 0008 CEF20003 		movt	r3, 57344
 1838 000c 4EF61052 		movw	r2, #60688
 1839 0010 CEF20002 		movt	r2, 57344
 1840 0014 1268     		ldr	r2, [r2, #0]
 1841 0016 42F00402 		orr	r2, r2, #4
 1842 001a 1A60     		str	r2, [r3, #0]
1718:C:/StellarisWare/driverlib\sysctl.c **** 
1719:C:/StellarisWare/driverlib\sysctl.c ****     //
1720:C:/StellarisWare/driverlib\sysctl.c ****     // Wait for an interrupt.
1721:C:/StellarisWare/driverlib\sysctl.c ****     //
1722:C:/StellarisWare/driverlib\sysctl.c ****     CPUwfi();
 1843              		.loc 1 1722 0
 1844 001c FFF7FEFF 		bl	CPUwfi
1723:C:/StellarisWare/driverlib\sysctl.c **** 
1724:C:/StellarisWare/driverlib\sysctl.c ****     //
1725:C:/StellarisWare/driverlib\sysctl.c ****     // Disable deep-sleep so that a future sleep will work correctly.
1726:C:/StellarisWare/driverlib\sysctl.c ****     //
1727:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
 1845              		.loc 1 1727 0
 1846 0020 4EF61053 		movw	r3, #60688
 1847 0024 CEF20003 		movt	r3, 57344
 1848 0028 4EF61052 		movw	r2, #60688
 1849 002c CEF20002 		movt	r2, 57344
 1850 0030 1268     		ldr	r2, [r2, #0]
 1851 0032 22F00402 		bic	r2, r2, #4
 1852 0036 1A60     		str	r2, [r3, #0]
1728:C:/StellarisWare/driverlib\sysctl.c **** }
 1853              		.loc 1 1728 0
 1854 0038 80BD     		pop	{r7, pc}
 1855              		.cfi_endproc
 1856              	.LFE27:
 1858 003a 00BF     		.section	.text.SysCtlResetCauseGet,"ax",%progbits
 1859              		.align	2
 1860              		.global	SysCtlResetCauseGet
 1861              		.thumb
 1862              		.thumb_func
 1864              	SysCtlResetCauseGet:
 1865              	.LFB28:
1729:C:/StellarisWare/driverlib\sysctl.c **** 
1730:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1731:C:/StellarisWare/driverlib\sysctl.c **** //
1732:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the reason for a reset.
1733:C:/StellarisWare/driverlib\sysctl.c **** //!
1734:C:/StellarisWare/driverlib\sysctl.c **** //! This function returns the reason(s) for a reset.  Because the reset
1735:C:/StellarisWare/driverlib\sysctl.c **** //! reasons are sticky until either cleared by software or an external reset
1736:C:/StellarisWare/driverlib\sysctl.c **** //! (for Sandstorm-class devices) or a power-on reset (for all other classes),
1737:C:/StellarisWare/driverlib\sysctl.c **** //! multiple reset reasons may be returned if multiple resets have occurred.
1738:C:/StellarisWare/driverlib\sysctl.c **** //! The reset reason is a logical OR of \b SYSCTL_CAUSE_LDO,
1739:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_CAUSE_SW, \b SYSCTL_CAUSE_WDOG, \b SYSCTL_CAUSE_BOR,
1740:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_CAUSE_POR, and/or \b SYSCTL_CAUSE_EXT.
1741:C:/StellarisWare/driverlib\sysctl.c **** //!
1742:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns the reason(s) for a reset.
1743:C:/StellarisWare/driverlib\sysctl.c **** //
1744:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1745:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
1746:C:/StellarisWare/driverlib\sysctl.c **** SysCtlResetCauseGet(void)
1747:C:/StellarisWare/driverlib\sysctl.c **** {
 1866              		.loc 1 1747 0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 0
 1869              		@ frame_needed = 1, uses_anonymous_args = 0
 1870              		@ link register save eliminated.
 1871 0000 80B4     		push	{r7}
 1872              	.LCFI77:
 1873              		.cfi_def_cfa_offset 4
 1874              		.cfi_offset 7, -4
 1875 0002 00AF     		add	r7, sp, #0
 1876              	.LCFI78:
 1877              		.cfi_def_cfa_register 7
1748:C:/StellarisWare/driverlib\sysctl.c ****     //
1749:C:/StellarisWare/driverlib\sysctl.c ****     // Return the reset reasons.
1750:C:/StellarisWare/driverlib\sysctl.c ****     //
1751:C:/StellarisWare/driverlib\sysctl.c ****     return(HWREG(SYSCTL_RESC));
 1878              		.loc 1 1751 0
 1879 0004 4EF25C03 		movw	r3, #57436
 1880 0008 C4F20F03 		movt	r3, 16399
 1881 000c 1B68     		ldr	r3, [r3, #0]
1752:C:/StellarisWare/driverlib\sysctl.c **** }
 1882              		.loc 1 1752 0
 1883 000e 1846     		mov	r0, r3
 1884 0010 BD46     		mov	sp, r7
 1885 0012 80BC     		pop	{r7}
 1886 0014 7047     		bx	lr
 1887              		.cfi_endproc
 1888              	.LFE28:
 1890 0016 00BF     		.section	.text.SysCtlResetCauseClear,"ax",%progbits
 1891              		.align	2
 1892              		.global	SysCtlResetCauseClear
 1893              		.thumb
 1894              		.thumb_func
 1896              	SysCtlResetCauseClear:
 1897              	.LFB29:
1753:C:/StellarisWare/driverlib\sysctl.c **** 
1754:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1755:C:/StellarisWare/driverlib\sysctl.c **** //
1756:C:/StellarisWare/driverlib\sysctl.c **** //! Clears reset reasons.
1757:C:/StellarisWare/driverlib\sysctl.c **** //!
1758:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulCauses are the reset causes to be cleared; must be a logical OR of
1759:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_CAUSE_LDO, \b SYSCTL_CAUSE_SW, \b SYSCTL_CAUSE_WDOG,
1760:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_CAUSE_BOR, \b SYSCTL_CAUSE_POR, and/or \b SYSCTL_CAUSE_EXT.
1761:C:/StellarisWare/driverlib\sysctl.c **** //!
1762:C:/StellarisWare/driverlib\sysctl.c **** //! This function clears the specified sticky reset reasons.  Once cleared,
1763:C:/StellarisWare/driverlib\sysctl.c **** //! another reset for the same reason can be detected, and a reset for a
1764:C:/StellarisWare/driverlib\sysctl.c **** //! different reason can be distinguished (instead of having two reset causes
1765:C:/StellarisWare/driverlib\sysctl.c **** //! set).  If the reset reason is used by an application, all reset causes
1766:C:/StellarisWare/driverlib\sysctl.c **** //! should be cleared after they are retrieved with SysCtlResetCauseGet().
1767:C:/StellarisWare/driverlib\sysctl.c **** //!
1768:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1769:C:/StellarisWare/driverlib\sysctl.c **** //
1770:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1771:C:/StellarisWare/driverlib\sysctl.c **** void
1772:C:/StellarisWare/driverlib\sysctl.c **** SysCtlResetCauseClear(unsigned long ulCauses)
1773:C:/StellarisWare/driverlib\sysctl.c **** {
 1898              		.loc 1 1773 0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 8
 1901              		@ frame_needed = 1, uses_anonymous_args = 0
 1902              		@ link register save eliminated.
 1903 0000 80B4     		push	{r7}
 1904              	.LCFI79:
 1905              		.cfi_def_cfa_offset 4
 1906              		.cfi_offset 7, -4
 1907 0002 83B0     		sub	sp, sp, #12
 1908              	.LCFI80:
 1909              		.cfi_def_cfa_offset 16
 1910 0004 00AF     		add	r7, sp, #0
 1911              	.LCFI81:
 1912              		.cfi_def_cfa_register 7
 1913 0006 7860     		str	r0, [r7, #4]
1774:C:/StellarisWare/driverlib\sysctl.c ****     //
1775:C:/StellarisWare/driverlib\sysctl.c ****     // Clear the given reset reasons.
1776:C:/StellarisWare/driverlib\sysctl.c ****     //
1777:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RESC) &= ~(ulCauses);
 1914              		.loc 1 1777 0
 1915 0008 4EF25C03 		movw	r3, #57436
 1916 000c C4F20F03 		movt	r3, 16399
 1917 0010 4EF25C02 		movw	r2, #57436
 1918 0014 C4F20F02 		movt	r2, 16399
 1919 0018 1168     		ldr	r1, [r2, #0]
 1920 001a 7A68     		ldr	r2, [r7, #4]
 1921 001c 6FEA0202 		mvn	r2, r2
 1922 0020 0A40     		ands	r2, r2, r1
 1923 0022 1A60     		str	r2, [r3, #0]
1778:C:/StellarisWare/driverlib\sysctl.c **** }
 1924              		.loc 1 1778 0
 1925 0024 07F10C07 		add	r7, r7, #12
 1926 0028 BD46     		mov	sp, r7
 1927 002a 80BC     		pop	{r7}
 1928 002c 7047     		bx	lr
 1929              		.cfi_endproc
 1930              	.LFE29:
 1932 002e 00BF     		.section	.text.SysCtlBrownOutConfigSet,"ax",%progbits
 1933              		.align	2
 1934              		.global	SysCtlBrownOutConfigSet
 1935              		.thumb
 1936              		.thumb_func
 1938              	SysCtlBrownOutConfigSet:
 1939              	.LFB30:
1779:C:/StellarisWare/driverlib\sysctl.c **** 
1780:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1781:C:/StellarisWare/driverlib\sysctl.c **** //
1782:C:/StellarisWare/driverlib\sysctl.c **** //! Configures the brown-out control.
1783:C:/StellarisWare/driverlib\sysctl.c **** //!
1784:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the desired configuration of the brown-out control.
1785:C:/StellarisWare/driverlib\sysctl.c **** //! Must be the logical OR of \b SYSCTL_BOR_RESET and/or
1786:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_BOR_RESAMPLE.
1787:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulDelay is the number of internal oscillator cycles to wait before
1788:C:/StellarisWare/driverlib\sysctl.c **** //! resampling an asserted brown-out signal.  This value only has meaning when
1789:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_BOR_RESAMPLE is set and must be less than 8192.
1790:C:/StellarisWare/driverlib\sysctl.c **** //!
1791:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures how the brown-out control operates.  It can detect
1792:C:/StellarisWare/driverlib\sysctl.c **** //! a brown-out by looking at only the brown-out output, or it can wait for it
1793:C:/StellarisWare/driverlib\sysctl.c **** //! to be active for two consecutive samples separated by a configurable time.
1794:C:/StellarisWare/driverlib\sysctl.c **** //! When it detects a brown-out condition, it can either reset the device or
1795:C:/StellarisWare/driverlib\sysctl.c **** //! generate a processor interrupt.
1796:C:/StellarisWare/driverlib\sysctl.c **** //!
1797:C:/StellarisWare/driverlib\sysctl.c **** //! \note The availability of the resample feature is only available on
1798:C:/StellarisWare/driverlib\sysctl.c **** //! Sandstorm-class devices. Please consult the data sheet for the part you
1799:C:/StellarisWare/driverlib\sysctl.c **** //! are using to determine whether this feature is available.
1800:C:/StellarisWare/driverlib\sysctl.c **** //!
1801:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1802:C:/StellarisWare/driverlib\sysctl.c **** //
1803:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1804:C:/StellarisWare/driverlib\sysctl.c **** void
1805:C:/StellarisWare/driverlib\sysctl.c **** SysCtlBrownOutConfigSet(unsigned long ulConfig, unsigned long ulDelay)
1806:C:/StellarisWare/driverlib\sysctl.c **** {
 1940              		.loc 1 1806 0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 8
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944              		@ link register save eliminated.
 1945 0000 80B4     		push	{r7}
 1946              	.LCFI82:
 1947              		.cfi_def_cfa_offset 4
 1948              		.cfi_offset 7, -4
 1949 0002 83B0     		sub	sp, sp, #12
 1950              	.LCFI83:
 1951              		.cfi_def_cfa_offset 16
 1952 0004 00AF     		add	r7, sp, #0
 1953              	.LCFI84:
 1954              		.cfi_def_cfa_register 7
 1955 0006 7860     		str	r0, [r7, #4]
 1956 0008 3960     		str	r1, [r7, #0]
1807:C:/StellarisWare/driverlib\sysctl.c ****     //
1808:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
1809:C:/StellarisWare/driverlib\sysctl.c ****     //
1810:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(!(ulConfig & ~(SYSCTL_BOR_RESET | SYSCTL_BOR_RESAMPLE)));
1811:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(ulDelay < 8192);
1812:C:/StellarisWare/driverlib\sysctl.c **** 
1813:C:/StellarisWare/driverlib\sysctl.c ****     //
1814:C:/StellarisWare/driverlib\sysctl.c ****     // Configure the brown-out reset control.
1815:C:/StellarisWare/driverlib\sysctl.c ****     //
1816:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_PBORCTL) = (ulDelay << SYSCTL_PBORCTL_BORTIM_S) | ulConfig;
 1957              		.loc 1 1816 0
 1958 000a 4EF23003 		movw	r3, #57392
 1959 000e C4F20F03 		movt	r3, 16399
 1960 0012 3A68     		ldr	r2, [r7, #0]
 1961 0014 4FEA8201 		lsl	r1, r2, #2
 1962 0018 7A68     		ldr	r2, [r7, #4]
 1963 001a 0A43     		orrs	r2, r2, r1
 1964 001c 1A60     		str	r2, [r3, #0]
1817:C:/StellarisWare/driverlib\sysctl.c **** }
 1965              		.loc 1 1817 0
 1966 001e 07F10C07 		add	r7, r7, #12
 1967 0022 BD46     		mov	sp, r7
 1968 0024 80BC     		pop	{r7}
 1969 0026 7047     		bx	lr
 1970              		.cfi_endproc
 1971              	.LFE30:
 1973              		.section	.text.SysCtlDelay,"ax",%progbits
 1974              		.align	2
 1975              		.global	SysCtlDelay
 1976              		.thumb
 1977              		.thumb_func
 1979              	SysCtlDelay:
 1980              	.LFB31:
1818:C:/StellarisWare/driverlib\sysctl.c **** 
1819:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1820:C:/StellarisWare/driverlib\sysctl.c **** //
1821:C:/StellarisWare/driverlib\sysctl.c **** //! Provides a small delay.
1822:C:/StellarisWare/driverlib\sysctl.c **** //!
1823:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulCount is the number of delay loop iterations to perform.
1824:C:/StellarisWare/driverlib\sysctl.c **** //!
1825:C:/StellarisWare/driverlib\sysctl.c **** //! This function provides a means of generating a constant length delay.  It
1826:C:/StellarisWare/driverlib\sysctl.c **** //! is written in assembly to keep the delay consistent across tool chains,
1827:C:/StellarisWare/driverlib\sysctl.c **** //! avoiding the need to tune the delay based on the tool chain in use.
1828:C:/StellarisWare/driverlib\sysctl.c **** //!
1829:C:/StellarisWare/driverlib\sysctl.c **** //! The loop takes 3 cycles/loop.
1830:C:/StellarisWare/driverlib\sysctl.c **** //!
1831:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1832:C:/StellarisWare/driverlib\sysctl.c **** //
1833:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1834:C:/StellarisWare/driverlib\sysctl.c **** #if defined(ewarm) || defined(DOXYGEN)
1835:C:/StellarisWare/driverlib\sysctl.c **** void
1836:C:/StellarisWare/driverlib\sysctl.c **** SysCtlDelay(unsigned long ulCount)
1837:C:/StellarisWare/driverlib\sysctl.c **** {
1838:C:/StellarisWare/driverlib\sysctl.c ****     __asm("    subs    r0, #1\n"
1839:C:/StellarisWare/driverlib\sysctl.c ****           "    bne.n   SysCtlDelay\n"
1840:C:/StellarisWare/driverlib\sysctl.c ****           "    bx      lr");
1841:C:/StellarisWare/driverlib\sysctl.c **** }
1842:C:/StellarisWare/driverlib\sysctl.c **** #endif
1843:C:/StellarisWare/driverlib\sysctl.c **** #if defined(codered) || defined(gcc) || defined(sourcerygxx)
1844:C:/StellarisWare/driverlib\sysctl.c **** void __attribute__((naked))
1845:C:/StellarisWare/driverlib\sysctl.c **** SysCtlDelay(unsigned long ulCount)
1846:C:/StellarisWare/driverlib\sysctl.c **** {
 1981              		.loc 1 1846 0
 1982              		.cfi_startproc
 1983              		@ Naked Function: prologue and epilogue provided by programmer.
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 1, uses_anonymous_args = 0
1847:C:/StellarisWare/driverlib\sysctl.c ****     __asm("    subs    r0, #1\n"
 1986              		.loc 1 1847 0
 1987              	@ 1847 "C:/StellarisWare/driverlib/sysctl.c" 1
 1988 0000 0138     		    subs    r0, #1
 1989 0002 7FF4FEAF 	    bne     SysCtlDelay
 1990 0006 7047     	    bx      lr
 1991              	@ 0 "" 2
1848:C:/StellarisWare/driverlib\sysctl.c ****           "    bne     SysCtlDelay\n"
1849:C:/StellarisWare/driverlib\sysctl.c ****           "    bx      lr");
1850:C:/StellarisWare/driverlib\sysctl.c **** }
 1992              		.loc 1 1850 0
 1993              		.thumb
 1994              		.cfi_endproc
 1995              	.LFE31:
 1997              		.section	.text.SysCtlMOSCConfigSet,"ax",%progbits
 1998              		.align	2
 1999              		.global	SysCtlMOSCConfigSet
 2000              		.thumb
 2001              		.thumb_func
 2003              	SysCtlMOSCConfigSet:
 2004              	.LFB32:
1851:C:/StellarisWare/driverlib\sysctl.c **** #endif
1852:C:/StellarisWare/driverlib\sysctl.c **** #if defined(rvmdk) || defined(__ARMCC_VERSION)
1853:C:/StellarisWare/driverlib\sysctl.c **** __asm void
1854:C:/StellarisWare/driverlib\sysctl.c **** SysCtlDelay(unsigned long ulCount)
1855:C:/StellarisWare/driverlib\sysctl.c **** {
1856:C:/StellarisWare/driverlib\sysctl.c ****     subs    r0, #1;
1857:C:/StellarisWare/driverlib\sysctl.c ****     bne     SysCtlDelay;
1858:C:/StellarisWare/driverlib\sysctl.c ****     bx      lr;
1859:C:/StellarisWare/driverlib\sysctl.c **** }
1860:C:/StellarisWare/driverlib\sysctl.c **** #endif
1861:C:/StellarisWare/driverlib\sysctl.c **** //
1862:C:/StellarisWare/driverlib\sysctl.c **** // For CCS implement this function in pure assembly.  This prevents the TI
1863:C:/StellarisWare/driverlib\sysctl.c **** // compiler from doing funny things with the optimizer.
1864:C:/StellarisWare/driverlib\sysctl.c **** //
1865:C:/StellarisWare/driverlib\sysctl.c **** #if defined(ccs)
1866:C:/StellarisWare/driverlib\sysctl.c ****     __asm("    .sect \".text:SysCtlDelay\"\n"
1867:C:/StellarisWare/driverlib\sysctl.c ****           "    .clink\n"
1868:C:/StellarisWare/driverlib\sysctl.c ****           "    .thumbfunc SysCtlDelay\n"
1869:C:/StellarisWare/driverlib\sysctl.c ****           "    .thumb\n"
1870:C:/StellarisWare/driverlib\sysctl.c ****           "    .global SysCtlDelay\n"
1871:C:/StellarisWare/driverlib\sysctl.c ****           "SysCtlDelay:\n"
1872:C:/StellarisWare/driverlib\sysctl.c ****           "    subs r0, #1\n"
1873:C:/StellarisWare/driverlib\sysctl.c ****           "    bne.n SysCtlDelay\n"
1874:C:/StellarisWare/driverlib\sysctl.c ****           "    bx lr\n");
1875:C:/StellarisWare/driverlib\sysctl.c **** #endif
1876:C:/StellarisWare/driverlib\sysctl.c **** 
1877:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1878:C:/StellarisWare/driverlib\sysctl.c **** //
1879:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the configuration of the main oscillator (MOSC) control.
1880:C:/StellarisWare/driverlib\sysctl.c **** //!
1881:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the required configuration of the MOSC control.
1882:C:/StellarisWare/driverlib\sysctl.c **** //!
1883:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the control of the main oscillator.  The
1884:C:/StellarisWare/driverlib\sysctl.c **** //! \e ulConfig is specified as follows:
1885:C:/StellarisWare/driverlib\sysctl.c **** //!
1886:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_MOSC_VALIDATE enables the MOSC verification circuit that
1887:C:/StellarisWare/driverlib\sysctl.c **** //!   detects a failure of the main oscillator (such as a loss of the clock).
1888:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_MOSC_INTERRUPT indicates that a MOSC failure should generate an
1889:C:/StellarisWare/driverlib\sysctl.c **** //!   interrupt instead of resetting the processor.
1890:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_MOSC_NO_XTAL indicates that there is no crystal connected to
1891:C:/StellarisWare/driverlib\sysctl.c **** //!   the OSC0/OSC1 pins, allowing power consumption to be reduced.
1892:C:/StellarisWare/driverlib\sysctl.c **** //!
1893:C:/StellarisWare/driverlib\sysctl.c **** //! \note The availability of MOSC control varies based on the Stellaris part
1894:C:/StellarisWare/driverlib\sysctl.c **** //! in use.  Please consult the data sheet for the part you are using to
1895:C:/StellarisWare/driverlib\sysctl.c **** //! determine whether this support is available. In addition, the capability
1896:C:/StellarisWare/driverlib\sysctl.c **** //! of MOSC control varies based on the Stellaris part in use.
1897:C:/StellarisWare/driverlib\sysctl.c **** //!
1898:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1899:C:/StellarisWare/driverlib\sysctl.c **** //
1900:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1901:C:/StellarisWare/driverlib\sysctl.c **** void
1902:C:/StellarisWare/driverlib\sysctl.c **** SysCtlMOSCConfigSet(unsigned long ulConfig)
1903:C:/StellarisWare/driverlib\sysctl.c **** {
 2005              		.loc 1 1903 0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 8
 2008              		@ frame_needed = 1, uses_anonymous_args = 0
 2009              		@ link register save eliminated.
 2010 0000 80B4     		push	{r7}
 2011              	.LCFI85:
 2012              		.cfi_def_cfa_offset 4
 2013              		.cfi_offset 7, -4
 2014 0002 83B0     		sub	sp, sp, #12
 2015              	.LCFI86:
 2016              		.cfi_def_cfa_offset 16
 2017 0004 00AF     		add	r7, sp, #0
 2018              	.LCFI87:
 2019              		.cfi_def_cfa_register 7
 2020 0006 7860     		str	r0, [r7, #4]
1904:C:/StellarisWare/driverlib\sysctl.c ****     //
1905:C:/StellarisWare/driverlib\sysctl.c ****     // Configure the MOSC control.
1906:C:/StellarisWare/driverlib\sysctl.c ****     //
1907:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_MOSCCTL) = ulConfig;
 2021              		.loc 1 1907 0
 2022 0008 4EF27C03 		movw	r3, #57468
 2023 000c C4F20F03 		movt	r3, 16399
 2024 0010 7A68     		ldr	r2, [r7, #4]
 2025 0012 1A60     		str	r2, [r3, #0]
1908:C:/StellarisWare/driverlib\sysctl.c **** }
 2026              		.loc 1 1908 0
 2027 0014 07F10C07 		add	r7, r7, #12
 2028 0018 BD46     		mov	sp, r7
 2029 001a 80BC     		pop	{r7}
 2030 001c 7047     		bx	lr
 2031              		.cfi_endproc
 2032              	.LFE32:
 2034 001e 00BF     		.section	.text.SysCtlPIOSCCalibrate,"ax",%progbits
 2035              		.align	2
 2036              		.global	SysCtlPIOSCCalibrate
 2037              		.thumb
 2038              		.thumb_func
 2040              	SysCtlPIOSCCalibrate:
 2041              	.LFB33:
1909:C:/StellarisWare/driverlib\sysctl.c **** 
1910:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1911:C:/StellarisWare/driverlib\sysctl.c **** //
1912:C:/StellarisWare/driverlib\sysctl.c **** //! Calibrates the precision internal oscillator.
1913:C:/StellarisWare/driverlib\sysctl.c **** //!
1914:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulType is the type of calibration to perform.
1915:C:/StellarisWare/driverlib\sysctl.c **** //!
1916:C:/StellarisWare/driverlib\sysctl.c **** //! This function performs a calibration of the PIOSC.  There are three types
1917:C:/StellarisWare/driverlib\sysctl.c **** //! of calibration available; the desired calibration type as specified in
1918:C:/StellarisWare/driverlib\sysctl.c **** //! \e ulType is one of:
1919:C:/StellarisWare/driverlib\sysctl.c **** //!
1920:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_PIOSC_CAL_AUTO to perform automatic calibration using the
1921:C:/StellarisWare/driverlib\sysctl.c **** //!   32-kHz clock from the hibernate module as a reference.  This type is
1922:C:/StellarisWare/driverlib\sysctl.c **** //!   only possible on parts that have a hibernate module, and then only if
1923:C:/StellarisWare/driverlib\sysctl.c **** //!   it is enabled and the hibernate module's RTC is also enabled.
1924:C:/StellarisWare/driverlib\sysctl.c **** //!
1925:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_PIOSC_CAL_FACT to reset the PIOSC calibration to the factory
1926:C:/StellarisWare/driverlib\sysctl.c **** //!   provided calibration.
1927:C:/StellarisWare/driverlib\sysctl.c **** //!
1928:C:/StellarisWare/driverlib\sysctl.c **** //! - \b SYSCTL_PIOSC_CAL_USER to set the PIOSC calibration to a user-supplied
1929:C:/StellarisWare/driverlib\sysctl.c **** //!   value.  The value to be used is ORed into the lower 7-bits of this value,
1930:C:/StellarisWare/driverlib\sysctl.c **** //!   with 0x40 being the ``nominal'' value (in other words, if everything were
1931:C:/StellarisWare/driverlib\sysctl.c **** //!   perfect, 0x40 provides exactly 16 MHz).  Values larger than 0x40
1932:C:/StellarisWare/driverlib\sysctl.c **** //!   slow down PIOSC, and values smaller than 0x40 speed up PIOSC.
1933:C:/StellarisWare/driverlib\sysctl.c **** //!
1934:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
1935:C:/StellarisWare/driverlib\sysctl.c **** //
1936:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1937:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
1938:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPIOSCCalibrate(unsigned long ulType)
1939:C:/StellarisWare/driverlib\sysctl.c **** {
 2042              		.loc 1 1939 0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 8
 2045              		@ frame_needed = 1, uses_anonymous_args = 0
 2046              		@ link register save eliminated.
 2047 0000 80B4     		push	{r7}
 2048              	.LCFI88:
 2049              		.cfi_def_cfa_offset 4
 2050              		.cfi_offset 7, -4
 2051 0002 83B0     		sub	sp, sp, #12
 2052              	.LCFI89:
 2053              		.cfi_def_cfa_offset 16
 2054 0004 00AF     		add	r7, sp, #0
 2055              	.LCFI90:
 2056              		.cfi_def_cfa_register 7
 2057 0006 7860     		str	r0, [r7, #4]
1940:C:/StellarisWare/driverlib\sysctl.c ****     //
1941:C:/StellarisWare/driverlib\sysctl.c ****     // Perform the requested calibration.  If performing user calibration, the
1942:C:/StellarisWare/driverlib\sysctl.c ****     // UTEN bit must be set with one write, then the UT field in a second
1943:C:/StellarisWare/driverlib\sysctl.c ****     // write, and the UPDATE bit in a final write.  For other calibration
1944:C:/StellarisWare/driverlib\sysctl.c ****     // types, a single write to set UPDATE or CAL is all that is required.
1945:C:/StellarisWare/driverlib\sysctl.c ****     //
1946:C:/StellarisWare/driverlib\sysctl.c ****     if(ulType & (SYSCTL_PIOSCCAL_UTEN | SYSCTL_PIOSCCAL_UPDATE))
 2058              		.loc 1 1946 0
 2059 0008 7A68     		ldr	r2, [r7, #4]
 2060 000a 4FF48073 		mov	r3, #256
 2061 000e C8F20003 		movt	r3, 32768
 2062 0012 1340     		ands	r3, r3, r2
 2063 0014 002B     		cmp	r3, #0
 2064 0016 12D0     		beq	.L69
1947:C:/StellarisWare/driverlib\sysctl.c ****     {
1948:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_PIOSCCAL) = ulType & SYSCTL_PIOSCCAL_UTEN;
 2065              		.loc 1 1948 0
 2066 0018 4EF25013 		movw	r3, #57680
 2067 001c C4F20F03 		movt	r3, 16399
 2068 0020 7A68     		ldr	r2, [r7, #4]
 2069 0022 02F00042 		and	r2, r2, #-2147483648
 2070 0026 1A60     		str	r2, [r3, #0]
1949:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_PIOSCCAL) =
 2071              		.loc 1 1949 0
 2072 0028 4EF25012 		movw	r2, #57680
 2073 002c C4F20F02 		movt	r2, 16399
1950:C:/StellarisWare/driverlib\sysctl.c ****             ulType & (SYSCTL_PIOSCCAL_UTEN | SYSCTL_PIOSCCAL_UT_M);
 2074              		.loc 1 1950 0
 2075 0030 7968     		ldr	r1, [r7, #4]
 2076 0032 4FF07F03 		mov	r3, #127
 2077 0036 C8F20003 		movt	r3, 32768
 2078 003a 0B40     		ands	r3, r3, r1
1949:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_PIOSCCAL) =
 2079              		.loc 1 1949 0
 2080 003c 1360     		str	r3, [r2, #0]
 2081              	.L69:
1951:C:/StellarisWare/driverlib\sysctl.c ****     }
1952:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_PIOSCCAL) = ulType;
 2082              		.loc 1 1952 0
 2083 003e 4EF25013 		movw	r3, #57680
 2084 0042 C4F20F03 		movt	r3, 16399
 2085 0046 7A68     		ldr	r2, [r7, #4]
 2086 0048 1A60     		str	r2, [r3, #0]
1953:C:/StellarisWare/driverlib\sysctl.c **** 
1954:C:/StellarisWare/driverlib\sysctl.c ****     //
1955:C:/StellarisWare/driverlib\sysctl.c ****     // See if an automatic calibration was requested.
1956:C:/StellarisWare/driverlib\sysctl.c ****     //
1957:C:/StellarisWare/driverlib\sysctl.c ****     if(ulType & SYSCTL_PIOSCCAL_CAL)
 2087              		.loc 1 1957 0
 2088 004a 7B68     		ldr	r3, [r7, #4]
 2089 004c 03F40073 		and	r3, r3, #512
 2090 0050 002B     		cmp	r3, #0
 2091 0052 16D0     		beq	.L70
1958:C:/StellarisWare/driverlib\sysctl.c ****     {
1959:C:/StellarisWare/driverlib\sysctl.c ****         //
1960:C:/StellarisWare/driverlib\sysctl.c ****         // Wait for the automatic calibration to complete.
1961:C:/StellarisWare/driverlib\sysctl.c ****         //
1962:C:/StellarisWare/driverlib\sysctl.c ****         while((HWREG(SYSCTL_PIOSCSTAT) & SYSCTL_PIOSCSTAT_CR_M) == 0)
 2092              		.loc 1 1962 0
 2093 0054 00BF     		nop
 2094              	.L71:
 2095              		.loc 1 1962 0 is_stmt 0 discriminator 1
 2096 0056 4EF25413 		movw	r3, #57684
 2097 005a C4F20F03 		movt	r3, 16399
 2098 005e 1B68     		ldr	r3, [r3, #0]
 2099 0060 03F44073 		and	r3, r3, #768
 2100 0064 002B     		cmp	r3, #0
 2101 0066 F6D0     		beq	.L71
1963:C:/StellarisWare/driverlib\sysctl.c ****         {
1964:C:/StellarisWare/driverlib\sysctl.c ****         }
1965:C:/StellarisWare/driverlib\sysctl.c **** 
1966:C:/StellarisWare/driverlib\sysctl.c ****         //
1967:C:/StellarisWare/driverlib\sysctl.c ****         // If the automatic calibration failed, return an error.
1968:C:/StellarisWare/driverlib\sysctl.c ****         //
1969:C:/StellarisWare/driverlib\sysctl.c ****         if((HWREG(SYSCTL_PIOSCSTAT) & SYSCTL_PIOSCSTAT_CR_M) !=
 2102              		.loc 1 1969 0 is_stmt 1
 2103 0068 4EF25413 		movw	r3, #57684
 2104 006c C4F20F03 		movt	r3, 16399
 2105 0070 1B68     		ldr	r3, [r3, #0]
 2106 0072 03F44073 		and	r3, r3, #768
 2107 0076 B3F5807F 		cmp	r3, #256
 2108 007a 02D0     		beq	.L70
1970:C:/StellarisWare/driverlib\sysctl.c ****            SYSCTL_PIOSCSTAT_CRPASS)
1971:C:/StellarisWare/driverlib\sysctl.c ****         {
1972:C:/StellarisWare/driverlib\sysctl.c ****             return(0);
 2109              		.loc 1 1972 0
 2110 007c 4FF00003 		mov	r3, #0
 2111 0080 01E0     		b	.L72
 2112              	.L70:
1973:C:/StellarisWare/driverlib\sysctl.c ****         }
1974:C:/StellarisWare/driverlib\sysctl.c ****     }
1975:C:/StellarisWare/driverlib\sysctl.c **** 
1976:C:/StellarisWare/driverlib\sysctl.c ****     //
1977:C:/StellarisWare/driverlib\sysctl.c ****     // The calibration was successful.
1978:C:/StellarisWare/driverlib\sysctl.c ****     //
1979:C:/StellarisWare/driverlib\sysctl.c ****     return(1);
 2113              		.loc 1 1979 0
 2114 0082 4FF00103 		mov	r3, #1
 2115              	.L72:
1980:C:/StellarisWare/driverlib\sysctl.c **** }
 2116              		.loc 1 1980 0
 2117 0086 1846     		mov	r0, r3
 2118 0088 07F10C07 		add	r7, r7, #12
 2119 008c BD46     		mov	sp, r7
 2120 008e 80BC     		pop	{r7}
 2121 0090 7047     		bx	lr
 2122              		.cfi_endproc
 2123              	.LFE33:
 2125 0092 00BF     		.section	.text.SysCtlClockSet,"ax",%progbits
 2126              		.align	2
 2127              		.global	SysCtlClockSet
 2128              		.thumb
 2129              		.thumb_func
 2131              	SysCtlClockSet:
 2132              	.LFB34:
1981:C:/StellarisWare/driverlib\sysctl.c **** 
1982:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
1983:C:/StellarisWare/driverlib\sysctl.c **** //
1984:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the clocking of the device.
1985:C:/StellarisWare/driverlib\sysctl.c **** //!
1986:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the required configuration of the device clocking.
1987:C:/StellarisWare/driverlib\sysctl.c **** //!
1988:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the clocking of the device.  The input crystal
1989:C:/StellarisWare/driverlib\sysctl.c **** //! frequency, oscillator to be used, use of the PLL, and the system clock
1990:C:/StellarisWare/driverlib\sysctl.c **** //! divider are all configured with this function.
1991:C:/StellarisWare/driverlib\sysctl.c **** //!
1992:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulConfig parameter is the logical OR of several different values,
1993:C:/StellarisWare/driverlib\sysctl.c **** //! many of which are grouped into sets where only one can be chosen.
1994:C:/StellarisWare/driverlib\sysctl.c **** //!
1995:C:/StellarisWare/driverlib\sysctl.c **** //! The system clock divider is chosen with one of the following values:
1996:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_SYSDIV_1, \b SYSCTL_SYSDIV_2, \b SYSCTL_SYSDIV_3, ...
1997:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_SYSDIV_64.  Only \b SYSCTL_SYSDIV_1 through \b SYSCTL_SYSDIV_16
1998:C:/StellarisWare/driverlib\sysctl.c **** //! are valid on Sandstorm-class devices. Half-dividers, such as
1999:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_SYSDIV_2_5 and \b SYSCTL_SYSDIV_3_5. are available on Tempest-,
2000:C:/StellarisWare/driverlib\sysctl.c **** //! Firestorm-, and Blizzard-class devices.
2001:C:/StellarisWare/driverlib\sysctl.c **** //!
2002:C:/StellarisWare/driverlib\sysctl.c **** //! The use of the PLL is chosen with either \b SYSCTL_USE_PLL or
2003:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_USE_OSC.
2004:C:/StellarisWare/driverlib\sysctl.c **** //!
2005:C:/StellarisWare/driverlib\sysctl.c **** //! The external crystal frequency is chosen with one of the following values:
2006:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_1MHZ, \b SYSCTL_XTAL_1_84MHZ, \b SYSCTL_XTAL_2MHZ,
2007:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_2_45MHZ, \b SYSCTL_XTAL_3_57MHZ, \b SYSCTL_XTAL_3_68MHZ,
2008:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_4MHZ, \b SYSCTL_XTAL_4_09MHZ, \b SYSCTL_XTAL_4_91MHZ,
2009:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_5MHZ, \b SYSCTL_XTAL_5_12MHZ, \b SYSCTL_XTAL_6MHZ,
2010:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_6_14MHZ, \b SYSCTL_XTAL_7_37MHZ, \b SYSCTL_XTAL_8MHZ,
2011:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_8_19MHZ, \b SYSCTL_XTAL_10MHZ, \b SYSCTL_XTAL_12MHZ,
2012:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_12_2MHZ, \b SYSCTL_XTAL_13_5MHZ, \b SYSCTL_XTAL_14_3MHZ,
2013:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_16MHZ, \b SYSCTL_XTAL_16_3MHZ, \b SYSCTL_XTAL_18MHZ,
2014:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_XTAL_20MHZ, \b SYSCTL_XTAL_24MHZ, or \b SYSCTL_XTAL_25MHz.
2015:C:/StellarisWare/driverlib\sysctl.c **** //! Values below \b SYSCTL_XTAL_3_57MHZ are not valid when the PLL is in
2016:C:/StellarisWare/driverlib\sysctl.c **** //! operation on Sandstorm-, Fury-, Dustdevil-, Tempest-, and Firestorm-class.
2017:C:/StellarisWare/driverlib\sysctl.c **** //! devices. Values below \b SYSCTL_XTAL_5MHZ are not valid when the PLL is in
2018:C:/StellarisWare/driverlib\sysctl.c **** //! operation on Blizzard-class devices.  Values below \b SYSCTL_XTAL_4MHZ
2019:C:/StellarisWare/driverlib\sysctl.c **** //! are never valid on Blizzard-class devices. On  Sandstorm- and Fury-class
2020:C:/StellarisWare/driverlib\sysctl.c **** //! devices, values above \b SYSCTL_XTAL_8_19MHZ are not valid. On Dustdevil-,
2021:C:/StellarisWare/driverlib\sysctl.c **** //! Tempest-, and Firestorm-class devices, values above \b SYSCTL_XTAL_16_3MHZ
2022:C:/StellarisWare/driverlib\sysctl.c **** //! are not valid.
2023:C:/StellarisWare/driverlib\sysctl.c **** //!
2024:C:/StellarisWare/driverlib\sysctl.c **** //! The oscillator source is chosen with one of the following values:
2025:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_OSC_MAIN, \b SYSCTL_OSC_INT, \b SYSCTL_OSC_INT4,
2026:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_OSC_INT30, or \b SYSCTL_OSC_EXT32.  On Sandstorm-class devices,
2027:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_OSC_INT30 and \b SYSCTL_OSC_EXT32 are not valid.
2028:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_OSC_EXT32 is only available on devices with the hibernate module,
2029:C:/StellarisWare/driverlib\sysctl.c **** //! and then only when the hibernate module has been enabled.
2030:C:/StellarisWare/driverlib\sysctl.c **** //!
2031:C:/StellarisWare/driverlib\sysctl.c **** //! The internal and main oscillators are disabled with the
2032:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_INT_OSC_DIS and \b SYSCTL_MAIN_OSC_DIS flags, respectively.
2033:C:/StellarisWare/driverlib\sysctl.c **** //! The external oscillator must be enabled in order to use an external clock
2034:C:/StellarisWare/driverlib\sysctl.c **** //! source.  Note that attempts to disable the oscillator used to clock the
2035:C:/StellarisWare/driverlib\sysctl.c **** //! device is prevented by the hardware.
2036:C:/StellarisWare/driverlib\sysctl.c **** //!
2037:C:/StellarisWare/driverlib\sysctl.c **** //! To clock the system from an external source (such as an external crystal
2038:C:/StellarisWare/driverlib\sysctl.c **** //! oscillator), use \b SYSCTL_USE_OSC \b | \b SYSCTL_OSC_MAIN.  To clock the
2039:C:/StellarisWare/driverlib\sysctl.c **** //! system from the main oscillator, use \b SYSCTL_USE_OSC \b |
2040:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_OSC_MAIN.  To clock the system from the PLL, use
2041:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_USE_PLL \b | \b SYSCTL_OSC_MAIN, and select the appropriate
2042:C:/StellarisWare/driverlib\sysctl.c **** //! crystal with one of the \b SYSCTL_XTAL_xxx values.
2043:C:/StellarisWare/driverlib\sysctl.c **** //!
2044:C:/StellarisWare/driverlib\sysctl.c **** //! \note If selecting the PLL as the system clock source (that is, via
2045:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_USE_PLL), this function polls the PLL lock interrupt to
2046:C:/StellarisWare/driverlib\sysctl.c **** //! determine when the PLL has locked.  If an interrupt handler for the
2047:C:/StellarisWare/driverlib\sysctl.c **** //! system control interrupt is in place, and it responds to and clears the
2048:C:/StellarisWare/driverlib\sysctl.c **** //! PLL lock interrupt, this function delays until its timeout has occurred
2049:C:/StellarisWare/driverlib\sysctl.c **** //! instead of completing as soon as PLL lock is achieved.
2050:C:/StellarisWare/driverlib\sysctl.c **** //!
2051:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2052:C:/StellarisWare/driverlib\sysctl.c **** //
2053:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2054:C:/StellarisWare/driverlib\sysctl.c **** void
2055:C:/StellarisWare/driverlib\sysctl.c **** SysCtlClockSet(unsigned long ulConfig)
2056:C:/StellarisWare/driverlib\sysctl.c **** {
 2133              		.loc 1 2056 0
 2134              		.cfi_startproc
 2135              		@ args = 0, pretend = 0, frame = 24
 2136              		@ frame_needed = 1, uses_anonymous_args = 0
 2137 0000 80B5     		push	{r7, lr}
 2138              	.LCFI91:
 2139              		.cfi_def_cfa_offset 8
 2140              		.cfi_offset 14, -4
 2141              		.cfi_offset 7, -8
 2142 0002 86B0     		sub	sp, sp, #24
 2143              	.LCFI92:
 2144              		.cfi_def_cfa_offset 32
 2145 0004 00AF     		add	r7, sp, #0
 2146              	.LCFI93:
 2147              		.cfi_def_cfa_register 7
 2148 0006 7860     		str	r0, [r7, #4]
2057:C:/StellarisWare/driverlib\sysctl.c ****     unsigned long ulDelay, ulRCC, ulRCC2;
2058:C:/StellarisWare/driverlib\sysctl.c **** 
2059:C:/StellarisWare/driverlib\sysctl.c ****     //
2060:C:/StellarisWare/driverlib\sysctl.c ****     // See if this is a Sandstorm-class device and clocking features from newer
2061:C:/StellarisWare/driverlib\sysctl.c ****     // devices were requested.
2062:C:/StellarisWare/driverlib\sysctl.c ****     //
2063:C:/StellarisWare/driverlib\sysctl.c ****     if(CLASS_IS_SANDSTORM && (ulConfig & SYSCTL_RCC2_USERCC2))
 2149              		.loc 1 2063 0
 2150 0008 4FF46043 		mov	r3, #57344
 2151 000c C4F20F03 		movt	r3, 16399
 2152 0010 1B68     		ldr	r3, [r3, #0]
 2153 0012 03F0E043 		and	r3, r3, #1879048192
 2154 0016 002B     		cmp	r3, #0
 2155 0018 0CD0     		beq	.L74
 2156              		.loc 1 2063 0 is_stmt 0 discriminator 2
 2157 001a 4FF46043 		mov	r3, #57344
 2158 001e C4F20F03 		movt	r3, 16399
 2159 0022 1A68     		ldr	r2, [r3, #0]
 2160 0024 4FF00003 		mov	r3, #0
 2161 0028 C7F2FF03 		movt	r3, 28927
 2162 002c 1340     		ands	r3, r3, r2
 2163 002e B3F1805F 		cmp	r3, #268435456
 2164 0032 03D1     		bne	.L75
 2165              	.L74:
 2166              		.loc 1 2063 0 discriminator 1
 2167 0034 7B68     		ldr	r3, [r7, #4]
 2168 0036 002B     		cmp	r3, #0
 2169 0038 C0F23381 		blt	.L92
 2170              	.L75:
2064:C:/StellarisWare/driverlib\sysctl.c ****     {
2065:C:/StellarisWare/driverlib\sysctl.c ****         //
2066:C:/StellarisWare/driverlib\sysctl.c ****         // Return without changing the clocking because the requested
2067:C:/StellarisWare/driverlib\sysctl.c ****         // configuration can not be achieved.
2068:C:/StellarisWare/driverlib\sysctl.c ****         //
2069:C:/StellarisWare/driverlib\sysctl.c ****         return;
2070:C:/StellarisWare/driverlib\sysctl.c ****     }
2071:C:/StellarisWare/driverlib\sysctl.c **** 
2072:C:/StellarisWare/driverlib\sysctl.c ****     //
2073:C:/StellarisWare/driverlib\sysctl.c ****     // Get the current value of the RCC and RCC2 registers.  If using a
2074:C:/StellarisWare/driverlib\sysctl.c ****     // Sandstorm-class device, the RCC2 register reads back as zero and the
2075:C:/StellarisWare/driverlib\sysctl.c ****     // writes to it from within this function are ignored.
2076:C:/StellarisWare/driverlib\sysctl.c ****     //
2077:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC = HWREG(SYSCTL_RCC);
 2171              		.loc 1 2077 0 is_stmt 1
 2172 003c 4EF26003 		movw	r3, #57440
 2173 0040 C4F20F03 		movt	r3, 16399
 2174 0044 1B68     		ldr	r3, [r3, #0]
 2175 0046 3B61     		str	r3, [r7, #16]
2078:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 = HWREG(SYSCTL_RCC2);
 2176              		.loc 1 2078 0
 2177 0048 4EF27003 		movw	r3, #57456
 2178 004c C4F20F03 		movt	r3, 16399
 2179 0050 1B68     		ldr	r3, [r3, #0]
 2180 0052 FB60     		str	r3, [r7, #12]
2079:C:/StellarisWare/driverlib\sysctl.c **** 
2080:C:/StellarisWare/driverlib\sysctl.c ****     //
2081:C:/StellarisWare/driverlib\sysctl.c ****     // Bypass the PLL and system clock dividers for now.
2082:C:/StellarisWare/driverlib\sysctl.c ****     //
2083:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC |= SYSCTL_RCC_BYPASS;
 2181              		.loc 1 2083 0
 2182 0054 3B69     		ldr	r3, [r7, #16]
 2183 0056 43F40063 		orr	r3, r3, #2048
 2184 005a 3B61     		str	r3, [r7, #16]
2084:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC &= ~(SYSCTL_RCC_USESYSDIV);
 2185              		.loc 1 2084 0
 2186 005c 3B69     		ldr	r3, [r7, #16]
 2187 005e 23F48003 		bic	r3, r3, #4194304
 2188 0062 3B61     		str	r3, [r7, #16]
2085:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 |= SYSCTL_RCC2_BYPASS2;
 2189              		.loc 1 2085 0
 2190 0064 FB68     		ldr	r3, [r7, #12]
 2191 0066 43F40063 		orr	r3, r3, #2048
 2192 006a FB60     		str	r3, [r7, #12]
2086:C:/StellarisWare/driverlib\sysctl.c **** 
2087:C:/StellarisWare/driverlib\sysctl.c ****     //
2088:C:/StellarisWare/driverlib\sysctl.c ****     // Write the new RCC value.
2089:C:/StellarisWare/driverlib\sysctl.c ****     //
2090:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC) = ulRCC;
 2193              		.loc 1 2090 0
 2194 006c 4EF26003 		movw	r3, #57440
 2195 0070 C4F20F03 		movt	r3, 16399
 2196 0074 3A69     		ldr	r2, [r7, #16]
 2197 0076 1A60     		str	r2, [r3, #0]
2091:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC2) = ulRCC2;
 2198              		.loc 1 2091 0
 2199 0078 4EF27003 		movw	r3, #57456
 2200 007c C4F20F03 		movt	r3, 16399
 2201 0080 FA68     		ldr	r2, [r7, #12]
 2202 0082 1A60     		str	r2, [r3, #0]
2092:C:/StellarisWare/driverlib\sysctl.c **** 
2093:C:/StellarisWare/driverlib\sysctl.c ****     //
2094:C:/StellarisWare/driverlib\sysctl.c ****     // See if either oscillator needs to be enabled.
2095:C:/StellarisWare/driverlib\sysctl.c ****     //
2096:C:/StellarisWare/driverlib\sysctl.c ****     if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
 2203              		.loc 1 2096 0
 2204 0084 3B69     		ldr	r3, [r7, #16]
 2205 0086 03F00203 		and	r3, r3, #2
 2206 008a 002B     		cmp	r3, #0
 2207 008c 04D0     		beq	.L77
 2208              		.loc 1 2096 0 is_stmt 0 discriminator 1
 2209 008e 7B68     		ldr	r3, [r7, #4]
 2210 0090 03F00203 		and	r3, r3, #2
 2211 0094 002B     		cmp	r3, #0
 2212 0096 0AD0     		beq	.L78
 2213              	.L77:
2097:C:/StellarisWare/driverlib\sysctl.c ****        ((ulRCC & SYSCTL_RCC_MOSCDIS) && !(ulConfig & SYSCTL_RCC_MOSCDIS)))
 2214              		.loc 1 2097 0 is_stmt 1 discriminator 2
 2215 0098 3B69     		ldr	r3, [r7, #16]
 2216 009a 03F00103 		and	r3, r3, #1
 2217 009e DBB2     		uxtb	r3, r3
2096:C:/StellarisWare/driverlib\sysctl.c ****     if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
 2218              		.loc 1 2096 0 discriminator 2
 2219 00a0 002B     		cmp	r3, #0
 2220 00a2 2ED0     		beq	.L79
 2221              		.loc 1 2097 0
 2222 00a4 7B68     		ldr	r3, [r7, #4]
 2223 00a6 03F00103 		and	r3, r3, #1
 2224 00aa 002B     		cmp	r3, #0
 2225 00ac 29D1     		bne	.L79
 2226              	.L78:
2098:C:/StellarisWare/driverlib\sysctl.c ****     {
2099:C:/StellarisWare/driverlib\sysctl.c ****         //
2100:C:/StellarisWare/driverlib\sysctl.c ****         // Make sure that the required oscillators are enabled.  For now, the
2101:C:/StellarisWare/driverlib\sysctl.c ****         // previously enabled oscillators must be enabled along with the newly
2102:C:/StellarisWare/driverlib\sysctl.c ****         // requested oscillators.
2103:C:/StellarisWare/driverlib\sysctl.c ****         //
2104:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC &= (~(SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS) |
 2227              		.loc 1 2104 0
 2228 00ae 7B68     		ldr	r3, [r7, #4]
 2229 00b0 63F00303 		orn	r3, r3, #3
 2230 00b4 3A69     		ldr	r2, [r7, #16]
 2231 00b6 1340     		ands	r3, r3, r2
 2232 00b8 3B61     		str	r3, [r7, #16]
2105:C:/StellarisWare/driverlib\sysctl.c ****                   (ulConfig & (SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS)));
2106:C:/StellarisWare/driverlib\sysctl.c **** 
2107:C:/StellarisWare/driverlib\sysctl.c ****         //
2108:C:/StellarisWare/driverlib\sysctl.c ****         // Write the new RCC value.
2109:C:/StellarisWare/driverlib\sysctl.c ****         //
2110:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) = ulRCC;
 2233              		.loc 1 2110 0
 2234 00ba 4EF26003 		movw	r3, #57440
 2235 00be C4F20F03 		movt	r3, 16399
 2236 00c2 3A69     		ldr	r2, [r7, #16]
 2237 00c4 1A60     		str	r2, [r3, #0]
2111:C:/StellarisWare/driverlib\sysctl.c **** 
2112:C:/StellarisWare/driverlib\sysctl.c ****         //
2113:C:/StellarisWare/driverlib\sysctl.c ****         // Wait for a bit, giving the oscillator time to stabilize.  The number
2114:C:/StellarisWare/driverlib\sysctl.c ****         // of iterations is adjusted based on the current clock source; a
2115:C:/StellarisWare/driverlib\sysctl.c ****         // smaller number of iterations is required for slower clock rates.
2116:C:/StellarisWare/driverlib\sysctl.c ****         //
2117:C:/StellarisWare/driverlib\sysctl.c ****         if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2238              		.loc 1 2117 0
 2239 00c6 FB68     		ldr	r3, [r7, #12]
 2240 00c8 002B     		cmp	r3, #0
 2241 00ca 09DA     		bge	.L80
2118:C:/StellarisWare/driverlib\sysctl.c ****             (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
 2242              		.loc 1 2118 0 discriminator 1
 2243 00cc FB68     		ldr	r3, [r7, #12]
 2244 00ce 03F07003 		and	r3, r3, #112
2117:C:/StellarisWare/driverlib\sysctl.c ****         if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2245              		.loc 1 2117 0 discriminator 1
 2246 00d2 302B     		cmp	r3, #48
 2247 00d4 0CD0     		beq	.L81
2119:C:/StellarisWare/driverlib\sysctl.c ****              ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
 2248              		.loc 1 2119 0
 2249 00d6 FB68     		ldr	r3, [r7, #12]
 2250 00d8 03F07003 		and	r3, r3, #112
2118:C:/StellarisWare/driverlib\sysctl.c ****             (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
 2251              		.loc 1 2118 0
 2252 00dc 702B     		cmp	r3, #112
 2253 00de 07D0     		beq	.L81
 2254              	.L80:
2120:C:/StellarisWare/driverlib\sysctl.c ****            (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2255              		.loc 1 2120 0
 2256 00e0 FB68     		ldr	r3, [r7, #12]
2119:C:/StellarisWare/driverlib\sysctl.c ****              ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
 2257              		.loc 1 2119 0
 2258 00e2 002B     		cmp	r3, #0
 2259 00e4 09DB     		blt	.L82
2121:C:/StellarisWare/driverlib\sysctl.c ****             ((ulRCC & SYSCTL_RCC_OSCSRC_M) == SYSCTL_RCC_OSCSRC_30)))
 2260              		.loc 1 2121 0
 2261 00e6 3B69     		ldr	r3, [r7, #16]
 2262 00e8 03F03003 		and	r3, r3, #48
2120:C:/StellarisWare/driverlib\sysctl.c ****            (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2263              		.loc 1 2120 0
 2264 00ec 302B     		cmp	r3, #48
 2265 00ee 04D1     		bne	.L82
 2266              	.L81:
2122:C:/StellarisWare/driverlib\sysctl.c ****         {
2123:C:/StellarisWare/driverlib\sysctl.c ****             //
2124:C:/StellarisWare/driverlib\sysctl.c ****             // Delay for 4096 iterations.
2125:C:/StellarisWare/driverlib\sysctl.c ****             //
2126:C:/StellarisWare/driverlib\sysctl.c ****             SysCtlDelay(4096);
 2267              		.loc 1 2126 0
 2268 00f0 4FF48050 		mov	r0, #4096
 2269 00f4 FFF7FEFF 		bl	SysCtlDelay
 2270 00f8 03E0     		b	.L79
 2271              	.L82:
2127:C:/StellarisWare/driverlib\sysctl.c ****         }
2128:C:/StellarisWare/driverlib\sysctl.c ****         else
2129:C:/StellarisWare/driverlib\sysctl.c ****         {
2130:C:/StellarisWare/driverlib\sysctl.c ****             //
2131:C:/StellarisWare/driverlib\sysctl.c ****             // Delay for 524,288 iterations.
2132:C:/StellarisWare/driverlib\sysctl.c ****             //
2133:C:/StellarisWare/driverlib\sysctl.c ****             SysCtlDelay(524288);
 2272              		.loc 1 2133 0
 2273 00fa 4FF40020 		mov	r0, #524288
 2274 00fe FFF7FEFF 		bl	SysCtlDelay
 2275              	.L79:
2134:C:/StellarisWare/driverlib\sysctl.c ****         }
2135:C:/StellarisWare/driverlib\sysctl.c ****     }
2136:C:/StellarisWare/driverlib\sysctl.c **** 
2137:C:/StellarisWare/driverlib\sysctl.c ****     //
2138:C:/StellarisWare/driverlib\sysctl.c ****     // Set the new crystal value and oscillator source.  Because the OSCSRC2
2139:C:/StellarisWare/driverlib\sysctl.c ****     // field in RCC2 overlaps the XTAL field in RCC, the OSCSRC field has a
2140:C:/StellarisWare/driverlib\sysctl.c ****     // special encoding within ulConfig to avoid the overlap.
2141:C:/StellarisWare/driverlib\sysctl.c ****     //
2142:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
 2276              		.loc 1 2142 0
 2277 0102 3B69     		ldr	r3, [r7, #16]
 2278 0104 23F4FE63 		bic	r3, r3, #2032
 2279 0108 3B61     		str	r3, [r7, #16]
2143:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
 2280              		.loc 1 2143 0
 2281 010a 7B68     		ldr	r3, [r7, #4]
 2282 010c 03F4FE63 		and	r3, r3, #2032
 2283 0110 3A69     		ldr	r2, [r7, #16]
 2284 0112 1343     		orrs	r3, r3, r2
 2285 0114 3B61     		str	r3, [r7, #16]
2144:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 &= ~(SYSCTL_RCC2_USERCC2 | SYSCTL_RCC2_OSCSRC2_M);
 2286              		.loc 1 2144 0
 2287 0116 FB68     		ldr	r3, [r7, #12]
 2288 0118 23F00043 		bic	r3, r3, #-2147483648
 2289 011c 23F07003 		bic	r3, r3, #112
 2290 0120 FB60     		str	r3, [r7, #12]
2145:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 |= ulConfig & (SYSCTL_RCC2_USERCC2 | SYSCTL_RCC_OSCSRC_M);
 2291              		.loc 1 2145 0
 2292 0122 7A68     		ldr	r2, [r7, #4]
 2293 0124 4FF03003 		mov	r3, #48
 2294 0128 C8F20003 		movt	r3, 32768
 2295 012c 1340     		ands	r3, r3, r2
 2296 012e FA68     		ldr	r2, [r7, #12]
 2297 0130 1343     		orrs	r3, r3, r2
 2298 0132 FB60     		str	r3, [r7, #12]
2146:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 |= (ulConfig & 0x00000008) << 3;
 2299              		.loc 1 2146 0
 2300 0134 7B68     		ldr	r3, [r7, #4]
 2301 0136 03F00803 		and	r3, r3, #8
 2302 013a 4FEAC303 		lsl	r3, r3, #3
 2303 013e FA68     		ldr	r2, [r7, #12]
 2304 0140 1343     		orrs	r3, r3, r2
 2305 0142 FB60     		str	r3, [r7, #12]
2147:C:/StellarisWare/driverlib\sysctl.c **** 
2148:C:/StellarisWare/driverlib\sysctl.c ****     //
2149:C:/StellarisWare/driverlib\sysctl.c ****     // Write the new RCC value.
2150:C:/StellarisWare/driverlib\sysctl.c ****     //
2151:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC) = ulRCC;
 2306              		.loc 1 2151 0
 2307 0144 4EF26003 		movw	r3, #57440
 2308 0148 C4F20F03 		movt	r3, 16399
 2309 014c 3A69     		ldr	r2, [r7, #16]
 2310 014e 1A60     		str	r2, [r3, #0]
2152:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC2) = ulRCC2;
 2311              		.loc 1 2152 0
 2312 0150 4EF27003 		movw	r3, #57456
 2313 0154 C4F20F03 		movt	r3, 16399
 2314 0158 FA68     		ldr	r2, [r7, #12]
 2315 015a 1A60     		str	r2, [r3, #0]
2153:C:/StellarisWare/driverlib\sysctl.c **** 
2154:C:/StellarisWare/driverlib\sysctl.c ****     //
2155:C:/StellarisWare/driverlib\sysctl.c ****     // Wait for a bit so that new crystal value and oscillator source can take
2156:C:/StellarisWare/driverlib\sysctl.c ****     // effect.
2157:C:/StellarisWare/driverlib\sysctl.c ****     //
2158:C:/StellarisWare/driverlib\sysctl.c ****     SysCtlDelay(16);
 2316              		.loc 1 2158 0
 2317 015c 4FF01000 		mov	r0, #16
 2318 0160 FFF7FEFF 		bl	SysCtlDelay
2159:C:/StellarisWare/driverlib\sysctl.c **** 
2160:C:/StellarisWare/driverlib\sysctl.c ****     //
2161:C:/StellarisWare/driverlib\sysctl.c ****     // Set the PLL configuration.
2162:C:/StellarisWare/driverlib\sysctl.c ****     //
2163:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC &= ~(SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
 2319              		.loc 1 2163 0
 2320 0164 3B69     		ldr	r3, [r7, #16]
 2321 0166 23F44053 		bic	r3, r3, #12288
 2322 016a 3B61     		str	r3, [r7, #16]
2164:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC |= ulConfig & (SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
 2323              		.loc 1 2164 0
 2324 016c 7B68     		ldr	r3, [r7, #4]
 2325 016e 03F44053 		and	r3, r3, #12288
 2326 0172 3A69     		ldr	r2, [r7, #16]
 2327 0174 1343     		orrs	r3, r3, r2
 2328 0176 3B61     		str	r3, [r7, #16]
2165:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 &= ~(SYSCTL_RCC2_PWRDN2);
 2329              		.loc 1 2165 0
 2330 0178 FB68     		ldr	r3, [r7, #12]
 2331 017a 23F40053 		bic	r3, r3, #8192
 2332 017e FB60     		str	r3, [r7, #12]
2166:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 |= ulConfig & SYSCTL_RCC2_PWRDN2;
 2333              		.loc 1 2166 0
 2334 0180 7B68     		ldr	r3, [r7, #4]
 2335 0182 03F40053 		and	r3, r3, #8192
 2336 0186 FA68     		ldr	r2, [r7, #12]
 2337 0188 1343     		orrs	r3, r3, r2
 2338 018a FB60     		str	r3, [r7, #12]
2167:C:/StellarisWare/driverlib\sysctl.c **** 
2168:C:/StellarisWare/driverlib\sysctl.c ****     //
2169:C:/StellarisWare/driverlib\sysctl.c ****     // Clear the PLL lock interrupt.
2170:C:/StellarisWare/driverlib\sysctl.c ****     //
2171:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_MISC) = SYSCTL_INT_PLL_LOCK;
 2339              		.loc 1 2171 0
 2340 018c 4EF25803 		movw	r3, #57432
 2341 0190 C4F20F03 		movt	r3, 16399
 2342 0194 4FF04002 		mov	r2, #64
 2343 0198 1A60     		str	r2, [r3, #0]
2172:C:/StellarisWare/driverlib\sysctl.c **** 
2173:C:/StellarisWare/driverlib\sysctl.c ****     //
2174:C:/StellarisWare/driverlib\sysctl.c ****     // Write the new RCC value.
2175:C:/StellarisWare/driverlib\sysctl.c ****     //
2176:C:/StellarisWare/driverlib\sysctl.c ****     if(ulRCC2 & SYSCTL_RCC2_USERCC2)
 2344              		.loc 1 2176 0
 2345 019a FB68     		ldr	r3, [r7, #12]
 2346 019c 002B     		cmp	r3, #0
 2347 019e 0CDA     		bge	.L83
2177:C:/StellarisWare/driverlib\sysctl.c ****     {
2178:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC2) = ulRCC2;
 2348              		.loc 1 2178 0
 2349 01a0 4EF27003 		movw	r3, #57456
 2350 01a4 C4F20F03 		movt	r3, 16399
 2351 01a8 FA68     		ldr	r2, [r7, #12]
 2352 01aa 1A60     		str	r2, [r3, #0]
2179:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) = ulRCC;
 2353              		.loc 1 2179 0
 2354 01ac 4EF26003 		movw	r3, #57440
 2355 01b0 C4F20F03 		movt	r3, 16399
 2356 01b4 3A69     		ldr	r2, [r7, #16]
 2357 01b6 1A60     		str	r2, [r3, #0]
 2358 01b8 0BE0     		b	.L84
 2359              	.L83:
2180:C:/StellarisWare/driverlib\sysctl.c ****     }
2181:C:/StellarisWare/driverlib\sysctl.c ****     else
2182:C:/StellarisWare/driverlib\sysctl.c ****     {
2183:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) = ulRCC;
 2360              		.loc 1 2183 0
 2361 01ba 4EF26003 		movw	r3, #57440
 2362 01be C4F20F03 		movt	r3, 16399
 2363 01c2 3A69     		ldr	r2, [r7, #16]
 2364 01c4 1A60     		str	r2, [r3, #0]
2184:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC2) = ulRCC2;
 2365              		.loc 1 2184 0
 2366 01c6 4EF27003 		movw	r3, #57456
 2367 01ca C4F20F03 		movt	r3, 16399
 2368 01ce FA68     		ldr	r2, [r7, #12]
 2369 01d0 1A60     		str	r2, [r3, #0]
 2370              	.L84:
2185:C:/StellarisWare/driverlib\sysctl.c ****     }
2186:C:/StellarisWare/driverlib\sysctl.c **** 
2187:C:/StellarisWare/driverlib\sysctl.c ****     //
2188:C:/StellarisWare/driverlib\sysctl.c ****     // Set the requested system divider and disable the appropriate
2189:C:/StellarisWare/driverlib\sysctl.c ****     // oscillators.  This value is not written immediately.
2190:C:/StellarisWare/driverlib\sysctl.c ****     //
2191:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
 2371              		.loc 1 2191 0
 2372 01d2 3B69     		ldr	r3, [r7, #16]
 2373 01d4 23F0F863 		bic	r3, r3, #130023424
 2374 01d8 23F00303 		bic	r3, r3, #3
 2375 01dc 3B61     		str	r3, [r7, #16]
2192:C:/StellarisWare/driverlib\sysctl.c ****                SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
2193:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
 2376              		.loc 1 2193 0
 2377 01de 7A68     		ldr	r2, [r7, #4]
 2378 01e0 4FF00303 		mov	r3, #3
 2379 01e4 C0F2C073 		movt	r3, 1984
 2380 01e8 1340     		ands	r3, r3, r2
 2381 01ea 3A69     		ldr	r2, [r7, #16]
 2382 01ec 1343     		orrs	r3, r3, r2
 2383 01ee 3B61     		str	r3, [r7, #16]
2194:C:/StellarisWare/driverlib\sysctl.c ****                          SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
2195:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
 2384              		.loc 1 2195 0
 2385 01f0 FB68     		ldr	r3, [r7, #12]
 2386 01f2 23F0FC53 		bic	r3, r3, #528482304
 2387 01f6 FB60     		str	r3, [r7, #12]
2196:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
 2388              		.loc 1 2196 0
 2389 01f8 7B68     		ldr	r3, [r7, #4]
 2390 01fa 03F0FC53 		and	r3, r3, #528482304
 2391 01fe FA68     		ldr	r2, [r7, #12]
 2392 0200 1343     		orrs	r3, r3, r2
 2393 0202 FB60     		str	r3, [r7, #12]
2197:C:/StellarisWare/driverlib\sysctl.c ****     if(ulConfig & SYSCTL_RCC2_DIV400)
 2394              		.loc 1 2197 0
 2395 0204 7B68     		ldr	r3, [r7, #4]
 2396 0206 03F08043 		and	r3, r3, #1073741824
 2397 020a 002B     		cmp	r3, #0
 2398 020c 11D0     		beq	.L85
2198:C:/StellarisWare/driverlib\sysctl.c ****     {
2199:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC |= SYSCTL_RCC_USESYSDIV;
 2399              		.loc 1 2199 0
 2400 020e 3B69     		ldr	r3, [r7, #16]
 2401 0210 43F48003 		orr	r3, r3, #4194304
 2402 0214 3B61     		str	r3, [r7, #16]
2200:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC2 &= ~(SYSCTL_RCC_USESYSDIV);
 2403              		.loc 1 2200 0
 2404 0216 FB68     		ldr	r3, [r7, #12]
 2405 0218 23F48003 		bic	r3, r3, #4194304
 2406 021c FB60     		str	r3, [r7, #12]
2201:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC2 |= ulConfig & (SYSCTL_RCC2_DIV400 | SYSCTL_RCC2_SYSDIV2LSB);
 2407              		.loc 1 2201 0
 2408 021e 7A68     		ldr	r2, [r7, #4]
 2409 0220 4FF00003 		mov	r3, #0
 2410 0224 C4F24003 		movt	r3, 16448
 2411 0228 1340     		ands	r3, r3, r2
 2412 022a FA68     		ldr	r2, [r7, #12]
 2413 022c 1343     		orrs	r3, r3, r2
 2414 022e FB60     		str	r3, [r7, #12]
 2415 0230 03E0     		b	.L86
 2416              	.L85:
2202:C:/StellarisWare/driverlib\sysctl.c ****     }
2203:C:/StellarisWare/driverlib\sysctl.c ****     else
2204:C:/StellarisWare/driverlib\sysctl.c ****     {
2205:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC2 &= ~(SYSCTL_RCC2_DIV400);
 2417              		.loc 1 2205 0
 2418 0232 FB68     		ldr	r3, [r7, #12]
 2419 0234 23F08043 		bic	r3, r3, #1073741824
 2420 0238 FB60     		str	r3, [r7, #12]
 2421              	.L86:
2206:C:/StellarisWare/driverlib\sysctl.c ****     }
2207:C:/StellarisWare/driverlib\sysctl.c **** 
2208:C:/StellarisWare/driverlib\sysctl.c ****     //
2209:C:/StellarisWare/driverlib\sysctl.c ****     // See if the PLL output is being used to clock the system.
2210:C:/StellarisWare/driverlib\sysctl.c ****     //
2211:C:/StellarisWare/driverlib\sysctl.c ****     if(!(ulConfig & SYSCTL_RCC_BYPASS))
 2422              		.loc 1 2211 0
 2423 023a 7B68     		ldr	r3, [r7, #4]
 2424 023c 03F40063 		and	r3, r3, #2048
 2425 0240 002B     		cmp	r3, #0
 2426 0242 1DD1     		bne	.L87
2212:C:/StellarisWare/driverlib\sysctl.c ****     {
2213:C:/StellarisWare/driverlib\sysctl.c ****         //
2214:C:/StellarisWare/driverlib\sysctl.c ****         // Wait until the PLL has locked.
2215:C:/StellarisWare/driverlib\sysctl.c ****         //
2216:C:/StellarisWare/driverlib\sysctl.c ****         for(ulDelay = 32768; ulDelay > 0; ulDelay--)
 2427              		.loc 1 2216 0
 2428 0244 4FF40043 		mov	r3, #32768
 2429 0248 7B61     		str	r3, [r7, #20]
 2430 024a 0CE0     		b	.L88
 2431              	.L91:
2217:C:/StellarisWare/driverlib\sysctl.c ****         {
2218:C:/StellarisWare/driverlib\sysctl.c ****             if(HWREG(SYSCTL_RIS) & SYSCTL_INT_PLL_LOCK)
 2432              		.loc 1 2218 0
 2433 024c 4EF25003 		movw	r3, #57424
 2434 0250 C4F20F03 		movt	r3, 16399
 2435 0254 1B68     		ldr	r3, [r3, #0]
 2436 0256 03F04003 		and	r3, r3, #64
 2437 025a 002B     		cmp	r3, #0
 2438 025c 07D1     		bne	.L93
 2439              	.L89:
2216:C:/StellarisWare/driverlib\sysctl.c ****         for(ulDelay = 32768; ulDelay > 0; ulDelay--)
 2440              		.loc 1 2216 0
 2441 025e 7B69     		ldr	r3, [r7, #20]
 2442 0260 03F1FF33 		add	r3, r3, #-1
 2443 0264 7B61     		str	r3, [r7, #20]
 2444              	.L88:
2216:C:/StellarisWare/driverlib\sysctl.c ****         for(ulDelay = 32768; ulDelay > 0; ulDelay--)
 2445              		.loc 1 2216 0 is_stmt 0 discriminator 1
 2446 0266 7B69     		ldr	r3, [r7, #20]
 2447 0268 002B     		cmp	r3, #0
 2448 026a EFD1     		bne	.L91
 2449 026c 00E0     		b	.L90
 2450              	.L93:
2219:C:/StellarisWare/driverlib\sysctl.c ****             {
2220:C:/StellarisWare/driverlib\sysctl.c ****                 break;
 2451              		.loc 1 2220 0 is_stmt 1
 2452 026e 00BF     		nop
 2453              	.L90:
2221:C:/StellarisWare/driverlib\sysctl.c ****             }
2222:C:/StellarisWare/driverlib\sysctl.c ****         }
2223:C:/StellarisWare/driverlib\sysctl.c **** 
2224:C:/StellarisWare/driverlib\sysctl.c ****         //
2225:C:/StellarisWare/driverlib\sysctl.c ****         // Enable use of the PLL.
2226:C:/StellarisWare/driverlib\sysctl.c ****         //
2227:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC &= ~(SYSCTL_RCC_BYPASS);
 2454              		.loc 1 2227 0
 2455 0270 3B69     		ldr	r3, [r7, #16]
 2456 0272 23F40063 		bic	r3, r3, #2048
 2457 0276 3B61     		str	r3, [r7, #16]
2228:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC2 &= ~(SYSCTL_RCC2_BYPASS2);
 2458              		.loc 1 2228 0
 2459 0278 FB68     		ldr	r3, [r7, #12]
 2460 027a 23F40063 		bic	r3, r3, #2048
 2461 027e FB60     		str	r3, [r7, #12]
 2462              	.L87:
2229:C:/StellarisWare/driverlib\sysctl.c ****     }
2230:C:/StellarisWare/driverlib\sysctl.c **** 
2231:C:/StellarisWare/driverlib\sysctl.c ****     //
2232:C:/StellarisWare/driverlib\sysctl.c ****     // Write the final RCC value.
2233:C:/StellarisWare/driverlib\sysctl.c ****     //
2234:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC) = ulRCC;
 2463              		.loc 1 2234 0
 2464 0280 4EF26003 		movw	r3, #57440
 2465 0284 C4F20F03 		movt	r3, 16399
 2466 0288 3A69     		ldr	r2, [r7, #16]
 2467 028a 1A60     		str	r2, [r3, #0]
2235:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC2) = ulRCC2;
 2468              		.loc 1 2235 0
 2469 028c 4EF27003 		movw	r3, #57456
 2470 0290 C4F20F03 		movt	r3, 16399
 2471 0294 FA68     		ldr	r2, [r7, #12]
 2472 0296 1A60     		str	r2, [r3, #0]
2236:C:/StellarisWare/driverlib\sysctl.c **** 
2237:C:/StellarisWare/driverlib\sysctl.c ****     //
2238:C:/StellarisWare/driverlib\sysctl.c ****     // Delay for a little bit so that the system divider takes effect.
2239:C:/StellarisWare/driverlib\sysctl.c ****     //
2240:C:/StellarisWare/driverlib\sysctl.c ****     SysCtlDelay(16);
 2473              		.loc 1 2240 0
 2474 0298 4FF01000 		mov	r0, #16
 2475 029c FFF7FEFF 		bl	SysCtlDelay
 2476 02a0 00E0     		b	.L73
 2477              	.L92:
2069:C:/StellarisWare/driverlib\sysctl.c ****         return;
 2478              		.loc 1 2069 0
 2479 02a2 00BF     		nop
 2480              	.L73:
2241:C:/StellarisWare/driverlib\sysctl.c **** }
 2481              		.loc 1 2241 0
 2482 02a4 07F11807 		add	r7, r7, #24
 2483 02a8 BD46     		mov	sp, r7
 2484 02aa 80BD     		pop	{r7, pc}
 2485              		.cfi_endproc
 2486              	.LFE34:
 2488              		.section	.text.SysCtlClockGet,"ax",%progbits
 2489              		.align	2
 2490              		.global	SysCtlClockGet
 2491              		.thumb
 2492              		.thumb_func
 2494              	SysCtlClockGet:
 2495              	.LFB35:
2242:C:/StellarisWare/driverlib\sysctl.c **** 
2243:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2244:C:/StellarisWare/driverlib\sysctl.c **** //
2245:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the processor clock rate.
2246:C:/StellarisWare/driverlib\sysctl.c **** //!
2247:C:/StellarisWare/driverlib\sysctl.c **** //! This function determines the clock rate of the processor clock, which is
2248:C:/StellarisWare/driverlib\sysctl.c **** //! also the clock rate of the peripheral modules (with the exception of
2249:C:/StellarisWare/driverlib\sysctl.c **** //! PWM, which has its own clock divider; other peripherals may have different
2250:C:/StellarisWare/driverlib\sysctl.c **** //! clocking, see the device data sheet for details).
2251:C:/StellarisWare/driverlib\sysctl.c **** //!
2252:C:/StellarisWare/driverlib\sysctl.c **** //! \note This cannot return accurate results if SysCtlClockSet() has not
2253:C:/StellarisWare/driverlib\sysctl.c **** //! been called to configure the clocking of the device, or if the device is
2254:C:/StellarisWare/driverlib\sysctl.c **** //! directly clocked from a crystal (or a clock source) that is not one of the
2255:C:/StellarisWare/driverlib\sysctl.c **** //! supported crystal frequencies.  In the latter case, this function should be
2256:C:/StellarisWare/driverlib\sysctl.c **** //! modified to directly return the correct system clock rate.
2257:C:/StellarisWare/driverlib\sysctl.c **** //!
2258:C:/StellarisWare/driverlib\sysctl.c **** //! \return The processor clock rate.
2259:C:/StellarisWare/driverlib\sysctl.c **** //
2260:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2261:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
2262:C:/StellarisWare/driverlib\sysctl.c **** SysCtlClockGet(void)
2263:C:/StellarisWare/driverlib\sysctl.c **** {
 2496              		.loc 1 2263 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 24
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500              		@ link register save eliminated.
 2501 0000 80B4     		push	{r7}
 2502              	.LCFI94:
 2503              		.cfi_def_cfa_offset 4
 2504              		.cfi_offset 7, -4
 2505 0002 87B0     		sub	sp, sp, #28
 2506              	.LCFI95:
 2507              		.cfi_def_cfa_offset 32
 2508 0004 00AF     		add	r7, sp, #0
 2509              	.LCFI96:
 2510              		.cfi_def_cfa_register 7
2264:C:/StellarisWare/driverlib\sysctl.c ****     unsigned long ulRCC, ulRCC2, ulPLL, ulClk;
2265:C:/StellarisWare/driverlib\sysctl.c ****     unsigned long ulPLL1;
2266:C:/StellarisWare/driverlib\sysctl.c **** 
2267:C:/StellarisWare/driverlib\sysctl.c ****     //
2268:C:/StellarisWare/driverlib\sysctl.c ****     // Read RCC and RCC2.  For Sandstorm-class devices (which do not have
2269:C:/StellarisWare/driverlib\sysctl.c ****     // RCC2), the RCC2 read returns 0, indicating that RCC2 is
2270:C:/StellarisWare/driverlib\sysctl.c ****     // disabled (because the SYSCTL_RCC2_USERCC2 bit is clear).
2271:C:/StellarisWare/driverlib\sysctl.c ****     //
2272:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC = HWREG(SYSCTL_RCC);
 2511              		.loc 1 2272 0
 2512 0006 4EF26003 		movw	r3, #57440
 2513 000a C4F20F03 		movt	r3, 16399
 2514 000e 1B68     		ldr	r3, [r3, #0]
 2515 0010 7B61     		str	r3, [r7, #20]
2273:C:/StellarisWare/driverlib\sysctl.c ****     ulRCC2 = HWREG(SYSCTL_RCC2);
 2516              		.loc 1 2273 0
 2517 0012 4EF27003 		movw	r3, #57456
 2518 0016 C4F20F03 		movt	r3, 16399
 2519 001a 1B68     		ldr	r3, [r3, #0]
 2520 001c FB60     		str	r3, [r7, #12]
2274:C:/StellarisWare/driverlib\sysctl.c **** 
2275:C:/StellarisWare/driverlib\sysctl.c ****     //
2276:C:/StellarisWare/driverlib\sysctl.c ****     // Get the base clock rate.
2277:C:/StellarisWare/driverlib\sysctl.c ****     //
2278:C:/StellarisWare/driverlib\sysctl.c ****     switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
 2521              		.loc 1 2278 0
 2522 001e FB68     		ldr	r3, [r7, #12]
2279:C:/StellarisWare/driverlib\sysctl.c ****            (ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) :
 2523              		.loc 1 2279 0
 2524 0020 002B     		cmp	r3, #0
 2525 0022 03DA     		bge	.L95
 2526              		.loc 1 2279 0 is_stmt 0 discriminator 1
 2527 0024 FB68     		ldr	r3, [r7, #12]
 2528 0026 03F07003 		and	r3, r3, #112
 2529 002a 02E0     		b	.L96
 2530              	.L95:
 2531              		.loc 1 2279 0 discriminator 2
 2532 002c 7B69     		ldr	r3, [r7, #20]
 2533 002e 03F03003 		and	r3, r3, #48
 2534              	.L96:
2278:C:/StellarisWare/driverlib\sysctl.c ****     switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
 2535              		.loc 1 2278 0 is_stmt 1
 2536 0032 202B     		cmp	r3, #32
 2537 0034 7CD0     		beq	.L100
 2538 0036 202B     		cmp	r3, #32
 2539 0038 04D8     		bhi	.L104
 2540 003a 002B     		cmp	r3, #0
 2541 003c 0CD0     		beq	.L98
 2542 003e 102B     		cmp	r3, #16
 2543 0040 17D0     		beq	.L99
 2544 0042 E0E0     		b	.L97
 2545              	.L104:
 2546 0044 602B     		cmp	r3, #96
 2547 0046 00F0D680 		beq	.L102
 2548 004a 702B     		cmp	r3, #112
 2549 004c 00F0D780 		beq	.L103
 2550 0050 302B     		cmp	r3, #48
 2551 0052 00F0CC80 		beq	.L101
 2552 0056 D6E0     		b	.L97
 2553              	.L98:
2280:C:/StellarisWare/driverlib\sysctl.c ****            (ulRCC & SYSCTL_RCC_OSCSRC_M))
2281:C:/StellarisWare/driverlib\sysctl.c ****     {
2282:C:/StellarisWare/driverlib\sysctl.c ****         //
2283:C:/StellarisWare/driverlib\sysctl.c ****         // The main oscillator is the clock source.  Determine its rate from
2284:C:/StellarisWare/driverlib\sysctl.c ****         // the crystal setting field.
2285:C:/StellarisWare/driverlib\sysctl.c ****         //
2286:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC_OSCSRC_MAIN:
2287:C:/StellarisWare/driverlib\sysctl.c ****         {
2288:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = g_pulXtals[(ulRCC & SYSCTL_RCC_XTAL_M) >>
 2554              		.loc 1 2288 0
 2555 0058 7B69     		ldr	r3, [r7, #20]
 2556 005a 03F4F863 		and	r3, r3, #1984
 2557 005e 4FEA9312 		lsr	r2, r3, #6
 2558 0062 40F20003 		movw	r3, #:lower16:g_pulXtals
 2559 0066 C0F20003 		movt	r3, #:upper16:g_pulXtals
 2560 006a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2561 006e 3B61     		str	r3, [r7, #16]
2289:C:/StellarisWare/driverlib\sysctl.c ****                                SYSCTL_RCC_XTAL_S];
2290:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2562              		.loc 1 2290 0
 2563 0070 CCE0     		b	.L105
 2564              	.L99:
2291:C:/StellarisWare/driverlib\sysctl.c ****         }
2292:C:/StellarisWare/driverlib\sysctl.c **** 
2293:C:/StellarisWare/driverlib\sysctl.c ****         //
2294:C:/StellarisWare/driverlib\sysctl.c ****         // The internal oscillator is the source clock.
2295:C:/StellarisWare/driverlib\sysctl.c ****         //
2296:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC_OSCSRC_INT:
2297:C:/StellarisWare/driverlib\sysctl.c ****         {
2298:C:/StellarisWare/driverlib\sysctl.c ****             //
2299:C:/StellarisWare/driverlib\sysctl.c ****             // See if this is a Sandstorm-class or Fury-class device.
2300:C:/StellarisWare/driverlib\sysctl.c ****             //
2301:C:/StellarisWare/driverlib\sysctl.c ****             if(CLASS_IS_SANDSTORM)
 2565              		.loc 1 2301 0
 2566 0072 4FF46043 		mov	r3, #57344
 2567 0076 C4F20F03 		movt	r3, 16399
 2568 007a 1B68     		ldr	r3, [r3, #0]
 2569 007c 03F0E043 		and	r3, r3, #1879048192
 2570 0080 002B     		cmp	r3, #0
 2571 0082 0CD0     		beq	.L106
 2572              		.loc 1 2301 0 is_stmt 0 discriminator 1
 2573 0084 4FF46043 		mov	r3, #57344
 2574 0088 C4F20F03 		movt	r3, 16399
 2575 008c 1A68     		ldr	r2, [r3, #0]
 2576 008e 4FF00003 		mov	r3, #0
 2577 0092 C7F2FF03 		movt	r3, 28927
 2578 0096 1340     		ands	r3, r3, r2
 2579 0098 B3F1805F 		cmp	r3, #268435456
 2580 009c 05D1     		bne	.L107
 2581              	.L106:
2302:C:/StellarisWare/driverlib\sysctl.c ****             {
2303:C:/StellarisWare/driverlib\sysctl.c ****                 //
2304:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on a Sandstorm-class device is
2305:C:/StellarisWare/driverlib\sysctl.c ****                 // 15 MHz +/- 50%.
2306:C:/StellarisWare/driverlib\sysctl.c ****                 //
2307:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 15000000;
 2582              		.loc 1 2307 0 is_stmt 1
 2583 009e 4EF2C013 		movw	r3, #57792
 2584 00a2 C0F2E403 		movt	r3, 228
 2585 00a6 3B61     		str	r3, [r7, #16]
 2586 00a8 41E0     		b	.L108
 2587              	.L107:
2308:C:/StellarisWare/driverlib\sysctl.c ****             }
2309:C:/StellarisWare/driverlib\sysctl.c ****             else if((CLASS_IS_FURY && REVISION_IS_A2) ||
 2588              		.loc 1 2309 0
 2589 00aa 4FF46043 		mov	r3, #57344
 2590 00ae C4F20F03 		movt	r3, 16399
 2591 00b2 1A68     		ldr	r2, [r3, #0]
 2592 00b4 4FF00003 		mov	r3, #0
 2593 00b8 C7F2FF03 		movt	r3, 28927
 2594 00bc 1340     		ands	r3, r3, r2
 2595 00be 4FF00002 		mov	r2, #0
 2596 00c2 C1F20102 		movt	r2, 4097
 2597 00c6 9342     		cmp	r3, r2
 2598 00c8 0AD1     		bne	.L109
 2599              		.loc 1 2309 0 is_stmt 0 discriminator 1
 2600 00ca 4FF46043 		mov	r3, #57344
 2601 00ce C4F20F03 		movt	r3, 16399
 2602 00d2 1B68     		ldr	r3, [r3, #0]
 2603 00d4 4FEA0343 		lsl	r3, r3, #16
 2604 00d8 4FEA1343 		lsr	r3, r3, #16
 2605 00dc 022B     		cmp	r3, #2
 2606 00de 1AD0     		beq	.L110
 2607              	.L109:
2310:C:/StellarisWare/driverlib\sysctl.c ****                     (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
 2608              		.loc 1 2310 0 is_stmt 1 discriminator 2
 2609 00e0 4FF46043 		mov	r3, #57344
 2610 00e4 C4F20F03 		movt	r3, 16399
 2611 00e8 1A68     		ldr	r2, [r3, #0]
 2612 00ea 4FF00003 		mov	r3, #0
 2613 00ee C7F2FF03 		movt	r3, 28927
 2614 00f2 1340     		ands	r3, r3, r2
2309:C:/StellarisWare/driverlib\sysctl.c ****             else if((CLASS_IS_FURY && REVISION_IS_A2) ||
 2615              		.loc 1 2309 0 discriminator 2
 2616 00f4 4FF00002 		mov	r2, #0
 2617 00f8 C1F20302 		movt	r2, 4099
 2618 00fc 9342     		cmp	r3, r2
 2619 00fe 10D1     		bne	.L111
 2620              		.loc 1 2310 0
 2621 0100 4FF46043 		mov	r3, #57344
 2622 0104 C4F20F03 		movt	r3, 16399
 2623 0108 1B68     		ldr	r3, [r3, #0]
 2624 010a 4FEA0343 		lsl	r3, r3, #16
 2625 010e 4FEA1343 		lsr	r3, r3, #16
 2626 0112 002B     		cmp	r3, #0
 2627 0114 05D1     		bne	.L111
 2628              	.L110:
2311:C:/StellarisWare/driverlib\sysctl.c ****             {
2312:C:/StellarisWare/driverlib\sysctl.c ****                 //
2313:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on a rev A2 Fury-class device and a
2314:C:/StellarisWare/driverlib\sysctl.c ****                 // Dustdevil-class device is 12 MHz +/- 30%.
2315:C:/StellarisWare/driverlib\sysctl.c ****                 //
2316:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 12000000;
 2629              		.loc 1 2316 0
 2630 0116 4FF4D853 		mov	r3, #6912
 2631 011a C0F2B703 		movt	r3, 183
 2632 011e 3B61     		str	r3, [r7, #16]
 2633 0120 05E0     		b	.L108
 2634              	.L111:
2317:C:/StellarisWare/driverlib\sysctl.c ****             }
2318:C:/StellarisWare/driverlib\sysctl.c ****             else
2319:C:/StellarisWare/driverlib\sysctl.c ****             {
2320:C:/StellarisWare/driverlib\sysctl.c ****                 //
2321:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on all other devices is 16 MHz.
2322:C:/StellarisWare/driverlib\sysctl.c ****                 //
2323:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 16000000;
 2635              		.loc 1 2323 0
 2636 0122 4FF41053 		mov	r3, #9216
 2637 0126 C0F2F403 		movt	r3, 244
 2638 012a 3B61     		str	r3, [r7, #16]
2324:C:/StellarisWare/driverlib\sysctl.c ****             }
2325:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2639              		.loc 1 2325 0
 2640 012c 6EE0     		b	.L105
 2641              	.L108:
 2642 012e 6DE0     		b	.L105
 2643              	.L100:
2326:C:/StellarisWare/driverlib\sysctl.c ****         }
2327:C:/StellarisWare/driverlib\sysctl.c **** 
2328:C:/StellarisWare/driverlib\sysctl.c ****         //
2329:C:/StellarisWare/driverlib\sysctl.c ****         // The internal oscillator divided by four is the source clock.
2330:C:/StellarisWare/driverlib\sysctl.c ****         //
2331:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC_OSCSRC_INT4:
2332:C:/StellarisWare/driverlib\sysctl.c ****         {
2333:C:/StellarisWare/driverlib\sysctl.c ****             //
2334:C:/StellarisWare/driverlib\sysctl.c ****             // See if this is a Sandstorm-class or Fury-class device.
2335:C:/StellarisWare/driverlib\sysctl.c ****             //
2336:C:/StellarisWare/driverlib\sysctl.c ****             if(CLASS_IS_SANDSTORM)
 2644              		.loc 1 2336 0
 2645 0130 4FF46043 		mov	r3, #57344
 2646 0134 C4F20F03 		movt	r3, 16399
 2647 0138 1B68     		ldr	r3, [r3, #0]
 2648 013a 03F0E043 		and	r3, r3, #1879048192
 2649 013e 002B     		cmp	r3, #0
 2650 0140 0CD0     		beq	.L112
 2651              		.loc 1 2336 0 is_stmt 0 discriminator 1
 2652 0142 4FF46043 		mov	r3, #57344
 2653 0146 C4F20F03 		movt	r3, 16399
 2654 014a 1A68     		ldr	r2, [r3, #0]
 2655 014c 4FF00003 		mov	r3, #0
 2656 0150 C7F2FF03 		movt	r3, 28927
 2657 0154 1340     		ands	r3, r3, r2
 2658 0156 B3F1805F 		cmp	r3, #268435456
 2659 015a 05D1     		bne	.L113
 2660              	.L112:
2337:C:/StellarisWare/driverlib\sysctl.c ****             {
2338:C:/StellarisWare/driverlib\sysctl.c ****                 //
2339:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on a Sandstorm-class device is
2340:C:/StellarisWare/driverlib\sysctl.c ****                 // 15 MHz +/- 50%.
2341:C:/StellarisWare/driverlib\sysctl.c ****                 //
2342:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 15000000 / 4;
 2661              		.loc 1 2342 0 is_stmt 1
 2662 015c 43F67003 		movw	r3, #14448
 2663 0160 C0F23903 		movt	r3, 57
 2664 0164 3B61     		str	r3, [r7, #16]
 2665 0166 41E0     		b	.L114
 2666              	.L113:
2343:C:/StellarisWare/driverlib\sysctl.c ****             }
2344:C:/StellarisWare/driverlib\sysctl.c ****             else if((CLASS_IS_FURY && REVISION_IS_A2) ||
 2667              		.loc 1 2344 0
 2668 0168 4FF46043 		mov	r3, #57344
 2669 016c C4F20F03 		movt	r3, 16399
 2670 0170 1A68     		ldr	r2, [r3, #0]
 2671 0172 4FF00003 		mov	r3, #0
 2672 0176 C7F2FF03 		movt	r3, 28927
 2673 017a 1340     		ands	r3, r3, r2
 2674 017c 4FF00002 		mov	r2, #0
 2675 0180 C1F20102 		movt	r2, 4097
 2676 0184 9342     		cmp	r3, r2
 2677 0186 0AD1     		bne	.L115
 2678              		.loc 1 2344 0 is_stmt 0 discriminator 1
 2679 0188 4FF46043 		mov	r3, #57344
 2680 018c C4F20F03 		movt	r3, 16399
 2681 0190 1B68     		ldr	r3, [r3, #0]
 2682 0192 4FEA0343 		lsl	r3, r3, #16
 2683 0196 4FEA1343 		lsr	r3, r3, #16
 2684 019a 022B     		cmp	r3, #2
 2685 019c 1AD0     		beq	.L116
 2686              	.L115:
2345:C:/StellarisWare/driverlib\sysctl.c ****                     (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
 2687              		.loc 1 2345 0 is_stmt 1 discriminator 2
 2688 019e 4FF46043 		mov	r3, #57344
 2689 01a2 C4F20F03 		movt	r3, 16399
 2690 01a6 1A68     		ldr	r2, [r3, #0]
 2691 01a8 4FF00003 		mov	r3, #0
 2692 01ac C7F2FF03 		movt	r3, 28927
 2693 01b0 1340     		ands	r3, r3, r2
2344:C:/StellarisWare/driverlib\sysctl.c ****             else if((CLASS_IS_FURY && REVISION_IS_A2) ||
 2694              		.loc 1 2344 0 discriminator 2
 2695 01b2 4FF00002 		mov	r2, #0
 2696 01b6 C1F20302 		movt	r2, 4099
 2697 01ba 9342     		cmp	r3, r2
 2698 01bc 10D1     		bne	.L117
 2699              		.loc 1 2345 0
 2700 01be 4FF46043 		mov	r3, #57344
 2701 01c2 C4F20F03 		movt	r3, 16399
 2702 01c6 1B68     		ldr	r3, [r3, #0]
 2703 01c8 4FEA0343 		lsl	r3, r3, #16
 2704 01cc 4FEA1343 		lsr	r3, r3, #16
 2705 01d0 002B     		cmp	r3, #0
 2706 01d2 05D1     		bne	.L117
 2707              	.L116:
2346:C:/StellarisWare/driverlib\sysctl.c ****             {
2347:C:/StellarisWare/driverlib\sysctl.c ****                 //
2348:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on a rev A2 Fury-class device and a
2349:C:/StellarisWare/driverlib\sysctl.c ****                 // Dustdevil-class device is 12 MHz +/- 30%.
2350:C:/StellarisWare/driverlib\sysctl.c ****                 //
2351:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 12000000 / 4;
 2708              		.loc 1 2351 0
 2709 01d4 4CF2C063 		movw	r3, #50880
 2710 01d8 C0F22D03 		movt	r3, 45
 2711 01dc 3B61     		str	r3, [r7, #16]
 2712 01de 05E0     		b	.L114
 2713              	.L117:
2352:C:/StellarisWare/driverlib\sysctl.c ****             }
2353:C:/StellarisWare/driverlib\sysctl.c ****             else
2354:C:/StellarisWare/driverlib\sysctl.c ****             {
2355:C:/StellarisWare/driverlib\sysctl.c ****                 //
2356:C:/StellarisWare/driverlib\sysctl.c ****                 // The internal oscillator on a Tempest-class device is 16 MHz.
2357:C:/StellarisWare/driverlib\sysctl.c ****                 //
2358:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = 16000000 / 4;
 2714              		.loc 1 2358 0
 2715 01e0 4FF41063 		mov	r3, #2304
 2716 01e4 C0F23D03 		movt	r3, 61
 2717 01e8 3B61     		str	r3, [r7, #16]
2359:C:/StellarisWare/driverlib\sysctl.c ****             }
2360:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2718              		.loc 1 2360 0
 2719 01ea 0FE0     		b	.L105
 2720              	.L114:
 2721 01ec 0EE0     		b	.L105
 2722              	.L101:
2361:C:/StellarisWare/driverlib\sysctl.c ****         }
2362:C:/StellarisWare/driverlib\sysctl.c **** 
2363:C:/StellarisWare/driverlib\sysctl.c ****         //
2364:C:/StellarisWare/driverlib\sysctl.c ****         // The internal 30-KHz oscillator is the source clock.
2365:C:/StellarisWare/driverlib\sysctl.c ****         //
2366:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC_OSCSRC_30:
2367:C:/StellarisWare/driverlib\sysctl.c ****         {
2368:C:/StellarisWare/driverlib\sysctl.c ****             //
2369:C:/StellarisWare/driverlib\sysctl.c ****             // The internal 30-KHz oscillator has an accuracy of +/- 30%.
2370:C:/StellarisWare/driverlib\sysctl.c ****             //
2371:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = 30000;
 2723              		.loc 1 2371 0
 2724 01ee 47F23053 		movw	r3, #30000
 2725 01f2 3B61     		str	r3, [r7, #16]
2372:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2726              		.loc 1 2372 0
 2727 01f4 0AE0     		b	.L105
 2728              	.L102:
2373:C:/StellarisWare/driverlib\sysctl.c ****         }
2374:C:/StellarisWare/driverlib\sysctl.c **** 
2375:C:/StellarisWare/driverlib\sysctl.c ****         //
2376:C:/StellarisWare/driverlib\sysctl.c ****         // The 4.194304-MHz clock from the hibernate module is the clock source.
2377:C:/StellarisWare/driverlib\sysctl.c ****         //
2378:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC2_OSCSRC2_419:
2379:C:/StellarisWare/driverlib\sysctl.c ****         {
2380:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = 4194304;
 2729              		.loc 1 2380 0
 2730 01f6 4FF48003 		mov	r3, #4194304
 2731 01fa 3B61     		str	r3, [r7, #16]
2381:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2732              		.loc 1 2381 0
 2733 01fc 06E0     		b	.L105
 2734              	.L103:
2382:C:/StellarisWare/driverlib\sysctl.c ****         }
2383:C:/StellarisWare/driverlib\sysctl.c **** 
2384:C:/StellarisWare/driverlib\sysctl.c ****         //
2385:C:/StellarisWare/driverlib\sysctl.c ****         // The 32.768-KHz clock from the hibernate module is the source clock.
2386:C:/StellarisWare/driverlib\sysctl.c ****         //
2387:C:/StellarisWare/driverlib\sysctl.c ****         case SYSCTL_RCC2_OSCSRC2_32:
2388:C:/StellarisWare/driverlib\sysctl.c ****         {
2389:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = 32768;
 2735              		.loc 1 2389 0
 2736 01fe 4FF40043 		mov	r3, #32768
 2737 0202 3B61     		str	r3, [r7, #16]
2390:C:/StellarisWare/driverlib\sysctl.c ****             break;
 2738              		.loc 1 2390 0
 2739 0204 02E0     		b	.L105
 2740              	.L97:
2391:C:/StellarisWare/driverlib\sysctl.c ****         }
2392:C:/StellarisWare/driverlib\sysctl.c **** 
2393:C:/StellarisWare/driverlib\sysctl.c ****         //
2394:C:/StellarisWare/driverlib\sysctl.c ****         // An unknown setting, so return a zero clock (that is, an unknown
2395:C:/StellarisWare/driverlib\sysctl.c ****         // clock rate).
2396:C:/StellarisWare/driverlib\sysctl.c ****         //
2397:C:/StellarisWare/driverlib\sysctl.c ****         default:
2398:C:/StellarisWare/driverlib\sysctl.c ****         {
2399:C:/StellarisWare/driverlib\sysctl.c ****             return(0);
 2741              		.loc 1 2399 0
 2742 0206 4FF00003 		mov	r3, #0
 2743 020a F5E0     		b	.L118
 2744              	.L105:
2400:C:/StellarisWare/driverlib\sysctl.c ****         }
2401:C:/StellarisWare/driverlib\sysctl.c ****     }
2402:C:/StellarisWare/driverlib\sysctl.c **** 
2403:C:/StellarisWare/driverlib\sysctl.c ****     //
2404:C:/StellarisWare/driverlib\sysctl.c ****     // See if the PLL is being used.
2405:C:/StellarisWare/driverlib\sysctl.c ****     //
2406:C:/StellarisWare/driverlib\sysctl.c ****     if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
 2745              		.loc 1 2406 0
 2746 020c FB68     		ldr	r3, [r7, #12]
 2747 020e 002B     		cmp	r3, #0
 2748 0210 04DA     		bge	.L119
 2749              		.loc 1 2406 0 is_stmt 0 discriminator 1
 2750 0212 FB68     		ldr	r3, [r7, #12]
 2751 0214 03F40063 		and	r3, r3, #2048
 2752 0218 002B     		cmp	r3, #0
 2753 021a 09D0     		beq	.L120
 2754              	.L119:
2407:C:/StellarisWare/driverlib\sysctl.c ****        (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
 2755              		.loc 1 2407 0 is_stmt 1 discriminator 2
 2756 021c FB68     		ldr	r3, [r7, #12]
2406:C:/StellarisWare/driverlib\sysctl.c ****     if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
 2757              		.loc 1 2406 0 discriminator 2
 2758 021e 002B     		cmp	r3, #0
 2759 0220 C0F2A780 		blt	.L121
 2760              		.loc 1 2407 0
 2761 0224 7B69     		ldr	r3, [r7, #20]
 2762 0226 03F40063 		and	r3, r3, #2048
 2763 022a 002B     		cmp	r3, #0
 2764 022c 40F0A180 		bne	.L121
 2765              	.L120:
2408:C:/StellarisWare/driverlib\sysctl.c ****     {
2409:C:/StellarisWare/driverlib\sysctl.c ****         //
2410:C:/StellarisWare/driverlib\sysctl.c ****         // See if this is a Blizzard-class device.
2411:C:/StellarisWare/driverlib\sysctl.c ****         //
2412:C:/StellarisWare/driverlib\sysctl.c ****         if(CLASS_IS_BLIZZARD)
 2766              		.loc 1 2412 0
 2767 0230 4FF46043 		mov	r3, #57344
 2768 0234 C4F20F03 		movt	r3, 16399
 2769 0238 1A68     		ldr	r2, [r3, #0]
 2770 023a 4FF00003 		mov	r3, #0
 2771 023e C7F2FF03 		movt	r3, 28927
 2772 0242 1340     		ands	r3, r3, r2
 2773 0244 4FF00002 		mov	r2, #0
 2774 0248 C1F20502 		movt	r2, 4101
 2775 024c 9342     		cmp	r3, r2
 2776 024e 37D1     		bne	.L122
2413:C:/StellarisWare/driverlib\sysctl.c ****         {
2414:C:/StellarisWare/driverlib\sysctl.c ****             //
2415:C:/StellarisWare/driverlib\sysctl.c ****             // Read the two PLL frequency registers.  The formula for a
2416:C:/StellarisWare/driverlib\sysctl.c ****             // Blizzard-class device is "(xtal * m) / ((q + 1) * (n + 1))".
2417:C:/StellarisWare/driverlib\sysctl.c ****             //
2418:C:/StellarisWare/driverlib\sysctl.c ****             ulPLL = HWREG(SYSCTL_PLLFREQ0);
 2777              		.loc 1 2418 0
 2778 0250 4EF26013 		movw	r3, #57696
 2779 0254 C4F20F03 		movt	r3, 16399
 2780 0258 1B68     		ldr	r3, [r3, #0]
 2781 025a BB60     		str	r3, [r7, #8]
2419:C:/StellarisWare/driverlib\sysctl.c ****             ulPLL1 = HWREG(SYSCTL_PLLFREQ1);
 2782              		.loc 1 2419 0
 2783 025c 4EF26413 		movw	r3, #57700
 2784 0260 C4F20F03 		movt	r3, 16399
 2785 0264 1B68     		ldr	r3, [r3, #0]
 2786 0266 7B60     		str	r3, [r7, #4]
2420:C:/StellarisWare/driverlib\sysctl.c **** 
2421:C:/StellarisWare/driverlib\sysctl.c ****             //
2422:C:/StellarisWare/driverlib\sysctl.c ****             // Divide the input clock by the dividers.
2423:C:/StellarisWare/driverlib\sysctl.c ****             //
2424:C:/StellarisWare/driverlib\sysctl.c ****             ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
 2787              		.loc 1 2424 0
 2788 0268 7B68     		ldr	r3, [r7, #4]
 2789 026a 03F4F853 		and	r3, r3, #7936
 2790 026e 4FEA1323 		lsr	r3, r3, #8
2425:C:/StellarisWare/driverlib\sysctl.c ****                         SYSCTL_PLLFREQ1_Q_S) + 1) *
2426:C:/StellarisWare/driverlib\sysctl.c ****                       (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
2427:C:/StellarisWare/driverlib\sysctl.c ****                         SYSCTL_PLLFREQ1_N_S) + 1) * 2);
 2791              		.loc 1 2427 0
 2792 0272 03F10103 		add	r3, r3, #1
2426:C:/StellarisWare/driverlib\sysctl.c ****                       (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
 2793              		.loc 1 2426 0
 2794 0276 7A68     		ldr	r2, [r7, #4]
 2795 0278 02F01F02 		and	r2, r2, #31
 2796              		.loc 1 2427 0
 2797 027c 02F10102 		add	r2, r2, #1
 2798 0280 02FB03F3 		mul	r3, r2, r3
 2799 0284 4FEA4303 		lsl	r3, r3, #1
2424:C:/StellarisWare/driverlib\sysctl.c ****             ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
 2800              		.loc 1 2424 0
 2801 0288 3A69     		ldr	r2, [r7, #16]
 2802 028a B2FBF3F3 		udiv	r3, r2, r3
 2803 028e 3B61     		str	r3, [r7, #16]
2428:C:/StellarisWare/driverlib\sysctl.c **** 
2429:C:/StellarisWare/driverlib\sysctl.c ****             //
2430:C:/StellarisWare/driverlib\sysctl.c ****             // Multiply the clock by the multiplier, which is split into an
2431:C:/StellarisWare/driverlib\sysctl.c ****             // integer part and a fractional part.
2432:C:/StellarisWare/driverlib\sysctl.c ****             //
2433:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
 2804              		.loc 1 2433 0
 2805 0290 BB68     		ldr	r3, [r7, #8]
 2806 0292 4FEA8353 		lsl	r3, r3, #22
 2807 0296 4FEA9353 		lsr	r3, r3, #22
 2808 029a 3A69     		ldr	r2, [r7, #16]
 2809 029c 02FB03F2 		mul	r2, r2, r3
2434:C:/StellarisWare/driverlib\sysctl.c ****                                SYSCTL_PLLFREQ0_MINT_S)) +
2435:C:/StellarisWare/driverlib\sysctl.c ****                      ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MFRAC_M) >>
 2810              		.loc 1 2435 0
 2811 02a0 B968     		ldr	r1, [r7, #8]
 2812 02a2 4FF47C43 		mov	r3, #64512
 2813 02a6 C0F20F03 		movt	r3, 15
 2814 02aa 0B40     		ands	r3, r3, r1
 2815 02ac 4FEA9323 		lsr	r3, r3, #10
 2816 02b0 3969     		ldr	r1, [r7, #16]
 2817 02b2 01FB03F3 		mul	r3, r1, r3
2436:C:/StellarisWare/driverlib\sysctl.c ****                                 SYSCTL_PLLFREQ0_MFRAC_S)) >> 10));
 2818              		.loc 1 2436 0
 2819 02b6 4FEA9323 		lsr	r3, r3, #10
2433:C:/StellarisWare/driverlib\sysctl.c ****             ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
 2820              		.loc 1 2433 0
 2821 02ba D318     		adds	r3, r2, r3
 2822 02bc 3B61     		str	r3, [r7, #16]
 2823 02be 54E0     		b	.L123
 2824              	.L122:
2437:C:/StellarisWare/driverlib\sysctl.c ****         }
2438:C:/StellarisWare/driverlib\sysctl.c **** 
2439:C:/StellarisWare/driverlib\sysctl.c ****         //
2440:C:/StellarisWare/driverlib\sysctl.c ****         // Older device classes used a different PLL.
2441:C:/StellarisWare/driverlib\sysctl.c ****         //
2442:C:/StellarisWare/driverlib\sysctl.c ****         else
2443:C:/StellarisWare/driverlib\sysctl.c ****         {
2444:C:/StellarisWare/driverlib\sysctl.c ****             //
2445:C:/StellarisWare/driverlib\sysctl.c ****             // Get the PLL configuration.
2446:C:/StellarisWare/driverlib\sysctl.c ****             //
2447:C:/StellarisWare/driverlib\sysctl.c ****             ulPLL = HWREG(SYSCTL_PLLCFG);
 2825              		.loc 1 2447 0
 2826 02c0 4EF26403 		movw	r3, #57444
 2827 02c4 C4F20F03 		movt	r3, 16399
 2828 02c8 1B68     		ldr	r3, [r3, #0]
 2829 02ca BB60     		str	r3, [r7, #8]
2448:C:/StellarisWare/driverlib\sysctl.c **** 
2449:C:/StellarisWare/driverlib\sysctl.c ****             //
2450:C:/StellarisWare/driverlib\sysctl.c ****             // See if this is a Sandstorm-class or Fury-class device.
2451:C:/StellarisWare/driverlib\sysctl.c ****             //
2452:C:/StellarisWare/driverlib\sysctl.c ****             if(CLASS_IS_SANDSTORM)
 2830              		.loc 1 2452 0
 2831 02cc 4FF46043 		mov	r3, #57344
 2832 02d0 C4F20F03 		movt	r3, 16399
 2833 02d4 1B68     		ldr	r3, [r3, #0]
 2834 02d6 03F0E043 		and	r3, r3, #1879048192
 2835 02da 002B     		cmp	r3, #0
 2836 02dc 0CD0     		beq	.L124
 2837              		.loc 1 2452 0 is_stmt 0 discriminator 1
 2838 02de 4FF46043 		mov	r3, #57344
 2839 02e2 C4F20F03 		movt	r3, 16399
 2840 02e6 1A68     		ldr	r2, [r3, #0]
 2841 02e8 4FF00003 		mov	r3, #0
 2842 02ec C7F2FF03 		movt	r3, 28927
 2843 02f0 1340     		ands	r3, r3, r2
 2844 02f2 B3F1805F 		cmp	r3, #268435456
 2845 02f6 13D1     		bne	.L125
 2846              	.L124:
2453:C:/StellarisWare/driverlib\sysctl.c ****             {
2454:C:/StellarisWare/driverlib\sysctl.c ****                 //
2455:C:/StellarisWare/driverlib\sysctl.c ****                 // Compute the PLL output frequency based on its input
2456:C:/StellarisWare/driverlib\sysctl.c ****                 // frequency.  The formula for a Sandstorm-class devices is
2457:C:/StellarisWare/driverlib\sysctl.c ****                 // "(xtal * (f + 2)) / (r + 2)".
2458:C:/StellarisWare/driverlib\sysctl.c ****                 //
2459:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
 2847              		.loc 1 2459 0 is_stmt 1
 2848 02f8 BA68     		ldr	r2, [r7, #8]
 2849 02fa 43F6E073 		movw	r3, #16352
 2850 02fe 1340     		ands	r3, r3, r2
 2851 0300 4FEA5313 		lsr	r3, r3, #5
2460:C:/StellarisWare/driverlib\sysctl.c ****                                     SYSCTL_PLLCFG_F_S) + 2)) /
 2852              		.loc 1 2460 0
 2853 0304 03F10203 		add	r3, r3, #2
2459:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
 2854              		.loc 1 2459 0
 2855 0308 3A69     		ldr	r2, [r7, #16]
 2856 030a 02FB03F2 		mul	r2, r2, r3
2461:C:/StellarisWare/driverlib\sysctl.c ****                          (((ulPLL & SYSCTL_PLLCFG_R_M) >>
 2857              		.loc 1 2461 0
 2858 030e BB68     		ldr	r3, [r7, #8]
 2859 0310 03F01F03 		and	r3, r3, #31
2462:C:/StellarisWare/driverlib\sysctl.c ****                            SYSCTL_PLLCFG_R_S) + 2));
 2860              		.loc 1 2462 0
 2861 0314 03F10203 		add	r3, r3, #2
2459:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
 2862              		.loc 1 2459 0
 2863 0318 B2FBF3F3 		udiv	r3, r2, r3
 2864 031c 3B61     		str	r3, [r7, #16]
 2865 031e 12E0     		b	.L126
 2866              	.L125:
2463:C:/StellarisWare/driverlib\sysctl.c ****             }
2464:C:/StellarisWare/driverlib\sysctl.c ****             else
2465:C:/StellarisWare/driverlib\sysctl.c ****             {
2466:C:/StellarisWare/driverlib\sysctl.c ****                 //
2467:C:/StellarisWare/driverlib\sysctl.c ****                 // Compute the PLL output frequency based on its input
2468:C:/StellarisWare/driverlib\sysctl.c ****                 // frequency.  The formula for a Fury-class device is
2469:C:/StellarisWare/driverlib\sysctl.c ****                 // "(xtal * f) / ((r + 1) * 2)".
2470:C:/StellarisWare/driverlib\sysctl.c ****                 //
2471:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
 2867              		.loc 1 2471 0
 2868 0320 BA68     		ldr	r2, [r7, #8]
 2869 0322 43F6E073 		movw	r3, #16352
 2870 0326 1340     		ands	r3, r3, r2
 2871 0328 4FEA5313 		lsr	r3, r3, #5
 2872 032c 3A69     		ldr	r2, [r7, #16]
 2873 032e 02FB03F2 		mul	r2, r2, r3
2472:C:/StellarisWare/driverlib\sysctl.c ****                                    SYSCTL_PLLCFG_F_S)) /
2473:C:/StellarisWare/driverlib\sysctl.c ****                          ((((ulPLL & SYSCTL_PLLCFG_R_M) >>
 2874              		.loc 1 2473 0
 2875 0332 BB68     		ldr	r3, [r7, #8]
 2876 0334 03F01F03 		and	r3, r3, #31
2474:C:/StellarisWare/driverlib\sysctl.c ****                             SYSCTL_PLLCFG_R_S) + 1) * 2));
 2877              		.loc 1 2474 0
 2878 0338 03F10103 		add	r3, r3, #1
 2879 033c 4FEA4303 		lsl	r3, r3, #1
2471:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
 2880              		.loc 1 2471 0
 2881 0340 B2FBF3F3 		udiv	r3, r2, r3
 2882 0344 3B61     		str	r3, [r7, #16]
 2883              	.L126:
2475:C:/StellarisWare/driverlib\sysctl.c ****             }
2476:C:/StellarisWare/driverlib\sysctl.c **** 
2477:C:/StellarisWare/driverlib\sysctl.c ****             //
2478:C:/StellarisWare/driverlib\sysctl.c ****             // See if the optional output divide by 2 is being used.
2479:C:/StellarisWare/driverlib\sysctl.c ****             //
2480:C:/StellarisWare/driverlib\sysctl.c ****             if(ulPLL & SYSCTL_PLLCFG_OD_2)
 2884              		.loc 1 2480 0
 2885 0346 BB68     		ldr	r3, [r7, #8]
 2886 0348 03F48043 		and	r3, r3, #16384
 2887 034c 002B     		cmp	r3, #0
 2888 034e 03D0     		beq	.L127
2481:C:/StellarisWare/driverlib\sysctl.c ****             {
2482:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk /= 2;
 2889              		.loc 1 2482 0
 2890 0350 3B69     		ldr	r3, [r7, #16]
 2891 0352 4FEA5303 		lsr	r3, r3, #1
 2892 0356 3B61     		str	r3, [r7, #16]
 2893              	.L127:
2483:C:/StellarisWare/driverlib\sysctl.c ****             }
2484:C:/StellarisWare/driverlib\sysctl.c **** 
2485:C:/StellarisWare/driverlib\sysctl.c ****             //
2486:C:/StellarisWare/driverlib\sysctl.c ****             // See if the optional output divide by 4 is being used.
2487:C:/StellarisWare/driverlib\sysctl.c ****             //
2488:C:/StellarisWare/driverlib\sysctl.c ****             if(ulPLL & SYSCTL_PLLCFG_OD_4)
 2894              		.loc 1 2488 0
 2895 0358 BB68     		ldr	r3, [r7, #8]
 2896 035a 03F40043 		and	r3, r3, #32768
 2897 035e 002B     		cmp	r3, #0
 2898 0360 03D0     		beq	.L123
2489:C:/StellarisWare/driverlib\sysctl.c ****             {
2490:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk /= 4;
 2899              		.loc 1 2490 0
 2900 0362 3B69     		ldr	r3, [r7, #16]
 2901 0364 4FEA9303 		lsr	r3, r3, #2
 2902 0368 3B61     		str	r3, [r7, #16]
 2903              	.L123:
2491:C:/StellarisWare/driverlib\sysctl.c ****             }
2492:C:/StellarisWare/driverlib\sysctl.c ****         }
2493:C:/StellarisWare/driverlib\sysctl.c **** 
2494:C:/StellarisWare/driverlib\sysctl.c ****         //
2495:C:/StellarisWare/driverlib\sysctl.c ****         // Force the system divider to be enabled.  It is always used when
2496:C:/StellarisWare/driverlib\sysctl.c ****         // using the PLL, but in some cases it does not read as being enabled.
2497:C:/StellarisWare/driverlib\sysctl.c ****         //
2498:C:/StellarisWare/driverlib\sysctl.c ****         ulRCC |= SYSCTL_RCC_USESYSDIV;
 2904              		.loc 1 2498 0
 2905 036a 7B69     		ldr	r3, [r7, #20]
 2906 036c 43F48003 		orr	r3, r3, #4194304
 2907 0370 7B61     		str	r3, [r7, #20]
 2908              	.L121:
2499:C:/StellarisWare/driverlib\sysctl.c ****     }
2500:C:/StellarisWare/driverlib\sysctl.c **** 
2501:C:/StellarisWare/driverlib\sysctl.c ****     //
2502:C:/StellarisWare/driverlib\sysctl.c ****     // See if the system divider is being used.
2503:C:/StellarisWare/driverlib\sysctl.c ****     //
2504:C:/StellarisWare/driverlib\sysctl.c ****     if(ulRCC & SYSCTL_RCC_USESYSDIV)
 2909              		.loc 1 2504 0
 2910 0372 7B69     		ldr	r3, [r7, #20]
 2911 0374 03F48003 		and	r3, r3, #4194304
 2912 0378 002B     		cmp	r3, #0
 2913 037a 3CD0     		beq	.L128
2505:C:/StellarisWare/driverlib\sysctl.c ****     {
2506:C:/StellarisWare/driverlib\sysctl.c ****         //
2507:C:/StellarisWare/driverlib\sysctl.c ****         // Adjust the clock rate by the system clock divider.
2508:C:/StellarisWare/driverlib\sysctl.c ****         //
2509:C:/StellarisWare/driverlib\sysctl.c ****         if(ulRCC2 & SYSCTL_RCC2_USERCC2)
 2914              		.loc 1 2509 0
 2915 037c FB68     		ldr	r3, [r7, #12]
 2916 037e 002B     		cmp	r3, #0
 2917 0380 2EDA     		bge	.L129
2510:C:/StellarisWare/driverlib\sysctl.c ****         {
2511:C:/StellarisWare/driverlib\sysctl.c ****             if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
 2918              		.loc 1 2511 0
 2919 0382 FB68     		ldr	r3, [r7, #12]
 2920 0384 03F08043 		and	r3, r3, #1073741824
 2921 0388 002B     		cmp	r3, #0
 2922 038a 1DD0     		beq	.L130
2512:C:/StellarisWare/driverlib\sysctl.c ****                (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2923              		.loc 1 2512 0 discriminator 1
 2924 038c FB68     		ldr	r3, [r7, #12]
2511:C:/StellarisWare/driverlib\sysctl.c ****             if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
 2925              		.loc 1 2511 0 discriminator 1
 2926 038e 002B     		cmp	r3, #0
 2927 0390 04DA     		bge	.L131
2513:C:/StellarisWare/driverlib\sysctl.c ****                  !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
 2928              		.loc 1 2513 0
 2929 0392 FB68     		ldr	r3, [r7, #12]
 2930 0394 03F40063 		and	r3, r3, #2048
2512:C:/StellarisWare/driverlib\sysctl.c ****                (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2931              		.loc 1 2512 0
 2932 0398 002B     		cmp	r3, #0
 2933 039a 07D0     		beq	.L132
 2934              	.L131:
2514:C:/StellarisWare/driverlib\sysctl.c ****                 (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2935              		.loc 1 2514 0
 2936 039c FB68     		ldr	r3, [r7, #12]
2513:C:/StellarisWare/driverlib\sysctl.c ****                  !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
 2937              		.loc 1 2513 0
 2938 039e 002B     		cmp	r3, #0
 2939 03a0 12DB     		blt	.L130
2515:C:/StellarisWare/driverlib\sysctl.c ****                  !(ulRCC & SYSCTL_RCC_BYPASS))))
 2940              		.loc 1 2515 0
 2941 03a2 7B69     		ldr	r3, [r7, #20]
 2942 03a4 03F40063 		and	r3, r3, #2048
2514:C:/StellarisWare/driverlib\sysctl.c ****                 (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
 2943              		.loc 1 2514 0
 2944 03a8 002B     		cmp	r3, #0
 2945 03aa 0DD1     		bne	.L130
 2946              	.L132:
2516:C:/StellarisWare/driverlib\sysctl.c **** 
2517:C:/StellarisWare/driverlib\sysctl.c ****             {
2518:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
 2947              		.loc 1 2518 0
 2948 03ac 3B69     		ldr	r3, [r7, #16]
 2949 03ae 4FEA4302 		lsl	r2, r3, #1
 2950 03b2 FB68     		ldr	r3, [r7, #12]
 2951 03b4 03F0FE53 		and	r3, r3, #532676608
2519:C:/StellarisWare/driverlib\sysctl.c ****                                                     SYSCTL_RCC2_SYSDIV2LSB)) >>
 2952              		.loc 1 2519 0
 2953 03b8 4FEA9353 		lsr	r3, r3, #22
2520:C:/StellarisWare/driverlib\sysctl.c ****                                          (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
 2954              		.loc 1 2520 0
 2955 03bc 03F10103 		add	r3, r3, #1
2518:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
 2956              		.loc 1 2518 0
 2957 03c0 B2FBF3F3 		udiv	r3, r2, r3
 2958 03c4 3B61     		str	r3, [r7, #16]
 2959 03c6 16E0     		b	.L128
 2960              	.L130:
2521:C:/StellarisWare/driverlib\sysctl.c ****             }
2522:C:/StellarisWare/driverlib\sysctl.c ****             else
2523:C:/StellarisWare/driverlib\sysctl.c ****             {
2524:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
 2961              		.loc 1 2524 0
 2962 03c8 FB68     		ldr	r3, [r7, #12]
 2963 03ca 03F0FC53 		and	r3, r3, #528482304
 2964 03ce 4FEAD353 		lsr	r3, r3, #23
2525:C:/StellarisWare/driverlib\sysctl.c ****                            SYSCTL_RCC2_SYSDIV2_S) + 1);
 2965              		.loc 1 2525 0
 2966 03d2 03F10103 		add	r3, r3, #1
2524:C:/StellarisWare/driverlib\sysctl.c ****                 ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
 2967              		.loc 1 2524 0
 2968 03d6 3A69     		ldr	r2, [r7, #16]
 2969 03d8 B2FBF3F3 		udiv	r3, r2, r3
 2970 03dc 3B61     		str	r3, [r7, #16]
 2971 03de 0AE0     		b	.L128
 2972              	.L129:
2526:C:/StellarisWare/driverlib\sysctl.c ****             }
2527:C:/StellarisWare/driverlib\sysctl.c ****         }
2528:C:/StellarisWare/driverlib\sysctl.c ****         else
2529:C:/StellarisWare/driverlib\sysctl.c ****         {
2530:C:/StellarisWare/driverlib\sysctl.c ****             ulClk /= (((ulRCC & SYSCTL_RCC_SYSDIV_M) >> SYSCTL_RCC_SYSDIV_S) +
 2973              		.loc 1 2530 0
 2974 03e0 7B69     		ldr	r3, [r7, #20]
 2975 03e2 03F0F063 		and	r3, r3, #125829120
 2976 03e6 4FEAD353 		lsr	r3, r3, #23
 2977 03ea 03F10103 		add	r3, r3, #1
 2978 03ee 3A69     		ldr	r2, [r7, #16]
 2979 03f0 B2FBF3F3 		udiv	r3, r2, r3
 2980 03f4 3B61     		str	r3, [r7, #16]
 2981              	.L128:
2531:C:/StellarisWare/driverlib\sysctl.c ****                       1);
2532:C:/StellarisWare/driverlib\sysctl.c ****         }
2533:C:/StellarisWare/driverlib\sysctl.c ****     }
2534:C:/StellarisWare/driverlib\sysctl.c **** 
2535:C:/StellarisWare/driverlib\sysctl.c ****     //
2536:C:/StellarisWare/driverlib\sysctl.c ****     // Return the computed clock rate.
2537:C:/StellarisWare/driverlib\sysctl.c ****     //
2538:C:/StellarisWare/driverlib\sysctl.c ****     return(ulClk);
 2982              		.loc 1 2538 0
 2983 03f6 3B69     		ldr	r3, [r7, #16]
 2984              	.L118:
2539:C:/StellarisWare/driverlib\sysctl.c **** }
 2985              		.loc 1 2539 0
 2986 03f8 1846     		mov	r0, r3
 2987 03fa 07F11C07 		add	r7, r7, #28
 2988 03fe BD46     		mov	sp, r7
 2989 0400 80BC     		pop	{r7}
 2990 0402 7047     		bx	lr
 2991              		.cfi_endproc
 2992              	.LFE35:
 2994              		.section	.text.SysCtlDeepSleepClockSet,"ax",%progbits
 2995              		.align	2
 2996              		.global	SysCtlDeepSleepClockSet
 2997              		.thumb
 2998              		.thumb_func
 3000              	SysCtlDeepSleepClockSet:
 3001              	.LFB36:
2540:C:/StellarisWare/driverlib\sysctl.c **** 
2541:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2542:C:/StellarisWare/driverlib\sysctl.c **** //
2543:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the clocking of the device while in deep-sleep mode.
2544:C:/StellarisWare/driverlib\sysctl.c **** //!
2545:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the required configuration of the device clocking while
2546:C:/StellarisWare/driverlib\sysctl.c **** //! in deep-sleep mode.
2547:C:/StellarisWare/driverlib\sysctl.c **** //!
2548:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the clocking of the device while in deep-sleep
2549:C:/StellarisWare/driverlib\sysctl.c **** //! mode.  The oscillator to be used and the system clock divider are
2550:C:/StellarisWare/driverlib\sysctl.c **** //! configured with this function.
2551:C:/StellarisWare/driverlib\sysctl.c **** //!
2552:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulConfig parameter is the logical OR of the following values:
2553:C:/StellarisWare/driverlib\sysctl.c **** //!
2554:C:/StellarisWare/driverlib\sysctl.c **** //! The system clock divider is chosen from one of the following values:
2555:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_DSLP_DIV_1, \b SYSCTL_DSLP_DIV_2, \b SYSCTL_DSLP_DIV_3, ...
2556:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_DSLP_DIV_64.
2557:C:/StellarisWare/driverlib\sysctl.c **** //!
2558:C:/StellarisWare/driverlib\sysctl.c **** //! The oscillator source is chosen from one of the following values:
2559:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_DSLP_OSC_MAIN, \b SYSCTL_DSLP_OSC_INT, \b SYSCTL_DSLP_OSC_INT30,
2560:C:/StellarisWare/driverlib\sysctl.c **** //! or \b SYSCTL_DSLP_OSC_EXT32.  \b SYSCTL_OSC_EXT32 is only available on
2561:C:/StellarisWare/driverlib\sysctl.c **** //! devices with the hibernation module, and then only when the hibernation
2562:C:/StellarisWare/driverlib\sysctl.c **** //! module has been enabled.
2563:C:/StellarisWare/driverlib\sysctl.c **** //!
2564:C:/StellarisWare/driverlib\sysctl.c **** //! The precision internal oscillator can be powered down in deep-sleep mode by
2565:C:/StellarisWare/driverlib\sysctl.c **** //! specifying \b SYSCTL_DSLP_PIOSC_PD.  The precision internal oscillator will
2566:C:/StellarisWare/driverlib\sysctl.c **** //! not be powered down if it is required for operation while in deep-sleep
2567:C:/StellarisWare/driverlib\sysctl.c **** //! (based on other configuration settings.)
2568:C:/StellarisWare/driverlib\sysctl.c **** //!
2569:C:/StellarisWare/driverlib\sysctl.c **** //! \note The availability of deep-sleep clocking configuration varies with the
2570:C:/StellarisWare/driverlib\sysctl.c **** //! Stellaris part in use.  Please consult the data sheet for the part you are
2571:C:/StellarisWare/driverlib\sysctl.c **** //! using to determine whether this support is available.
2572:C:/StellarisWare/driverlib\sysctl.c **** //!
2573:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2574:C:/StellarisWare/driverlib\sysctl.c **** //
2575:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2576:C:/StellarisWare/driverlib\sysctl.c **** void
2577:C:/StellarisWare/driverlib\sysctl.c **** SysCtlDeepSleepClockSet(unsigned long ulConfig)
2578:C:/StellarisWare/driverlib\sysctl.c **** {
 3002              		.loc 1 2578 0
 3003              		.cfi_startproc
 3004              		@ args = 0, pretend = 0, frame = 8
 3005              		@ frame_needed = 1, uses_anonymous_args = 0
 3006              		@ link register save eliminated.
 3007 0000 80B4     		push	{r7}
 3008              	.LCFI97:
 3009              		.cfi_def_cfa_offset 4
 3010              		.cfi_offset 7, -4
 3011 0002 83B0     		sub	sp, sp, #12
 3012              	.LCFI98:
 3013              		.cfi_def_cfa_offset 16
 3014 0004 00AF     		add	r7, sp, #0
 3015              	.LCFI99:
 3016              		.cfi_def_cfa_register 7
 3017 0006 7860     		str	r0, [r7, #4]
2579:C:/StellarisWare/driverlib\sysctl.c ****     //
2580:C:/StellarisWare/driverlib\sysctl.c ****     // Set the deep-sleep clock configuration.
2581:C:/StellarisWare/driverlib\sysctl.c ****     //
2582:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_DSLPCLKCFG) = ulConfig;
 3018              		.loc 1 2582 0
 3019 0008 4EF24413 		movw	r3, #57668
 3020 000c C4F20F03 		movt	r3, 16399
 3021 0010 7A68     		ldr	r2, [r7, #4]
 3022 0012 1A60     		str	r2, [r3, #0]
2583:C:/StellarisWare/driverlib\sysctl.c **** }
 3023              		.loc 1 2583 0
 3024 0014 07F10C07 		add	r7, r7, #12
 3025 0018 BD46     		mov	sp, r7
 3026 001a 80BC     		pop	{r7}
 3027 001c 7047     		bx	lr
 3028              		.cfi_endproc
 3029              	.LFE36:
 3031 001e 00BF     		.section	.text.SysCtlPWMClockSet,"ax",%progbits
 3032              		.align	2
 3033              		.global	SysCtlPWMClockSet
 3034              		.thumb
 3035              		.thumb_func
 3037              	SysCtlPWMClockSet:
 3038              	.LFB37:
2584:C:/StellarisWare/driverlib\sysctl.c **** 
2585:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2586:C:/StellarisWare/driverlib\sysctl.c **** //
2587:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the PWM clock configuration.
2588:C:/StellarisWare/driverlib\sysctl.c **** //!
2589:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulConfig is the configuration for the PWM clock; it must be one of
2590:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_1, \b SYSCTL_PWMDIV_2, \b SYSCTL_PWMDIV_4,
2591:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_8, \b SYSCTL_PWMDIV_16, \b SYSCTL_PWMDIV_32, or
2592:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_64.
2593:C:/StellarisWare/driverlib\sysctl.c **** //!
2594:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the rate of the clock provided to the PWM module
2595:C:/StellarisWare/driverlib\sysctl.c **** //! as a ratio of the processor clock.  This clock is used by the PWM module to
2596:C:/StellarisWare/driverlib\sysctl.c **** //! generate PWM signals; its rate forms the basis for all PWM signals.
2597:C:/StellarisWare/driverlib\sysctl.c **** //!
2598:C:/StellarisWare/driverlib\sysctl.c **** //! \note The clocking of the PWM is dependent upon the system clock rate as
2599:C:/StellarisWare/driverlib\sysctl.c **** //! configured by SysCtlClockSet().
2600:C:/StellarisWare/driverlib\sysctl.c **** //!
2601:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2602:C:/StellarisWare/driverlib\sysctl.c **** //
2603:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2604:C:/StellarisWare/driverlib\sysctl.c **** void
2605:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPWMClockSet(unsigned long ulConfig)
2606:C:/StellarisWare/driverlib\sysctl.c **** {
 3039              		.loc 1 2606 0
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 8
 3042              		@ frame_needed = 1, uses_anonymous_args = 0
 3043              		@ link register save eliminated.
 3044 0000 80B4     		push	{r7}
 3045              	.LCFI100:
 3046              		.cfi_def_cfa_offset 4
 3047              		.cfi_offset 7, -4
 3048 0002 83B0     		sub	sp, sp, #12
 3049              	.LCFI101:
 3050              		.cfi_def_cfa_offset 16
 3051 0004 00AF     		add	r7, sp, #0
 3052              	.LCFI102:
 3053              		.cfi_def_cfa_register 7
 3054 0006 7860     		str	r0, [r7, #4]
2607:C:/StellarisWare/driverlib\sysctl.c ****     //
2608:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
2609:C:/StellarisWare/driverlib\sysctl.c ****     //
2610:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulConfig == SYSCTL_PWMDIV_1) ||
2611:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_2) ||
2612:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_4) ||
2613:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_8) ||
2614:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_16) ||
2615:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_32) ||
2616:C:/StellarisWare/driverlib\sysctl.c ****            (ulConfig == SYSCTL_PWMDIV_64));
2617:C:/StellarisWare/driverlib\sysctl.c **** 
2618:C:/StellarisWare/driverlib\sysctl.c ****     //
2619:C:/StellarisWare/driverlib\sysctl.c ****     // Check that there is a PWM block on this part.
2620:C:/StellarisWare/driverlib\sysctl.c ****     //
2621:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(HWREG(SYSCTL_DC1) & SYSCTL_DC1_PWM0);
2622:C:/StellarisWare/driverlib\sysctl.c **** 
2623:C:/StellarisWare/driverlib\sysctl.c ****     //
2624:C:/StellarisWare/driverlib\sysctl.c ****     // Set the PWM clock configuration into the run-mode clock configuration
2625:C:/StellarisWare/driverlib\sysctl.c ****     // register.
2626:C:/StellarisWare/driverlib\sysctl.c ****     //
2627:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC) = ((HWREG(SYSCTL_RCC) &
 3055              		.loc 1 2627 0
 3056 0008 4EF26003 		movw	r3, #57440
 3057 000c C4F20F03 		movt	r3, 16399
 3058 0010 4EF26002 		movw	r2, #57440
 3059 0014 C4F20F02 		movt	r2, 16399
 3060 0018 1268     		ldr	r2, [r2, #0]
 3061 001a 22F4F011 		bic	r1, r2, #1966080
2628:C:/StellarisWare/driverlib\sysctl.c ****                           ~(SYSCTL_RCC_USEPWMDIV | SYSCTL_RCC_PWMDIV_M)) |
 3062              		.loc 1 2628 0
 3063 001e 7A68     		ldr	r2, [r7, #4]
 3064 0020 0A43     		orrs	r2, r2, r1
2627:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC) = ((HWREG(SYSCTL_RCC) &
 3065              		.loc 1 2627 0
 3066 0022 1A60     		str	r2, [r3, #0]
2629:C:/StellarisWare/driverlib\sysctl.c ****                          ulConfig);
2630:C:/StellarisWare/driverlib\sysctl.c **** }
 3067              		.loc 1 2630 0
 3068 0024 07F10C07 		add	r7, r7, #12
 3069 0028 BD46     		mov	sp, r7
 3070 002a 80BC     		pop	{r7}
 3071 002c 7047     		bx	lr
 3072              		.cfi_endproc
 3073              	.LFE37:
 3075 002e 00BF     		.section	.text.SysCtlPWMClockGet,"ax",%progbits
 3076              		.align	2
 3077              		.global	SysCtlPWMClockGet
 3078              		.thumb
 3079              		.thumb_func
 3081              	SysCtlPWMClockGet:
 3082              	.LFB38:
2631:C:/StellarisWare/driverlib\sysctl.c **** 
2632:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2633:C:/StellarisWare/driverlib\sysctl.c **** //
2634:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the current PWM clock configuration.
2635:C:/StellarisWare/driverlib\sysctl.c **** //!
2636:C:/StellarisWare/driverlib\sysctl.c **** //! This function returns the current PWM clock configuration.
2637:C:/StellarisWare/driverlib\sysctl.c **** //!
2638:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns the current PWM clock configuration; is one of
2639:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_1, \b SYSCTL_PWMDIV_2, \b SYSCTL_PWMDIV_4,
2640:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_8, \b SYSCTL_PWMDIV_16, \b SYSCTL_PWMDIV_32, or
2641:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PWMDIV_64.
2642:C:/StellarisWare/driverlib\sysctl.c **** //
2643:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2644:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
2645:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPWMClockGet(void)
2646:C:/StellarisWare/driverlib\sysctl.c **** {
 3083              		.loc 1 2646 0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 0
 3086              		@ frame_needed = 1, uses_anonymous_args = 0
 3087              		@ link register save eliminated.
 3088 0000 80B4     		push	{r7}
 3089              	.LCFI103:
 3090              		.cfi_def_cfa_offset 4
 3091              		.cfi_offset 7, -4
 3092 0002 00AF     		add	r7, sp, #0
 3093              	.LCFI104:
 3094              		.cfi_def_cfa_register 7
2647:C:/StellarisWare/driverlib\sysctl.c ****     //
2648:C:/StellarisWare/driverlib\sysctl.c ****     // Check that there is a PWM block on this part.
2649:C:/StellarisWare/driverlib\sysctl.c ****     //
2650:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(HWREG(SYSCTL_DC1) & SYSCTL_DC1_PWM0);
2651:C:/StellarisWare/driverlib\sysctl.c **** 
2652:C:/StellarisWare/driverlib\sysctl.c ****     //
2653:C:/StellarisWare/driverlib\sysctl.c ****     // Return the current PWM clock configuration.  Make sure that
2654:C:/StellarisWare/driverlib\sysctl.c ****     // SYSCTL_PWMDIV_1 is returned in all cases where the divider is disabled.
2655:C:/StellarisWare/driverlib\sysctl.c ****     //
2656:C:/StellarisWare/driverlib\sysctl.c ****     if(!(HWREG(SYSCTL_RCC) & SYSCTL_RCC_USEPWMDIV))
 3095              		.loc 1 2656 0
 3096 0004 4EF26003 		movw	r3, #57440
 3097 0008 C4F20F03 		movt	r3, 16399
 3098 000c 1B68     		ldr	r3, [r3, #0]
 3099 000e 03F48013 		and	r3, r3, #1048576
 3100 0012 002B     		cmp	r3, #0
 3101 0014 02D1     		bne	.L137
2657:C:/StellarisWare/driverlib\sysctl.c ****     {
2658:C:/StellarisWare/driverlib\sysctl.c ****         //
2659:C:/StellarisWare/driverlib\sysctl.c ****         // The divider is not active so reflect this in the value we return.
2660:C:/StellarisWare/driverlib\sysctl.c ****         //
2661:C:/StellarisWare/driverlib\sysctl.c ****         return(SYSCTL_PWMDIV_1);
 3102              		.loc 1 2661 0
 3103 0016 4FF00003 		mov	r3, #0
 3104 001a 06E0     		b	.L138
 3105              	.L137:
2662:C:/StellarisWare/driverlib\sysctl.c ****     }
2663:C:/StellarisWare/driverlib\sysctl.c ****     else
2664:C:/StellarisWare/driverlib\sysctl.c ****     {
2665:C:/StellarisWare/driverlib\sysctl.c ****         //
2666:C:/StellarisWare/driverlib\sysctl.c ****         // The divider is active so directly return the masked register value.
2667:C:/StellarisWare/driverlib\sysctl.c ****         //
2668:C:/StellarisWare/driverlib\sysctl.c ****         return(HWREG(SYSCTL_RCC) &
 3106              		.loc 1 2668 0
 3107 001c 4EF26003 		movw	r3, #57440
 3108 0020 C4F20F03 		movt	r3, 16399
 3109 0024 1B68     		ldr	r3, [r3, #0]
 3110 0026 03F4F013 		and	r3, r3, #1966080
 3111              	.L138:
2669:C:/StellarisWare/driverlib\sysctl.c ****                (SYSCTL_RCC_USEPWMDIV | SYSCTL_RCC_PWMDIV_M));
2670:C:/StellarisWare/driverlib\sysctl.c ****     }
2671:C:/StellarisWare/driverlib\sysctl.c **** }
 3112              		.loc 1 2671 0
 3113 002a 1846     		mov	r0, r3
 3114 002c BD46     		mov	sp, r7
 3115 002e 80BC     		pop	{r7}
 3116 0030 7047     		bx	lr
 3117              		.cfi_endproc
 3118              	.LFE38:
 3120 0032 00BF     		.section	.text.SysCtlADCSpeedSet,"ax",%progbits
 3121              		.align	2
 3122              		.global	SysCtlADCSpeedSet
 3123              		.thumb
 3124              		.thumb_func
 3126              	SysCtlADCSpeedSet:
 3127              	.LFB39:
2672:C:/StellarisWare/driverlib\sysctl.c **** 
2673:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2674:C:/StellarisWare/driverlib\sysctl.c **** //
2675:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the sample rate of the ADC.
2676:C:/StellarisWare/driverlib\sysctl.c **** //!
2677:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulSpeed is the desired sample rate of the ADC; must be one of
2678:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_ADCSPEED_1MSPS, \b SYSCTL_ADCSPEED_500KSPS,
2679:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_ADCSPEED_250KSPS, or \b SYSCTL_ADCSPEED_125KSPS.
2680:C:/StellarisWare/driverlib\sysctl.c **** //!
2681:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the rate at which the ADC samples are captured by
2682:C:/StellarisWare/driverlib\sysctl.c **** //! the ADC block.  The sampling speed may be limited by the hardware, so the
2683:C:/StellarisWare/driverlib\sysctl.c **** //! sample rate may end up being slower than requested.  SysCtlADCSpeedGet()
2684:C:/StellarisWare/driverlib\sysctl.c **** //! returns the actual speed in use.
2685:C:/StellarisWare/driverlib\sysctl.c **** //!
2686:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2687:C:/StellarisWare/driverlib\sysctl.c **** //
2688:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2689:C:/StellarisWare/driverlib\sysctl.c **** void
2690:C:/StellarisWare/driverlib\sysctl.c **** SysCtlADCSpeedSet(unsigned long ulSpeed)
2691:C:/StellarisWare/driverlib\sysctl.c **** {
 3128              		.loc 1 2691 0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 8
 3131              		@ frame_needed = 1, uses_anonymous_args = 0
 3132              		@ link register save eliminated.
 3133 0000 80B4     		push	{r7}
 3134              	.LCFI105:
 3135              		.cfi_def_cfa_offset 4
 3136              		.cfi_offset 7, -4
 3137 0002 83B0     		sub	sp, sp, #12
 3138              	.LCFI106:
 3139              		.cfi_def_cfa_offset 16
 3140 0004 00AF     		add	r7, sp, #0
 3141              	.LCFI107:
 3142              		.cfi_def_cfa_register 7
 3143 0006 7860     		str	r0, [r7, #4]
2692:C:/StellarisWare/driverlib\sysctl.c ****     //
2693:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
2694:C:/StellarisWare/driverlib\sysctl.c ****     //
2695:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulSpeed == SYSCTL_ADCSPEED_1MSPS) ||
2696:C:/StellarisWare/driverlib\sysctl.c ****            (ulSpeed == SYSCTL_ADCSPEED_500KSPS) ||
2697:C:/StellarisWare/driverlib\sysctl.c ****            (ulSpeed == SYSCTL_ADCSPEED_250KSPS) ||
2698:C:/StellarisWare/driverlib\sysctl.c ****            (ulSpeed == SYSCTL_ADCSPEED_125KSPS));
2699:C:/StellarisWare/driverlib\sysctl.c **** 
2700:C:/StellarisWare/driverlib\sysctl.c ****     //
2701:C:/StellarisWare/driverlib\sysctl.c ****     // Set the ADC speed in run and sleep mode.
2702:C:/StellarisWare/driverlib\sysctl.c ****     //
2703:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCGC0) = ((HWREG(SYSCTL_RCGC0) & ~(SYSCTL_RCGC0_ADCSPD_M)) |
 3144              		.loc 1 2703 0
 3145 0008 4FF46143 		mov	r3, #57600
 3146 000c C4F20F03 		movt	r3, 16399
 3147 0010 4FF46142 		mov	r2, #57600
 3148 0014 C4F20F02 		movt	r2, 16399
 3149 0018 1268     		ldr	r2, [r2, #0]
 3150 001a 22F47061 		bic	r1, r2, #3840
 3151 001e 7A68     		ldr	r2, [r7, #4]
 3152 0020 0A43     		orrs	r2, r2, r1
 3153 0022 1A60     		str	r2, [r3, #0]
2704:C:/StellarisWare/driverlib\sysctl.c ****                            ulSpeed);
2705:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_SCGC0) = ((HWREG(SYSCTL_SCGC0) & ~(SYSCTL_SCGC0_ADCSPD_M)) |
 3154              		.loc 1 2705 0
 3155 0024 4EF21013 		movw	r3, #57616
 3156 0028 C4F20F03 		movt	r3, 16399
 3157 002c 4EF21012 		movw	r2, #57616
 3158 0030 C4F20F02 		movt	r2, 16399
 3159 0034 1268     		ldr	r2, [r2, #0]
 3160 0036 22F47061 		bic	r1, r2, #3840
 3161 003a 7A68     		ldr	r2, [r7, #4]
 3162 003c 0A43     		orrs	r2, r2, r1
 3163 003e 1A60     		str	r2, [r3, #0]
2706:C:/StellarisWare/driverlib\sysctl.c ****                            ulSpeed);
2707:C:/StellarisWare/driverlib\sysctl.c **** }
 3164              		.loc 1 2707 0
 3165 0040 07F10C07 		add	r7, r7, #12
 3166 0044 BD46     		mov	sp, r7
 3167 0046 80BC     		pop	{r7}
 3168 0048 7047     		bx	lr
 3169              		.cfi_endproc
 3170              	.LFE39:
 3172 004a 00BF     		.section	.text.SysCtlADCSpeedGet,"ax",%progbits
 3173              		.align	2
 3174              		.global	SysCtlADCSpeedGet
 3175              		.thumb
 3176              		.thumb_func
 3178              	SysCtlADCSpeedGet:
 3179              	.LFB40:
2708:C:/StellarisWare/driverlib\sysctl.c **** 
2709:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2710:C:/StellarisWare/driverlib\sysctl.c **** //
2711:C:/StellarisWare/driverlib\sysctl.c **** //! Gets the sample rate of the ADC.
2712:C:/StellarisWare/driverlib\sysctl.c **** //!
2713:C:/StellarisWare/driverlib\sysctl.c **** //! This function gets the current sample rate of the ADC.
2714:C:/StellarisWare/driverlib\sysctl.c **** //!
2715:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns the current ADC sample rate; is one of
2716:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_ADCSPEED_1MSPS, \b SYSCTL_ADCSPEED_500KSPS,
2717:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_ADCSPEED_250KSPS, or \b SYSCTL_ADCSPEED_125KSPS.
2718:C:/StellarisWare/driverlib\sysctl.c **** //
2719:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2720:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
2721:C:/StellarisWare/driverlib\sysctl.c **** SysCtlADCSpeedGet(void)
2722:C:/StellarisWare/driverlib\sysctl.c **** {
 3180              		.loc 1 2722 0
 3181              		.cfi_startproc
 3182              		@ args = 0, pretend = 0, frame = 0
 3183              		@ frame_needed = 1, uses_anonymous_args = 0
 3184              		@ link register save eliminated.
 3185 0000 80B4     		push	{r7}
 3186              	.LCFI108:
 3187              		.cfi_def_cfa_offset 4
 3188              		.cfi_offset 7, -4
 3189 0002 00AF     		add	r7, sp, #0
 3190              	.LCFI109:
 3191              		.cfi_def_cfa_register 7
2723:C:/StellarisWare/driverlib\sysctl.c ****     //
2724:C:/StellarisWare/driverlib\sysctl.c ****     // Return the current ADC speed.
2725:C:/StellarisWare/driverlib\sysctl.c ****     //
2726:C:/StellarisWare/driverlib\sysctl.c ****     return(HWREG(SYSCTL_RCGC0) & SYSCTL_RCGC0_ADCSPD_M);
 3192              		.loc 1 2726 0
 3193 0004 4FF46143 		mov	r3, #57600
 3194 0008 C4F20F03 		movt	r3, 16399
 3195 000c 1B68     		ldr	r3, [r3, #0]
 3196 000e 03F47063 		and	r3, r3, #3840
2727:C:/StellarisWare/driverlib\sysctl.c **** }
 3197              		.loc 1 2727 0
 3198 0012 1846     		mov	r0, r3
 3199 0014 BD46     		mov	sp, r7
 3200 0016 80BC     		pop	{r7}
 3201 0018 7047     		bx	lr
 3202              		.cfi_endproc
 3203              	.LFE40:
 3205 001a 00BF     		.section	.text.SysCtlIOSCVerificationSet,"ax",%progbits
 3206              		.align	2
 3207              		.global	SysCtlIOSCVerificationSet
 3208              		.thumb
 3209              		.thumb_func
 3211              	SysCtlIOSCVerificationSet:
 3212              	.LFB41:
2728:C:/StellarisWare/driverlib\sysctl.c **** 
2729:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2730:C:/StellarisWare/driverlib\sysctl.c **** //
2731:C:/StellarisWare/driverlib\sysctl.c **** //! Configures the internal oscillator verification timer.
2732:C:/StellarisWare/driverlib\sysctl.c **** //!
2733:C:/StellarisWare/driverlib\sysctl.c **** //! \param bEnable is a boolean that is \b true if the internal oscillator
2734:C:/StellarisWare/driverlib\sysctl.c **** //! verification timer should be enabled.
2735:C:/StellarisWare/driverlib\sysctl.c **** //!
2736:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows the internal oscillator verification timer to be
2737:C:/StellarisWare/driverlib\sysctl.c **** //! enabled or disabled.  When enabled, an interrupt is generated if the
2738:C:/StellarisWare/driverlib\sysctl.c **** //! internal oscillator ceases to operate.
2739:C:/StellarisWare/driverlib\sysctl.c **** //!
2740:C:/StellarisWare/driverlib\sysctl.c **** //! The internal oscillator verification timer is only available on
2741:C:/StellarisWare/driverlib\sysctl.c **** //! Sandstorm-class devices.
2742:C:/StellarisWare/driverlib\sysctl.c **** //!
2743:C:/StellarisWare/driverlib\sysctl.c **** //! \note Both oscillators (main and internal) must be enabled for this
2744:C:/StellarisWare/driverlib\sysctl.c **** //! verification timer to operate as the main oscillator verifies the
2745:C:/StellarisWare/driverlib\sysctl.c **** //! internal oscillator.
2746:C:/StellarisWare/driverlib\sysctl.c **** //!
2747:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2748:C:/StellarisWare/driverlib\sysctl.c **** //
2749:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2750:C:/StellarisWare/driverlib\sysctl.c **** void
2751:C:/StellarisWare/driverlib\sysctl.c **** SysCtlIOSCVerificationSet(tBoolean bEnable)
2752:C:/StellarisWare/driverlib\sysctl.c **** {
 3213              		.loc 1 2752 0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 8
 3216              		@ frame_needed = 1, uses_anonymous_args = 0
 3217              		@ link register save eliminated.
 3218 0000 80B4     		push	{r7}
 3219              	.LCFI110:
 3220              		.cfi_def_cfa_offset 4
 3221              		.cfi_offset 7, -4
 3222 0002 83B0     		sub	sp, sp, #12
 3223              	.LCFI111:
 3224              		.cfi_def_cfa_offset 16
 3225 0004 00AF     		add	r7, sp, #0
 3226              	.LCFI112:
 3227              		.cfi_def_cfa_register 7
 3228 0006 0346     		mov	r3, r0
 3229 0008 FB71     		strb	r3, [r7, #7]
2753:C:/StellarisWare/driverlib\sysctl.c ****     //
2754:C:/StellarisWare/driverlib\sysctl.c ****     // Enable or disable the internal oscillator verification timer as
2755:C:/StellarisWare/driverlib\sysctl.c ****     // requested.
2756:C:/StellarisWare/driverlib\sysctl.c ****     //
2757:C:/StellarisWare/driverlib\sysctl.c ****     if(bEnable)
 3230              		.loc 1 2757 0
 3231 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3232 000c 002B     		cmp	r3, #0
 3233 000e 0CD0     		beq	.L142
2758:C:/StellarisWare/driverlib\sysctl.c ****     {
2759:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) |= SYSCTL_RCC_IOSCVER;
 3234              		.loc 1 2759 0
 3235 0010 4EF26003 		movw	r3, #57440
 3236 0014 C4F20F03 		movt	r3, 16399
 3237 0018 4EF26002 		movw	r2, #57440
 3238 001c C4F20F02 		movt	r2, 16399
 3239 0020 1268     		ldr	r2, [r2, #0]
 3240 0022 42F00802 		orr	r2, r2, #8
 3241 0026 1A60     		str	r2, [r3, #0]
 3242 0028 0BE0     		b	.L141
 3243              	.L142:
2760:C:/StellarisWare/driverlib\sysctl.c ****     }
2761:C:/StellarisWare/driverlib\sysctl.c ****     else
2762:C:/StellarisWare/driverlib\sysctl.c ****     {
2763:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) &= ~(SYSCTL_RCC_IOSCVER);
 3244              		.loc 1 2763 0
 3245 002a 4EF26003 		movw	r3, #57440
 3246 002e C4F20F03 		movt	r3, 16399
 3247 0032 4EF26002 		movw	r2, #57440
 3248 0036 C4F20F02 		movt	r2, 16399
 3249 003a 1268     		ldr	r2, [r2, #0]
 3250 003c 22F00802 		bic	r2, r2, #8
 3251 0040 1A60     		str	r2, [r3, #0]
 3252              	.L141:
2764:C:/StellarisWare/driverlib\sysctl.c ****     }
2765:C:/StellarisWare/driverlib\sysctl.c **** }
 3253              		.loc 1 2765 0
 3254 0042 07F10C07 		add	r7, r7, #12
 3255 0046 BD46     		mov	sp, r7
 3256 0048 80BC     		pop	{r7}
 3257 004a 7047     		bx	lr
 3258              		.cfi_endproc
 3259              	.LFE41:
 3261              		.section	.text.SysCtlMOSCVerificationSet,"ax",%progbits
 3262              		.align	2
 3263              		.global	SysCtlMOSCVerificationSet
 3264              		.thumb
 3265              		.thumb_func
 3267              	SysCtlMOSCVerificationSet:
 3268              	.LFB42:
2766:C:/StellarisWare/driverlib\sysctl.c **** 
2767:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2768:C:/StellarisWare/driverlib\sysctl.c **** //
2769:C:/StellarisWare/driverlib\sysctl.c **** //! Configures the main oscillator verification timer.
2770:C:/StellarisWare/driverlib\sysctl.c **** //!
2771:C:/StellarisWare/driverlib\sysctl.c **** //! \param bEnable is a boolean that is \b true if the main oscillator
2772:C:/StellarisWare/driverlib\sysctl.c **** //! verification timer should be enabled.
2773:C:/StellarisWare/driverlib\sysctl.c **** //!
2774:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows the main oscillator verification timer to be enabled
2775:C:/StellarisWare/driverlib\sysctl.c **** //! or disabled.  When enabled, an interrupt is generated if the main
2776:C:/StellarisWare/driverlib\sysctl.c **** //! oscillator ceases to operate.
2777:C:/StellarisWare/driverlib\sysctl.c **** //!
2778:C:/StellarisWare/driverlib\sysctl.c **** //! The main oscillator verification timer is only available on
2779:C:/StellarisWare/driverlib\sysctl.c **** //! Sandstorm-class devices.
2780:C:/StellarisWare/driverlib\sysctl.c **** //!
2781:C:/StellarisWare/driverlib\sysctl.c **** //! \note Both oscillators (main and internal) must be enabled for this
2782:C:/StellarisWare/driverlib\sysctl.c **** //! verification timer to operate as the internal oscillator verifies the
2783:C:/StellarisWare/driverlib\sysctl.c **** //! main oscillator.
2784:C:/StellarisWare/driverlib\sysctl.c **** //!
2785:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2786:C:/StellarisWare/driverlib\sysctl.c **** //
2787:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2788:C:/StellarisWare/driverlib\sysctl.c **** void
2789:C:/StellarisWare/driverlib\sysctl.c **** SysCtlMOSCVerificationSet(tBoolean bEnable)
2790:C:/StellarisWare/driverlib\sysctl.c **** {
 3269              		.loc 1 2790 0
 3270              		.cfi_startproc
 3271              		@ args = 0, pretend = 0, frame = 8
 3272              		@ frame_needed = 1, uses_anonymous_args = 0
 3273              		@ link register save eliminated.
 3274 0000 80B4     		push	{r7}
 3275              	.LCFI113:
 3276              		.cfi_def_cfa_offset 4
 3277              		.cfi_offset 7, -4
 3278 0002 83B0     		sub	sp, sp, #12
 3279              	.LCFI114:
 3280              		.cfi_def_cfa_offset 16
 3281 0004 00AF     		add	r7, sp, #0
 3282              	.LCFI115:
 3283              		.cfi_def_cfa_register 7
 3284 0006 0346     		mov	r3, r0
 3285 0008 FB71     		strb	r3, [r7, #7]
2791:C:/StellarisWare/driverlib\sysctl.c ****     //
2792:C:/StellarisWare/driverlib\sysctl.c ****     // Enable or disable the main oscillator verification timer as requested.
2793:C:/StellarisWare/driverlib\sysctl.c ****     //
2794:C:/StellarisWare/driverlib\sysctl.c ****     if(bEnable)
 3286              		.loc 1 2794 0
 3287 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3288 000c 002B     		cmp	r3, #0
 3289 000e 0CD0     		beq	.L145
2795:C:/StellarisWare/driverlib\sysctl.c ****     {
2796:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) |= SYSCTL_RCC_MOSCVER;
 3290              		.loc 1 2796 0
 3291 0010 4EF26003 		movw	r3, #57440
 3292 0014 C4F20F03 		movt	r3, 16399
 3293 0018 4EF26002 		movw	r2, #57440
 3294 001c C4F20F02 		movt	r2, 16399
 3295 0020 1268     		ldr	r2, [r2, #0]
 3296 0022 42F00402 		orr	r2, r2, #4
 3297 0026 1A60     		str	r2, [r3, #0]
 3298 0028 0BE0     		b	.L144
 3299              	.L145:
2797:C:/StellarisWare/driverlib\sysctl.c ****     }
2798:C:/StellarisWare/driverlib\sysctl.c ****     else
2799:C:/StellarisWare/driverlib\sysctl.c ****     {
2800:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) &= ~(SYSCTL_RCC_MOSCVER);
 3300              		.loc 1 2800 0
 3301 002a 4EF26003 		movw	r3, #57440
 3302 002e C4F20F03 		movt	r3, 16399
 3303 0032 4EF26002 		movw	r2, #57440
 3304 0036 C4F20F02 		movt	r2, 16399
 3305 003a 1268     		ldr	r2, [r2, #0]
 3306 003c 22F00402 		bic	r2, r2, #4
 3307 0040 1A60     		str	r2, [r3, #0]
 3308              	.L144:
2801:C:/StellarisWare/driverlib\sysctl.c ****     }
2802:C:/StellarisWare/driverlib\sysctl.c **** }
 3309              		.loc 1 2802 0
 3310 0042 07F10C07 		add	r7, r7, #12
 3311 0046 BD46     		mov	sp, r7
 3312 0048 80BC     		pop	{r7}
 3313 004a 7047     		bx	lr
 3314              		.cfi_endproc
 3315              	.LFE42:
 3317              		.section	.text.SysCtlPLLVerificationSet,"ax",%progbits
 3318              		.align	2
 3319              		.global	SysCtlPLLVerificationSet
 3320              		.thumb
 3321              		.thumb_func
 3323              	SysCtlPLLVerificationSet:
 3324              	.LFB43:
2803:C:/StellarisWare/driverlib\sysctl.c **** 
2804:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2805:C:/StellarisWare/driverlib\sysctl.c **** //
2806:C:/StellarisWare/driverlib\sysctl.c **** //! Configures the PLL verification timer.
2807:C:/StellarisWare/driverlib\sysctl.c **** //!
2808:C:/StellarisWare/driverlib\sysctl.c **** //! \param bEnable is a boolean that is \b true if the PLL verification timer
2809:C:/StellarisWare/driverlib\sysctl.c **** //! should be enabled.
2810:C:/StellarisWare/driverlib\sysctl.c **** //!
2811:C:/StellarisWare/driverlib\sysctl.c **** //! This function allows the PLL verification timer to be enabled or disabled.
2812:C:/StellarisWare/driverlib\sysctl.c **** //! When enabled, an interrupt is generated if the PLL ceases to operate.
2813:C:/StellarisWare/driverlib\sysctl.c **** //!
2814:C:/StellarisWare/driverlib\sysctl.c **** //! The PLL verification timer is only available on Sandstorm-class devices.
2815:C:/StellarisWare/driverlib\sysctl.c **** //!
2816:C:/StellarisWare/driverlib\sysctl.c **** //! \note The main oscillator must be enabled for this verification timer to
2817:C:/StellarisWare/driverlib\sysctl.c **** //! operate as it is used to check the PLL.  Also, the verification timer
2818:C:/StellarisWare/driverlib\sysctl.c **** //! should be disabled while the PLL is being reconfigured via
2819:C:/StellarisWare/driverlib\sysctl.c **** //! SysCtlClockSet().
2820:C:/StellarisWare/driverlib\sysctl.c **** //!
2821:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2822:C:/StellarisWare/driverlib\sysctl.c **** //
2823:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2824:C:/StellarisWare/driverlib\sysctl.c **** void
2825:C:/StellarisWare/driverlib\sysctl.c **** SysCtlPLLVerificationSet(tBoolean bEnable)
2826:C:/StellarisWare/driverlib\sysctl.c **** {
 3325              		.loc 1 2826 0
 3326              		.cfi_startproc
 3327              		@ args = 0, pretend = 0, frame = 8
 3328              		@ frame_needed = 1, uses_anonymous_args = 0
 3329              		@ link register save eliminated.
 3330 0000 80B4     		push	{r7}
 3331              	.LCFI116:
 3332              		.cfi_def_cfa_offset 4
 3333              		.cfi_offset 7, -4
 3334 0002 83B0     		sub	sp, sp, #12
 3335              	.LCFI117:
 3336              		.cfi_def_cfa_offset 16
 3337 0004 00AF     		add	r7, sp, #0
 3338              	.LCFI118:
 3339              		.cfi_def_cfa_register 7
 3340 0006 0346     		mov	r3, r0
 3341 0008 FB71     		strb	r3, [r7, #7]
2827:C:/StellarisWare/driverlib\sysctl.c ****     //
2828:C:/StellarisWare/driverlib\sysctl.c ****     // Enable or disable the PLL verification timer as requested.
2829:C:/StellarisWare/driverlib\sysctl.c ****     //
2830:C:/StellarisWare/driverlib\sysctl.c ****     if(bEnable)
 3342              		.loc 1 2830 0
 3343 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3344 000c 002B     		cmp	r3, #0
 3345 000e 0CD0     		beq	.L148
2831:C:/StellarisWare/driverlib\sysctl.c ****     {
2832:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) |= SYSCTL_RCC_PLLVER;
 3346              		.loc 1 2832 0
 3347 0010 4EF26003 		movw	r3, #57440
 3348 0014 C4F20F03 		movt	r3, 16399
 3349 0018 4EF26002 		movw	r2, #57440
 3350 001c C4F20F02 		movt	r2, 16399
 3351 0020 1268     		ldr	r2, [r2, #0]
 3352 0022 42F48062 		orr	r2, r2, #1024
 3353 0026 1A60     		str	r2, [r3, #0]
 3354 0028 0BE0     		b	.L147
 3355              	.L148:
2833:C:/StellarisWare/driverlib\sysctl.c ****     }
2834:C:/StellarisWare/driverlib\sysctl.c ****     else
2835:C:/StellarisWare/driverlib\sysctl.c ****     {
2836:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_RCC) &= ~(SYSCTL_RCC_PLLVER);
 3356              		.loc 1 2836 0
 3357 002a 4EF26003 		movw	r3, #57440
 3358 002e C4F20F03 		movt	r3, 16399
 3359 0032 4EF26002 		movw	r2, #57440
 3360 0036 C4F20F02 		movt	r2, 16399
 3361 003a 1268     		ldr	r2, [r2, #0]
 3362 003c 22F48062 		bic	r2, r2, #1024
 3363 0040 1A60     		str	r2, [r3, #0]
 3364              	.L147:
2837:C:/StellarisWare/driverlib\sysctl.c ****     }
2838:C:/StellarisWare/driverlib\sysctl.c **** }
 3365              		.loc 1 2838 0
 3366 0042 07F10C07 		add	r7, r7, #12
 3367 0046 BD46     		mov	sp, r7
 3368 0048 80BC     		pop	{r7}
 3369 004a 7047     		bx	lr
 3370              		.cfi_endproc
 3371              	.LFE43:
 3373              		.section	.text.SysCtlClkVerificationClear,"ax",%progbits
 3374              		.align	2
 3375              		.global	SysCtlClkVerificationClear
 3376              		.thumb
 3377              		.thumb_func
 3379              	SysCtlClkVerificationClear:
 3380              	.LFB44:
2839:C:/StellarisWare/driverlib\sysctl.c **** 
2840:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2841:C:/StellarisWare/driverlib\sysctl.c **** //
2842:C:/StellarisWare/driverlib\sysctl.c **** //! Clears the clock verification status.
2843:C:/StellarisWare/driverlib\sysctl.c **** //!
2844:C:/StellarisWare/driverlib\sysctl.c **** //! This function clears the status of the clock verification timers, allowing
2845:C:/StellarisWare/driverlib\sysctl.c **** //! them to assert another failure if detected.
2846:C:/StellarisWare/driverlib\sysctl.c **** //!
2847:C:/StellarisWare/driverlib\sysctl.c **** //! The clock verification timers are only available on Sandstorm-class
2848:C:/StellarisWare/driverlib\sysctl.c **** //! devices.
2849:C:/StellarisWare/driverlib\sysctl.c **** //!
2850:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2851:C:/StellarisWare/driverlib\sysctl.c **** //
2852:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2853:C:/StellarisWare/driverlib\sysctl.c **** void
2854:C:/StellarisWare/driverlib\sysctl.c **** SysCtlClkVerificationClear(void)
2855:C:/StellarisWare/driverlib\sysctl.c **** {
 3381              		.loc 1 2855 0
 3382              		.cfi_startproc
 3383              		@ args = 0, pretend = 0, frame = 0
 3384              		@ frame_needed = 1, uses_anonymous_args = 0
 3385              		@ link register save eliminated.
 3386 0000 80B4     		push	{r7}
 3387              	.LCFI119:
 3388              		.cfi_def_cfa_offset 4
 3389              		.cfi_offset 7, -4
 3390 0002 00AF     		add	r7, sp, #0
 3391              	.LCFI120:
 3392              		.cfi_def_cfa_register 7
2856:C:/StellarisWare/driverlib\sysctl.c ****     //
2857:C:/StellarisWare/driverlib\sysctl.c ****     // Clear the clock verification.
2858:C:/StellarisWare/driverlib\sysctl.c ****     //
2859:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_CLKVCLR) = SYSCTL_CLKVCLR_VERCLR;
 3393              		.loc 1 2859 0
 3394 0004 4EF25013 		movw	r3, #57680
 3395 0008 C4F20F03 		movt	r3, 16399
 3396 000c 4FF00102 		mov	r2, #1
 3397 0010 1A60     		str	r2, [r3, #0]
2860:C:/StellarisWare/driverlib\sysctl.c **** 
2861:C:/StellarisWare/driverlib\sysctl.c ****     //
2862:C:/StellarisWare/driverlib\sysctl.c ****     // The bit does not self-reset, so clear it.
2863:C:/StellarisWare/driverlib\sysctl.c ****     //
2864:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_CLKVCLR) = 0;
 3398              		.loc 1 2864 0
 3399 0012 4EF25013 		movw	r3, #57680
 3400 0016 C4F20F03 		movt	r3, 16399
 3401 001a 4FF00002 		mov	r2, #0
 3402 001e 1A60     		str	r2, [r3, #0]
2865:C:/StellarisWare/driverlib\sysctl.c **** }
 3403              		.loc 1 2865 0
 3404 0020 BD46     		mov	sp, r7
 3405 0022 80BC     		pop	{r7}
 3406 0024 7047     		bx	lr
 3407              		.cfi_endproc
 3408              	.LFE44:
 3410 0026 00BF     		.section	.text.SysCtlGPIOAHBEnable,"ax",%progbits
 3411              		.align	2
 3412              		.global	SysCtlGPIOAHBEnable
 3413              		.thumb
 3414              		.thumb_func
 3416              	SysCtlGPIOAHBEnable:
 3417              	.LFB45:
2866:C:/StellarisWare/driverlib\sysctl.c **** 
2867:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2868:C:/StellarisWare/driverlib\sysctl.c **** //
2869:C:/StellarisWare/driverlib\sysctl.c **** //! Enables a GPIO peripheral for access from the AHB.
2870:C:/StellarisWare/driverlib\sysctl.c **** //!
2871:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulGPIOPeripheral is the GPIO peripheral to enable.
2872:C:/StellarisWare/driverlib\sysctl.c **** //!
2873:C:/StellarisWare/driverlib\sysctl.c **** //! This function is used to enable the specified GPIO peripheral to be
2874:C:/StellarisWare/driverlib\sysctl.c **** //! accessed from the Advanced Host Bus (AHB) instead of the legacy Advanced
2875:C:/StellarisWare/driverlib\sysctl.c **** //! Peripheral Bus (APB).  When a GPIO peripheral is enabled for AHB access,
2876:C:/StellarisWare/driverlib\sysctl.c **** //! the \b _AHB_BASE form of the base address should be used for GPIO
2877:C:/StellarisWare/driverlib\sysctl.c **** //! functions.  For example, instead of using \b GPIO_PORTA_BASE as the base
2878:C:/StellarisWare/driverlib\sysctl.c **** //! address for GPIO functions, use \b GPIO_PORTA_AHB_BASE instead.
2879:C:/StellarisWare/driverlib\sysctl.c **** //!
2880:C:/StellarisWare/driverlib\sysctl.c **** //! The \e ulGPIOPeripheral argument must be only one of the following values:
2881:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
2882:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
2883:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, or \b SYSCTL_PERIPH_GPIOJ.
2884:C:/StellarisWare/driverlib\sysctl.c **** //!
2885:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2886:C:/StellarisWare/driverlib\sysctl.c **** //
2887:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2888:C:/StellarisWare/driverlib\sysctl.c **** void
2889:C:/StellarisWare/driverlib\sysctl.c **** SysCtlGPIOAHBEnable(unsigned long ulGPIOPeripheral)
2890:C:/StellarisWare/driverlib\sysctl.c **** {
 3418              		.loc 1 2890 0
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 8
 3421              		@ frame_needed = 1, uses_anonymous_args = 0
 3422              		@ link register save eliminated.
 3423 0000 80B4     		push	{r7}
 3424              	.LCFI121:
 3425              		.cfi_def_cfa_offset 4
 3426              		.cfi_offset 7, -4
 3427 0002 83B0     		sub	sp, sp, #12
 3428              	.LCFI122:
 3429              		.cfi_def_cfa_offset 16
 3430 0004 00AF     		add	r7, sp, #0
 3431              	.LCFI123:
 3432              		.cfi_def_cfa_register 7
 3433 0006 7860     		str	r0, [r7, #4]
2891:C:/StellarisWare/driverlib\sysctl.c ****     //
2892:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
2893:C:/StellarisWare/driverlib\sysctl.c ****     //
2894:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulGPIOPeripheral == SYSCTL_PERIPH_GPIOA) ||
2895:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOB) ||
2896:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOC) ||
2897:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOD) ||
2898:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOE) ||
2899:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOF) ||
2900:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOG) ||
2901:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOH) ||
2902:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOJ));
2903:C:/StellarisWare/driverlib\sysctl.c **** 
2904:C:/StellarisWare/driverlib\sysctl.c ****     //
2905:C:/StellarisWare/driverlib\sysctl.c ****     // Enable this GPIO for AHB access.
2906:C:/StellarisWare/driverlib\sysctl.c ****     //
2907:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_GPIOHBCTL) |= ulGPIOPeripheral & 0xFFFF;
 3434              		.loc 1 2907 0
 3435 0008 4EF26C03 		movw	r3, #57452
 3436 000c C4F20F03 		movt	r3, 16399
 3437 0010 4EF26C02 		movw	r2, #57452
 3438 0014 C4F20F02 		movt	r2, 16399
 3439 0018 1168     		ldr	r1, [r2, #0]
 3440 001a 7A68     		ldr	r2, [r7, #4]
 3441 001c 4FEA0242 		lsl	r2, r2, #16
 3442 0020 4FEA1242 		lsr	r2, r2, #16
 3443 0024 0A43     		orrs	r2, r2, r1
 3444 0026 1A60     		str	r2, [r3, #0]
2908:C:/StellarisWare/driverlib\sysctl.c **** }
 3445              		.loc 1 2908 0
 3446 0028 07F10C07 		add	r7, r7, #12
 3447 002c BD46     		mov	sp, r7
 3448 002e 80BC     		pop	{r7}
 3449 0030 7047     		bx	lr
 3450              		.cfi_endproc
 3451              	.LFE45:
 3453 0032 00BF     		.section	.text.SysCtlGPIOAHBDisable,"ax",%progbits
 3454              		.align	2
 3455              		.global	SysCtlGPIOAHBDisable
 3456              		.thumb
 3457              		.thumb_func
 3459              	SysCtlGPIOAHBDisable:
 3460              	.LFB46:
2909:C:/StellarisWare/driverlib\sysctl.c **** 
2910:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2911:C:/StellarisWare/driverlib\sysctl.c **** //
2912:C:/StellarisWare/driverlib\sysctl.c **** //! Disables a GPIO peripheral for access from the AHB.
2913:C:/StellarisWare/driverlib\sysctl.c **** //!
2914:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulGPIOPeripheral is the GPIO peripheral to disable.
2915:C:/StellarisWare/driverlib\sysctl.c **** //!
2916:C:/StellarisWare/driverlib\sysctl.c **** //! This function disables the specified GPIO peripheral for access from the
2917:C:/StellarisWare/driverlib\sysctl.c **** //! Advanced Host Bus (AHB).  Once disabled, the GPIO peripheral is accessed
2918:C:/StellarisWare/driverlib\sysctl.c **** //! from the legacy Advanced Peripheral Bus (APB).
2919:C:/StellarisWare/driverlib\sysctl.c **** //!
2920:C:/StellarisWare/driverlib\sysctl.c **** //! The \b ulGPIOPeripheral argument must be only one of the following values:
2921:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOA, \b SYSCTL_PERIPH_GPIOB, \b SYSCTL_PERIPH_GPIOC,
2922:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOD, \b SYSCTL_PERIPH_GPIOE, \b SYSCTL_PERIPH_GPIOF,
2923:C:/StellarisWare/driverlib\sysctl.c **** //! \b SYSCTL_PERIPH_GPIOG, \b SYSCTL_PERIPH_GPIOH, or \b SYSCTL_PERIPH_GPIOJ.
2924:C:/StellarisWare/driverlib\sysctl.c **** //!
2925:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2926:C:/StellarisWare/driverlib\sysctl.c **** //
2927:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2928:C:/StellarisWare/driverlib\sysctl.c **** void
2929:C:/StellarisWare/driverlib\sysctl.c **** SysCtlGPIOAHBDisable(unsigned long ulGPIOPeripheral)
2930:C:/StellarisWare/driverlib\sysctl.c **** {
 3461              		.loc 1 2930 0
 3462              		.cfi_startproc
 3463              		@ args = 0, pretend = 0, frame = 8
 3464              		@ frame_needed = 1, uses_anonymous_args = 0
 3465              		@ link register save eliminated.
 3466 0000 80B4     		push	{r7}
 3467              	.LCFI124:
 3468              		.cfi_def_cfa_offset 4
 3469              		.cfi_offset 7, -4
 3470 0002 83B0     		sub	sp, sp, #12
 3471              	.LCFI125:
 3472              		.cfi_def_cfa_offset 16
 3473 0004 00AF     		add	r7, sp, #0
 3474              	.LCFI126:
 3475              		.cfi_def_cfa_register 7
 3476 0006 7860     		str	r0, [r7, #4]
2931:C:/StellarisWare/driverlib\sysctl.c ****     //
2932:C:/StellarisWare/driverlib\sysctl.c ****     // Check the arguments.
2933:C:/StellarisWare/driverlib\sysctl.c ****     //
2934:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT((ulGPIOPeripheral == SYSCTL_PERIPH_GPIOA) ||
2935:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOB) ||
2936:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOC) ||
2937:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOD) ||
2938:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOE) ||
2939:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOF) ||
2940:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOG) ||
2941:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOH) ||
2942:C:/StellarisWare/driverlib\sysctl.c ****            (ulGPIOPeripheral == SYSCTL_PERIPH_GPIOJ));
2943:C:/StellarisWare/driverlib\sysctl.c **** 
2944:C:/StellarisWare/driverlib\sysctl.c ****     //
2945:C:/StellarisWare/driverlib\sysctl.c ****     // Disable this GPIO for AHB access.
2946:C:/StellarisWare/driverlib\sysctl.c ****     //
2947:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_GPIOHBCTL) &= ~(ulGPIOPeripheral & 0xFFFF);
 3477              		.loc 1 2947 0
 3478 0008 4EF26C03 		movw	r3, #57452
 3479 000c C4F20F03 		movt	r3, 16399
 3480 0010 4EF26C02 		movw	r2, #57452
 3481 0014 C4F20F02 		movt	r2, 16399
 3482 0018 1168     		ldr	r1, [r2, #0]
 3483 001a 7A68     		ldr	r2, [r7, #4]
 3484 001c 4FEA0242 		lsl	r2, r2, #16
 3485 0020 4FEA1242 		lsr	r2, r2, #16
 3486 0024 6FEA0202 		mvn	r2, r2
 3487 0028 0A40     		ands	r2, r2, r1
 3488 002a 1A60     		str	r2, [r3, #0]
2948:C:/StellarisWare/driverlib\sysctl.c **** }
 3489              		.loc 1 2948 0
 3490 002c 07F10C07 		add	r7, r7, #12
 3491 0030 BD46     		mov	sp, r7
 3492 0032 80BC     		pop	{r7}
 3493 0034 7047     		bx	lr
 3494              		.cfi_endproc
 3495              	.LFE46:
 3497 0036 00BF     		.section	.text.SysCtlUSBPLLEnable,"ax",%progbits
 3498              		.align	2
 3499              		.global	SysCtlUSBPLLEnable
 3500              		.thumb
 3501              		.thumb_func
 3503              	SysCtlUSBPLLEnable:
 3504              	.LFB47:
2949:C:/StellarisWare/driverlib\sysctl.c **** 
2950:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2951:C:/StellarisWare/driverlib\sysctl.c **** //
2952:C:/StellarisWare/driverlib\sysctl.c **** //! Powers up the USB PLL.
2953:C:/StellarisWare/driverlib\sysctl.c **** //!
2954:C:/StellarisWare/driverlib\sysctl.c **** //! This function enables the USB controller's PLL, which is used by it's
2955:C:/StellarisWare/driverlib\sysctl.c **** //! physical layer.  This call is necessary before connecting to any external
2956:C:/StellarisWare/driverlib\sysctl.c **** //! devices.
2957:C:/StellarisWare/driverlib\sysctl.c **** //!
2958:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2959:C:/StellarisWare/driverlib\sysctl.c **** //
2960:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2961:C:/StellarisWare/driverlib\sysctl.c **** void
2962:C:/StellarisWare/driverlib\sysctl.c **** SysCtlUSBPLLEnable(void)
2963:C:/StellarisWare/driverlib\sysctl.c **** {
 3505              		.loc 1 2963 0
 3506              		.cfi_startproc
 3507              		@ args = 0, pretend = 0, frame = 0
 3508              		@ frame_needed = 1, uses_anonymous_args = 0
 3509              		@ link register save eliminated.
 3510 0000 80B4     		push	{r7}
 3511              	.LCFI127:
 3512              		.cfi_def_cfa_offset 4
 3513              		.cfi_offset 7, -4
 3514 0002 00AF     		add	r7, sp, #0
 3515              	.LCFI128:
 3516              		.cfi_def_cfa_register 7
2964:C:/StellarisWare/driverlib\sysctl.c ****     //
2965:C:/StellarisWare/driverlib\sysctl.c ****     // Turn on the USB PLL.
2966:C:/StellarisWare/driverlib\sysctl.c ****     //
2967:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC2) &= ~SYSCTL_RCC2_USBPWRDN;
 3517              		.loc 1 2967 0
 3518 0004 4EF27003 		movw	r3, #57456
 3519 0008 C4F20F03 		movt	r3, 16399
 3520 000c 4EF27002 		movw	r2, #57456
 3521 0010 C4F20F02 		movt	r2, 16399
 3522 0014 1268     		ldr	r2, [r2, #0]
 3523 0016 22F48042 		bic	r2, r2, #16384
 3524 001a 1A60     		str	r2, [r3, #0]
2968:C:/StellarisWare/driverlib\sysctl.c **** }
 3525              		.loc 1 2968 0
 3526 001c BD46     		mov	sp, r7
 3527 001e 80BC     		pop	{r7}
 3528 0020 7047     		bx	lr
 3529              		.cfi_endproc
 3530              	.LFE47:
 3532 0022 00BF     		.section	.text.SysCtlUSBPLLDisable,"ax",%progbits
 3533              		.align	2
 3534              		.global	SysCtlUSBPLLDisable
 3535              		.thumb
 3536              		.thumb_func
 3538              	SysCtlUSBPLLDisable:
 3539              	.LFB48:
2969:C:/StellarisWare/driverlib\sysctl.c **** 
2970:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2971:C:/StellarisWare/driverlib\sysctl.c **** //
2972:C:/StellarisWare/driverlib\sysctl.c **** //! Powers down the USB PLL.
2973:C:/StellarisWare/driverlib\sysctl.c **** //!
2974:C:/StellarisWare/driverlib\sysctl.c **** //! This function disables the USB controller's PLL, which is used by it's
2975:C:/StellarisWare/driverlib\sysctl.c **** //! physical layer.  The USB registers are still accessible, but the physical
2976:C:/StellarisWare/driverlib\sysctl.c **** //! layer no longer functions.
2977:C:/StellarisWare/driverlib\sysctl.c **** //!
2978:C:/StellarisWare/driverlib\sysctl.c **** //! \return None.
2979:C:/StellarisWare/driverlib\sysctl.c **** //
2980:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2981:C:/StellarisWare/driverlib\sysctl.c **** void
2982:C:/StellarisWare/driverlib\sysctl.c **** SysCtlUSBPLLDisable(void)
2983:C:/StellarisWare/driverlib\sysctl.c **** {
 3540              		.loc 1 2983 0
 3541              		.cfi_startproc
 3542              		@ args = 0, pretend = 0, frame = 0
 3543              		@ frame_needed = 1, uses_anonymous_args = 0
 3544              		@ link register save eliminated.
 3545 0000 80B4     		push	{r7}
 3546              	.LCFI129:
 3547              		.cfi_def_cfa_offset 4
 3548              		.cfi_offset 7, -4
 3549 0002 00AF     		add	r7, sp, #0
 3550              	.LCFI130:
 3551              		.cfi_def_cfa_register 7
2984:C:/StellarisWare/driverlib\sysctl.c ****     //
2985:C:/StellarisWare/driverlib\sysctl.c ****     // Turn off the USB PLL.
2986:C:/StellarisWare/driverlib\sysctl.c ****     //
2987:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_RCC2) |= SYSCTL_RCC2_USBPWRDN;
 3552              		.loc 1 2987 0
 3553 0004 4EF27003 		movw	r3, #57456
 3554 0008 C4F20F03 		movt	r3, 16399
 3555 000c 4EF27002 		movw	r2, #57456
 3556 0010 C4F20F02 		movt	r2, 16399
 3557 0014 1268     		ldr	r2, [r2, #0]
 3558 0016 42F48042 		orr	r2, r2, #16384
 3559 001a 1A60     		str	r2, [r3, #0]
2988:C:/StellarisWare/driverlib\sysctl.c **** }
 3560              		.loc 1 2988 0
 3561 001c BD46     		mov	sp, r7
 3562 001e 80BC     		pop	{r7}
 3563 0020 7047     		bx	lr
 3564              		.cfi_endproc
 3565              	.LFE48:
 3567 0022 00BF     		.section	.text.SysCtlI2SMClkSet,"ax",%progbits
 3568              		.align	2
 3569              		.global	SysCtlI2SMClkSet
 3570              		.thumb
 3571              		.thumb_func
 3573              	SysCtlI2SMClkSet:
 3574              	.LFB49:
2989:C:/StellarisWare/driverlib\sysctl.c **** 
2990:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
2991:C:/StellarisWare/driverlib\sysctl.c **** //
2992:C:/StellarisWare/driverlib\sysctl.c **** //! Sets the MCLK frequency provided to the I2S module.
2993:C:/StellarisWare/driverlib\sysctl.c **** //!
2994:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulInputClock is the input clock to the MCLK divider.  If this value
2995:C:/StellarisWare/driverlib\sysctl.c **** //! is zero, the value is computed from the current PLL configuration.
2996:C:/StellarisWare/driverlib\sysctl.c **** //! \param ulMClk is the desired MCLK frequency.  If this value is zero, MCLK
2997:C:/StellarisWare/driverlib\sysctl.c **** //! output is disabled.
2998:C:/StellarisWare/driverlib\sysctl.c **** //!
2999:C:/StellarisWare/driverlib\sysctl.c **** //! This function configures the dividers to provide MCLK to the I2S module.  A
3000:C:/StellarisWare/driverlib\sysctl.c **** //! MCLK divider is chosen that produces the MCLK frequency that is the closest
3001:C:/StellarisWare/driverlib\sysctl.c **** //! possible to the requested frequency, which may be above or below the
3002:C:/StellarisWare/driverlib\sysctl.c **** //! requested frequency.
3003:C:/StellarisWare/driverlib\sysctl.c **** //!
3004:C:/StellarisWare/driverlib\sysctl.c **** //! The actual MCLK frequency is returned.  It is the responsibility of the
3005:C:/StellarisWare/driverlib\sysctl.c **** //! application to determine if the selected MCLK is acceptable; in general the
3006:C:/StellarisWare/driverlib\sysctl.c **** //! human ear can not discern the frequency difference if it is within 0.3% of
3007:C:/StellarisWare/driverlib\sysctl.c **** //! the desired frequency (although there is a very small percentage of the
3008:C:/StellarisWare/driverlib\sysctl.c **** //! population that can discern lower frequency deviations).
3009:C:/StellarisWare/driverlib\sysctl.c **** //!
3010:C:/StellarisWare/driverlib\sysctl.c **** //! \return Returns the actual MCLK frequency.
3011:C:/StellarisWare/driverlib\sysctl.c **** //
3012:C:/StellarisWare/driverlib\sysctl.c **** //*****************************************************************************
3013:C:/StellarisWare/driverlib\sysctl.c **** unsigned long
3014:C:/StellarisWare/driverlib\sysctl.c **** SysCtlI2SMClkSet(unsigned long ulInputClock, unsigned long ulMClk)
3015:C:/StellarisWare/driverlib\sysctl.c **** {
 3575              		.loc 1 3015 0
 3576              		.cfi_startproc
 3577              		@ args = 0, pretend = 0, frame = 24
 3578              		@ frame_needed = 1, uses_anonymous_args = 0
 3579              		@ link register save eliminated.
 3580 0000 80B4     		push	{r7}
 3581              	.LCFI131:
 3582              		.cfi_def_cfa_offset 4
 3583              		.cfi_offset 7, -4
 3584 0002 87B0     		sub	sp, sp, #28
 3585              	.LCFI132:
 3586              		.cfi_def_cfa_offset 32
 3587 0004 00AF     		add	r7, sp, #0
 3588              	.LCFI133:
 3589              		.cfi_def_cfa_register 7
 3590 0006 7860     		str	r0, [r7, #4]
 3591 0008 3960     		str	r1, [r7, #0]
3016:C:/StellarisWare/driverlib\sysctl.c ****     unsigned long ulDivInt, ulDivFrac, ulPLL;
3017:C:/StellarisWare/driverlib\sysctl.c **** 
3018:C:/StellarisWare/driverlib\sysctl.c ****     //
3019:C:/StellarisWare/driverlib\sysctl.c ****     // See if the I2S MCLK should be disabled.
3020:C:/StellarisWare/driverlib\sysctl.c ****     //
3021:C:/StellarisWare/driverlib\sysctl.c ****     if(ulMClk == 0)
 3592              		.loc 1 3021 0
 3593 000a 3B68     		ldr	r3, [r7, #0]
 3594 000c 002B     		cmp	r3, #0
 3595 000e 09D1     		bne	.L156
3022:C:/StellarisWare/driverlib\sysctl.c ****     {
3023:C:/StellarisWare/driverlib\sysctl.c ****         //
3024:C:/StellarisWare/driverlib\sysctl.c ****         // Disable the I2S MCLK and return.
3025:C:/StellarisWare/driverlib\sysctl.c ****         //
3026:C:/StellarisWare/driverlib\sysctl.c ****         HWREG(SYSCTL_I2SMCLKCFG) = 0;
 3596              		.loc 1 3026 0
 3597 0010 4EF27013 		movw	r3, #57712
 3598 0014 C4F20F03 		movt	r3, 16399
 3599 0018 4FF00002 		mov	r2, #0
 3600 001c 1A60     		str	r2, [r3, #0]
3027:C:/StellarisWare/driverlib\sysctl.c ****         return(0);
 3601              		.loc 1 3027 0
 3602 001e 4FF00003 		mov	r3, #0
 3603 0022 C1E0     		b	.L157
 3604              	.L156:
3028:C:/StellarisWare/driverlib\sysctl.c ****     }
3029:C:/StellarisWare/driverlib\sysctl.c **** 
3030:C:/StellarisWare/driverlib\sysctl.c ****     //
3031:C:/StellarisWare/driverlib\sysctl.c ****     // See if the input clock was specified.
3032:C:/StellarisWare/driverlib\sysctl.c ****     //
3033:C:/StellarisWare/driverlib\sysctl.c ****     if(ulInputClock == 0)
 3605              		.loc 1 3033 0
 3606 0024 7B68     		ldr	r3, [r7, #4]
 3607 0026 002B     		cmp	r3, #0
 3608 0028 38D1     		bne	.L158
3034:C:/StellarisWare/driverlib\sysctl.c ****     {
3035:C:/StellarisWare/driverlib\sysctl.c ****         //
3036:C:/StellarisWare/driverlib\sysctl.c ****         // The input clock was not specified, so compute the output frequency
3037:C:/StellarisWare/driverlib\sysctl.c ****         // of the PLL.  Get the current PLL configuration.
3038:C:/StellarisWare/driverlib\sysctl.c ****         //
3039:C:/StellarisWare/driverlib\sysctl.c ****         ulPLL = HWREG(SYSCTL_PLLCFG);
 3609              		.loc 1 3039 0
 3610 002a 4EF26403 		movw	r3, #57444
 3611 002e C4F20F03 		movt	r3, 16399
 3612 0032 1B68     		ldr	r3, [r3, #0]
 3613 0034 FB60     		str	r3, [r7, #12]
3040:C:/StellarisWare/driverlib\sysctl.c **** 
3041:C:/StellarisWare/driverlib\sysctl.c ****         //
3042:C:/StellarisWare/driverlib\sysctl.c ****         // Get the frequency of the crystal in use.
3043:C:/StellarisWare/driverlib\sysctl.c ****         //
3044:C:/StellarisWare/driverlib\sysctl.c ****         ulInputClock = g_pulXtals[(HWREG(SYSCTL_RCC) & SYSCTL_RCC_XTAL_M) >>
 3614              		.loc 1 3044 0
 3615 0036 4EF26003 		movw	r3, #57440
 3616 003a C4F20F03 		movt	r3, 16399
 3617 003e 1B68     		ldr	r3, [r3, #0]
 3618 0040 03F4F863 		and	r3, r3, #1984
 3619 0044 4FEA9312 		lsr	r2, r3, #6
 3620 0048 40F20003 		movw	r3, #:lower16:g_pulXtals
 3621 004c C0F20003 		movt	r3, #:upper16:g_pulXtals
 3622 0050 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3623 0054 7B60     		str	r3, [r7, #4]
3045:C:/StellarisWare/driverlib\sysctl.c ****                                   SYSCTL_RCC_XTAL_S];
3046:C:/StellarisWare/driverlib\sysctl.c **** 
3047:C:/StellarisWare/driverlib\sysctl.c ****         //
3048:C:/StellarisWare/driverlib\sysctl.c ****         // Calculate the PLL output frequency.
3049:C:/StellarisWare/driverlib\sysctl.c ****         //
3050:C:/StellarisWare/driverlib\sysctl.c ****         ulInputClock = ((ulInputClock * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
 3624              		.loc 1 3050 0
 3625 0056 FA68     		ldr	r2, [r7, #12]
 3626 0058 43F6E073 		movw	r3, #16352
 3627 005c 1340     		ands	r3, r3, r2
 3628 005e 4FEA5313 		lsr	r3, r3, #5
 3629 0062 7A68     		ldr	r2, [r7, #4]
 3630 0064 02FB03F2 		mul	r2, r2, r3
3051:C:/StellarisWare/driverlib\sysctl.c ****                                          SYSCTL_PLLCFG_F_S)) /
3052:C:/StellarisWare/driverlib\sysctl.c ****                         ((((ulPLL & SYSCTL_PLLCFG_R_M) >>
 3631              		.loc 1 3052 0
 3632 0068 FB68     		ldr	r3, [r7, #12]
 3633 006a 03F01F03 		and	r3, r3, #31
3053:C:/StellarisWare/driverlib\sysctl.c ****                            SYSCTL_PLLCFG_R_S) + 1)));
 3634              		.loc 1 3053 0
 3635 006e 03F10103 		add	r3, r3, #1
3050:C:/StellarisWare/driverlib\sysctl.c ****         ulInputClock = ((ulInputClock * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
 3636              		.loc 1 3050 0
 3637 0072 B2FBF3F3 		udiv	r3, r2, r3
 3638 0076 7B60     		str	r3, [r7, #4]
3054:C:/StellarisWare/driverlib\sysctl.c **** 
3055:C:/StellarisWare/driverlib\sysctl.c ****         //
3056:C:/StellarisWare/driverlib\sysctl.c ****         // See if the optional output divide by 2 is being used.
3057:C:/StellarisWare/driverlib\sysctl.c ****         //
3058:C:/StellarisWare/driverlib\sysctl.c ****         if(ulPLL & SYSCTL_PLLCFG_OD_2)
 3639              		.loc 1 3058 0
 3640 0078 FB68     		ldr	r3, [r7, #12]
 3641 007a 03F48043 		and	r3, r3, #16384
 3642 007e 002B     		cmp	r3, #0
 3643 0080 03D0     		beq	.L159
3059:C:/StellarisWare/driverlib\sysctl.c ****         {
3060:C:/StellarisWare/driverlib\sysctl.c ****             ulInputClock /= 2;
 3644              		.loc 1 3060 0
 3645 0082 7B68     		ldr	r3, [r7, #4]
 3646 0084 4FEA5303 		lsr	r3, r3, #1
 3647 0088 7B60     		str	r3, [r7, #4]
 3648              	.L159:
3061:C:/StellarisWare/driverlib\sysctl.c ****         }
3062:C:/StellarisWare/driverlib\sysctl.c **** 
3063:C:/StellarisWare/driverlib\sysctl.c ****         //
3064:C:/StellarisWare/driverlib\sysctl.c ****         // See if the optional output divide by 4 is being used.
3065:C:/StellarisWare/driverlib\sysctl.c ****         //
3066:C:/StellarisWare/driverlib\sysctl.c ****         if(ulPLL & SYSCTL_PLLCFG_OD_4)
 3649              		.loc 1 3066 0
 3650 008a FB68     		ldr	r3, [r7, #12]
 3651 008c 03F40043 		and	r3, r3, #32768
 3652 0090 002B     		cmp	r3, #0
 3653 0092 03D0     		beq	.L158
3067:C:/StellarisWare/driverlib\sysctl.c ****         {
3068:C:/StellarisWare/driverlib\sysctl.c ****             ulInputClock /= 4;
 3654              		.loc 1 3068 0
 3655 0094 7B68     		ldr	r3, [r7, #4]
 3656 0096 4FEA9303 		lsr	r3, r3, #2
 3657 009a 7B60     		str	r3, [r7, #4]
 3658              	.L158:
3069:C:/StellarisWare/driverlib\sysctl.c ****         }
3070:C:/StellarisWare/driverlib\sysctl.c ****     }
3071:C:/StellarisWare/driverlib\sysctl.c **** 
3072:C:/StellarisWare/driverlib\sysctl.c ****     //
3073:C:/StellarisWare/driverlib\sysctl.c ****     // Verify that the requested MCLK frequency is attainable.
3074:C:/StellarisWare/driverlib\sysctl.c ****     //
3075:C:/StellarisWare/driverlib\sysctl.c ****     ASSERT(ulMClk < ulInputClock);
3076:C:/StellarisWare/driverlib\sysctl.c **** 
3077:C:/StellarisWare/driverlib\sysctl.c ****     //
3078:C:/StellarisWare/driverlib\sysctl.c ****     // Add a rounding factor to the input clock, so that the MCLK frequency
3079:C:/StellarisWare/driverlib\sysctl.c ****     // that is closest to the desire value is selected.
3080:C:/StellarisWare/driverlib\sysctl.c ****     //
3081:C:/StellarisWare/driverlib\sysctl.c ****     ulInputClock += (ulMClk / 32) - 1;
 3659              		.loc 1 3081 0
 3660 009c 3B68     		ldr	r3, [r7, #0]
 3661 009e 4FEA5312 		lsr	r2, r3, #5
 3662 00a2 7B68     		ldr	r3, [r7, #4]
 3663 00a4 D318     		adds	r3, r2, r3
 3664 00a6 03F1FF33 		add	r3, r3, #-1
 3665 00aa 7B60     		str	r3, [r7, #4]
3082:C:/StellarisWare/driverlib\sysctl.c **** 
3083:C:/StellarisWare/driverlib\sysctl.c ****     //
3084:C:/StellarisWare/driverlib\sysctl.c ****     // Compute the integer portion of the MCLK divider.
3085:C:/StellarisWare/driverlib\sysctl.c ****     //
3086:C:/StellarisWare/driverlib\sysctl.c ****     ulDivInt = ulInputClock / ulMClk;
 3666              		.loc 1 3086 0
 3667 00ac 7A68     		ldr	r2, [r7, #4]
 3668 00ae 3B68     		ldr	r3, [r7, #0]
 3669 00b0 B2FBF3F3 		udiv	r3, r2, r3
 3670 00b4 7B61     		str	r3, [r7, #20]
3087:C:/StellarisWare/driverlib\sysctl.c **** 
3088:C:/StellarisWare/driverlib\sysctl.c ****     //
3089:C:/StellarisWare/driverlib\sysctl.c ****     // If the divisor is too large, then simply use the maximum divisor.
3090:C:/StellarisWare/driverlib\sysctl.c ****     //
3091:C:/StellarisWare/driverlib\sysctl.c ****     if(CLASS_IS_TEMPEST && REVISION_IS_B1 && (ulDivInt > 255))
 3671              		.loc 1 3091 0
 3672 00b6 4FF46043 		mov	r3, #57344
 3673 00ba C4F20F03 		movt	r3, 16399
 3674 00be 1A68     		ldr	r2, [r3, #0]
 3675 00c0 4FF00003 		mov	r3, #0
 3676 00c4 C7F2FF03 		movt	r3, 28927
 3677 00c8 1340     		ands	r3, r3, r2
 3678 00ca 4FF00002 		mov	r2, #0
 3679 00ce C1F20402 		movt	r2, 4100
 3680 00d2 9342     		cmp	r3, r2
 3681 00d4 16D1     		bne	.L160
 3682              		.loc 1 3091 0 is_stmt 0 discriminator 1
 3683 00d6 4FF46043 		mov	r3, #57344
 3684 00da C4F20F03 		movt	r3, 16399
 3685 00de 1B68     		ldr	r3, [r3, #0]
 3686 00e0 4FEA0343 		lsl	r3, r3, #16
 3687 00e4 4FEA1343 		lsr	r3, r3, #16
 3688 00e8 40F20112 		movw	r2, #257
 3689 00ec 9342     		cmp	r3, r2
 3690 00ee 09D1     		bne	.L160
 3691 00f0 7B69     		ldr	r3, [r7, #20]
 3692 00f2 FF2B     		cmp	r3, #255
 3693 00f4 06D9     		bls	.L160
3092:C:/StellarisWare/driverlib\sysctl.c ****     {
3093:C:/StellarisWare/driverlib\sysctl.c ****         ulDivInt = 255;
 3694              		.loc 1 3093 0 is_stmt 1
 3695 00f6 4FF0FF03 		mov	r3, #255
 3696 00fa 7B61     		str	r3, [r7, #20]
3094:C:/StellarisWare/driverlib\sysctl.c ****         ulDivFrac = 15;
 3697              		.loc 1 3094 0
 3698 00fc 4FF00F03 		mov	r3, #15
 3699 0100 3B61     		str	r3, [r7, #16]
 3700 0102 17E0     		b	.L161
 3701              	.L160:
3095:C:/StellarisWare/driverlib\sysctl.c ****     }
3096:C:/StellarisWare/driverlib\sysctl.c ****     else if(ulDivInt > 1023)
 3702              		.loc 1 3096 0
 3703 0104 7A69     		ldr	r2, [r7, #20]
 3704 0106 40F2FF33 		movw	r3, #1023
 3705 010a 9A42     		cmp	r2, r3
 3706 010c 06D9     		bls	.L162
3097:C:/StellarisWare/driverlib\sysctl.c ****     {
3098:C:/StellarisWare/driverlib\sysctl.c ****         ulDivInt = 1023;
 3707              		.loc 1 3098 0
 3708 010e 40F2FF33 		movw	r3, #1023
 3709 0112 7B61     		str	r3, [r7, #20]
3099:C:/StellarisWare/driverlib\sysctl.c ****         ulDivFrac = 15;
 3710              		.loc 1 3099 0
 3711 0114 4FF00F03 		mov	r3, #15
 3712 0118 3B61     		str	r3, [r7, #16]
 3713 011a 0BE0     		b	.L161
 3714              	.L162:
3100:C:/StellarisWare/driverlib\sysctl.c ****     }
3101:C:/StellarisWare/driverlib\sysctl.c ****     else
3102:C:/StellarisWare/driverlib\sysctl.c ****     {
3103:C:/StellarisWare/driverlib\sysctl.c ****         //
3104:C:/StellarisWare/driverlib\sysctl.c ****         // Compute the fractional portion of the MCLK divider.
3105:C:/StellarisWare/driverlib\sysctl.c ****         //
3106:C:/StellarisWare/driverlib\sysctl.c ****         ulDivFrac = ((ulInputClock - (ulDivInt * ulMClk)) * 16) / ulMClk;
 3715              		.loc 1 3106 0
 3716 011c 7B69     		ldr	r3, [r7, #20]
 3717 011e 3A68     		ldr	r2, [r7, #0]
 3718 0120 02FB03F3 		mul	r3, r2, r3
 3719 0124 7A68     		ldr	r2, [r7, #4]
 3720 0126 D31A     		subs	r3, r2, r3
 3721 0128 4FEA0312 		lsl	r2, r3, #4
 3722 012c 3B68     		ldr	r3, [r7, #0]
 3723 012e B2FBF3F3 		udiv	r3, r2, r3
 3724 0132 3B61     		str	r3, [r7, #16]
 3725              	.L161:
3107:C:/StellarisWare/driverlib\sysctl.c ****     }
3108:C:/StellarisWare/driverlib\sysctl.c **** 
3109:C:/StellarisWare/driverlib\sysctl.c ****     //
3110:C:/StellarisWare/driverlib\sysctl.c ****     // Set the divisor for the TX and RX MCLK generators and enable the clocks.
3111:C:/StellarisWare/driverlib\sysctl.c ****     //
3112:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_I2SMCLKCFG) = (SYSCTL_I2SMCLKCFG_RXEN |
 3726              		.loc 1 3112 0
 3727 0134 4EF27013 		movw	r3, #57712
 3728 0138 C4F20F03 		movt	r3, 16399
3113:C:/StellarisWare/driverlib\sysctl.c ****                                 (ulDivInt << SYSCTL_I2SMCLKCFG_RXI_S) |
 3729              		.loc 1 3113 0
 3730 013c 7A69     		ldr	r2, [r7, #20]
 3731 013e 4FEA0251 		lsl	r1, r2, #20
3114:C:/StellarisWare/driverlib\sysctl.c ****                                 (ulDivFrac << SYSCTL_I2SMCLKCFG_RXF_S) |
 3732              		.loc 1 3114 0
 3733 0142 3A69     		ldr	r2, [r7, #16]
 3734 0144 4FEA0242 		lsl	r2, r2, #16
3113:C:/StellarisWare/driverlib\sysctl.c ****                                 (ulDivInt << SYSCTL_I2SMCLKCFG_RXI_S) |
 3735              		.loc 1 3113 0
 3736 0148 1143     		orrs	r1, r1, r2
3115:C:/StellarisWare/driverlib\sysctl.c ****                                 SYSCTL_I2SMCLKCFG_TXEN |
3116:C:/StellarisWare/driverlib\sysctl.c ****                                 (ulDivInt << SYSCTL_I2SMCLKCFG_TXI_S) |
 3737              		.loc 1 3116 0
 3738 014a 7A69     		ldr	r2, [r7, #20]
 3739 014c 4FEA0212 		lsl	r2, r2, #4
3115:C:/StellarisWare/driverlib\sysctl.c ****                                 SYSCTL_I2SMCLKCFG_TXEN |
 3740              		.loc 1 3115 0
 3741 0150 1143     		orrs	r1, r1, r2
 3742              		.loc 1 3116 0
 3743 0152 3A69     		ldr	r2, [r7, #16]
 3744 0154 0A43     		orrs	r2, r2, r1
 3745 0156 42F08022 		orr	r2, r2, #-2147450880
3112:C:/StellarisWare/driverlib\sysctl.c ****     HWREG(SYSCTL_I2SMCLKCFG) = (SYSCTL_I2SMCLKCFG_RXEN |
 3746              		.loc 1 3112 0
 3747 015a 1A60     		str	r2, [r3, #0]
3117:C:/StellarisWare/driverlib\sysctl.c ****                                 (ulDivFrac << SYSCTL_I2SMCLKCFG_TXF_S));
3118:C:/StellarisWare/driverlib\sysctl.c **** 
3119:C:/StellarisWare/driverlib\sysctl.c ****     //
3120:C:/StellarisWare/driverlib\sysctl.c ****     // Return the actual MCLK frequency.
3121:C:/StellarisWare/driverlib\sysctl.c ****     //
3122:C:/StellarisWare/driverlib\sysctl.c ****     ulInputClock -= (ulMClk / 32) - 1;
 3748              		.loc 1 3122 0
 3749 015c 3B68     		ldr	r3, [r7, #0]
 3750 015e 4FEA5313 		lsr	r3, r3, #5
 3751 0162 7A68     		ldr	r2, [r7, #4]
 3752 0164 D31A     		subs	r3, r2, r3
 3753 0166 03F10103 		add	r3, r3, #1
 3754 016a 7B60     		str	r3, [r7, #4]
3123:C:/StellarisWare/driverlib\sysctl.c ****     ulDivInt = (ulDivInt * 16) + ulDivFrac;
 3755              		.loc 1 3123 0
 3756 016c 7B69     		ldr	r3, [r7, #20]
 3757 016e 4FEA0312 		lsl	r2, r3, #4
 3758 0172 3B69     		ldr	r3, [r7, #16]
 3759 0174 D318     		adds	r3, r2, r3
 3760 0176 7B61     		str	r3, [r7, #20]
3124:C:/StellarisWare/driverlib\sysctl.c ****     ulMClk = (ulInputClock / ulDivInt) * 16;
 3761              		.loc 1 3124 0
 3762 0178 7A68     		ldr	r2, [r7, #4]
 3763 017a 7B69     		ldr	r3, [r7, #20]
 3764 017c B2FBF3F3 		udiv	r3, r2, r3
 3765 0180 4FEA0313 		lsl	r3, r3, #4
 3766 0184 3B60     		str	r3, [r7, #0]
3125:C:/StellarisWare/driverlib\sysctl.c ****     ulMClk += ((ulInputClock - ((ulMClk / 16) * ulDivInt)) * 16) / ulDivInt;
 3767              		.loc 1 3125 0
 3768 0186 3B68     		ldr	r3, [r7, #0]
 3769 0188 4FEA1313 		lsr	r3, r3, #4
 3770 018c 7A69     		ldr	r2, [r7, #20]
 3771 018e 02FB03F3 		mul	r3, r2, r3
 3772 0192 7A68     		ldr	r2, [r7, #4]
 3773 0194 D31A     		subs	r3, r2, r3
 3774 0196 4FEA0312 		lsl	r2, r3, #4
 3775 019a 7B69     		ldr	r3, [r7, #20]
 3776 019c B2FBF3F3 		udiv	r3, r2, r3
 3777 01a0 3A68     		ldr	r2, [r7, #0]
 3778 01a2 D318     		adds	r3, r2, r3
 3779 01a4 3B60     		str	r3, [r7, #0]
3126:C:/StellarisWare/driverlib\sysctl.c ****     return(ulMClk);
 3780              		.loc 1 3126 0
 3781 01a6 3B68     		ldr	r3, [r7, #0]
 3782              	.L157:
3127:C:/StellarisWare/driverlib\sysctl.c **** }
 3783              		.loc 1 3127 0
 3784 01a8 1846     		mov	r0, r3
 3785 01aa 07F11C07 		add	r7, r7, #28
 3786 01ae BD46     		mov	sp, r7
 3787 01b0 80BC     		pop	{r7}
 3788 01b2 7047     		bx	lr
 3789              		.cfi_endproc
 3790              	.LFE49:
 3792              		.text
 3793              	.Letext0:
 3794              		.file 2 "C:\\StellarisWare/inc/hw_types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysctl.c
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:19     .rodata:00000000 $d
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:22     .rodata:00000000 g_pulDCRegs
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:30     .rodata:00000010 g_pulSRCRRegs
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:37     .rodata:0000001c g_pulRCGCRegs
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:44     .rodata:00000028 g_pulSCGCRegs
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:51     .rodata:00000034 g_pulDCGCRegs
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:58     .rodata:00000040 g_pulXtals
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:89     .rodata:000000ac g_ppulPeripheralMap
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:163    .text.SysCtlPeripheralMapToNew:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:167    .text.SysCtlPeripheralMapToNew:00000000 SysCtlPeripheralMapToNew
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:230    .text.SysCtlSRAMSizeGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:235    .text.SysCtlSRAMSizeGet:00000000 SysCtlSRAMSizeGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:266    .text.SysCtlFlashSizeGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:271    .text.SysCtlFlashSizeGet:00000000 SysCtlFlashSizeGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:302    .text.SysCtlPinPresent:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:307    .text.SysCtlPinPresent:00000000 SysCtlPinPresent
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:350    .text.SysCtlPeripheralPresent:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:355    .text.SysCtlPeripheralPresent:00000000 SysCtlPeripheralPresent
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:462    .text.SysCtlPeripheralReady:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:467    .text.SysCtlPeripheralReady:00000000 SysCtlPeripheralReady
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:523    .text.SysCtlPeripheralPowerOn:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:528    .text.SysCtlPeripheralPowerOn:00000000 SysCtlPeripheralPowerOn
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:584    .text.SysCtlPeripheralPowerOff:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:589    .text.SysCtlPeripheralPowerOff:00000000 SysCtlPeripheralPowerOff
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:645    .text.SysCtlPeripheralReset:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:650    .text.SysCtlPeripheralReset:00000000 SysCtlPeripheralReset
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:814    .text.SysCtlPeripheralEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:819    .text.SysCtlPeripheralEnable:00000000 SysCtlPeripheralEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:904    .text.SysCtlPeripheralDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:909    .text.SysCtlPeripheralDisable:00000000 SysCtlPeripheralDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:995    .text.SysCtlPeripheralSleepEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1000   .text.SysCtlPeripheralSleepEnable:00000000 SysCtlPeripheralSleepEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1085   .text.SysCtlPeripheralSleepDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1090   .text.SysCtlPeripheralSleepDisable:00000000 SysCtlPeripheralSleepDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1176   .text.SysCtlPeripheralDeepSleepEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1181   .text.SysCtlPeripheralDeepSleepEnable:00000000 SysCtlPeripheralDeepSleepEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1266   .text.SysCtlPeripheralDeepSleepDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1271   .text.SysCtlPeripheralDeepSleepDisable:00000000 SysCtlPeripheralDeepSleepDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1357   .text.SysCtlPeripheralClockGating:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1362   .text.SysCtlPeripheralClockGating:00000000 SysCtlPeripheralClockGating
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1413   .text.SysCtlIntRegister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1418   .text.SysCtlIntRegister:00000000 SysCtlIntRegister
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1451   .text.SysCtlIntUnregister:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1456   .text.SysCtlIntUnregister:00000000 SysCtlIntUnregister
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1482   .text.SysCtlIntEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1487   .text.SysCtlIntEnable:00000000 SysCtlIntEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1523   .text.SysCtlIntDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1528   .text.SysCtlIntDisable:00000000 SysCtlIntDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1565   .text.SysCtlIntClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1570   .text.SysCtlIntClear:00000000 SysCtlIntClear
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1602   .text.SysCtlIntStatus:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1607   .text.SysCtlIntStatus:00000000 SysCtlIntStatus
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1651   .text.SysCtlLDOSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1656   .text.SysCtlLDOSet:00000000 SysCtlLDOSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1688   .text.SysCtlLDOGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1693   .text.SysCtlLDOGet:00000000 SysCtlLDOGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1720   .text.SysCtlLDOConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1725   .text.SysCtlLDOConfigSet:00000000 SysCtlLDOConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1757   .text.SysCtlReset:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1762   .text.SysCtlReset:00000000 SysCtlReset
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1789   .text.SysCtlSleep:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1794   .text.SysCtlSleep:00000000 SysCtlSleep
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1816   .text.SysCtlDeepSleep:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1821   .text.SysCtlDeepSleep:00000000 SysCtlDeepSleep
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1859   .text.SysCtlResetCauseGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1864   .text.SysCtlResetCauseGet:00000000 SysCtlResetCauseGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1891   .text.SysCtlResetCauseClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1896   .text.SysCtlResetCauseClear:00000000 SysCtlResetCauseClear
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1933   .text.SysCtlBrownOutConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1938   .text.SysCtlBrownOutConfigSet:00000000 SysCtlBrownOutConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1974   .text.SysCtlDelay:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1979   .text.SysCtlDelay:00000000 SysCtlDelay
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:1998   .text.SysCtlMOSCConfigSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2003   .text.SysCtlMOSCConfigSet:00000000 SysCtlMOSCConfigSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2035   .text.SysCtlPIOSCCalibrate:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2040   .text.SysCtlPIOSCCalibrate:00000000 SysCtlPIOSCCalibrate
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2126   .text.SysCtlClockSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2131   .text.SysCtlClockSet:00000000 SysCtlClockSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2489   .text.SysCtlClockGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2494   .text.SysCtlClockGet:00000000 SysCtlClockGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:2995   .text.SysCtlDeepSleepClockSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3000   .text.SysCtlDeepSleepClockSet:00000000 SysCtlDeepSleepClockSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3032   .text.SysCtlPWMClockSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3037   .text.SysCtlPWMClockSet:00000000 SysCtlPWMClockSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3076   .text.SysCtlPWMClockGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3081   .text.SysCtlPWMClockGet:00000000 SysCtlPWMClockGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3121   .text.SysCtlADCSpeedSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3126   .text.SysCtlADCSpeedSet:00000000 SysCtlADCSpeedSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3173   .text.SysCtlADCSpeedGet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3178   .text.SysCtlADCSpeedGet:00000000 SysCtlADCSpeedGet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3206   .text.SysCtlIOSCVerificationSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3211   .text.SysCtlIOSCVerificationSet:00000000 SysCtlIOSCVerificationSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3262   .text.SysCtlMOSCVerificationSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3267   .text.SysCtlMOSCVerificationSet:00000000 SysCtlMOSCVerificationSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3318   .text.SysCtlPLLVerificationSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3323   .text.SysCtlPLLVerificationSet:00000000 SysCtlPLLVerificationSet
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3374   .text.SysCtlClkVerificationClear:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3379   .text.SysCtlClkVerificationClear:00000000 SysCtlClkVerificationClear
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3411   .text.SysCtlGPIOAHBEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3416   .text.SysCtlGPIOAHBEnable:00000000 SysCtlGPIOAHBEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3454   .text.SysCtlGPIOAHBDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3459   .text.SysCtlGPIOAHBDisable:00000000 SysCtlGPIOAHBDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3498   .text.SysCtlUSBPLLEnable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3503   .text.SysCtlUSBPLLEnable:00000000 SysCtlUSBPLLEnable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3533   .text.SysCtlUSBPLLDisable:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3538   .text.SysCtlUSBPLLDisable:00000000 SysCtlUSBPLLDisable
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3568   .text.SysCtlI2SMClkSet:00000000 $t
C:\Users\Sarthak\AppData\Local\Temp\ccRmrzrq.s:3573   .text.SysCtlI2SMClkSet:00000000 SysCtlI2SMClkSet
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
CPUwfi
